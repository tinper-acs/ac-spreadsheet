/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _beeLayout = __webpack_require__(3);
	
	var _beePanel = __webpack_require__(9);
	
	var _beeDrawer = __webpack_require__(83);
	
	var _beeDrawer2 = _interopRequireDefault(_beeDrawer);
	
	var _beeClipboard = __webpack_require__(97);
	
	var _beeClipboard2 = _interopRequireDefault(_beeClipboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Demo1 = __webpack_require__(264);var Demo2 = __webpack_require__(394);var Demo3 = __webpack_require__(395);var DemoArray = [{ "example": _react2['default'].createElement(Demo1, null), "title": " 基础电子表格", "code": "/**\n *\n * @title 基础电子表格\n * @description 基础电子表格\n *\n */\n\nimport React, { Component } from 'react';\nimport HotTable from \"ac-spreadsheet\";\nclass Demo1 extends Component {\n    constructor(props) {\n        super(props);\n        this.data = [\n          ['张其', '2019',11 ,'男',90 ],\n          ['王收', '2020', 11, '男', 100],\n          ['孙武', '2018', 11, '男', 93],\n          ['宋佳','2021', 13, '女', 92],\n          ['李琦','2021', 15, '女', 99]\n        ];\n      }\n    \n      render() {\n        return (<HotTable data={this.data}  width=\"600\" height=\"300\" />);\n      }\n}\n\n\n", "desc": " 基础电子表格" }, { "example": _react2['default'].createElement(Demo2, null), "title": " 含有左侧、上层header表头", "code": "/**\n *\n * @title 含有左侧、上层header表头\n * @description 含有左侧、上层header的表头基础电子表格并提供了一下功能\n * 1、排序\n * 2、拖拽列宽\n * 3、列交换\n *\n */\n\nimport React, { Component } from \"react\";\nimport HotTable from \"ac-spreadsheet\";\nconst data = [\n  { name: \"张其\", date: \"2019-01-11\", precent: 0.11, sex: \"男\", score: 90 },\n  { name: \"王收\", date: \"2020-03-21\", precent: 0.6, sex: \"男\", score: 100 },\n  { name: \"孙武\", date: \"2018-01-11\", precent: 0.9, sex: \"女\", score: 93 },\n  { name: \"宋佳\", date: \"2021-05-11\", precent: 0.21, sex: \"男\", score: 92 },\n  { name: \"李琦\", date: \"2021-02-11\", precent: 0.32, sex: \"女\", score: 99 }\n];\nclass Demo2 extends Component {\n  constructor(props) {\n    super(props);\n    this.hotSettings = {\n      colHeaders: [\"姓名\", \"日期\", \"百分比\", \"性别\", \"分数\"], //列头信息\n      columns: [\n        //每列信息\n        {\n          data: \"name\",\n          type: \"text\",\n          width: 40\n        },\n        {\n          data: \"date\",\n          type: \"date\",\n          dateFormat: \"YYYY-MM-DD\"\n        },\n        {\n          data: \"precent\",\n          type: \"numeric\",\n          numericFormat: {\n            pattern: \"0.00%\"\n          }\n        },\n        {\n          data: \"sex\",\n          type: \"text\"\n        },\n        {\n          data: \"score\",\n          type: \"numeric\",\n          numericFormat: {\n            pattern: \"0.0\"\n          }\n        }\n      ],\n      data: data, //当前表数据\n      manualColumnMove: true, //列交换\n      manualColumnResize: true, //拖拽列宽\n      columnSorting: {\n        //排序\n        indicator: true\n      },\n    };\n    this.hotTableComponent = React.createRef();\n  }\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return (\n      <HotTable\n        ref={this.hotTableComponent}\n        settings={this.hotSettings}\n        width=\"600\"\n        height=\"300\"\n      />\n    );\n  }\n}\n\n\n", "desc": " 含有左侧、上层header的表头基础电子表格并提供了一下功能" }, { "example": _react2['default'].createElement(Demo3, null), "title": " 自定义右击菜单、动态设置和获取表格数据", "code": "/**\n *\n * @title 自定义右击菜单、动态设置和获取表格数据\n * @description 自定义右击菜单、动态设置和获取表格数据\n *\n */\n\nimport React, { Component } from \"react\";\nimport HotTable from \"tinper-bee/lib/HotTable\";\nimport { Button } from 'tinper-bee';\nimport Handsontable from \"handsontable\";\nclass Demo3 extends Component {\n  constructor(props) {\n    super(props);\n    this.hotSettings = {\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      colHeaders: true,\n      copyPaste: true,\n      // Enables the plugin with custom values\n      copyPaste: {\n        columnsLimit: 25,\n        rowsLimit: 50,\n      },\n      contextMenu: {\n        items: {\n          row_above: {\n            name: \"向上插入一行\"\n          },\n          row_below: {\n            name: \"向下插入一行\"\n          },\n          separator: Handsontable.plugins.ContextMenu.SEPARATOR,\n          clear_custom: {\n            name: \"删除所有\",\n            callback: function() {\n              this.clear();\n            }\n          }\n        }\n      }\n    };\n    this.hotTableComponent = React.createRef();\n  }\n  shouldComponentUpdate() {\n    return false;\n  }\n  getData = (row, column, row2, column2) => {\n    let data = this.hotTableComponent.current.hotInstance.getData();\n    console.log(\"当前表的所有数据\", data);\n  };\n\n  loadData = () => {\n    this.hotTableComponent.current.hotInstance.loadData([[\"new\", \"data\"]]);\n  };\n  render() {\n    return (\n      <div>\n        <Button onClick={this.getData} className={\"m-sm\"}>\n          console所有数据\n        </Button>\n\n        <Button onClick={this.loadData} className={\"m-sm\"}>\n          更新数据\n        </Button>\n\n        <HotTable\n          ref={this.hotTableComponent}\n          id=\"hot\"\n          settings={this.hotSettings}\n        />\n      </div>\n    );\n  }\n}\n\n\n", "desc": " 自定义右击菜单、动态设置和获取表格数据" }];
	
	var Demo = function (_Component) {
	    _inherits(Demo, _Component);
	
	    function Demo(props) {
	        _classCallCheck(this, Demo);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this.handleClick = function () {
	            _this.setState({ open: !_this.state.open });
	        };
	
	        _this.fCloseDrawer = function () {
	            _this.setState({
	                open: false
	            });
	        };
	
	        _this.state = {
	            open: false
	        };
	        return _this;
	    }
	
	    Demo.prototype.render = function render() {
	        var _props = this.props,
	            title = _props.title,
	            example = _props.example,
	            code = _props.code,
	            desc = _props.desc,
	            scss_code = _props.scss_code;
	
	
	        var header = _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement(
	                'p',
	                { className: 'component-title' },
	                title
	            ),
	            _react2['default'].createElement(
	                'p',
	                null,
	                desc
	            ),
	            _react2['default'].createElement(
	                'span',
	                { className: 'component-code', onClick: this.handleClick },
	                ' \u67E5\u770B\u6E90\u7801 ',
	                _react2['default'].createElement('i', { className: 'uf uf-arrow-right' }),
	                ' '
	            )
	        );
	        return _react2['default'].createElement(
	            _beeLayout.Col,
	            { md: 12, id: title.trim(), className: 'component-demo' },
	            _react2['default'].createElement(
	                _beePanel.Panel,
	                { header: header },
	                example
	            ),
	            _react2['default'].createElement(
	                _beeDrawer2['default'],
	                { className: 'component-drawerc', title: title, show: this.state.open, placement: 'right', onClose: this.fCloseDrawer },
	                _react2['default'].createElement(
	                    'div',
	                    { className: 'component-code-copy' },
	                    ' JS\u4EE3\u7801',
	                    _react2['default'].createElement(_beeClipboard2['default'], { action: 'copy', text: code })
	                ),
	                _react2['default'].createElement(
	                    'pre',
	                    { className: 'pre-js' },
	                    _react2['default'].createElement(
	                        'code',
	                        { className: 'hljs javascript' },
	                        code
	                    )
	                ),
	                !!scss_code ? _react2['default'].createElement(
	                    'div',
	                    { className: 'component-code-copy copy-css' },
	                    ' SCSS\u4EE3\u7801',
	                    _react2['default'].createElement(_beeClipboard2['default'], { action: 'copy', text: scss_code })
	                ) : null,
	                !!scss_code ? _react2['default'].createElement(
	                    'pre',
	                    { className: 'pre-css' },
	                    _react2['default'].createElement(
	                        'code',
	                        { className: 'hljs css' },
	                        scss_code
	                    )
	                ) : null
	            )
	        );
	    };
	
	    return Demo;
	}(_react.Component);
	
	var DemoGroup = function (_Component2) {
	    _inherits(DemoGroup, _Component2);
	
	    function DemoGroup(props) {
	        _classCallCheck(this, DemoGroup);
	
	        return _possibleConstructorReturn(this, _Component2.call(this, props));
	    }
	
	    DemoGroup.prototype.render = function render() {
	        return _react2['default'].createElement(
	            _beeLayout.Row,
	            null,
	            DemoArray.map(function (child, index) {
	
	                return _react2['default'].createElement(Demo, { example: child.example, title: child.title, code: child.code, scss_code: child.scss_code, desc: child.desc, key: index });
	            })
	        );
	    };
	
	    return DemoGroup;
	}(_react.Component);
	
	_reactDom2['default'].render(_react2['default'].createElement(DemoGroup, null), document.getElementById('tinperBeeDemo'));

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = React;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = ReactDOM;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Con = exports.Row = exports.Col = undefined;
	
	var _Col2 = __webpack_require__(4);
	
	var _Col3 = _interopRequireDefault(_Col2);
	
	var _Row2 = __webpack_require__(7);
	
	var _Row3 = _interopRequireDefault(_Row2);
	
	var _Layout = __webpack_require__(8);
	
	var _Layout2 = _interopRequireDefault(_Layout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.Col = _Col3["default"];
	exports.Row = _Row3["default"];
	exports.Con = _Layout2["default"];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	
	  /**
	   * xs显示列数
	   */
	  xs: _propTypes2["default"].number,
	  /**
	   * sm显示列数
	   */
	  sm: _propTypes2["default"].number,
	  /**
	   * md显示列数
	   */
	  md: _propTypes2["default"].number,
	  /**
	   * lg显示列数
	   */
	  lg: _propTypes2["default"].number,
	  /**
	   * xs偏移列数
	   */
	  xsOffset: _propTypes2["default"].number,
	  /**
	   * sm偏移列数
	   */
	  smOffset: _propTypes2["default"].number,
	  /**
	   * md偏移列数
	   */
	  mdOffset: _propTypes2["default"].number,
	  /**
	   * lg偏移列数
	   */
	  lgOffset: _propTypes2["default"].number,
	  /**
	   * xs右偏移列数
	   */
	  xsPush: _propTypes2["default"].number,
	  /**
	   * sm右偏移列数
	   */
	  smPush: _propTypes2["default"].number,
	  /**
	   * md右偏移列数
	   */
	  mdPush: _propTypes2["default"].number,
	  /**
	   * lg右偏移列数
	   */
	  lgPush: _propTypes2["default"].number,
	  /**
	   * xs左偏移列数
	   */
	  xsPull: _propTypes2["default"].number,
	  /**
	   * sm左偏移列数
	   */
	  smPull: _propTypes2["default"].number,
	  /**
	   * md左偏移列数
	   */
	  mdPull: _propTypes2["default"].number,
	  /**
	   * lg左偏移列数
	   */
	  lgPull: _propTypes2["default"].number
	};
	
	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-col'
	};
	
	var DEVICE_SIZES = ['lg', 'md', 'sm', 'xs'];
	
	var Col = function (_Component) {
	  _inherits(Col, _Component);
	
	  function Col() {
	    _classCallCheck(this, Col);
	
	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }
	
	  Col.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['componentClass', 'className', 'clsPrefix']);
	
	    var tbClass = [];
	    /**
	     * 对传入props做样式转化
	     * @type {[type]}
	     */
	    DEVICE_SIZES.forEach(function (size) {
	      function popProp(propSuffix, modifier) {
	        var propName = '' + size + propSuffix;
	        var propValue = others[propName];
	
	        if (propValue != undefined && propValue != null) {
	          tbClass.push(clsPrefix + '-' + size + modifier + '-' + propValue);
	        }
	
	        delete others[propName];
	      }
	
	      popProp('', '');
	      popProp('Offset', '-offset');
	      popProp('Push', '-push');
	      popProp('Pull', '-pull');
	    });
	
	    return _react2["default"].createElement(
	      Component,
	      _extends({
	        className: (0, _classnames2["default"])(tbClass, className)
	      }, others),
	      this.props.children
	    );
	  };
	
	  return Col;
	}(_react.Component);
	
	Col.defaultProps = defaultProps;
	Col.propTypes = propTypes;
	
	exports["default"] = Col;
	module.exports = exports['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = PropTypes;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string])
	};
	
	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-row'
	};
	
	var Row = function (_Component) {
	  _inherits(Row, _Component);
	
	  function Row() {
	    _classCallCheck(this, Row);
	
	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }
	
	  Row.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        others = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);
	
	    var bsclass = '' + clsPrefix;
	
	    return _react2["default"].createElement(
	      Component,
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(bsclass, className)
	      }),
	      this.props.children
	    );
	  };
	
	  return Row;
	}(_react.Component);
	
	Row.propTypes = propTypes;
	Row.defaultProps = defaultProps;
	
	exports["default"] = Row;
	module.exports = exports['default'];

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  /**
	   * Adds `container-fluid` class.
	   */
	  fluid: _propTypes2["default"].bool,
	  /**
	   * You can use a custom element for this component
	   */
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string])
	};
	
	var defaultProps = {
	  componentClass: 'div',
	  fluid: false,
	  clsPrefix: 'u-container'
	};
	
	var Con = function (_React$Component) {
	  _inherits(Con, _React$Component);
	
	  function Con() {
	    _classCallCheck(this, Con);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Con.prototype.render = function render() {
	    var _tbclass;
	
	    var _props = this.props,
	        fluid = _props.fluid,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        others = _objectWithoutProperties(_props, ['fluid', 'componentClass', 'clsPrefix', 'className']);
	
	    var tbclass = (_tbclass = {}, _defineProperty(_tbclass, '' + clsPrefix, !fluid), _defineProperty(_tbclass, clsPrefix + '-fluid', fluid), _tbclass);
	
	    return _react2["default"].createElement(
	      Component,
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(tbclass, className)
	      }),
	      this.props.children
	    );
	  };
	
	  return Con;
	}(_react2["default"].Component);
	
	Con.propTypes = propTypes;
	Con.defaultProps = defaultProps;
	
	exports["default"] = Con;
	module.exports = exports['default'];

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PanelGroup = exports.Panel = undefined;
	
	var _Panel2 = __webpack_require__(10);
	
	var _Panel3 = _interopRequireDefault(_Panel2);
	
	var _PanelGroup2 = __webpack_require__(82);
	
	var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.Panel = _Panel3["default"];
	exports.PanelGroup = _PanelGroup3["default"];

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _beeTransition = __webpack_require__(11);
	
	var _beeMessage = __webpack_require__(64);
	
	var _beeMessage2 = _interopRequireDefault(_beeMessage);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _copyToClipboard = __webpack_require__(80);
	
	var _copyToClipboard2 = _interopRequireDefault(_copyToClipboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  //是否添加折叠
	  collapsible: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  //头部组件
	  header: _propTypes2["default"].node,
	  headerStyle: _propTypes2["default"].object,
	  id: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
	  headerContent: _propTypes2["default"].bool,
	  //footer组件
	  footer: _propTypes2["default"].node,
	  footerStyle: _propTypes2["default"].object,
	  //默认是否打开
	  defaultExpanded: _propTypes2["default"].bool,
	  //是否打开
	  expanded: _propTypes2["default"].bool,
	  //每个panel的标记
	  eventKey: _propTypes2["default"].any,
	  headerRole: _propTypes2["default"].string,
	  panelRole: _propTypes2["default"].string,
	  //颜色
	  colors: _propTypes2["default"].oneOf(['primary', 'accent', 'success', 'info', 'warning', 'danger', 'default', 'bordered']),
	
	  // From Collapse.的扩展动画
	  onEnter: _propTypes2["default"].func,
	  onEntering: _propTypes2["default"].func,
	  onEntered: _propTypes2["default"].func,
	  onExit: _propTypes2["default"].func,
	  onExiting: _propTypes2["default"].func,
	  onExited: _propTypes2["default"].func,
	  //是否可复制内容
	  copyable: _propTypes2["default"].bool
	};
	
	var defaultProps = {
	  defaultExpanded: false,
	  clsPrefix: "u-panel",
	  colors: "default"
	};
	
	var Panel = function (_React$Component) {
	  _inherits(Panel, _React$Component);
	
	  function Panel(props, context) {
	    _classCallCheck(this, Panel);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.handleClickTitle = _this.handleClickTitle.bind(_this);
	
	    _this.state = {
	      expanded: _this.props.defaultExpanded
	    };
	    return _this;
	  }
	
	  //头部点击事件
	
	
	  Panel.prototype.handleClickTitle = function handleClickTitle(e) {
	    // 不让事件进入事件池
	    e.persist();
	    e.selected = true;
	
	    if (this.props.onSelect) {
	      this.props.onSelect(this.props.eventKey, e);
	    } else {
	      e.preventDefault();
	    }
	
	    if (e.selected) {
	      this.setState({ expanded: !this.state.expanded });
	    }
	  };
	
	  //渲染panelheader
	
	
	  Panel.prototype.renderHeader = function renderHeader(collapsible, header, id, role, expanded, clsPrefix) {
	    var titleClassName = clsPrefix + '-title';
	
	    if (!collapsible) {
	      if (!_react2["default"].isValidElement(header)) {
	        return header;
	      }
	
	      return (0, _react.cloneElement)(header, {
	        className: (0, _classnames2["default"])(header.props.className, titleClassName)
	      });
	    }
	
	    if (!_react2["default"].isValidElement(header)) {
	      return _react2["default"].createElement(
	        'h4',
	        { role: 'presentation', className: titleClassName },
	        this.renderAnchor(header, id, role, expanded)
	      );
	    }
	    if (this.props.headerContent) {
	      return (0, _react.cloneElement)(header, {
	        className: (0, _classnames2["default"])(header.props.className, titleClassName)
	      });
	    }
	
	    return (0, _react.cloneElement)(header, {
	      className: (0, _classnames2["default"])(header.props.className, titleClassName),
	      children: this.renderAnchor(header.props.children, id, role, expanded)
	    });
	  };
	
	  //如果使用链接，渲染为a标签
	
	
	  Panel.prototype.renderAnchor = function renderAnchor(header, id, role, expanded) {
	    return _react2["default"].createElement(
	      'a',
	      {
	        role: role,
	        href: id && '#' + id,
	        'aria-controls': id,
	        'aria-expanded': expanded,
	        'aria-selected': expanded,
	        className: expanded ? null : 'collapsed'
	      },
	      header
	    );
	  };
	
	  //复制代码，弹出提示信息
	
	
	  Panel.prototype.copyDemo = function copyDemo(e) {
	    var panelTarget = e.target.parentNode;
	    var clipBoardContent = panelTarget.firstChild.innerText;
	    (0, _copyToClipboard2["default"])(clipBoardContent);
	    _beeMessage2["default"].create({ content: '复制成功！', color: 'success', duration: 2 });
	  };
	
	  //如果有折叠动画，渲染折叠动画
	
	
	  Panel.prototype.renderCollapsibleBody = function renderCollapsibleBody(id, expanded, role, children, clsPrefix, copyable, animationHooks) {
	    return _react2["default"].createElement(
	      _beeTransition.Collapse,
	      _extends({ 'in': expanded }, animationHooks),
	      _react2["default"].createElement(
	        'div',
	        {
	          id: id,
	          role: role,
	          className: clsPrefix + '-collapse',
	          'aria-hidden': !expanded
	        },
	        this.renderBody(children, clsPrefix, copyable)
	      )
	    );
	  };
	
	  //渲染panelbody
	
	
	  Panel.prototype.renderBody = function renderBody(rawChildren, clsPrefix, copyable) {
	    var self = this;
	    var children = [];
	    var bodyChildren = [];
	
	    var bodyClassName = clsPrefix + '-body';
	    //添加到body的children中
	    function maybeAddBody(self) {
	      if (!bodyChildren.length) {
	        return;
	      }
	      // 给子组件添加key，为了之后触发事件时使用
	      children.push(_react2["default"].createElement(
	        'div',
	        { key: children.length, className: bodyClassName },
	        bodyChildren,
	        copyable && _react2["default"].createElement('i', { className: clsPrefix + '-copy uf uf-files-o', onClick: self.copyDemo })
	      ));
	      bodyChildren = [];
	    }
	
	    //转换为数组，方便复用
	    _react2["default"].Children.toArray(rawChildren).forEach(function (child) {
	      if (_react2["default"].isValidElement(child) && child.props.fill) {
	        maybeAddBody(self);
	
	        //将标示fill设置为undefined
	        children.push((0, _react.cloneElement)(child, { fill: undefined }));
	
	        return;
	      }
	      bodyChildren.push(child);
	    });
	
	    maybeAddBody(self);
	
	    return children;
	  };
	
	  Panel.prototype.render = function render() {
	    var _props = this.props,
	        collapsible = _props.collapsible,
	        header = _props.header,
	        id = _props.id,
	        footer = _props.footer,
	        propsExpanded = _props.expanded,
	        footerStyle = _props.footerStyle,
	        headerStyle = _props.headerStyle,
	        headerRole = _props.headerRole,
	        panelRole = _props.panelRole,
	        className = _props.className,
	        colors = _props.colors,
	        children = _props.children,
	        onEnter = _props.onEnter,
	        onEntering = _props.onEntering,
	        onEntered = _props.onEntered,
	        clsPrefix = _props.clsPrefix,
	        onExit = _props.onExit,
	        headerContent = _props.headerContent,
	        onExiting = _props.onExiting,
	        onExited = _props.onExited,
	        defaultExpanded = _props.defaultExpanded,
	        eventKey = _props.eventKey,
	        onSelect = _props.onSelect,
	        copyable = _props.copyable,
	        props = _objectWithoutProperties(_props, ['collapsible', 'header', 'id', 'footer', 'expanded', 'footerStyle', 'headerStyle', 'headerRole', 'panelRole', 'className', 'colors', 'children', 'onEnter', 'onEntering', 'onEntered', 'clsPrefix', 'onExit', 'headerContent', 'onExiting', 'onExited', 'defaultExpanded', 'eventKey', 'onSelect', 'copyable']);
	
	    var expanded = propsExpanded != null ? propsExpanded : this.state.expanded;
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes[clsPrefix + '-' + colors] = true;
	
	    var headerClass = _defineProperty({}, clsPrefix + '-heading', true);
	
	    copyable === false ? false : true;
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2["default"])(className, classes),
	        id: collapsible ? null : id
	      }),
	      header && _react2["default"].createElement(
	        'div',
	        { className: (0, _classnames2["default"])(headerClass), style: headerStyle, onClick: this.handleClickTitle },
	        this.renderHeader(collapsible, header, id, headerRole, expanded, clsPrefix)
	      ),
	      collapsible ? this.renderCollapsibleBody(id, expanded, panelRole, children, clsPrefix, copyable, { onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited }) : this.renderBody(children, clsPrefix, copyable),
	      footer && _react2["default"].createElement(
	        'div',
	        { className: clsPrefix + '-footer', style: footerStyle },
	        footer
	      )
	    );
	  };
	
	  return Panel;
	}(_react2["default"].Component);
	
	Panel.propTypes = propTypes;
	Panel.defaultProps = defaultProps;
	
	exports["default"] = Panel;
	module.exports = exports['default'];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Fade = exports.Collapse = exports.Transition = undefined;
	
	var _Transition2 = __webpack_require__(12);
	
	var _Transition3 = _interopRequireDefault(_Transition2);
	
	var _Collapse2 = __webpack_require__(16);
	
	var _Collapse3 = _interopRequireDefault(_Collapse2);
	
	var _Fade2 = __webpack_require__(63);
	
	var _Fade3 = _interopRequireDefault(_Fade2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.Transition = _Transition3["default"];
	exports.Collapse = _Collapse3["default"];
	exports.Fade = _Fade3["default"];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _properties = __webpack_require__(13);
	
	var _properties2 = _interopRequireDefault(_properties);
	
	var _on = __webpack_require__(15);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var transitionEndEvent = _properties2["default"].end;
	
	//设置状态码
	var UNMOUNTED = exports.UNMOUNTED = 0;
	var EXITED = exports.EXITED = 1;
	var ENTERING = exports.ENTERING = 2;
	var ENTERED = exports.ENTERED = 3;
	var EXITING = exports.EXITING = 4;
	
	var propTypes = {
	  /**
	   * 是否触发动画
	   */
	  "in": _propTypes2["default"].bool,
	
	  /**
	   * 不显示的时候是否移除组件
	   */
	  unmountOnExit: _propTypes2["default"].bool,
	
	  /**
	   * 如果设置为默认显示，挂载时显示动画
	   */
	  transitionAppear: _propTypes2["default"].bool,
	
	  /**
	   * 设置超时时间，防止出现问题，可设置为>=动画时间
	   */
	  timeout: _propTypes2["default"].number,
	
	  /**
	   * 退出组件时添加的class
	   */
	  exitedClassName: _propTypes2["default"].string,
	  /**
	   * 退出组件中添加的class
	   */
	  exitingClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画后添加的class
	   */
	  enteredClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画时添加的class
	   */
	  enteringClassName: _propTypes2["default"].string,
	
	  /**
	   * 进入动画开始时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * 进入动画中的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * 进入动画后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * 退出动画开始时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * 退出动画中的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * 退出动画后的钩子函数
	   */
	  onExited: _propTypes2["default"].func
	};
	
	function noop() {}
	
	var defaultProps = {
	  "in": false,
	  unmountOnExit: false,
	  transitionAppear: false,
	  timeout: 5000,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	
	/**
	 * 动画组件
	 */
	
	var Transition = function (_Component) {
	  _inherits(Transition, _Component);
	
	  function Transition(props, context) {
	    _classCallCheck(this, Transition);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    var initialStatus = void 0;
	    if (props["in"]) {
	      // 在componentdidmount时开始执行动画
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    _this.state = { status: initialStatus };
	
	    _this.nextCallback = null;
	    return _this;
	  }
	
	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props["in"]) {
	      this.performEnter(this.props);
	    }
	  };
	
	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps["in"] && this.props.unmountOnExit) {
	      if (this.state.status === UNMOUNTED) {
	        // 在componentDidUpdate执行动画.
	        this.setState({ status: EXITED });
	      }
	    } else {
	      this._needsUpdate = true;
	    }
	  };
	
	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    var status = this.state.status;
	
	    if (this.props.unmountOnExit && status === EXITED) {
	      // 当使用unmountOnExit时，exited为exiting和unmont的过渡状态
	      if (this.props["in"]) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }
	
	      return;
	    }
	
	    // 确保只响应prop变化
	    if (this._needsUpdate) {
	      this._needsUpdate = false;
	
	      if (this.props["in"]) {
	        if (status === EXITING) {
	          this.performEnter(this.props);
	        } else if (status === EXITED) {
	          this.performEnter(this.props);
	        }
	        // 其他，当我们已经输入或输出
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          this.performExit(this.props);
	        }
	        // 我们已经输入或输出完成
	      }
	    }
	  };
	
	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };
	
	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this2 = this;
	
	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);
	
	    // 这里接收新props
	    props.onEnter(node);
	
	    this.safeSetState({ status: ENTERING }, function () {
	      _this2.props.onEntering(node);
	
	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: ENTERED }, function () {
	          _this2.props.onEntered(node);
	        });
	      });
	    });
	  };
	
	  Transition.prototype.performExit = function performExit(props) {
	    var _this3 = this;
	
	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);
	
	    props.onExit(node);
	
	    this.safeSetState({ status: EXITING }, function () {
	      _this3.props.onExiting(node);
	
	      _this3.onTransitionEnd(node, function () {
	        _this3.safeSetState({ status: EXITED }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };
	
	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };
	
	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // 确保在组件销毁后挂起的setState被消除
	    this.setState(nextState, this.setNextCallback(callback));
	  };
	
	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;
	
	    var active = true;
	
	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	
	        callback(event);
	      }
	    };
	
	    this.nextCallback.cancel = function () {
	      active = false;
	    };
	
	    return this.nextCallback;
	  };
	
	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);
	
	    if (node) {
	      if (transitionEndEvent == undefined) {
	        this.nextCallback();
	      } else {
	        (0, _on2["default"])(node, transitionEndEvent, this.nextCallback);
	      }
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };
	
	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }
	
	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        childProps = _objectWithoutProperties(_props, ['children', 'className']);
	
	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });
	
	    var transitionClassName = void 0;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }
	
	    var child = _react2["default"].Children.only(children);
	    return _react2["default"].cloneElement(child, _extends({}, childProps, {
	      className: (0, _classnames2["default"])(child.props.className, className, transitionClassName)
	    }));
	  };
	
	  return Transition;
	}(_react.Component);
	
	Transition.propTypes = propTypes;
	
	Transition.defaultProps = defaultProps;
	
	exports["default"] = Transition;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = undefined;
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var transform = 'transform';
	var prefix = void 0,
	    transitionEnd = void 0;
	var transitionTiming = void 0,
	    transitionDuration = void 0;
	var transitionProperty = void 0,
	    transitionDelay = void 0;
	
	if (_inDOM2.default) {
	  var _getTransitionPropert = getTransitionProperties();
	
	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	
	
	  exports.transform = transform = prefix + '-' + transform;
	  exports.transitionProperty = transitionProperty = prefix + '-transition-property';
	  exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
	  exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
	  exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';
	}
	
	exports.transform = transform;
	exports.transitionProperty = transitionProperty;
	exports.transitionTiming = transitionTiming;
	exports.transitionDelay = transitionDelay;
	exports.transitionDuration = transitionDuration;
	exports.transitionEnd = transitionEnd;
	exports.default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};
	
	
	function getTransitionProperties() {
	  var transitionEnd = void 0;
	  var prefix = '';
	  var eventNames = {
	    O: 'otransitionend',
	    Moz: 'transitionend',
	    Webkit: 'webkitTransitionEnd',
	    ms: 'MSTransitionEnd'
	  };
	
	  var element = document.createElement('div');
	  for (var vendor in eventNames) {
	    if (eventNames.hasOwnProperty(vendor)) {
	      if (element.style[vendor + 'TransitionProperty'] !== undefined) {
	        prefix = '-' + vendor.toLowerCase();
	        transitionEnd = eventNames[vendor];
	        break;
	      }
	    }
	  }if (!transitionEnd && element.style.transitionProperty !== undefined) transitionEnd = 'transitionend';
	
	  element = null;
	
	  return { transitionEnd: transitionEnd, prefix: prefix };
	}

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var on = function on() {};
	if (_inDOM2.default) {
	  on = function () {
	
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, handler);
	    };
	  }();
	}
	
	exports.default = on;
	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _style = __webpack_require__(17);
	
	var _style2 = _interopRequireDefault(_style);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Transition = __webpack_require__(12);
	
	var _Transition2 = _interopRequireDefault(_Transition);
	
	var _capitalize = __webpack_require__(25);
	
	var _capitalize2 = _interopRequireDefault(_capitalize);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};
	
	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	function triggerBrowserReflow(node) {
	  node.offsetHeight; // eslint-disable-line no-unused-expressions
	}
	
	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + (0, _capitalize2["default"])(dimension)];
	  var margins = MARGINS[dimension];
	
	  return value + parseInt((0, _style2["default"])(elem, margins[0]), 10) + parseInt((0, _style2["default"])(elem, margins[1]), 10);
	}
	
	var propTypes = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  "in": _propTypes2["default"].bool,
	
	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _propTypes2["default"].bool,
	
	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,
	
	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _propTypes2["default"].number,
	
	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _propTypes2["default"].func,
	
	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _propTypes2["default"].oneOfType([_propTypes2["default"].oneOf(['height', 'width']), _propTypes2["default"].func]),
	
	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _propTypes2["default"].func,
	
	  /**
	   * ARIA role of collapsible element
	   */
	  role: _propTypes2["default"].string
	};
	
	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,
	
	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};
	
	var Collapse = function (_React$Component) {
	  _inherits(Collapse, _React$Component);
	
	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.handleEnter = _this.handleEnter.bind(_this);
	    _this.handleEntering = _this.handleEntering.bind(_this);
	    _this.handleEntered = _this.handleEntered.bind(_this);
	    _this.handleExit = _this.handleExit.bind(_this);
	    _this.handleExiting = _this.handleExiting.bind(_this);
	    return _this;
	  }
	
	  /* -- Expanding -- */
	
	
	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };
	
	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };
	
	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };
	
	  /* -- Collapsing -- */
	
	
	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	    triggerBrowserReflow(elem);
	  };
	
	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };
	
	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };
	
	  // for testing
	
	
	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + (0, _capitalize2["default"])(dimension)] + 'px';
	  };
	
	  Collapse.prototype.render = function render() {
	    var _props = this.props,
	        onEnter = _props.onEnter,
	        onEntering = _props.onEntering,
	        onEntered = _props.onEntered,
	        onExit = _props.onExit,
	        onExiting = _props.onExiting,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'className']);
	
	    delete props.dimension;
	    delete props.getDimensionValue;
	
	    var handleEnter = (0, _tinperBeeCore.createChainedFunction)(this.handleEnter, onEnter);
	    var handleEntering = (0, _tinperBeeCore.createChainedFunction)(this.handleEntering, onEntering);
	    var handleEntered = (0, _tinperBeeCore.createChainedFunction)(this.handleEntered, onEntered);
	    var handleExit = (0, _tinperBeeCore.createChainedFunction)(this.handleExit, onExit);
	    var handleExiting = (0, _tinperBeeCore.createChainedFunction)(this.handleExiting, onExiting);
	
	    var classes = {
	      width: this._dimension() === 'width'
	    };
	
	    return _react2["default"].createElement(_Transition2["default"], _extends({}, props, {
	      'aria-expanded': props.role ? props["in"] : null,
	      className: (0, _classnames2["default"])(className, classes),
	      exitedClassName: 'collapse',
	      exitingClassName: 'collapsing',
	      enteredClassName: 'collapse in',
	      enteringClassName: 'collapsing',
	      onEnter: handleEnter,
	      onEntering: handleEntering,
	      onEntered: handleEntered,
	      onExit: handleExit,
	      onExiting: handleExiting
	    }));
	  };
	
	  return Collapse;
	}(_react2["default"].Component);
	
	Collapse.propTypes = propTypes;
	Collapse.defaultProps = defaultProps;
	
	exports["default"] = Collapse;
	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = style;
	
	var _camelizeStyle = __webpack_require__(18);
	
	var _camelizeStyle2 = _interopRequireDefault(_camelizeStyle);
	
	var _hyphenateStyle = __webpack_require__(20);
	
	var _hyphenateStyle2 = _interopRequireDefault(_hyphenateStyle);
	
	var _getComputedStyle2 = __webpack_require__(22);
	
	var _getComputedStyle3 = _interopRequireDefault(_getComputedStyle2);
	
	var _removeStyle = __webpack_require__(23);
	
	var _removeStyle2 = _interopRequireDefault(_removeStyle);
	
	var _properties = __webpack_require__(13);
	
	var _isTransform = __webpack_require__(24);
	
	var _isTransform2 = _interopRequireDefault(_isTransform);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function style(node, property, value) {
	  var css = '';
	  var transforms = '';
	  var props = property;
	
	  if (typeof property === 'string') {
	    if (value === undefined) {
	      return node.style[(0, _camelizeStyle2.default)(property)] || (0, _getComputedStyle3.default)(node).getPropertyValue((0, _hyphenateStyle2.default)(property));
	    } else {
	      (props = {})[property] = value;
	    }
	  }
	
	  Object.keys(props).forEach(function (key) {
	    var value = props[key];
	    if (!value && value !== 0) {
	      (0, _removeStyle2.default)(node, (0, _hyphenateStyle2.default)(key));
	    } else if ((0, _isTransform2.default)(key)) {
	      transforms += key + '(' + value + ') ';
	    } else {
	      css += (0, _hyphenateStyle2.default)(key) + ': ' + value + ';';
	    }
	  });
	
	  if (transforms) {
	    css += _properties.transform + ': ' + transforms + ';';
	  }
	
	  node.style.cssText += ';' + css;
	}
	module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = camelizeStyleName;
	
	var _camelize = __webpack_require__(19);
	
	var _camelize2 = _interopRequireDefault(_camelize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var msPattern = /^-ms-/; /**
	                          * Copyright 2014-2015, Facebook, Inc.
	                          * All rights reserved.
	                          * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	                          */
	function camelizeStyleName(string) {
	  return (0, _camelize2.default)(string.replace(msPattern, 'ms-'));
	}
	module.exports = exports['default'];

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = camelize;
	var rHyphen = /-(.)/g;
	
	function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	}
	module.exports = exports["default"];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hyphenateStyleName;
	
	var _hyphenate = __webpack_require__(21);
	
	var _hyphenate2 = _interopRequireDefault(_hyphenate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var msPattern = /^ms-/; /**
	                         * Copyright 2013-2014, Facebook, Inc.
	                         * All rights reserved.
	                         * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	                         */
	
	function hyphenateStyleName(string) {
	  return (0, _hyphenate2.default)(string).replace(msPattern, '-ms-');
	}
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hyphenate;
	
	var rUpper = /([A-Z])/g;
	
	function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	}
	module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = _getComputedStyle;
	
	var _camelizeStyle = __webpack_require__(18);
	
	var _camelizeStyle2 = _interopRequireDefault(_camelizeStyle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;
	
	function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;
	
	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {
	    //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;
	
	      prop = (0, _camelizeStyle2.default)(prop);
	
	      if (prop == 'float') prop = 'styleFloat';
	
	      var current = node.currentStyle[prop] || null;
	
	      if (current == null && style && style[prop]) current = style[prop];
	
	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left;
	
	        // Put in the new values to get a computed value out
	        if (rsLeft) runStyle.left = node.currentStyle.left;
	
	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px';
	
	        // Revert the changed values
	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }
	
	      return current;
	    }
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = removeStyle;
	function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	}
	module.exports = exports['default'];

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isTransform;
	var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
	
	function isTransform(property) {
	  return !!(property && supportedTransforms.test(property));
	}
	module.exports = exports["default"];

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = capitalize;
	function capitalize(string) {
	  return "" + string.charAt(0).toUpperCase() + string.slice(1);
	}
	module.exports = exports["default"];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Align = exports.toArray = exports.cssAnimation = exports.addEventListener = exports.contains = exports.KeyCode = exports.createChainedFunction = exports.splitComponent = exports.isRequiredForA11y = exports.elementType = exports.deprecated = exports.componentOrElement = exports.all = undefined;
	
	var _all2 = __webpack_require__(27);
	
	var _all3 = _interopRequireDefault(_all2);
	
	var _componentOrElement2 = __webpack_require__(29);
	
	var _componentOrElement3 = _interopRequireDefault(_componentOrElement2);
	
	var _deprecated2 = __webpack_require__(30);
	
	var _deprecated3 = _interopRequireDefault(_deprecated2);
	
	var _elementType2 = __webpack_require__(33);
	
	var _elementType3 = _interopRequireDefault(_elementType2);
	
	var _isRequiredForA11y2 = __webpack_require__(34);
	
	var _isRequiredForA11y3 = _interopRequireDefault(_isRequiredForA11y2);
	
	var _splitComponent2 = __webpack_require__(35);
	
	var _splitComponent3 = _interopRequireDefault(_splitComponent2);
	
	var _createChainedFunction2 = __webpack_require__(36);
	
	var _createChainedFunction3 = _interopRequireDefault(_createChainedFunction2);
	
	var _keyCode = __webpack_require__(37);
	
	var _keyCode2 = _interopRequireDefault(_keyCode);
	
	var _contains2 = __webpack_require__(38);
	
	var _contains3 = _interopRequireDefault(_contains2);
	
	var _addEventListener2 = __webpack_require__(39);
	
	var _addEventListener3 = _interopRequireDefault(_addEventListener2);
	
	var _cssAnimation2 = __webpack_require__(44);
	
	var _cssAnimation3 = _interopRequireDefault(_cssAnimation2);
	
	var _toArray2 = __webpack_require__(48);
	
	var _toArray3 = _interopRequireDefault(_toArray2);
	
	var _Align2 = __webpack_require__(49);
	
	var _Align3 = _interopRequireDefault(_Align2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.all = _all3.default;
	exports.componentOrElement = _componentOrElement3.default;
	exports.deprecated = _deprecated3.default;
	exports.elementType = _elementType3.default;
	exports.isRequiredForA11y = _isRequiredForA11y3.default;
	exports.splitComponent = _splitComponent3.default;
	exports.createChainedFunction = _createChainedFunction3.default;
	exports.KeyCode = _keyCode2.default;
	exports.contains = _contains3.default;
	exports.addEventListener = _addEventListener3.default;
	exports.cssAnimation = _cssAnimation3.default;
	exports.toArray = _toArray3.default;
	//export getContainerRenderMixin from './getContainerRenderMixin';
	
	exports.Align = _Align3.default;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = all;
	
	var _createChainableTypeChecker = __webpack_require__(28);
	
	var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function all() {
	  for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
	    validators[_key] = arguments[_key];
	  }
	
	  function allPropTypes() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    var error = null;
	
	    validators.forEach(function (validator) {
	      if (error != null) {
	        return;
	      }
	
	      var result = validator.apply(undefined, args);
	      if (result != null) {
	        error = result;
	      }
	    });
	
	    return error;
	  }
	
	  return (0, _createChainableTypeChecker2.default)(allPropTypes);
	} /**
	   * This source code is quoted from rc-util.
	   * homepage: https://github.com/react-component/util
	   */

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = createChainableTypeChecker;
	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	// Mostly taken from ReactPropTypes.
	
	/* This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required ' + location + ' `' + propFullNameSafe + '` was not specified ' + ('in `' + componentNameSafe + '`.'));
	      }
	
	      return null;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
	      args[_key - 6] = arguments[_key];
	    }
	
	    return validate.apply(undefined, [props, propName, componentNameSafe, location, propFullNameSafe].concat(args));
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */
	
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _createChainableTypeChecker = __webpack_require__(28);
	
	var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function validate(props, propName, componentName, location, propFullName) {
	  var propValue = props[propName];
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	
	  if (_react2.default.isValidElement(propValue)) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of type ReactElement ' + ('supplied to `' + componentName + '`, expected a ReactComponent or a ') + 'DOMElement. You can usually obtain a ReactComponent or DOMElement ' + 'from a ReactElement by attaching a ref to it.');
	  }
	
	  if ((propType !== 'object' || typeof propValue.render !== 'function') && propValue.nodeType !== 1) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected a ReactComponent or a ') + 'DOMElement.');
	  }
	
	  return null;
	}
	
	exports.default = (0, _createChainableTypeChecker2.default)(validate);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = deprecated;
	
	var _warning = __webpack_require__(31);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var warned = {}; /**
	                  * This source code is quoted from rc-util.
	                  * homepage: https://github.com/react-component/util
	                  */
	function deprecated(validator, reason) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] != null) {
	      var messageKey = componentName + '.' + propName;
	
	      (0, _warning2.default)(warned[messageKey], 'The ' + location + ' `' + propFullNameSafe + '` of ' + ('`' + componentNameSafe + '` is deprecated. ' + reason + '.'));
	
	      warned[messageKey] = true;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}
	
	/* eslint-disable no-underscore-dangle */
	function _resetWarned() {
	  warned = {};
	}
	
	deprecated._resetWarned = _resetWarned;
	/* eslint-enable no-underscore-dangle */

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */
	
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _createChainableTypeChecker = __webpack_require__(28);
	
	var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function elementType(props, propName, componentName, location, propFullName) {
	  var propValue = props[propName];
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	
	  if (_react2.default.isValidElement(propValue)) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of type ReactElement ' + ('supplied to `' + componentName + '`, expected an element type (a string ') + 'or a ReactClass).');
	  }
	
	  if (propType !== 'function' && propType !== 'string') {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected an element type (a string ') + 'or a ReactClass).');
	  }
	
	  return null;
	}
	
	exports.default = (0, _createChainableTypeChecker2.default)(elementType);

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = isRequiredForA11y;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function isRequiredForA11y(validator) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] == null) {
	      return new Error('The ' + location + ' `' + propFullNameSafe + '` is required to make ' + ('`' + componentNameSafe + '` accessible for users of assistive ') + 'technologies such as screen readers.');
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = splitComponentProps;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function _objectEntries(obj) {
	  var entries = [];
	  var keys = Object.keys(obj);
	
	  for (var k = 0; k < keys.length; ++k) {
	    entries.push([keys[k], obj[keys[k]]]);
	  }return entries;
	}
	
	/**
	 * 分割要传入父元素和子元素的props
	 * @param  {[object]} props     传入的属性
	 * @param  {[reactElement]} Component 组件
	 * @return {[array]}           返回数组，第一个元素为父元素props对象，第二个子元素props对象
	 */
	function splitComponentProps(props, Component) {
	  var componentPropTypes = Component.propTypes;
	
	  var parentProps = {};
	  var childProps = {};
	
	  _objectEntries(props).forEach(function (_ref) {
	    var propName = _ref[0],
	        propValue = _ref[1];
	
	    if (componentPropTypes[propName]) {
	      parentProps[propName] = propValue;
	    } else {
	      childProps[propName] = propValue;
	    }
	  });
	
	  return [parentProps, childProps];
	}

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }
	
	    if (acc === null) {
	      return f;
	    }
	
	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}
	exports.default = createChainedFunction;

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	'use strict';
	
	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */
	
	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};
	
	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }
	
	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};
	
	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }
	
	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }
	
	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }
	
	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }
	
	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};
	
	module.exports = KeyCode;

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = contains;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	
	  return false;
	}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = addEventListenerWrap;
	
	var _addDomEventListener = __webpack_require__(40);
	
	var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function addEventListenerWrap(target, eventType, cb) {
	  /* eslint camelcase: 2 */
	  var callback = _reactDom2.default.unstable_batchedUpdates ? function run(e) {
	    _reactDom2.default.unstable_batchedUpdates(cb, e);
	  } : cb;
	  return (0, _addDomEventListener2.default)(target, eventType, callback);
	}

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListener;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _EventObject = __webpack_require__(41);
	
	var _EventObject2 = _interopRequireDefault(_EventObject);
	
	function addEventListener(target, eventType, callback, option) {
	  function wrapCallback(e) {
	    var ne = new _EventObject2['default'](e);
	    callback.call(target, ne);
	  }
	
	  if (target.addEventListener) {
	    var _ret = (function () {
	      var useCapture = false;
	      if (typeof option === 'object') {
	        useCapture = option.capture || false;
	      } else if (typeof option === 'boolean') {
	        useCapture = option;
	      }
	
	      target.addEventListener(eventType, wrapCallback, option || false);
	
	      return {
	        v: {
	          remove: function remove() {
	            target.removeEventListener(eventType, wrapCallback, useCapture);
	          }
	        }
	      };
	    })();
	
	    if (typeof _ret === 'object') return _ret.v;
	  } else if (target.attachEvent) {
	    target.attachEvent('on' + eventType, wrapCallback);
	    return {
	      remove: function remove() {
	        target.detachEvent('on' + eventType, wrapCallback);
	      }
	    };
	  }
	}
	
	module.exports = exports['default'];

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @ignore
	 * event object for dom
	 * @author yiminghe@gmail.com
	 */
	
	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _EventBaseObject = __webpack_require__(42);
	
	var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);
	
	var _objectAssign = __webpack_require__(43);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var TRUE = true;
	var FALSE = false;
	var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];
	
	function isNullOrUndefined(w) {
	  return w === null || w === undefined;
	}
	
	var eventNormalizers = [{
	  reg: /^key/,
	  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
	  fix: function fix(event, nativeEvent) {
	    if (isNullOrUndefined(event.which)) {
	      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
	    }
	
	    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
	    if (event.metaKey === undefined) {
	      event.metaKey = event.ctrlKey;
	    }
	  }
	}, {
	  reg: /^touch/,
	  props: ['touches', 'changedTouches', 'targetTouches']
	}, {
	  reg: /^hashchange$/,
	  props: ['newURL', 'oldURL']
	}, {
	  reg: /^gesturechange$/i,
	  props: ['rotation', 'scale']
	}, {
	  reg: /^(mousewheel|DOMMouseScroll)$/,
	  props: [],
	  fix: function fix(event, nativeEvent) {
	    var deltaX = undefined;
	    var deltaY = undefined;
	    var delta = undefined;
	    var wheelDelta = nativeEvent.wheelDelta;
	    var axis = nativeEvent.axis;
	    var wheelDeltaY = nativeEvent.wheelDeltaY;
	    var wheelDeltaX = nativeEvent.wheelDeltaX;
	    var detail = nativeEvent.detail;
	
	    // ie/webkit
	    if (wheelDelta) {
	      delta = wheelDelta / 120;
	    }
	
	    // gecko
	    if (detail) {
	      // press control e.detail == 1 else e.detail == 3
	      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
	    }
	
	    // Gecko
	    if (axis !== undefined) {
	      if (axis === event.HORIZONTAL_AXIS) {
	        deltaY = 0;
	        deltaX = 0 - delta;
	      } else if (axis === event.VERTICAL_AXIS) {
	        deltaX = 0;
	        deltaY = delta;
	      }
	    }
	
	    // Webkit
	    if (wheelDeltaY !== undefined) {
	      deltaY = wheelDeltaY / 120;
	    }
	    if (wheelDeltaX !== undefined) {
	      deltaX = -1 * wheelDeltaX / 120;
	    }
	
	    // 默认 deltaY (ie)
	    if (!deltaX && !deltaY) {
	      deltaY = delta;
	    }
	
	    if (deltaX !== undefined) {
	      /**
	       * deltaX of mousewheel event
	       * @property deltaX
	       * @member Event.DomEvent.Object
	       */
	      event.deltaX = deltaX;
	    }
	
	    if (deltaY !== undefined) {
	      /**
	       * deltaY of mousewheel event
	       * @property deltaY
	       * @member Event.DomEvent.Object
	       */
	      event.deltaY = deltaY;
	    }
	
	    if (delta !== undefined) {
	      /**
	       * delta of mousewheel event
	       * @property delta
	       * @member Event.DomEvent.Object
	       */
	      event.delta = delta;
	    }
	  }
	}, {
	  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
	  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
	  fix: function fix(event, nativeEvent) {
	    var eventDoc = undefined;
	    var doc = undefined;
	    var body = undefined;
	    var target = event.target;
	    var button = nativeEvent.button;
	
	    // Calculate pageX/Y if missing and clientX/Y available
	    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
	      eventDoc = target.ownerDocument || document;
	      doc = eventDoc.documentElement;
	      body = eventDoc.body;
	      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }
	
	    // which for click: 1 === left; 2 === middle; 3 === right
	    // do not use button
	    if (!event.which && button !== undefined) {
	      if (button & 1) {
	        event.which = 1;
	      } else if (button & 2) {
	        event.which = 3;
	      } else if (button & 4) {
	        event.which = 2;
	      } else {
	        event.which = 0;
	      }
	    }
	
	    // add relatedTarget, if necessary
	    if (!event.relatedTarget && event.fromElement) {
	      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
	    }
	
	    return event;
	  }
	}];
	
	function retTrue() {
	  return TRUE;
	}
	
	function retFalse() {
	  return FALSE;
	}
	
	function DomEventObject(nativeEvent) {
	  var type = nativeEvent.type;
	
	  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';
	
	  _EventBaseObject2['default'].call(this);
	
	  this.nativeEvent = nativeEvent;
	
	  // in case dom event has been mark as default prevented by lower dom node
	  var isDefaultPrevented = retFalse;
	  if ('defaultPrevented' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
	  } else if ('getPreventDefault' in nativeEvent) {
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
	    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
	  } else if ('returnValue' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
	  }
	
	  this.isDefaultPrevented = isDefaultPrevented;
	
	  var fixFns = [];
	  var fixFn = undefined;
	  var l = undefined;
	  var prop = undefined;
	  var props = commonProps.concat();
	
	  eventNormalizers.forEach(function (normalizer) {
	    if (type.match(normalizer.reg)) {
	      props = props.concat(normalizer.props);
	      if (normalizer.fix) {
	        fixFns.push(normalizer.fix);
	      }
	    }
	  });
	
	  l = props.length;
	
	  // clone properties of the original event object
	  while (l) {
	    prop = props[--l];
	    this[prop] = nativeEvent[prop];
	  }
	
	  // fix target property, if necessary
	  if (!this.target && isNative) {
	    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
	  }
	
	  // check if target is a text node (safari)
	  if (this.target && this.target.nodeType === 3) {
	    this.target = this.target.parentNode;
	  }
	
	  l = fixFns.length;
	
	  while (l) {
	    fixFn = fixFns[--l];
	    fixFn(this, nativeEvent);
	  }
	
	  this.timeStamp = nativeEvent.timeStamp || Date.now();
	}
	
	var EventBaseObjectProto = _EventBaseObject2['default'].prototype;
	
	(0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
	  constructor: DomEventObject,
	
	  preventDefault: function preventDefault() {
	    var e = this.nativeEvent;
	
	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    } else {
	      // otherwise set the returnValue property of the original event to FALSE (IE)
	      e.returnValue = FALSE;
	    }
	
	    EventBaseObjectProto.preventDefault.call(this);
	  },
	
	  stopPropagation: function stopPropagation() {
	    var e = this.nativeEvent;
	
	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    } else {
	      // otherwise set the cancelBubble property of the original event to TRUE (IE)
	      e.cancelBubble = TRUE;
	    }
	
	    EventBaseObjectProto.stopPropagation.call(this);
	  }
	});
	
	exports['default'] = DomEventObject;
	module.exports = exports['default'];

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * @ignore
	 * base event object for custom and dom event.
	 * @author yiminghe@gmail.com
	 */
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function returnFalse() {
	  return false;
	}
	
	function returnTrue() {
	  return true;
	}
	
	function EventBaseObject() {
	  this.timeStamp = Date.now();
	  this.target = undefined;
	  this.currentTarget = undefined;
	}
	
	EventBaseObject.prototype = {
	  isEventObject: 1,
	
	  constructor: EventBaseObject,
	
	  isDefaultPrevented: returnFalse,
	
	  isPropagationStopped: returnFalse,
	
	  isImmediatePropagationStopped: returnFalse,
	
	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	  },
	
	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	  },
	
	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    // fixed 1.2
	    // call stopPropagation implicitly
	    this.stopPropagation();
	  },
	
	  halt: function halt(immediate) {
	    if (immediate) {
	      this.stopImmediatePropagation();
	    } else {
	      this.stopPropagation();
	    }
	    this.preventDefault();
	  }
	};
	
	exports["default"] = EventBaseObject;
	module.exports = exports["default"];

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */
	
	
	var _Event = __webpack_require__(45);
	
	var _Event2 = _interopRequireDefault(_Event);
	
	var _componentClasses = __webpack_require__(46);
	
	var _componentClasses2 = _interopRequireDefault(_componentClasses);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isCssAnimationSupported = _Event2.default.endEvents.length !== 0;
	
	
	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
	
	function getStyleProperty(node, name) {
	  var style = window.getComputedStyle(node);
	
	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}
	
	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
	    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
	    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
	    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}
	
	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}
	
	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	  var className = nameIsObj ? transitionName.name : transitionName;
	  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = (0, _componentClasses2.default)(node);
	
	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }
	
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }
	
	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }
	
	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }
	
	    clearBrowserBugTimeout(node);
	
	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);
	
	    _Event2.default.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;
	
	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };
	
	  _Event2.default.addEndEventListener(node, node.rcEndListener);
	
	  if (start) {
	    start();
	  }
	  nodeClasses.add(className);
	
	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      setTimeout(active, 0);
	    }
	    fixBrowserByTimeout(node);
	    // 30ms for firefox
	  }, 30);
	
	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};
	
	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }
	
	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }
	
	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }
	
	    clearBrowserBugTimeout(node);
	
	    _Event2.default.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;
	
	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };
	
	  _Event2.default.addEndEventListener(node, node.rcEndListener);
	
	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};
	
	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};
	
	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;
	
	exports.default = cssAnimation;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },
	
	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};
	
	var endEvents = [];
	
	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;
	
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }
	
	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }
	
	  for (var baseEventName in EVENT_NAME_MAP) {
	    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	      var baseEvents = EVENT_NAME_MAP[baseEventName];
	      for (var styleName in baseEvents) {
	        if (styleName in style) {
	          endEvents.push(baseEvents[styleName]);
	          break;
	        }
	      }
	    }
	  }
	}
	
	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}
	
	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}
	
	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}
	
	var TransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	
	
	  endEvents: endEvents,
	
	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};
	
	exports.default = TransitionEvents;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	try {
	  var index = __webpack_require__(47);
	} catch (err) {
	  var index = __webpack_require__(47);
	}
	
	/**
	 * Whitespace regexp.
	 */
	
	var re = /\s+/;
	
	/**
	 * toString reference.
	 */
	
	var toString = Object.prototype.toString;
	
	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */
	
	module.exports = function(el){
	  return new ClassList(el);
	};
	
	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */
	
	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}
	
	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */
	
	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }
	
	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};
	
	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */
	
	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }
	
	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }
	
	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};
	
	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */
	
	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};
	
	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */
	
	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }
	
	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */
	
	ClassList.prototype.array = function(){
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};
	
	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */
	
	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	module.exports = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = toArray;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function toArray(children) {
	  var ret = [];
	  _react2.default.Children.forEach(children, function (c) {
	    ret.push(c);
	  });
	  return ret;
	} /**
	   * This source code is quoted from rc-util.
	   * homepage: https://github.com/react-component/util
	   */

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _domAlign = __webpack_require__(50);
	
	var _domAlign2 = _interopRequireDefault(_domAlign);
	
	var _addEventListener = __webpack_require__(39);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	//import isWindow from './isWindow';
	
	function isWindow(obj) {
	  /* eslint no-eq-null: 0 */
	  /* eslint eqeqeq: 0 */
	  return obj != null && obj == obj.window;
	}
	
	function buffer(fn, ms) {
	  var timer = void 0;
	
	  function clear() {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  }
	
	  function bufferFn() {
	    clear();
	    timer = setTimeout(fn, ms);
	  }
	
	  bufferFn.clear = clear;
	
	  return bufferFn;
	}
	
	var propTypes = {
	  childrenProps: _propTypes2.default.object,
	  align: _propTypes2.default.object.isRequired,
	  target: _propTypes2.default.func,
	  onAlign: _propTypes2.default.func,
	  monitorBufferTime: _propTypes2.default.number,
	  monitorWindowResize: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  children: _propTypes2.default.any
	};
	
	var defaultProps = {
	  target: function target() {
	    return window;
	  },
	  onAlign: function onAlign() {},
	
	  monitorBufferTime: 50,
	  monitorWindowResize: false,
	  disabled: false
	};
	
	var Align = function (_React$Component) {
	  _inherits(Align, _React$Component);
	
	  function Align(props) {
	    _classCallCheck(this, Align);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _initialiseProps.call(_this);
	
	    return _this;
	  }
	
	  Align.prototype.componentDidMount = function componentDidMount() {
	    var props = this.props;
	    // if parent ref not attached .... use document.getElementById
	    this.forceAlign();
	    if (!props.disabled && props.monitorWindowResize) {
	      this.startMonitorWindowResize();
	    }
	  };
	
	  Align.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var reAlign = false;
	    var props = this.props;
	
	    if (!props.disabled) {
	      if (prevProps.disabled || prevProps.align !== props.align) {
	        reAlign = true;
	      } else {
	        var lastTarget = prevProps.target();
	        var currentTarget = props.target();
	        if (isWindow(lastTarget) && isWindow(currentTarget)) {
	          reAlign = false;
	        } else if (lastTarget !== currentTarget) {
	          reAlign = true;
	        }
	      }
	    }
	
	    if (reAlign) {
	      this.forceAlign();
	    }
	
	    if (props.monitorWindowResize && !props.disabled) {
	      this.startMonitorWindowResize();
	    } else {
	      this.stopMonitorWindowResize();
	    }
	  };
	
	  Align.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stopMonitorWindowResize();
	  };
	
	  Align.prototype.render = function render() {
	    var _props = this.props,
	        childrenProps = _props.childrenProps,
	        children = _props.children;
	
	    var child = _react2.default.Children.only(children);
	    if (childrenProps) {
	      var newProps = {};
	      for (var prop in childrenProps) {
	        if (childrenProps.hasOwnProperty(prop)) {
	          newProps[prop] = this.props[childrenProps[prop]];
	        }
	      }
	      return _react2.default.cloneElement(child, newProps);
	    }
	    return child;
	  };
	
	  return Align;
	}(_react2.default.Component);
	
	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;
	
	  this.startMonitorWindowResize = function () {
	    if (!_this2.resizeHandler) {
	      _this2.bufferMonitor = buffer(_this2.forceAlign, _this2.props.monitorBufferTime);
	      _this2.resizeHandler = (0, _addEventListener2.default)(window, 'resize', _this2.bufferMonitor);
	    }
	  };
	
	  this.stopMonitorWindowResize = function () {
	    if (_this2.resizeHandler) {
	      _this2.bufferMonitor.clear();
	      _this2.resizeHandler.remove();
	      _this2.resizeHandler = null;
	    }
	  };
	
	  this.forceAlign = function () {
	    var props = _this2.props;
	    if (!props.disabled) {
	      var source = _reactDom2.default.findDOMNode(_this2);
	      props.onAlign(source, (0, _domAlign2.default)(source, props.target(), props.align));
	    }
	  };
	};
	
	;
	
	Align.defaultProps = defaultProps;
	Align.propTypes = propTypes;
	
	exports.default = Align;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.alignPoint = exports.alignElement = undefined;
	
	var _alignElement = __webpack_require__(51);
	
	var _alignElement2 = _interopRequireDefault(_alignElement);
	
	var _alignPoint = __webpack_require__(62);
	
	var _alignPoint2 = _interopRequireDefault(_alignPoint);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports.alignElement = _alignElement2['default'];
	exports.alignPoint = _alignPoint2['default'];
	exports['default'] = _alignElement2['default'];

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _align = __webpack_require__(52);
	
	var _align2 = _interopRequireDefault(_align);
	
	var _getOffsetParent = __webpack_require__(56);
	
	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);
	
	var _getVisibleRectForElement = __webpack_require__(55);
	
	var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);
	
	var _getRegion = __webpack_require__(59);
	
	var _getRegion2 = _interopRequireDefault(_getRegion);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function isOutOfVisibleRect(target) {
	  var visibleRect = (0, _getVisibleRectForElement2['default'])(target);
	  var targetRegion = (0, _getRegion2['default'])(target);
	
	  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
	}
	
	function alignElement(el, refNode, align) {
	  var target = align.target || refNode;
	  var refNodeRegion = (0, _getRegion2['default'])(target);
	
	  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target);
	
	  return (0, _align2['default'])(el, refNodeRegion, align, isTargetNotOutOfVisible);
	}
	
	alignElement.__getOffsetParent = _getOffsetParent2['default'];
	
	alignElement.__getVisibleRectForElement = _getVisibleRectForElement2['default'];
	
	exports['default'] = alignElement;
	module.exports = exports['default'];

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _getVisibleRectForElement = __webpack_require__(55);
	
	var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);
	
	var _adjustForViewport = __webpack_require__(58);
	
	var _adjustForViewport2 = _interopRequireDefault(_adjustForViewport);
	
	var _getRegion = __webpack_require__(59);
	
	var _getRegion2 = _interopRequireDefault(_getRegion);
	
	var _getElFuturePos = __webpack_require__(60);
	
	var _getElFuturePos2 = _interopRequireDefault(_getElFuturePos);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	// http://yiminghe.iteye.com/blog/1124720
	
	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	} /**
	   * align dom node flexibly
	   * @author yiminghe@gmail.com
	   */
	
	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}
	
	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}
	
	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}
	
	function flip(points, reg, map) {
	  var ret = [];
	  _utils2['default'].each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}
	
	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}
	
	function convertOffset(str, offsetLen) {
	  var n = void 0;
	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }
	  return n || 0;
	}
	
	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}
	
	/**
	 * @param el
	 * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
	 * @param align
	 */
	function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};
	  var fail = 0;
	  // 当前节点可以被放置的显示区域
	  var visibleRect = (0, _getVisibleRectForElement2['default'])(source);
	  // 当前节点所占的区域, left/top/width/height
	  var elRegion = (0, _getRegion2['default'])(source);
	  // 将 offset 转换成数值，支持百分比
	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, tgtRegion);
	  // 当前节点将要被放置的位置
	  var elFuturePos = (0, _getElFuturePos2['default'])(elRegion, tgtRegion, points, offset, targetOffset);
	  // 当前节点将要所处的区域
	  var newElRegion = _utils2['default'].merge(elRegion, elFuturePos);
	
	  // 如果可视区域不能完全放置当前节点时允许调整
	  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
	    if (overflow.adjustX) {
	      // 如果横向不能放下
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[lr]/ig, {
	          l: 'r',
	          r: 'l'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
	
	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }
	
	    if (overflow.adjustY) {
	      // 如果纵向不能放下
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var _newPoints = flip(points, /[tb]/ig, {
	          t: 'b',
	          b: 't'
	        });
	        // 偏移量也反下
	        var _newOffset = flipOffset(offset, 1);
	        var _newTargetOffset = flipOffset(targetOffset, 1);
	        var _newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
	
	        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = _newPoints;
	          offset = _newOffset;
	          targetOffset = _newTargetOffset;
	        }
	      }
	    }
	
	    // 如果失败，重新计算当前节点将要被放置的位置
	    if (fail) {
	      elFuturePos = (0, _getElFuturePos2['default'])(elRegion, tgtRegion, points, offset, targetOffset);
	      _utils2['default'].mix(newElRegion, elFuturePos);
	    }
	    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
	    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
	    // 检查反下后的位置是否可以放下了，如果仍然放不下：
	    // 1. 复原修改过的定位参数
	    if (isStillFailX || isStillFailY) {
	      points = align.points;
	      offset = align.offset || [0, 0];
	      targetOffset = align.targetOffset || [0, 0];
	    }
	    // 2. 只有指定了可以调整当前方向才调整
	    newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
	    newOverflowCfg.adjustY = overflow.adjustY && isStillFailY;
	
	    // 确实要调整，甚至可能会调整高度宽度
	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = (0, _adjustForViewport2['default'])(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  }
	
	  // need judge to in case set fixed with in css on height auto element
	  if (newElRegion.width !== elRegion.width) {
	    _utils2['default'].css(source, 'width', _utils2['default'].width(source) + newElRegion.width - elRegion.width);
	  }
	
	  if (newElRegion.height !== elRegion.height) {
	    _utils2['default'].css(source, 'height', _utils2['default'].height(source) + newElRegion.height - elRegion.height);
	  }
	
	  // https://github.com/kissyteam/kissy/issues/190
	  // 相对于屏幕位置没变，而 left/top 变了
	  // 例如 <div 'relative'><el absolute></div>
	  _utils2['default'].offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom,
	    useCssTransform: align.useCssTransform,
	    ignoreShake: align.ignoreShake
	  });
	
	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}
	
	exports['default'] = doAlign;
	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - 优化智能对齐算法
	 *   - 慎用 resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - 增加智能对齐，以及大小调整选项
	 **/
	
	module.exports = exports['default'];

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _propertyUtils = __webpack_require__(54);
	
	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
	
	var getComputedStyleX = void 0;
	
	// https://stackoverflow.com/a/3485654/3040605
	function forceRelayout(elem) {
	  var originalStyle = elem.style.display;
	  elem.style.display = 'none';
	  elem.offsetHeight; // eslint-disable-line
	  elem.style.display = originalStyle;
	}
	
	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = value + 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}
	
	function getClientPosition(elem) {
	  var box = void 0;
	  var x = void 0;
	  var y = void 0;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();
	
	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin
	
	  x = box.left;
	  y = box.top;
	
	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.
	
	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.
	
	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0
	
	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;
	
	  return {
	    left: x,
	    top: y
	  };
	}
	
	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}
	
	function getScrollLeft(w) {
	  return getScroll(w);
	}
	
	function getScrollTop(w) {
	  return getScroll(w, true);
	}
	
	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	
	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}
	
	function getDocument(node) {
	  if (isWindow(node)) {
	    return node.document;
	  }
	  if (node.nodeType === 9) {
	    return node;
	  }
	  return node.ownerDocument;
	}
	
	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = getDocument(elem);
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);
	
	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }
	
	  return val;
	}
	
	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';
	
	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];
	
	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
	
	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];
	
	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];
	
	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;
	
	    // Revert the changed values
	    style[LEFT] = left;
	
	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}
	
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}
	
	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }
	  return option.useCssBottom ? 'bottom' : dir;
	}
	
	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	}
	
	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setLeftTop(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
	
	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }
	
	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }
	  var originalTransition = '';
	  var originalOffset = getOffset(elem);
	  if ('left' in offset || 'top' in offset) {
	    originalTransition = (0, _propertyUtils.getTransitionProperty)(elem) || '';
	    (0, _propertyUtils.setTransitionProperty)(elem, 'none');
	  }
	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = presetH + 'px';
	  }
	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = presetV + 'px';
	  }
	  // force relayout
	  forceRelayout(elem);
	  var old = getOffset(elem);
	  var originalStyle = {};
	  for (var key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      var off = originalOffset[key] - old[key];
	      if (dir === key) {
	        originalStyle[dir] = preset + off;
	      } else {
	        originalStyle[dir] = preset - off;
	      }
	    }
	  }
	  css(elem, originalStyle);
	  // force relayout
	  forceRelayout(elem);
	  if ('left' in offset || 'top' in offset) {
	    (0, _propertyUtils.setTransitionProperty)(elem, originalTransition);
	  }
	  var ret = {};
	  for (var _key in offset) {
	    if (offset.hasOwnProperty(_key)) {
	      var _dir = getOffsetDirection(_key, option);
	      var _off = offset[_key] - originalOffset[_key];
	      if (_key === _dir) {
	        ret[_dir] = originalStyle[_dir] + _off;
	      } else {
	        ret[_dir] = originalStyle[_dir] - _off;
	      }
	    }
	  }
	  css(elem, ret);
	}
	
	function setTransform(elem, offset) {
	  var originalOffset = getOffset(elem);
	  var originalXY = (0, _propertyUtils.getTransformXY)(elem);
	  var resultXY = { x: originalXY.x, y: originalXY.y };
	  if ('left' in offset) {
	    resultXY.x = originalXY.x + offset.left - originalOffset.left;
	  }
	  if ('top' in offset) {
	    resultXY.y = originalXY.y + offset.top - originalOffset.top;
	  }
	  (0, _propertyUtils.setTransformXY)(elem, resultXY);
	}
	
	function setOffset(elem, offset, option) {
	  if (option.ignoreShake) {
	    var oriOffset = getOffset(elem);
	
	    var oLeft = oriOffset.left.toFixed(0);
	    var oTop = oriOffset.top.toFixed(0);
	    var tLeft = offset.left.toFixed(0);
	    var tTop = offset.top.toFixed(0);
	
	    if (oLeft === tLeft && oTop === tTop) {
	      return;
	    }
	  }
	
	  if (option.useCssRight || option.useCssBottom) {
	    setLeftTop(elem, offset, option);
	  } else if (option.useCssTransform && (0, _propertyUtils.getTransformName)() in document.body.style) {
	    setTransform(elem, offset, option);
	  } else {
	    setLeftTop(elem, offset, option);
	  }
	}
	
	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}
	
	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}
	
	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;
	
	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = void 0;
	
	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }
	
	  callback.call(elem);
	
	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}
	
	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = void 0;
	  var j = void 0;
	  var i = void 0;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = void 0;
	        if (prop === 'border') {
	          cssProp = '' + prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}
	
	var domUtils = {};
	
	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };
	
	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});
	
	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, ex) {
	  var extra = ex;
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }
	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}
	
	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};
	
	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	
	  var val = void 0;
	  var elem = args[0];
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}
	
	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	
	  domUtils[name] = function (elem, v) {
	    var val = v;
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});
	
	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }
	  return to;
	}
	
	var utils = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	
	  getDocument: getDocument,
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },
	
	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var i = void 0;
	    var ret = {};
	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	
	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};
	
	    for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
	      args[_key3] = arguments[_key3];
	    }
	
	    for (var i = 0; i < args.length; i++) {
	      utils.mix(ret, args[i]);
	    }
	    return ret;
	  },
	
	  viewportWidth: 0,
	  viewportHeight: 0
	};
	
	mix(utils, domUtils);
	
	exports['default'] = utils;
	module.exports = exports['default'];

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getTransformName = getTransformName;
	exports.setTransitionProperty = setTransitionProperty;
	exports.getTransitionProperty = getTransitionProperty;
	exports.getTransformXY = getTransformXY;
	exports.setTransformXY = setTransformXY;
	var vendorPrefix = void 0;
	
	var jsCssMap = {
	  Webkit: '-webkit-',
	  Moz: '-moz-',
	  // IE did it wrong again ...
	  ms: '-ms-',
	  O: '-o-'
	};
	
	function getVendorPrefix() {
	  if (vendorPrefix !== undefined) {
	    return vendorPrefix;
	  }
	  vendorPrefix = '';
	  var style = document.createElement('p').style;
	  var testProp = 'Transform';
	  for (var key in jsCssMap) {
	    if (key + testProp in style) {
	      vendorPrefix = key;
	    }
	  }
	  return vendorPrefix;
	}
	
	function getTransitionName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'TransitionProperty' : 'transitionProperty';
	}
	
	function getTransformName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'Transform' : 'transform';
	}
	
	function setTransitionProperty(node, value) {
	  var name = getTransitionName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transitionProperty') {
	      node.style.transitionProperty = value;
	    }
	  }
	}
	
	function setTransform(node, value) {
	  var name = getTransformName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transform') {
	      node.style.transform = value;
	    }
	  }
	}
	
	function getTransitionProperty(node) {
	  return node.style.transitionProperty || node.style[getTransitionName()];
	}
	
	function getTransformXY(node) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
	    return { x: parseFloat(matrix[12] || matrix[4], 0), y: parseFloat(matrix[13] || matrix[5], 0) };
	  }
	  return {
	    x: 0,
	    y: 0
	  };
	}
	
	var matrix2d = /matrix\((.*)\)/;
	var matrix3d = /matrix3d\((.*)\)/;
	
	function setTransformXY(node, xy) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var arr = void 0;
	    var match2d = transform.match(matrix2d);
	    if (match2d) {
	      match2d = match2d[1];
	      arr = match2d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[4] = xy.x;
	      arr[5] = xy.y;
	      setTransform(node, 'matrix(' + arr.join(',') + ')');
	    } else {
	      var match3d = transform.match(matrix3d)[1];
	      arr = match3d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[12] = xy.x;
	      arr[13] = xy.y;
	      setTransform(node, 'matrix3d(' + arr.join(',') + ')');
	    }
	  } else {
	    setTransform(node, 'translateX(' + xy.x + 'px) translateY(' + xy.y + 'px) translateZ(0)');
	  }
	}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _getOffsetParent = __webpack_require__(56);
	
	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);
	
	var _isAncestorFixed = __webpack_require__(57);
	
	var _isAncestorFixed2 = _interopRequireDefault(_isAncestorFixed);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * 获得元素的显示部分的区域
	 */
	function getVisibleRectForElement(element) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = (0, _getOffsetParent2['default'])(element);
	  var doc = _utils2['default'].getDocument(element);
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement;
	
	  // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.
	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
	    // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && _utils2['default'].css(el, 'overflow') !== 'visible') {
	      var pos = _utils2['default'].offset(el);
	      // add border
	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right,
	      // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }
	    el = (0, _getOffsetParent2['default'])(el);
	  }
	
	  // Set element position to fixed
	  // make sure absolute element itself don't affect it's visible area
	  // https://github.com/ant-design/ant-design/issues/7601
	  var originalPosition = null;
	  if (!_utils2['default'].isWindow(element) && element.nodeType !== 9) {
	    originalPosition = element.style.position;
	    var position = _utils2['default'].css(element, 'position');
	    if (position === 'absolute') {
	      element.style.position = 'fixed';
	    }
	  }
	
	  var scrollX = _utils2['default'].getWindowScrollLeft(win);
	  var scrollY = _utils2['default'].getWindowScrollTop(win);
	  var viewportWidth = _utils2['default'].viewportWidth(win);
	  var viewportHeight = _utils2['default'].viewportHeight(win);
	  var documentWidth = documentElement.scrollWidth;
	  var documentHeight = documentElement.scrollHeight;
	
	  // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
	  // We should cut this ourself.
	  var bodyStyle = window.getComputedStyle(body);
	  if (bodyStyle.overflowX === 'hidden') {
	    documentWidth = win.innerWidth;
	  }
	  if (bodyStyle.overflowY === 'hidden') {
	    documentHeight = win.innerHeight;
	  }
	
	  // Reset element position after calculate the visible area
	  if (element.style) {
	    element.style.position = originalPosition;
	  }
	
	  if ((0, _isAncestorFixed2['default'])(element)) {
	    // Clip by viewport's size.
	    visibleRect.left = Math.max(visibleRect.left, scrollX);
	    visibleRect.top = Math.max(visibleRect.top, scrollY);
	    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
	    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
	  } else {
	    // Clip by document's size.
	    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
	    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
	
	    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
	    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
	  }
	
	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}
	
	exports['default'] = getVisibleRectForElement;
	module.exports = exports['default'];

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * 得到会导致元素显示不全的祖先元素
	 */
	
	function getOffsetParent(element) {
	  if (_utils2['default'].isWindow(element) || element.nodeType === 9) {
	    return null;
	  }
	  // ie 这个也不是完全可行
	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   元素 6 高 100px 宽 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // 统一的 offsetParent 方法
	  var doc = _utils2['default'].getDocument(element);
	  var body = doc.body;
	  var parent = void 0;
	  var positionStyle = _utils2['default'].css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';
	
	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
	  }
	
	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    positionStyle = _utils2['default'].css(parent, 'position');
	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }
	  return null;
	}
	
	exports['default'] = getOffsetParent;
	module.exports = exports['default'];

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = isAncestorFixed;
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function isAncestorFixed(element) {
	  if (_utils2['default'].isWindow(element) || element.nodeType === 9) {
	    return false;
	  }
	
	  var doc = _utils2['default'].getDocument(element);
	  var body = doc.body;
	  var parent = null;
	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    var positionStyle = _utils2['default'].css(parent, 'position');
	    if (positionStyle === 'fixed') {
	      return true;
	    }
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = _utils2['default'].clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };
	
	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  }
	
	  // Left edge inside and right edge outside viewport, try to resize it.
	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  }
	
	  // Right edge outside viewport, try to move it.
	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // 保证左边界和可视区域左边界对齐
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  }
	
	  // Top edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  }
	
	  // Top edge inside and bottom edge outside viewport, try to resize it.
	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  }
	
	  // Bottom edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // 保证上边界和可视区域上边界对齐
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }
	
	  return _utils2['default'].mix(pos, size);
	}
	
	exports['default'] = adjustForViewport;
	module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getRegion(node) {
	  var offset = void 0;
	  var w = void 0;
	  var h = void 0;
	  if (!_utils2['default'].isWindow(node) && node.nodeType !== 9) {
	    offset = _utils2['default'].offset(node);
	    w = _utils2['default'].outerWidth(node);
	    h = _utils2['default'].outerHeight(node);
	  } else {
	    var win = _utils2['default'].getWindow(node);
	    offset = {
	      left: _utils2['default'].getWindowScrollLeft(win),
	      top: _utils2['default'].getWindowScrollTop(win)
	    };
	    w = _utils2['default'].viewportWidth(win);
	    h = _utils2['default'].viewportHeight(win);
	  }
	  offset.width = w;
	  offset.height = h;
	  return offset;
	}
	
	exports['default'] = getRegion;
	module.exports = exports['default'];

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getAlignOffset = __webpack_require__(61);
	
	var _getAlignOffset2 = _interopRequireDefault(_getAlignOffset);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var p1 = (0, _getAlignOffset2['default'])(refNodeRegion, points[1]);
	  var p2 = (0, _getAlignOffset2['default'])(elRegion, points[0]);
	  var diff = [p2.left - p1.left, p2.top - p1.top];
	
	  return {
	    left: elRegion.left - diff[0] + offset[0] - targetOffset[0],
	    top: elRegion.top - diff[1] + offset[1] - targetOffset[1]
	  };
	}
	
	exports['default'] = getElFuturePos;
	module.exports = exports['default'];

/***/ }),
/* 61 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * 获取 node 上的 align 对齐点 相对于页面的坐标
	 */
	
	function getAlignOffset(region, align) {
	  var V = align.charAt(0);
	  var H = align.charAt(1);
	  var w = region.width;
	  var h = region.height;
	
	  var x = region.left;
	  var y = region.top;
	
	  if (V === 'c') {
	    y += h / 2;
	  } else if (V === 'b') {
	    y += h;
	  }
	
	  if (H === 'c') {
	    x += w / 2;
	  } else if (H === 'r') {
	    x += w;
	  }
	
	  return {
	    left: x,
	    top: y
	  };
	}
	
	exports['default'] = getAlignOffset;
	module.exports = exports['default'];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _align = __webpack_require__(52);
	
	var _align2 = _interopRequireDefault(_align);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
	 * If client position provided, will internal convert to page position.
	 */
	
	function alignPoint(el, tgtPoint, align) {
	  var pageX = void 0;
	  var pageY = void 0;
	
	  var doc = _utils2['default'].getDocument(el);
	  var win = doc.defaultView || doc.parentWindow;
	
	  var scrollX = _utils2['default'].getWindowScrollLeft(win);
	  var scrollY = _utils2['default'].getWindowScrollTop(win);
	  var viewportWidth = _utils2['default'].viewportWidth(win);
	  var viewportHeight = _utils2['default'].viewportHeight(win);
	
	  if ('pageX' in tgtPoint) {
	    pageX = tgtPoint.pageX;
	  } else {
	    pageX = scrollX + tgtPoint.clientX;
	  }
	
	  if ('pageY' in tgtPoint) {
	    pageY = tgtPoint.pageY;
	  } else {
	    pageY = scrollY + tgtPoint.clientY;
	  }
	
	  var tgtRegion = {
	    left: pageX,
	    top: pageY,
	    width: 0,
	    height: 0
	  };
	
	  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;
	
	  // Provide default target point
	  var points = [align.points[0], 'cc'];
	
	  return (0, _align2['default'])(el, tgtRegion, _extends({}, align, { points: points }), pointInView);
	}
	
	exports['default'] = alignPoint;
	module.exports = exports['default'];

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Transition = __webpack_require__(12);
	
	var _Transition2 = _interopRequireDefault(_Transition);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  "in": _propTypes2["default"].bool,
	
	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _propTypes2["default"].bool,
	
	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,
	
	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _propTypes2["default"].number,
	
	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _propTypes2["default"].func
	};
	
	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};
	
	var Fade = function (_React$Component) {
	  _inherits(Fade, _React$Component);
	
	  function Fade() {
	    _classCallCheck(this, Fade);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Fade.prototype.render = function render() {
	    return _react2["default"].createElement(_Transition2["default"], _extends({}, this.props, {
	      className: (0, _classnames2["default"])(this.props.className, 'fade'),
	      enteredClassName: 'in',
	      enteringClassName: 'in'
	    }));
	  };
	
	  return Fade;
	}(_react2["default"].Component);
	
	Fade.propTypes = propTypes;
	Fade.defaultProps = defaultProps;
	
	exports["default"] = Fade;
	module.exports = exports['default'];

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Message = __webpack_require__(65);
	
	var _Message2 = _interopRequireDefault(_Message);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Message2["default"];
	module.exports = exports['default'];

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _beeNotification = __webpack_require__(66);
	
	var _beeNotification2 = _interopRequireDefault(_beeNotification);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var defaultDuration = 1.5;
	var newDuration = void 0;
	var defaultTop = 24;
	var defaultBottom = 48;
	var bottom = 90;
	var padding = 30;
	var width = 240;
	var messageInstance = void 0;
	var key = 1;
	var clsPrefix = 'u-message';
	var noop = function noop() {};
	
	var positionObj = {
	    "top": {
	        messageStyle: {
	            transform: 'translateX( -50%)'
	        },
	        notificationStyle: {
	            top: defaultTop,
	            left: '50%'
	        },
	        transitionName: 'top'
	    },
	    "bottom": {
	        messageStyle: {
	            transform: 'translateX( -50%)'
	        },
	        notificationStyle: {
	            bottom: defaultBottom,
	            left: '50%'
	        },
	        transitionName: 'bottom'
	    },
	    "topRight": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            top: padding,
	            right: padding,
	            width: width
	        },
	        transitionName: 'right'
	    },
	    "bottomRight": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            bottom: bottom,
	            right: padding,
	            width: width
	        },
	        transitionName: 'right'
	    },
	    "topLeft": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            top: padding,
	            left: padding,
	            width: width
	        },
	        transitionName: 'left'
	    },
	    "bottomLeft": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            bottom: bottom,
	            left: padding,
	            width: width
	        },
	        transitionName: 'left'
	    }
	};
	
	function getMessageInstance() {
	    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'top';
	    var callback = arguments[1];
	    var keyboard = arguments[2];
	    var onEscapeKeyUp = arguments[3];
	
	    if (messageInstance) {
	        callback(messageInstance);
	        return;
	    }
	    switch (position) {
	        case 'top':
	            positionObj[position].notificationStyle.top = defaultTop;
	            break;
	        case 'bottom':
	            positionObj[position].notificationStyle.bottom = defaultBottom;
	            break;
	        case 'bottomRight':
	            positionObj[position].notificationStyle.bottom = bottom;
	            break;
	        case 'bottomLeft':
	            positionObj[position].notificationStyle.bottom = bottom;
	            break;
	        default:
	            break;
	    }
	    if (position !== 'top' && position !== 'bottom') {
	        positionObj[position].messageStyle.width = width;
	    }
	    var style = positionObj[position].notificationStyle;
	    var instanceObj = {
	        clsPrefix: clsPrefix,
	        transitionName: clsPrefix + '-' + positionObj[position].transitionName,
	        style: style, // 覆盖原来的样式
	        position: position
	    };
	    if (typeof keyboard === 'boolean') {
	        instanceObj.keyboard = keyboard;
	    }
	    if (typeof onEscapeKeyUp === 'function') {
	        instanceObj.onEscapeKeyUp = onEscapeKeyUp;
	    }
	    _beeNotification2["default"].newInstance(instanceObj, function (instance) {
	        messageInstance = instance;
	        callback(instance);
	    });
	}
	
	function notice(content, duration, type, onClose, position, style, keyboard, onEscapeKeyUp, showIcon) {
	    var iconType = {
	        info: 'uf uf-i-c-2',
	        success: 'uf uf-correct',
	        danger: 'uf uf-exc-c',
	        warning: 'uf uf-exc-t',
	        light: 'uf uf-notification',
	        dark: 'uf uf-notification',
	        news: 'uf uf-bell',
	        infolight: 'uf uf-i-c-2',
	        successlight: 'uf uf-correct',
	        dangerlight: 'uf uf-exc-c',
	        warninglight: 'uf uf-exc-t'
	    }[type];
	
	    var positionStyle = positionObj[position].messageStyle;
	    getMessageInstance(position, function (instance) {
	        instance.notice({
	            key: key,
	            duration: duration,
	            color: type,
	            style: _extends({}, positionStyle, style),
	            content: _react2["default"].createElement(
	                'div',
	                null,
	                showIcon ? _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-notice-description-icon' },
	                    _react2["default"].createElement('i', { className: (0, _classnames2["default"])(iconType) })
	                ) : null,
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-notice-description-content' },
	                    content
	                )
	            ),
	            onClose: onClose
	        });
	    }, keyboard, onEscapeKeyUp);
	    return function () {
	        var target = key++;
	        return function () {
	            if (messageInstance) {
	                messageInstance.removeNotice(target);
	            }
	        };
	    }();
	}
	
	exports["default"] = {
	    create: function create(obj) {
	        if (newDuration) {
	            //如果在config方法里设置了duration
	            obj.duration = newDuration;
	        }
	        var content = obj.content || '';
	        var duration = typeof obj.duration == 'undefined' ? defaultDuration : obj.duration;
	        var color = obj.color || 'light';
	        var onClose = obj.onClose || noop;
	        var position = obj.position || "top";
	        var style = obj.style || {};
	        var showIcon = obj.showIcon || true;
	        return notice(content, duration, color, onClose, position, style, obj.keyboard, obj.onEscapeKeyUp, showIcon);
	    },
	    config: function config(options) {
	        if (options.top !== undefined) {
	            defaultTop = options.top;
	        }
	        if (options.duration !== undefined) {
	            defaultDuration = options.duration;
	            newDuration = defaultDuration;
	        }
	        if (options.clsPrefix !== undefined) {
	            clsPrefix = options.clsPrefix;
	        }
	        if (options.defaultBottom !== undefined) {
	            defaultBottom = options.defaultBottom;
	        }
	        if (options.bottom !== undefined) {
	            bottom = options.bottom;
	        }
	        if (options.width !== undefined) {
	            width = options.width;
	        }
	    },
	    destroy: function destroy() {
	        if (messageInstance) {
	            messageInstance.destroy();
	            messageInstance = null;
	        }
	    }
	};
	module.exports = exports['default'];

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Notification = __webpack_require__(67);
	
	var _Notification2 = _interopRequireDefault(_Notification);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Notification2["default"];
	module.exports = exports['default'];

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _beeAnimate = __webpack_require__(68);
	
	var _beeAnimate2 = _interopRequireDefault(_beeAnimate);
	
	var _createChainedFunction = __webpack_require__(36);
	
	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _addEventListener = __webpack_require__(75);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Notice = __webpack_require__(77);
	
	var _Notice2 = _interopRequireDefault(_Notice);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var seed = 0;
	var now = Date.now();
	
	function getUuid() {
	  return 'uNotification_' + now + '_' + seed++;
	}
	
	var propTypes = {
	  show: _propTypes2["default"].bool,
	  clsPrefix: _propTypes2["default"].string,
	  style: _propTypes2["default"].object,
	  position: _propTypes2["default"].oneOf(['topRight', 'bottomRight', '']),
	  transitionName: _propTypes2["default"].string,
	  keyboard: _propTypes2["default"].bool, // 按esc键是否关闭notice
	  onEscapeKeyUp: _propTypes2["default"].func, // 设置esc键特殊钩子函数
	  animation: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object])
	};
	
	var defaultProps = {
	  clsPrefix: 'u-notification',
	  animation: 'fade',
	  keyboard: true,
	  position: 'topRight'
	};
	
	var Notification = function (_Component) {
	  _inherits(Notification, _Component);
	
	  function Notification(props) {
	    _classCallCheck(this, Notification);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.handleDocumentKeyUp = function (e) {
	      if (_this.props.keyboard && e.keyCode === 27 && _this.state.notices.length) {
	        _this.setState(function (previousState) {
	          previousState.notices.shift();
	          return {
	            notices: previousState.notices
	          };
	        });
	        if (_this.props.onEscapeKeyUp) {
	          _this.props.onEscapeKeyUp(e);
	        }
	      }
	    };
	
	    _this.state = {
	      notices: []
	    };
	    _this.add = _this.add.bind(_this);
	    _this.remove = _this.remove.bind(_this);
	
	    return _this;
	  }
	
	  Notification.prototype.componentDidMount = function componentDidMount() {
	    // 给document绑定keyup事件
	    var doc = (0, _ownerDocument2["default"])(this);
	    this._onDocumentKeyupListener = (0, _addEventListener2["default"])(doc, 'keyup', this.handleDocumentKeyUp);
	  };
	
	  Notification.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._onDocumentKeyupListener.remove();
	  };
	
	  Notification.prototype.getTransitionName = function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.clsPrefix + '-' + props.animation;
	    }
	    return transitionName;
	  };
	
	  Notification.prototype.add = function add(notice) {
	    var key = notice.key = notice.key || getUuid();
	    this.setState(function (previousState) {
	      var notices = previousState.notices;
	      if (!notices.filter(function (v) {
	        return v.key === key;
	      }).length) {
	        return {
	          notices: notices.concat(notice)
	        };
	      }
	    });
	  };
	
	  Notification.prototype.remove = function remove(key) {
	    this.setState(function (previousState) {
	      return {
	        notices: previousState.notices.filter(function (notice) {
	          return notice.key !== key;
	        })
	      };
	    });
	  };
	
	  /**
	   * 处理绑定在document上的keyup事件
	   */
	
	
	  Notification.prototype.render = function render() {
	    var _this2 = this,
	        _classes;
	
	    var _props = this.props,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        position = _props.position,
	        style = _props.style;
	
	    var noticeNodes = this.state.notices.map(function (notice) {
	      var onClose = (0, _createChainedFunction2["default"])(_this2.remove.bind(_this2, notice.key), notice.onClose);
	      return _react2["default"].createElement(
	        _Notice2["default"],
	        _extends({
	          clsPrefix: clsPrefix
	        }, notice, {
	          onClose: onClose
	        }),
	        notice.content
	      );
	    });
	    var classes = (_classes = {}, _defineProperty(_classes, clsPrefix, 1), _defineProperty(_classes, className, !!className), _classes);
	    if (position) {
	      classes[clsPrefix + '-' + position] = !!position;
	    }
	
	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(className, classes), style: style },
	      _react2["default"].createElement(
	        _beeAnimate2["default"],
	        { transitionName: this.getTransitionName() },
	        noticeNodes
	      )
	    );
	  };
	
	  return Notification;
	}(_react.Component);
	
	;
	
	Notification.propTypes = propTypes;
	Notification.defaultProps = defaultProps;
	
	Notification.newInstance = function newNotificationInstance(properties, callback) {
	  if (typeof callback !== 'function') {
	    console.error('You must introduce callback as the second parameter of Notification.newInstance().');
	    return;
	  }
	  var props = properties || {};
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	
	  var called = false;
	  function ref(notification) {
	    if (called) {
	      return;
	    }
	    called = true;
	    callback({
	      notice: function notice(noticeProps) {
	        notification.add(noticeProps);
	      },
	      removeNotice: function removeNotice(key) {
	        notification.remove(key);
	      },
	
	      component: notification,
	      destroy: function destroy() {
	        _reactDom2["default"].unmountComponentAtNode(div);
	        document.body.removeChild(div);
	      }
	    });
	  }
	  _reactDom2["default"].render(_react2["default"].createElement(Notification, _extends({}, props, { ref: ref })), div);
	};
	
	exports["default"] = Notification;
	module.exports = exports['default'];

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Animate = __webpack_require__(69);
	
	var _Animate2 = _interopRequireDefault(_Animate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Animate2["default"];
	module.exports = exports['default'];

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _ChildrenUtils = __webpack_require__(70);
	
	var _AnimateChild = __webpack_require__(71);
	
	var _AnimateChild2 = _interopRequireDefault(_AnimateChild);
	
	var _util = __webpack_require__(72);
	
	var _util2 = _interopRequireDefault(_util);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var defaultKey = 'u_animate_' + Date.now();
	
	
	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2["default"].isValidElement(children)) {
	    if (!children.key) {
	      return _react2["default"].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}
	
	function noop() {}
	
	var propTypes = {
	  component: _propTypes2["default"].any,
	  animation: _propTypes2["default"].object,
	  transitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  transitionEnter: _propTypes2["default"].bool,
	  transitionAppear: _propTypes2["default"].bool,
	  exclusive: _propTypes2["default"].bool,
	  transitionLeave: _propTypes2["default"].bool,
	  onEnd: _propTypes2["default"].func,
	  onEnter: _propTypes2["default"].func,
	  onLeave: _propTypes2["default"].func,
	  onAppear: _propTypes2["default"].func,
	  showProp: _propTypes2["default"].string
	};
	
	var defaultProps = {
	  animation: {},
	  component: 'span',
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop,
	  onEnter: noop,
	  onLeave: noop,
	  onAppear: noop
	};
	
	var Animate = function (_Component) {
	  _inherits(Animate, _Component);
	
	  function Animate(props) {
	    _classCallCheck(this, Animate);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];
	    _this.state = {
	      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(_this.props))
	    };
	
	    _this.performEnter = _this.performEnter.bind(_this);
	    _this.performAppear = _this.performAppear.bind(_this);
	    _this.handleDoneAdding = _this.handleDoneAdding.bind(_this);
	    _this.performLeave = _this.performLeave.bind(_this);
	
	    _this.performLeave = _this.performLeave.bind(_this);
	    _this.handleDoneLeaving = _this.handleDoneLeaving.bind(_this);
	    _this.isValidChildByKey = _this.isValidChildByKey.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }
	
	  Animate.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;
	
	    this.mounted = true;
	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      if (child) {
	        _this2.performAppear(child.key);
	      }
	    });
	  };
	
	  Animate.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };
	
	  Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;
	
	    this.nextProps = nextProps;
	    var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this3.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = currentChild && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = void 0;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2["default"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!nextChild || !(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
	    }
	
	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });
	
	    nextChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = child && (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this3.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this3.keysToEnter.push(key);
	      }
	    });
	
	    currentChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = child && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this3.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this3.keysToLeave.push(key);
	      }
	    });
	  };
	
	  Animate.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };
	
	  Animate.prototype.performEnter = function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  };
	
	  Animate.prototype.performAppear = function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  };
	
	  Animate.prototype.handleDoneAdding = function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2["default"].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2["default"].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  };
	
	  Animate.prototype.performLeave = function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  };
	
	  Animate.prototype.handleDoneLeaving = function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      var end = function end() {
	        if (_util2["default"].allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      /* eslint react/no-is-mounted:0 */
	      if (this.mounted && !(0, _ChildrenUtils.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };
	
	  Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	  };
	
	  Animate.prototype.stop = function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  };
	
	  Animate.prototype.render = function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null || child === undefined) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2["default"].createElement(
	          _AnimateChild2["default"],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave
	          },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      var passedProps = props;
	      if (typeof Component === 'string') {
	        passedProps = {
	          className: props.className,
	          style: props.style
	        };
	      }
	      return _react2["default"].createElement(
	        Component,
	        passedProps,
	        children
	      );
	    }
	    return children[0] || null;
	  };
	
	  return Animate;
	}(_react.Component);
	
	;
	Animate.defaultProps = defaultProps;
	Animate.propTypes = Animate.propTypes;
	
	exports["default"] = Animate;
	module.exports = exports['default'];

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function toArrayChildren(children) {
	  var ret = [];
	  _react2["default"].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}
	
	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}
	
	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}
	
	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child && child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}
	
	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}
	
	function mergeChildren(prev, next) {
	  var ret = [];
	
	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });
	
	  next.forEach(function (child) {
	    if (child && nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });
	
	  ret = ret.concat(pendingChildren);
	
	  return ret;
	}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	var _util = __webpack_require__(72);
	
	var _util2 = _interopRequireDefault(_util);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};
	
	var propTypes = {
	  children: _propTypes2["default"].any
	};
	
	var AnimateChild = function (_Component) {
	  _inherits(AnimateChild, _Component);
	
	  function AnimateChild(props) {
	    _classCallCheck(this, AnimateChild);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.transition = _this.transition.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }
	
	  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stop();
	  };
	
	  AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {
	    if (_util2["default"].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  };
	
	  AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {
	    if (_util2["default"].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  };
	
	  AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {
	    if (_util2["default"].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      // always sync, do not interupt with react component life cycle
	      // update hidden -> animate hidden ->
	      // didUpdate -> animate leave -> unmount (if animate is none)
	      done();
	    }
	  };
	
	  AnimateChild.prototype.transition = function transition(animationType, finishCallback) {
	    var _this2 = this;
	
	    var node = _reactDom2["default"].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	    this.stop();
	    var end = function end() {
	      _this2.stopper = null;
	      finishCallback();
	    };
	    if ((_tinperBeeCore.cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	      var activeName = name + '-active';
	      if (nameIsObj && transitionName[animationType + 'Active']) {
	        activeName = transitionName[animationType + 'Active'];
	      }
	      this.stopper = (0, _tinperBeeCore.cssAnimation)(node, {
	        name: name,
	        active: activeName
	      }, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  };
	
	  AnimateChild.prototype.stop = function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  };
	
	  AnimateChild.prototype.render = function render() {
	    return this.props.children;
	  };
	
	  return AnimateChild;
	}(_react.Component);
	
	;
	
	AnimateChild.propTypes = propTypes;
	
	exports["default"] = AnimateChild;
	module.exports = exports['default'];

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports["default"] = function (componentOrElement) {
	  return (0, _ownerDocument2["default"])(_reactDom2["default"].findDOMNode(componentOrElement));
	};
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	module.exports = exports['default'];

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ownerDocument;
	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}
	module.exports = exports["default"];

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports["default"] = function (node, event, handler, capture) {
	  (0, _on2["default"])(node, event, handler, capture);
	
	  return {
	    remove: function remove() {
	      (0, _off2["default"])(node, event, handler, capture);
	    }
	  };
	};
	
	var _on = __webpack_require__(15);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _off = __webpack_require__(76);
	
	var _off2 = _interopRequireDefault(_off);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	module.exports = exports['default'];

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var off = function off() {};
	if (_inDOM2.default) {
	  off = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  }();
	}
	
	exports.default = off;
	module.exports = exports['default'];

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _beeIcon = __webpack_require__(78);
	
	var _beeIcon2 = _interopRequireDefault(_beeIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  duration: _propTypes2["default"].number,
	  onClose: _propTypes2["default"].func,
	  children: _propTypes2["default"].any,
	  color: _propTypes2["default"].oneOf(['info', 'success', 'danger', 'warning', 'light', 'dark', 'news', 'infolight', 'successlight', 'dangerlight', 'warninglight']),
	  title: _propTypes2["default"].any
	};
	
	function noop() {}
	
	var defaultProps = {
	  onEnd: noop,
	  onClose: noop,
	  duration: 4.5,
	  closable: true
	};
	
	var Notice = function (_React$Component) {
	  _inherits(Notice, _React$Component);
	
	  function Notice(props) {
	    _classCallCheck(this, Notice);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _this.clearCloseTimer = _this.clearCloseTimer.bind(_this);
	    _this.close = _this.close.bind(_this);
	    return _this;
	  }
	
	  Notice.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;
	
	    if (this.props.duration) {
	      this.closeTimer = setTimeout(function () {
	        _this2.close();
	      }, this.props.duration * 1000);
	    }
	  };
	
	  Notice.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.clearCloseTimer();
	  };
	
	  Notice.prototype.clearCloseTimer = function clearCloseTimer() {
	    if (this.closeTimer) {
	      clearTimeout(this.closeTimer);
	      this.closeTimer = null;
	    }
	  };
	
	  Notice.prototype.close = function close() {
	    this.clearCloseTimer();
	    this.props.onClose();
	  };
	
	  Notice.prototype.render = function render() {
	    var _classes;
	
	    var _props = this.props,
	        closable = _props.closable,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        style = _props.style,
	        children = _props.children,
	        color = _props.color,
	        title = _props.title;
	
	    var componentClass = clsPrefix + '-notice';
	    var classes = (_classes = {}, _defineProperty(_classes, '' + componentClass, 1), _defineProperty(_classes, componentClass + '-closable', closable), _defineProperty(_classes, className, !!className), _classes);
	    if (color) {
	      classes[componentClass + '-' + color] = true;
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(classes), style: style, onClick: this.close },
	      _react2["default"].createElement(
	        'div',
	        { className: componentClass + '-content' },
	        title && _react2["default"].createElement(
	          'div',
	          { className: componentClass + '-title' },
	          title
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: componentClass + '-description' },
	          children
	        )
	      ),
	      closable ? _react2["default"].createElement(
	        'a',
	        { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
	        _react2["default"].createElement(
	          'span',
	          { className: componentClass + '-close-x' },
	          _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-close' })
	        )
	      ) : null
	    );
	  };
	
	  return Notice;
	}(_react2["default"].Component);
	
	;
	
	Notice.propTypes = propTypes;
	Notice.defaultProps = defaultProps;
	
	exports["default"] = Notice;
	module.exports = exports['default'];

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Icon = __webpack_require__(79);
	
	var _Icon2 = _interopRequireDefault(_Icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Icon2["default"];
	module.exports = exports['default'];

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
		type: _propTypes2["default"].string
	
	};
	/**
	 *  badge 默认显示内容1
	 */
	var defaultProps = {
		clsPrefix: 'uf'
	};
	
	var Icon = function (_Component) {
		_inherits(Icon, _Component);
	
		function Icon(props) {
			_classCallCheck(this, Icon);
	
			return _possibleConstructorReturn(this, _Component.call(this, props));
		}
	
		Icon.prototype.render = function render() {
			var _props = this.props,
			    type = _props.type,
			    className = _props.className,
			    clsPrefix = _props.clsPrefix,
			    others = _objectWithoutProperties(_props, ['type', 'className', 'clsPrefix']);
	
			var clsObj = {};
	
			var classNames = (0, _classnames2["default"])(clsPrefix, type);
	
			return _react2["default"].createElement('i', _extends({}, others, { className: (0, _classnames2["default"])(classNames, className) }));
		};
	
		return Icon;
	}(_react.Component);
	
	Icon.defaultProps = defaultProps;
	Icon.propTypes = propTypes;
	
	exports["default"] = Icon;
	module.exports = exports['default'];

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var deselectCurrent = __webpack_require__(81);
	
	var defaultMessage = "Copy to clipboard: #{key}, Enter";
	
	function format(message) {
	  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
	  return message.replace(/#{\s*key\s*}/g, copyKey);
	}
	
	function copy(text, options) {
	  var debug,
	    message,
	    reselectPrevious,
	    range,
	    selection,
	    mark,
	    success = false;
	  if (!options) {
	    options = {};
	  }
	  debug = options.debug || false;
	  try {
	    reselectPrevious = deselectCurrent();
	
	    range = document.createRange();
	    selection = document.getSelection();
	
	    mark = document.createElement("span");
	    mark.textContent = text;
	    // reset user styles for span element
	    mark.style.all = "unset";
	    // prevents scrolling to the end of the page
	    mark.style.position = "fixed";
	    mark.style.top = 0;
	    mark.style.clip = "rect(0, 0, 0, 0)";
	    // used to preserve spaces and line breaks
	    mark.style.whiteSpace = "pre";
	    // do not inherit user-select (it may be `none`)
	    mark.style.webkitUserSelect = "text";
	    mark.style.MozUserSelect = "text";
	    mark.style.msUserSelect = "text";
	    mark.style.userSelect = "text";
	    mark.addEventListener("copy", function(e) {
	      e.stopPropagation();
	      if (options.format) {
	        e.preventDefault();
	        e.clipboardData.clearData();
	        e.clipboardData.setData(options.format, text);
	      }
	    });
	
	    document.body.appendChild(mark);
	
	    range.selectNodeContents(mark);
	    selection.addRange(range);
	
	    var successful = document.execCommand("copy");
	    if (!successful) {
	      throw new Error("copy command was unsuccessful");
	    }
	    success = true;
	  } catch (err) {
	    debug && console.error("unable to copy using execCommand: ", err);
	    debug && console.warn("trying IE specific stuff");
	    try {
	      window.clipboardData.setData(options.format || "text", text);
	      success = true;
	    } catch (err) {
	      debug && console.error("unable to copy using clipboardData: ", err);
	      debug && console.error("falling back to prompt");
	      message = format("message" in options ? options.message : defaultMessage);
	      window.prompt(message, text);
	    }
	  } finally {
	    if (selection) {
	      if (typeof selection.removeRange == "function") {
	        selection.removeRange(range);
	      } else {
	        selection.removeAllRanges();
	      }
	    }
	
	    if (mark) {
	      document.body.removeChild(mark);
	    }
	    reselectPrevious();
	  }
	
	  return success;
	}
	
	module.exports = copy;


/***/ }),
/* 81 */
/***/ (function(module, exports) {

	
	module.exports = function () {
	  var selection = document.getSelection();
	  if (!selection.rangeCount) {
	    return function () {};
	  }
	  var active = document.activeElement;
	
	  var ranges = [];
	  for (var i = 0; i < selection.rangeCount; i++) {
	    ranges.push(selection.getRangeAt(i));
	  }
	
	  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
	    case 'INPUT':
	    case 'TEXTAREA':
	      active.blur();
	      break;
	
	    default:
	      active = null;
	      break;
	  }
	
	  selection.removeAllRanges();
	  return function () {
	    selection.type === 'Caret' &&
	    selection.removeAllRanges();
	
	    if (!selection.rangeCount) {
	      ranges.forEach(function(range) {
	        selection.addRange(range);
	      });
	    }
	
	    active &&
	    active.focus();
	  };
	};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  //是否是手风琴效果
	  accordion: _propTypes2["default"].bool,
	  //激活的项
	  activeKey: _propTypes2["default"].any,
	  //默认的激活的项
	  defaultActiveKey: _propTypes2["default"].any,
	  //选中函数
	  onSelect: _propTypes2["default"].func,
	  role: _propTypes2["default"].string
	};
	
	var defaultProps = {
	  accordion: false,
	  clsPrefix: 'u-panel-group'
	};
	
	// TODO: Use uncontrollable.
	
	var PanelGroup = function (_React$Component) {
	  _inherits(PanelGroup, _React$Component);
	
	  function PanelGroup(props, context) {
	    _classCallCheck(this, PanelGroup);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.handleSelect = _this.handleSelect.bind(_this);
	
	    _this.state = {
	      activeKey: props.defaultActiveKey
	    };
	    return _this;
	  }
	
	  PanelGroup.prototype.handleSelect = function handleSelect(key, e) {
	    e.preventDefault();
	
	    if (this.props.onSelect) {
	      this.props.onSelect(key, e);
	    }
	
	    if (this.state.activeKey === key) {
	      key = null;
	    }
	
	    this.setState({ activeKey: key });
	  };
	
	  PanelGroup.prototype.render = function render() {
	    var _this2 = this;
	
	    var _props = this.props,
	        accordion = _props.accordion,
	        propsActiveKey = _props.activeKey,
	        className = _props.className,
	        children = _props.children,
	        defaultActiveKey = _props.defaultActiveKey,
	        onSelect = _props.onSelect,
	        style = _props.style,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['accordion', 'activeKey', 'className', 'children', 'defaultActiveKey', 'onSelect', 'style', 'clsPrefix']);
	
	    var activeKey = void 0;
	    if (accordion) {
	      activeKey = propsActiveKey != null ? propsActiveKey : this.state.activeKey;
	      others.role = others.role || 'tablist';
	    }
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(className, classes)
	      }),
	      _react2["default"].Children.map(children, function (child) {
	        if (!_react2["default"].isValidElement(child)) {
	          return child;
	        }
	        var childProps = {
	          style: child.props.style
	        };
	
	        if (accordion) {
	          _extends(childProps, {
	            headerRole: 'tab',
	            panelRole: 'tabpanel',
	            collapsible: true,
	            expanded: child.props.eventKey === activeKey,
	            onSelect: (0, _tinperBeeCore.createChainedFunction)(_this2.handleSelect, child.props.onSelect)
	          });
	        }
	
	        return (0, _react.cloneElement)(child, childProps);
	      })
	    );
	  };
	
	  return PanelGroup;
	}(_react2["default"].Component);
	
	PanelGroup.propTypes = propTypes;
	PanelGroup.defaultProps = defaultProps;
	
	exports["default"] = PanelGroup;
	module.exports = exports['default'];

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Drawer = __webpack_require__(84);
	
	var _Drawer2 = _interopRequireDefault(_Drawer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Drawer2["default"];
	module.exports = exports['default'];

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _common = __webpack_require__(85);
	
	var _reactTransitionGroup = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
		placement: _propTypes2["default"].oneOf(['left', 'right', 'top', 'bottom']),
		hasHeader: _propTypes2["default"].bool,
		show: _propTypes2["default"].bool,
		title: _propTypes2["default"].string,
		className: _propTypes2["default"].string,
		showMask: _propTypes2["default"].bool,
		maskClosable: _propTypes2["default"].bool,
		zIndex: _propTypes2["default"].number,
		showClose: _propTypes2["default"].bool,
		width: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
		height: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
		destroyOnClose: _propTypes2["default"].bool,
		container: _propTypes2["default"].string
	};
	
	var defaultProps = {
		placement: 'left',
		hasHeader: true,
		show: false,
		showMask: true,
		maskClosable: true,
		zIndex: 100000,
		showClose: false,
		width: 'auto',
		height: 'auto',
		destroyOnClose: false,
		container: 'body'
	};
	
	var DrawerContext = _react2["default"].createContext(null);
	
	var Drawer = function (_Component) {
		_inherits(Drawer, _Component);
	
		function Drawer(props) {
			_classCallCheck(this, Drawer);
	
			var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
			_this.state = {
				showDrawer: true,
				width: '0',
				push: false
			};
			_this.drawer = null;
			_this.parentDrawer = null;
			(0, _common.bindAll)(_this, ['fMaskClick', 'fDrawerTransitionEnd', 'renderMask', 'renderClose', 'fCloseClick', 'renderBody', 'renderAll']);
			return _this;
		}
	
		Drawer.prototype.componentDidUpdate = function componentDidUpdate(preProps) {
			//在有父级抽屉时候，子级触发父级向外移动一段距离
			if (preProps.show != this.props.show && this.parentDrawer) {
				if (this.props.show) {
					this.parentDrawer.push();
				} else {
					this.parentDrawer.pull();
				}
			}
		};
	
		Drawer.prototype.push = function push() {
			this.setState({
				push: true
			});
		};
	
		Drawer.prototype.pull = function pull() {
			this.setState({
				push: false
			});
		};
	
		Drawer.prototype.fMaskClick = function fMaskClick() {
			var maskClosable = this.props.maskClosable;
	
			if (maskClosable) {
				var onClose = this.props.onClose;
	
				onClose && onClose();
			}
		};
	
		Drawer.prototype.fCloseClick = function fCloseClick() {
			var onClose = this.props.onClose;
	
			onClose && onClose();
		};
	
		Drawer.prototype.fDrawerTransitionEnd = function fDrawerTransitionEnd(e) {};
	
		Drawer.prototype.renderMask = function renderMask() {
			var _props = this.props,
			    show = _props.show,
			    showMask = _props.showMask,
			    fMaskClick = _props.fMaskClick;
			//mask样式
	
			var maskStyle = void 0;
			if (show) {
				maskStyle = {
					opacity: 1,
					width: '100%'
				};
			} else {
				maskStyle = {
					opacity: 0,
					width: 0
				};
			}
			return showMask ? _react2["default"].createElement('div', { className: 'drawer-mask', style: maskStyle, onClick: this.fMaskClick }) : null;
		};
	
		Drawer.prototype.renderClose = function renderClose() {
			var showClose = this.props.showClose;
	
			return showClose ? _react2["default"].createElement(
				'i',
				{ className: 'drawer-close', onClick: this.fCloseClick },
				'\xD7'
			) : null;
		};
	
		Drawer.prototype.renderBody = function renderBody() {
			var _this2 = this;
	
			var _props2 = this.props,
			    destroyOnClose = _props2.destroyOnClose,
			    show = _props2.show;
	
			if (destroyOnClose && !show) {
				return null;
			}
			var _props3 = this.props,
			    hasHeader = _props3.hasHeader,
			    title = _props3.title,
			    children = _props3.children,
			    width = _props3.width,
			    height = _props3.height,
			    placement = _props3.placement;
			var push = this.state.push;
			//抽屉类
	
			var drawerClass = (0, _classnames2["default"])('drawer', 'drawer-' + placement);
			//根据位置获取抽屉样式
			var translateHideMap = {
				left: 'translateX(-100%)',
				right: 'translateX(100%)',
				top: 'translateY(-100%)',
				bottom: 'translateY(100%)'
			};
			var translateShow = 'translate(0,0)';
			if (push) {
				var pushNum = 50;
				var translateShowMap = {
					left: 'translate(' + pushNum + 'px,0)',
					right: 'translate(-' + pushNum + 'px,0)',
					top: 'translate(0,' + pushNum + 'px)',
					bottom: 'translate(0,-' + pushNum + 'px)'
				};
				translateShow = translateShowMap[placement];
			}
			var translate = show ? translateShow : translateHideMap[placement];
			//抽屉面板样式
			if ((0, _common.isNumber)(width)) {
				width = width + 'px';
			}
			if ((0, _common.isNumber)(height)) {
				height = height + 'px';
			}
			if (placement == 'top' || placement == 'bottom') {
				if (width == 'auto') {
					width = '100%';
				}
			}
			if (placement == 'left' || placement == 'right') {
				if (height == 'auto') {
					height = '100%';
				}
			}
			var drawerStyle = {
				transform: translate,
				WebkitTransform: translate,
				width: width,
				height: height
			};
			var closer = this.renderClose();
			var header = hasHeader ? _react2["default"].createElement(
				'div',
				{ className: 'drawer-header' },
				_react2["default"].createElement(
					'div',
					{ className: 'drawer-header-title' },
					title
				)
			) : '';
			return _react2["default"].createElement(
				DrawerContext.Provider,
				{ value: this },
				_react2["default"].createElement(
					'div',
					{ ref: function ref(drawer) {
							_this2.drawer = drawer;
						}, onTransitionEnd: this.fDrawerTransitionEnd, className: drawerClass, style: drawerStyle },
					closer,
					header,
					_react2["default"].createElement(
						'div',
						{ className: 'drawer-body' },
						children
					)
				)
			);
		};
	
		Drawer.prototype.renderAll = function renderAll(value) {
			var _props4 = this.props,
			    show = _props4.show,
			    className = _props4.className,
			    zIndex = _props4.zIndex;
			//容器类
	
			var drawercClass = (0, _classnames2["default"])('drawerc', className);
			//容器样式
			var drawercStyle = { zIndex: zIndex };
			if (show) {
				drawercStyle.width = '100%';
			} else {
				drawercStyle.width = 0;
			}
			//获取父级抽屉
			this.parentDrawer = value;
	
			return _react2["default"].createElement(
				'div',
				{ className: drawercClass, style: drawercStyle },
				this.renderMask(),
				this.renderBody()
			);
		};
	
		Drawer.prototype.render = function render() {
			var container = this.props.container;
	
			var conDom = document.querySelector(container);
	
			return _reactDom2["default"].createPortal(_react2["default"].createElement(
				DrawerContext.Consumer,
				null,
				this.renderAll
			), conDom);
		};
	
		return Drawer;
	}(_react.Component);
	
	Drawer.propTypes = propTypes;
	Drawer.defaultProps = defaultProps;
	
	exports["default"] = Drawer;
	module.exports = exports['default'];

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.bindAll = bindAll;
	exports.type = type;
	exports.isNumber = isNumber;
	function bindAll(context, arrFunc) {
	    arrFunc.forEach(function (item) {
	        context[item] = context[item].bind(context);
	    });
	}
	
	function type(obj) {
	    var toString = Object.prototype.toString;
	    return toString.call(obj);
	}
	
	function isNumber(obj) {
	    return type(obj) == '[object Number]';
	}

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _CSSTransition = _interopRequireDefault(__webpack_require__(87));
	
	var _ReplaceTransition = _interopRequireDefault(__webpack_require__(94));
	
	var _TransitionGroup = _interopRequireDefault(__webpack_require__(95));
	
	var _Transition = _interopRequireDefault(__webpack_require__(91));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	module.exports = {
	  Transition: _Transition.default,
	  TransitionGroup: _TransitionGroup.default,
	  ReplaceTransition: _ReplaceTransition.default,
	  CSSTransition: _CSSTransition.default
	};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var PropTypes = _interopRequireWildcard(__webpack_require__(6));
	
	var _addClass = _interopRequireDefault(__webpack_require__(88));
	
	var _removeClass = _interopRequireDefault(__webpack_require__(90));
	
	var _react = _interopRequireDefault(__webpack_require__(1));
	
	var _Transition = _interopRequireDefault(__webpack_require__(91));
	
	var _PropTypes = __webpack_require__(93);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
	
	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	var addClass = function addClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _addClass.default)(node, c);
	  });
	};
	
	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _removeClass.default)(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
	 * using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity: 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**.
	 */
	
	
	var CSSTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);
	
	  function CSSTransition() {
	    var _this;
	
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	
	    _this.onEnter = function (node, appearing) {
	      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          className = _this$getClassNames.className;
	
	      _this.removeClasses(node, 'exit');
	
	      addClass(node, className);
	
	      if (_this.props.onEnter) {
	        _this.props.onEnter(node, appearing);
	      }
	    };
	
	    _this.onEntering = function (node, appearing) {
	      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          activeClassName = _this$getClassNames2.activeClassName;
	
	      _this.reflowAndAddClass(node, activeClassName);
	
	      if (_this.props.onEntering) {
	        _this.props.onEntering(node, appearing);
	      }
	    };
	
	    _this.onEntered = function (node, appearing) {
	      var appearClassName = _this.getClassNames('appear').doneClassName;
	
	      var enterClassName = _this.getClassNames('enter').doneClassName;
	
	      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;
	
	      _this.removeClasses(node, appearing ? 'appear' : 'enter');
	
	      addClass(node, doneClassName);
	
	      if (_this.props.onEntered) {
	        _this.props.onEntered(node, appearing);
	      }
	    };
	
	    _this.onExit = function (node) {
	      var _this$getClassNames3 = _this.getClassNames('exit'),
	          className = _this$getClassNames3.className;
	
	      _this.removeClasses(node, 'appear');
	
	      _this.removeClasses(node, 'enter');
	
	      addClass(node, className);
	
	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    };
	
	    _this.onExiting = function (node) {
	      var _this$getClassNames4 = _this.getClassNames('exit'),
	          activeClassName = _this$getClassNames4.activeClassName;
	
	      _this.reflowAndAddClass(node, activeClassName);
	
	      if (_this.props.onExiting) {
	        _this.props.onExiting(node);
	      }
	    };
	
	    _this.onExited = function (node) {
	      var _this$getClassNames5 = _this.getClassNames('exit'),
	          doneClassName = _this$getClassNames5.doneClassName;
	
	      _this.removeClasses(node, 'exit');
	
	      addClass(node, doneClassName);
	
	      if (_this.props.onExited) {
	        _this.props.onExited(node);
	      }
	    };
	
	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
	      var className = isStringClassNames ? prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
	      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
	      return {
	        className: className,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };
	
	    return _this;
	  }
	
	  var _proto = CSSTransition.prototype;
	
	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$getClassNames6 = this.getClassNames(type),
	        className = _this$getClassNames6.className,
	        activeClassName = _this$getClassNames6.activeClassName,
	        doneClassName = _this$getClassNames6.doneClassName;
	
	    className && removeClass(node, className);
	    activeClassName && removeClass(node, activeClassName);
	    doneClassName && removeClass(node, doneClassName);
	  };
	
	  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
	    // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.
	    if (className) {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	      /* eslint-enable no-unused-expressions */
	
	      addClass(node, className);
	    }
	  };
	
	  _proto.render = function render() {
	    var props = _extends({}, this.props);
	
	    delete props.classNames;
	    return _react.default.createElement(_Transition.default, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };
	
	  return CSSTransition;
	}(_react.default.Component);
	
	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, _Transition.default.propTypes, {
	  /**
	   * The animation classNames applied to the component as it enters, exits or
	   * has finished the transition. A single name can be provided and it will be
	   * suffixed for each stage: e.g.
	   *
	   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
	   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
	   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
	   *
	   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
	   * This allows you to define different behavior for when appearing is done and
	   * when regular entering is done, using selectors like
	   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
	   * epic entrance animation when element first appears in the DOM using
	   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   * simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: _PropTypes.classNamesShape,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: PropTypes.func
	}) : {};
	var _default = CSSTransition;
	exports.default = _default;
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addClass;
	
	var _hasClass = __webpack_require__(89);
	
	var _hasClass2 = _interopRequireDefault(_hasClass);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element)) element.className = element.className + ' ' + className;
	}
	module.exports = exports['default'];

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hasClass;
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
	}
	module.exports = exports["default"];

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.__esModule = true;
	exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
	
	var PropTypes = _interopRequireWildcard(__webpack_require__(6));
	
	var _react = _interopRequireDefault(__webpack_require__(1));
	
	var _reactDom = _interopRequireDefault(__webpack_require__(2));
	
	var _reactLifecyclesCompat = __webpack_require__(92);
	
	var _PropTypes = __webpack_require__(93);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	var UNMOUNTED = 'unmounted';
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 'exited';
	exports.EXITED = EXITED;
	var ENTERING = 'entering';
	exports.ENTERING = ENTERING;
	var ENTERED = 'entered';
	exports.ENTERED = ENTERED;
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 0 },
	 *   entered:  { opacity: 1 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */
	
	exports.EXITING = EXITING;
	
	var Transition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);
	
	  function Transition(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears
	
	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;
	
	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }
	
	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }
	
	  var _proto = Transition.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: null // allows for nested Transitions
	
	    };
	  };
	
	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;
	
	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }
	
	    return null;
	  }; // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;
	
	    if (prevProps !== this.props) {
	      var status = this.state.status;
	
	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }
	
	    this.updateStatus(false, nextStatus);
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };
	
	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;
	
	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major
	
	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }
	
	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };
	
	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }
	
	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();
	
	      var node = _reactDom.default.findDOMNode(this);
	
	      if (nextStatus === ENTERING) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };
	
	  _proto.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;
	
	    var enter = this.props.enter;
	    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set
	
	    if (!mounting && !enter) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }
	
	    this.props.onEnter(node, appearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(node, appearing);
	
	      _this2.onTransitionEnd(node, enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };
	
	  _proto.performExit = function performExit(node) {
	    var _this3 = this;
	
	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED
	
	    if (!exit) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }
	
	    this.props.onExit(node);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(node);
	
	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };
	
	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };
	
	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };
	
	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;
	
	    var active = true;
	
	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };
	
	    this.nextCallback.cancel = function () {
	      active = false;
	    };
	
	    return this.nextCallback;
	  };
	
	  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
	
	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }
	
	    if (this.props.addEndListener) {
	      this.props.addEndListener(node, this.nextCallback);
	    }
	
	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };
	
	  _proto.render = function render() {
	    var status = this.state.status;
	
	    if (status === UNMOUNTED) {
	      return null;
	    }
	
	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition
	
	
	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;
	
	    if (typeof children === 'function') {
	      return children(status, childProps);
	    }
	
	    var child = _react.default.Children.only(children);
	
	    return _react.default.cloneElement(child, childProps);
	  };
	
	  return Transition;
	}(_react.default.Component);
	
	Transition.contextTypes = {
	  transitionGroup: PropTypes.object
	};
	Transition.childContextTypes = {
	  transitionGroup: function transitionGroup() {}
	};
	Transition.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
	
	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes.bool,
	
	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes.bool,
	
	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes.bool,
	
	  /**
	   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
	   * If you want to transition on the first mount set `appear` to `true`, and the
	   * component will transition in as soon as the `<Transition>` mounts.
	   *
	   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
	   */
	  appear: PropTypes.bool,
	
	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes.bool,
	
	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes.bool,
	
	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = _PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;
	
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    return pt.apply(void 0, [props].concat(args));
	  },
	
	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes.func,
	
	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes.func,
	
	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,
	
	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes.func,
	
	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes.func,
	
	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes.func,
	
	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes.func // Name the function so it is clearer in the documentation
	
	} : {};
	
	function noop() {}
	
	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = 0;
	Transition.EXITED = 1;
	Transition.ENTERING = 2;
	Transition.ENTERED = 3;
	Transition.EXITING = 4;
	
	var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);
	
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}
	
	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}
	
	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}
	
	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;
	
	function polyfill(Component) {
	  var prototype = Component.prototype;
	
	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }
	
	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }
	
	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';
	
	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }
	
	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }
	
	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }
	
	    prototype.componentWillUpdate = componentWillUpdate;
	
	    var componentDidUpdate = prototype.componentDidUpdate;
	
	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;
	
	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }
	
	  return Component;
	}
	
	exports.polyfill = polyfill;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.__esModule = true;
	exports.classNamesShape = exports.timeoutsShape = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(6));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var timeoutsShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	  enter: _propTypes.default.number,
	  exit: _propTypes.default.number,
	  appear: _propTypes.default.number
	}).isRequired]) : null;
	exports.timeoutsShape = timeoutsShape;
	var classNamesShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  active: _propTypes.default.string
	}), _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  enterDone: _propTypes.default.string,
	  enterActive: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  exitDone: _propTypes.default.string,
	  exitActive: _propTypes.default.string
	})]) : null;
	exports.classNamesShape = classNamesShape;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(6));
	
	var _react = _interopRequireDefault(__webpack_require__(1));
	
	var _reactDom = __webpack_require__(2);
	
	var _TransitionGroup = _interopRequireDefault(__webpack_require__(95));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */
	var ReplaceTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);
	
	  function ReplaceTransition() {
	    var _this;
	
	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }
	
	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
	
	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      return _this.handleLifecycle('onEnter', 0, args);
	    };
	
	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }
	
	      return _this.handleLifecycle('onEntering', 0, args);
	    };
	
	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }
	
	      return _this.handleLifecycle('onEntered', 0, args);
	    };
	
	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }
	
	      return _this.handleLifecycle('onExit', 1, args);
	    };
	
	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }
	
	      return _this.handleLifecycle('onExiting', 1, args);
	    };
	
	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }
	
	      return _this.handleLifecycle('onExited', 1, args);
	    };
	
	    return _this;
	  }
	
	  var _proto = ReplaceTransition.prototype;
	
	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;
	
	    var children = this.props.children;
	
	    var child = _react.default.Children.toArray(children)[idx];
	
	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
	    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
	
	    var _React$Children$toArr = _react.default.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];
	
	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : _react.default.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };
	
	  return ReplaceTransition;
	}(_react.default.Component);
	
	ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
	  in: _propTypes.default.bool.isRequired,
	  children: function children(props, propName) {
	    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} : {};
	var _default = ReplaceTransition;
	exports.default = _default;
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(6));
	
	var _react = _interopRequireDefault(__webpack_require__(1));
	
	var _reactLifecyclesCompat = __webpack_require__(92);
	
	var _ChildMapping = __webpack_require__(96);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
	
	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};
	
	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	  /**
	   * The `<TransitionGroup>` component manages a set of transition components
	   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	   * components, `<TransitionGroup>` is a state machine for managing the mounting
	   * and unmounting of components over time.
	   *
	   * Consider the example below. As items are removed or added to the TodoList the
	   * `in` prop is toggled automatically by the `<TransitionGroup>`.
	   *
	   * Note that `<TransitionGroup>`  does not define any animation behavior!
	   * Exactly _how_ a list item animates is up to the individual transition
	   * component. This means you can mix and match animations across different list
	   * items.
	   */
	
	};
	
	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);
	
	  function TransitionGroup(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	
	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear
	
	
	    _this.state = {
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }
	
	  var _proto = TransitionGroup.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: {
	        isMounting: !this.appeared
	      }
	    };
	  };
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	    this.mounted = true;
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };
	
	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  };
	
	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
	    if (child.key in currentChildMapping) return;
	
	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }
	
	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);
	
	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
	
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;
	
	    if (Component === null) {
	      return children;
	    }
	
	    return _react.default.createElement(Component, props, children);
	  };
	
	  return TransitionGroup;
	}(_react.default.Component);
	
	TransitionGroup.childContextTypes = {
	  transitionGroup: _propTypes.default.object.isRequired
	};
	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: _propTypes.default.any,
	
	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: _propTypes.default.node,
	
	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes.default.bool,
	
	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes.default.bool,
	
	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: _propTypes.default.bool,
	
	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes.default.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;
	
	var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);
	
	exports.default = _default;
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	exports.getInitialChildMapping = getInitialChildMapping;
	exports.getNextChildMapping = getNextChildMapping;
	
	var _react = __webpack_require__(1);
	
	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
	  };
	
	  var result = Object.create(null);
	  if (children) _react.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	
	
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};
	
	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	
	
	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];
	
	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }
	
	  var i;
	  var childMapping = {};
	
	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	
	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`
	
	
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }
	
	  return childMapping;
	}
	
	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}
	
	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return (0, _react.cloneElement)(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!(0, _react.isValidElement)(child)) return;
	    var hasPrev = key in prevChildMapping;
	    var hasNext = key in nextChildMapping;
	    var prevChild = prevChildMapping[key];
	    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)
	
	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Clipboard = __webpack_require__(98);
	
	var _Clipboard2 = _interopRequireDefault(_Clipboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Clipboard2["default"];
	module.exports = exports['default'];

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _clipboard = __webpack_require__(99);
	
	var _clipboard2 = _interopRequireDefault(_clipboard);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _beeIcon = __webpack_require__(78);
	
	var _beeIcon2 = _interopRequireDefault(_beeIcon);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _beeTooltip = __webpack_require__(107);
	
	var _beeTooltip2 = _interopRequireDefault(_beeTooltip);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _tool = __webpack_require__(130);
	
	var _i18n = __webpack_require__(131);
	
	var _i18n2 = _interopRequireDefault(_i18n);
	
	var _beeModal = __webpack_require__(132);
	
	var _beeModal2 = _interopRequireDefault(_beeModal);
	
	var _beeFormControl = __webpack_require__(262);
	
	var _beeFormControl2 = _interopRequireDefault(_beeFormControl);
	
	var _beeButton = __webpack_require__(260);
	
	var _beeButton2 = _interopRequireDefault(_beeButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	//text和target都写的时候，target无效。 text的cut改为copy。
	// target可以传css3选择器
	var propTypes = {
	    action: _propTypes2["default"].oneOf(['copy', 'cut', null]),
	    text: _propTypes2["default"].string,
	    success: _propTypes2["default"].func,
	    error: _propTypes2["default"].func,
	    locale: _propTypes2["default"].object
	};
	var defaultProps = {
	    action: 'copy',
	    text: '',
	    target: '',
	    success: function success() {},
	    error: function error() {},
	    locale: {}
	};
	
	var Clipboard = function (_Component) {
	    _inherits(Clipboard, _Component);
	
	    function Clipboard(props, context) {
	        _classCallCheck(this, Clipboard);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	        _this.blur = function () {
	            _this.setState({
	                currect: false,
	                ready: false
	            });
	        };
	
	        _this.close = function () {
	            _this.setState({
	                modalShow: false
	            });
	        };
	
	        _this.state = {
	            currect: false,
	            html: '',
	            ready: false,
	            id: 'id' + Math.round(Math.random() * 1000 + 1) + new Date().getTime(),
	            modalShow: false
	        };
	        return _this;
	    }
	
	    Clipboard.prototype.componentWillMount = function componentWillMount() {
	        var self = this;
	        var _props = this.props,
	            success = _props.success,
	            error = _props.error;
	
	
	        var id = this.state.id;
	        var cb = new _clipboard2["default"]('#' + id);
	        cb.on('success', function (e) {
	            self.setState({
	                currect: true,
	                ready: true
	            });
	            e.clearSelection();
	            if (success instanceof Function) success();
	        });
	        cb.on('error', function (e) {
	            self.setState({
	                modalShow: true,
	                html: e.text
	            });
	            _reactDom2["default"].findDOMNode(self.refs.text).select();
	            if (error instanceof Function) error();
	        });
	    };
	
	    Clipboard.prototype.render = function render() {
	        var _props2 = this.props,
	            action = _props2.action,
	            text = _props2.text,
	            target = _props2.target;
	
	        if (text) action = 'copy';
	
	        var locale = (0, _tool.getComponentLocale)(this.props, this.context, 'Clipboard', function () {
	            return _i18n2["default"];
	        });
	        var tootipContent = locale[action];
	        if (this.state.ready) {
	            tootipContent = locale[action + 'Ready'];
	        }
	
	        return _react2["default"].createElement(
	            _beeTooltip2["default"],
	            { className: 'u-clipboard-tooltip',
	                positionTop: '20px',
	                overlay: tootipContent,
	                placement: 'top' },
	            _react2["default"].createElement(
	                'span',
	                {
	                    onMouseOut: this.blur,
	                    className: 'u-clipboard',
	                    id: this.state.id,
	                    'data-clipboard-action': action,
	                    'data-clipboard-target': target,
	                    'data-clipboard-text': text },
	                this.props.children ? this.props.children : _react2["default"].createElement(_beeIcon2["default"], {
	                    className: (0, _classnames2["default"])({
	                        'uf-correct': this.state.currect,
	                        'uf-copy': !this.state.currect
	                    })
	                }),
	                _react2["default"].createElement(
	                    _beeModal2["default"],
	                    { show: this.state.modalShow, onHide: this.close },
	                    _react2["default"].createElement(
	                        _beeModal2["default"].Header,
	                        { closeButton: true },
	                        _react2["default"].createElement(
	                            _beeModal2["default"].Title,
	                            null,
	                            ' Ctrl+C ',
	                            locale['copyToClipboard'],
	                            ' '
	                        )
	                    ),
	                    _react2["default"].createElement(
	                        _beeModal2["default"].Body,
	                        null,
	                        _react2["default"].createElement(_beeFormControl2["default"], { ref: 'text', type: 'text', readOnly: true, value: this.state.html })
	                    ),
	                    _react2["default"].createElement(
	                        _beeModal2["default"].Footer,
	                        null,
	                        _react2["default"].createElement(
	                            _beeButton2["default"],
	                            { onClick: this.close },
	                            ' ',
	                            locale['close'],
	                            ' '
	                        )
	                    )
	                )
	            )
	        );
	    };
	
	    return Clipboard;
	}(_react.Component);
	
	;
	Clipboard.propTypes = propTypes;
	Clipboard.defaultProps = defaultProps;
	exports["default"] = Clipboard;
	module.exports = exports['default'];

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(100), __webpack_require__(102), __webpack_require__(103)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
	        global.clipboard = mod.exports;
	    }
	})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
	    'use strict';
	
	    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);
	
	    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);
	
	    var _goodListener2 = _interopRequireDefault(_goodListener);
	
	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }
	
	    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	
	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }
	
	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }
	
	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();
	
	    function _possibleConstructorReturn(self, call) {
	        if (!self) {
	            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }
	
	        return call && (typeof call === "object" || typeof call === "function") ? call : self;
	    }
	
	    function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	        }
	
	        subClass.prototype = Object.create(superClass && superClass.prototype, {
	            constructor: {
	                value: subClass,
	                enumerable: false,
	                writable: true,
	                configurable: true
	            }
	        });
	        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	    }
	
	    var Clipboard = function (_Emitter) {
	        _inherits(Clipboard, _Emitter);
	
	        /**
	         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
	         * @param {Object} options
	         */
	        function Clipboard(trigger, options) {
	            _classCallCheck(this, Clipboard);
	
	            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));
	
	            _this.resolveOptions(options);
	            _this.listenClick(trigger);
	            return _this;
	        }
	
	        /**
	         * Defines if attributes would be resolved using internal setter functions
	         * or custom functions that were passed in the constructor.
	         * @param {Object} options
	         */
	
	
	        _createClass(Clipboard, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
	                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
	                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
	                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
	            }
	        }, {
	            key: 'listenClick',
	            value: function listenClick(trigger) {
	                var _this2 = this;
	
	                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
	                    return _this2.onClick(e);
	                });
	            }
	        }, {
	            key: 'onClick',
	            value: function onClick(e) {
	                var trigger = e.delegateTarget || e.currentTarget;
	
	                if (this.clipboardAction) {
	                    this.clipboardAction = null;
	                }
	
	                this.clipboardAction = new _clipboardAction2.default({
	                    action: this.action(trigger),
	                    target: this.target(trigger),
	                    text: this.text(trigger),
	                    container: this.container,
	                    trigger: trigger,
	                    emitter: this
	                });
	            }
	        }, {
	            key: 'defaultAction',
	            value: function defaultAction(trigger) {
	                return getAttributeValue('action', trigger);
	            }
	        }, {
	            key: 'defaultTarget',
	            value: function defaultTarget(trigger) {
	                var selector = getAttributeValue('target', trigger);
	
	                if (selector) {
	                    return document.querySelector(selector);
	                }
	            }
	        }, {
	            key: 'defaultText',
	            value: function defaultText(trigger) {
	                return getAttributeValue('text', trigger);
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.listener.destroy();
	
	                if (this.clipboardAction) {
	                    this.clipboardAction.destroy();
	                    this.clipboardAction = null;
	                }
	            }
	        }], [{
	            key: 'isSupported',
	            value: function isSupported() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
	
	                var actions = typeof action === 'string' ? [action] : action;
	                var support = !!document.queryCommandSupported;
	
	                actions.forEach(function (action) {
	                    support = support && !!document.queryCommandSupported(action);
	                });
	
	                return support;
	            }
	        }]);
	
	        return Clipboard;
	    }(_tinyEmitter2.default);
	
	    /**
	     * Helper function to retrieve attribute value.
	     * @param {String} suffix
	     * @param {Element} element
	     */
	    function getAttributeValue(suffix, element) {
	        var attribute = 'data-clipboard-' + suffix;
	
	        if (!element.hasAttribute(attribute)) {
	            return;
	        }
	
	        return element.getAttribute(attribute);
	    }
	
	    module.exports = Clipboard;
	});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(101)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('select'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.select);
	        global.clipboardAction = mod.exports;
	    }
	})(this, function (module, _select) {
	    'use strict';
	
	    var _select2 = _interopRequireDefault(_select);
	
	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }
	
	    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	
	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }
	
	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }
	
	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();
	
	    var ClipboardAction = function () {
	        /**
	         * @param {Object} options
	         */
	        function ClipboardAction(options) {
	            _classCallCheck(this, ClipboardAction);
	
	            this.resolveOptions(options);
	            this.initSelection();
	        }
	
	        /**
	         * Defines base properties passed from constructor.
	         * @param {Object} options
	         */
	
	
	        _createClass(ClipboardAction, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	                this.action = options.action;
	                this.container = options.container;
	                this.emitter = options.emitter;
	                this.target = options.target;
	                this.text = options.text;
	                this.trigger = options.trigger;
	
	                this.selectedText = '';
	            }
	        }, {
	            key: 'initSelection',
	            value: function initSelection() {
	                if (this.text) {
	                    this.selectFake();
	                } else if (this.target) {
	                    this.selectTarget();
	                }
	            }
	        }, {
	            key: 'selectFake',
	            value: function selectFake() {
	                var _this = this;
	
	                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';
	
	                this.removeFake();
	
	                this.fakeHandlerCallback = function () {
	                    return _this.removeFake();
	                };
	                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;
	
	                this.fakeElem = document.createElement('textarea');
	                // Prevent zooming on iOS
	                this.fakeElem.style.fontSize = '12pt';
	                // Reset box model
	                this.fakeElem.style.border = '0';
	                this.fakeElem.style.padding = '0';
	                this.fakeElem.style.margin = '0';
	                // Move element out of screen horizontally
	                this.fakeElem.style.position = 'absolute';
	                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
	                // Move element to the same position vertically
	                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
	                this.fakeElem.style.top = yPosition + 'px';
	
	                this.fakeElem.setAttribute('readonly', '');
	                this.fakeElem.value = this.text;
	
	                this.container.appendChild(this.fakeElem);
	
	                this.selectedText = (0, _select2.default)(this.fakeElem);
	                this.copyText();
	            }
	        }, {
	            key: 'removeFake',
	            value: function removeFake() {
	                if (this.fakeHandler) {
	                    this.container.removeEventListener('click', this.fakeHandlerCallback);
	                    this.fakeHandler = null;
	                    this.fakeHandlerCallback = null;
	                }
	
	                if (this.fakeElem) {
	                    this.container.removeChild(this.fakeElem);
	                    this.fakeElem = null;
	                }
	            }
	        }, {
	            key: 'selectTarget',
	            value: function selectTarget() {
	                this.selectedText = (0, _select2.default)(this.target);
	                this.copyText();
	            }
	        }, {
	            key: 'copyText',
	            value: function copyText() {
	                var succeeded = void 0;
	
	                try {
	                    succeeded = document.execCommand(this.action);
	                } catch (err) {
	                    succeeded = false;
	                }
	
	                this.handleResult(succeeded);
	            }
	        }, {
	            key: 'handleResult',
	            value: function handleResult(succeeded) {
	                this.emitter.emit(succeeded ? 'success' : 'error', {
	                    action: this.action,
	                    text: this.selectedText,
	                    trigger: this.trigger,
	                    clearSelection: this.clearSelection.bind(this)
	                });
	            }
	        }, {
	            key: 'clearSelection',
	            value: function clearSelection() {
	                if (this.trigger) {
	                    this.trigger.focus();
	                }
	
	                window.getSelection().removeAllRanges();
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.removeFake();
	            }
	        }, {
	            key: 'action',
	            set: function set() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';
	
	                this._action = action;
	
	                if (this._action !== 'copy' && this._action !== 'cut') {
	                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
	                }
	            },
	            get: function get() {
	                return this._action;
	            }
	        }, {
	            key: 'target',
	            set: function set(target) {
	                if (target !== undefined) {
	                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
	                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
	                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
	                        }
	
	                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
	                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
	                        }
	
	                        this._target = target;
	                    } else {
	                        throw new Error('Invalid "target" value, use a valid Element');
	                    }
	                }
	            },
	            get: function get() {
	                return this._target;
	            }
	        }]);
	
	        return ClipboardAction;
	    }();
	
	    module.exports = ClipboardAction;
	});

/***/ }),
/* 101 */
/***/ (function(module, exports) {

	function select(element) {
	    var selectedText;
	
	    if (element.nodeName === 'SELECT') {
	        element.focus();
	
	        selectedText = element.value;
	    }
	    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
	        var isReadOnly = element.hasAttribute('readonly');
	
	        if (!isReadOnly) {
	            element.setAttribute('readonly', '');
	        }
	
	        element.select();
	        element.setSelectionRange(0, element.value.length);
	
	        if (!isReadOnly) {
	            element.removeAttribute('readonly');
	        }
	
	        selectedText = element.value;
	    }
	    else {
	        if (element.hasAttribute('contenteditable')) {
	            element.focus();
	        }
	
	        var selection = window.getSelection();
	        var range = document.createRange();
	
	        range.selectNodeContents(element);
	        selection.removeAllRanges();
	        selection.addRange(range);
	
	        selectedText = selection.toString();
	    }
	
	    return selectedText;
	}
	
	module.exports = select;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}
	
	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});
	
	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });
	
	    return this;
	  },
	
	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };
	
	    listener._ = callback
	    return this.on(name, listener, ctx);
	  },
	
	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;
	
	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }
	
	    return this;
	  },
	
	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];
	
	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }
	
	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
	
	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];
	
	    return this;
	  }
	};
	
	module.exports = E;
	module.exports.TinyEmitter = E;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	var is = __webpack_require__(104);
	var delegate = __webpack_require__(105);
	
	/**
	 * Validates all params and calls the right
	 * listener function based on its target type.
	 *
	 * @param {String|HTMLElement|HTMLCollection|NodeList} target
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listen(target, type, callback) {
	    if (!target && !type && !callback) {
	        throw new Error('Missing required arguments');
	    }
	
	    if (!is.string(type)) {
	        throw new TypeError('Second argument must be a String');
	    }
	
	    if (!is.fn(callback)) {
	        throw new TypeError('Third argument must be a Function');
	    }
	
	    if (is.node(target)) {
	        return listenNode(target, type, callback);
	    }
	    else if (is.nodeList(target)) {
	        return listenNodeList(target, type, callback);
	    }
	    else if (is.string(target)) {
	        return listenSelector(target, type, callback);
	    }
	    else {
	        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
	    }
	}
	
	/**
	 * Adds an event listener to a HTML element
	 * and returns a remove listener function.
	 *
	 * @param {HTMLElement} node
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNode(node, type, callback) {
	    node.addEventListener(type, callback);
	
	    return {
	        destroy: function() {
	            node.removeEventListener(type, callback);
	        }
	    }
	}
	
	/**
	 * Add an event listener to a list of HTML elements
	 * and returns a remove listener function.
	 *
	 * @param {NodeList|HTMLCollection} nodeList
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNodeList(nodeList, type, callback) {
	    Array.prototype.forEach.call(nodeList, function(node) {
	        node.addEventListener(type, callback);
	    });
	
	    return {
	        destroy: function() {
	            Array.prototype.forEach.call(nodeList, function(node) {
	                node.removeEventListener(type, callback);
	            });
	        }
	    }
	}
	
	/**
	 * Add an event listener to a selector
	 * and returns a remove listener function.
	 *
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenSelector(selector, type, callback) {
	    return delegate(document.body, selector, type, callback);
	}
	
	module.exports = listen;


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	/**
	 * Check if argument is a HTML element.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.node = function(value) {
	    return value !== undefined
	        && value instanceof HTMLElement
	        && value.nodeType === 1;
	};
	
	/**
	 * Check if argument is a list of HTML elements.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.nodeList = function(value) {
	    var type = Object.prototype.toString.call(value);
	
	    return value !== undefined
	        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
	        && ('length' in value)
	        && (value.length === 0 || exports.node(value[0]));
	};
	
	/**
	 * Check if argument is a string.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.string = function(value) {
	    return typeof value === 'string'
	        || value instanceof String;
	};
	
	/**
	 * Check if argument is a function.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.fn = function(value) {
	    var type = Object.prototype.toString.call(value);
	
	    return type === '[object Function]';
	};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	var closest = __webpack_require__(106);
	
	/**
	 * Delegates event to a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @param {Boolean} useCapture
	 * @return {Object}
	 */
	function _delegate(element, selector, type, callback, useCapture) {
	    var listenerFn = listener.apply(this, arguments);
	
	    element.addEventListener(type, listenerFn, useCapture);
	
	    return {
	        destroy: function() {
	            element.removeEventListener(type, listenerFn, useCapture);
	        }
	    }
	}
	
	/**
	 * Delegates event to a selector.
	 *
	 * @param {Element|String|Array} [elements]
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @param {Boolean} useCapture
	 * @return {Object}
	 */
	function delegate(elements, selector, type, callback, useCapture) {
	    // Handle the regular Element usage
	    if (typeof elements.addEventListener === 'function') {
	        return _delegate.apply(null, arguments);
	    }
	
	    // Handle Element-less usage, it defaults to global delegation
	    if (typeof type === 'function') {
	        // Use `document` as the first parameter, then apply arguments
	        // This is a short way to .unshift `arguments` without running into deoptimizations
	        return _delegate.bind(null, document).apply(null, arguments);
	    }
	
	    // Handle Selector-based usage
	    if (typeof elements === 'string') {
	        elements = document.querySelectorAll(elements);
	    }
	
	    // Handle Array-like based usage
	    return Array.prototype.map.call(elements, function (element) {
	        return _delegate(element, selector, type, callback, useCapture);
	    });
	}
	
	/**
	 * Finds closest match and invokes callback.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Function}
	 */
	function listener(element, selector, type, callback) {
	    return function(e) {
	        e.delegateTarget = closest(e.target, selector);
	
	        if (e.delegateTarget) {
	            callback.call(element, e);
	        }
	    }
	}
	
	module.exports = delegate;


/***/ }),
/* 106 */
/***/ (function(module, exports) {

	var DOCUMENT_NODE_TYPE = 9;
	
	/**
	 * A polyfill for Element.matches()
	 */
	if (typeof Element !== 'undefined' && !Element.prototype.matches) {
	    var proto = Element.prototype;
	
	    proto.matches = proto.matchesSelector ||
	                    proto.mozMatchesSelector ||
	                    proto.msMatchesSelector ||
	                    proto.oMatchesSelector ||
	                    proto.webkitMatchesSelector;
	}
	
	/**
	 * Finds the closest parent that matches a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @return {Function}
	 */
	function closest (element, selector) {
	    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
	        if (typeof element.matches === 'function' &&
	            element.matches(selector)) {
	          return element;
	        }
	        element = element.parentNode;
	    }
	}
	
	module.exports = closest;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Tooltip = __webpack_require__(108);
	
	var _Tooltip2 = _interopRequireDefault(_Tooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Tooltip2["default"];
	module.exports = exports['default'];

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _OverlayTrigger = __webpack_require__(109);
	
	var _OverlayTrigger2 = _interopRequireDefault(_OverlayTrigger);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    /**
	     * @required
	     */
	    id: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
	    inverse: _propTypes2["default"].bool,
	    visible: _propTypes2["default"].bool,
	    onVisibleChange: _propTypes2["default"].func,
	    /**
	     * 相对目标元素显示上下左右的位置
	     */
	    placement: _propTypes2["default"].oneOf(['top', 'right', 'bottom', 'left']),
	
	    /**
	     * 绝对定位上边距.
	     */
	    positionTop: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	    /**
	     * 绝对定位左边距
	     */
	    positionLeft: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	
	    /**
	     * 与目标Top的距离
	     */
	    arrowOffsetTop: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	    /**
	     * 与目标Left的距离
	     */
	    arrowOffsetLeft: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])
	};
	
	var defaultProps = {
	    placement: 'right',
	    clsPrefix: 'u-tooltip'
	};
	function OverlayNode(props) {
	    var className = props.className,
	        classNames = props.classNames,
	        style = props.style,
	        overlay = props.overlay,
	        arrowOffsetTop = props.arrowOffsetTop,
	        arrowOffsetLeft = props.arrowOffsetLeft;
	
	    return _react2["default"].createElement(
	        'div',
	        {
	            className: (0, _classnames2["default"])(className, classNames),
	            onMouseEnter: props.onMouseEnter,
	            onMouseLeave: props.onMouseLeave,
	            style: style
	        },
	        overlay ? _react2["default"].createElement('div', { className: 'tooltip-arrow', style: {
	                top: arrowOffsetTop,
	                left: arrowOffsetLeft
	            } }) : '',
	        overlay ? _react2["default"].createElement(
	            'div',
	            { className: 'tooltip-inner' },
	            overlay
	        ) : ''
	    );
	}
	
	var Tooltip = function (_React$Component) {
	    _inherits(Tooltip, _React$Component);
	
	    function Tooltip(props) {
	        _classCallCheck(this, Tooltip);
	
	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	        _this.onMouseEnter = function () {
	            _this.setState({
	                isHoverShow: true
	            });
	        };
	
	        _this.onMouseLeave = function () {
	            _this.setState({
	                isHoverShow: false
	            });
	        };
	
	        var initState = {
	            isHoverShow: false
	        };
	        if ('visible' in props) {
	            _extends(initState, {
	                visible: props.visible
	            });
	        }
	        _this.state = initState;
	        return _this;
	    }
	
	    Tooltip.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	        var _props = this.props,
	            visible = _props.visible,
	            onVisibleChange = _props.onVisibleChange;
	
	        if ('visible' in this.props && prevProps.visible !== visible) {
	            this.setState({
	                visible: visible
	            });
	            onVisibleChange && onVisibleChange(visible);
	        }
	    };
	
	    /**
	     * @desc 鼠标划入时候的事件
	     */
	
	
	    /**
	     * @desc 鼠标划出时候的事件
	     */
	
	
	    Tooltip.prototype.render = function render() {
	        var _classes,
	            _this2 = this;
	
	        var _props2 = this.props,
	            placement = _props2.placement,
	            positionTop = _props2.positionTop,
	            positionLeft = _props2.positionLeft,
	            arrowOffsetTop = _props2.arrowOffsetTop,
	            arrowOffsetLeft = _props2.arrowOffsetLeft,
	            className = _props2.className,
	            style = _props2.style,
	            children = _props2.children,
	            clsPrefix = _props2.clsPrefix,
	            overlay = _props2.overlay,
	            inverse = _props2.inverse,
	            others = _objectWithoutProperties(_props2, ['placement', 'positionTop', 'positionLeft', 'arrowOffsetTop', 'arrowOffsetLeft', 'className', 'style', 'children', 'clsPrefix', 'overlay', 'inverse']);
	
	        var classes = (_classes = {}, _defineProperty(_classes, placement, true), _defineProperty(_classes, 'inverse', inverse), _classes);
	
	        var outerStyle = _extends({
	            top: positionTop,
	            left: positionLeft
	        }, style);
	
	        var arrowStyle = {
	            top: arrowOffsetTop,
	            left: arrowOffsetLeft
	        };
	
	        var classNames = (0, _classnames2["default"])(clsPrefix, classes);
	
	        var overlayNode = _react2["default"].createElement(OverlayNode, {
	            className: className,
	            classNames: classNames,
	            overlay: overlay,
	            onMouseEnter: this.onMouseEnter,
	            onMouseLeave: this.onMouseLeave,
	            style: true,
	            arrowOffsetTop: true,
	            arrowOffsetLeft: true
	        });
	        return 'visible' in this.props ? _react2["default"].createElement(
	            _OverlayTrigger2["default"],
	            _extends({ visible: this.state.visible, ref: function ref(_ref) {
	                    return _this2.trigger = _ref;
	                }, shouldUpdatePosition: true, placement: placement }, others, { overlay: overlayNode }),
	            children
	        ) : _react2["default"].createElement(
	            _OverlayTrigger2["default"],
	            _extends({ isHoverShow: this.state.isHoverShow, ref: function ref(_ref2) {
	                    return _this2.trigger = _ref2;
	                }, shouldUpdatePosition: true, placement: placement }, others, { overlay: overlayNode }),
	            children
	        );
	    };
	
	    return Tooltip;
	}(_react2["default"].Component);
	
	Tooltip.propTypes = propTypes;
	Tooltip.defaultProps = defaultProps;
	
	exports["default"] = Tooltip;
	module.exports = exports['default'];

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _contains = __webpack_require__(110);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _warning = __webpack_require__(31);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _Portal = __webpack_require__(111);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _Overlay = __webpack_require__(113);
	
	var _Overlay2 = _interopRequireDefault(_Overlay);
	
	var _createChainedFunction = __webpack_require__(129);
	
	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var isReact16 = _reactDom2["default"].createPortal !== undefined;
	var createPortal = isReact16 ? _reactDom2["default"].createPortal : _reactDom2["default"].unstable_renderSubtreeIntoContainer;
	
	/**
	 * 检查值是属于这个值，还是等于这个值
	 *
	 * @param {string} one
	 * @param {string|array} of
	 * @returns {boolean}
	 */
	function isOneOf(one, of) {
	    if (Array.isArray(of)) {
	        return of.indexOf(one) >= 0;
	    }
	    return one === of;
	}
	
	var triggerType = _propTypes2["default"].oneOf(['click', 'hover', 'focus']);
	
	var propTypes = _extends({}, _Portal2["default"].propTypes, _Overlay2["default"].propTypes, {
	
	    /**
	     * 指定哪些操作或操作触发叠加层可见性
	     */
	    trigger: _propTypes2["default"].oneOfType([triggerType, _propTypes2["default"].arrayOf(triggerType)]),
	
	    /**
	     * 显示和隐藏覆盖一旦触发的毫秒延迟量
	     */
	    delay: _propTypes2["default"].number,
	    /**
	     * 触发后显示叠加层之前的延迟毫秒
	     */
	    delayShow: _propTypes2["default"].number,
	    /**
	     * 触发后隐藏叠加层的延迟毫秒
	     */
	    delayHide: _propTypes2["default"].number,
	
	    // FIXME: This should be `defaultShow`.
	    /**
	     * 覆盖的初始可见性状态。对于更细微的可见性控制，请考虑直接使用覆盖组件。
	     */
	    defaultOverlayShown: _propTypes2["default"].bool,
	    visible: _propTypes2["default"].bool,
	
	    /**
	     * 要覆盖在目标旁边的元素或文本。
	     */
	    overlay: _propTypes2["default"].node.isRequired,
	
	    /**
	     * @private
	     */
	    onBlur: _propTypes2["default"].func,
	    /**
	     * @private
	     */
	    onClick: _propTypes2["default"].func,
	    /**
	     * @private
	     */
	    onFocus: _propTypes2["default"].func,
	    /**
	     * @private
	     */
	    onMouseOut: _propTypes2["default"].func,
	    /**
	     * @private
	     */
	    onMouseOver: _propTypes2["default"].func,
	
	    // Overridden props from `<Overlay>`.
	    /**
	     * @private
	     */
	    target: _propTypes2["default"].oneOf([null]),
	    /**
	     * @private
	     */
	    onHide: _propTypes2["default"].oneOf([null]),
	    /**
	     * @private
	     */
	    show: _propTypes2["default"].oneOf([null])
	});
	
	var defaultProps = {
	    defaultOverlayShown: false,
	    trigger: ['hover', 'focus']
	};
	
	var OverlayTrigger = function (_Component) {
	    _inherits(OverlayTrigger, _Component);
	
	    function OverlayTrigger(props, context) {
	        _classCallCheck(this, OverlayTrigger);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	        _this.handleToggle = _this.handleToggle.bind(_this);
	        _this.handleDelayedShow = _this.handleDelayedShow.bind(_this);
	        _this.handleDelayedHide = _this.handleDelayedHide.bind(_this);
	        _this.handleHide = _this.handleHide.bind(_this);
	        _this.makeOverlay = _this.makeOverlay.bind(_this);
	
	        _this.handleMouseOver = function (e) {
	            return _this.handleMouseOverOut(_this.handleDelayedShow, e);
	        };
	        _this.handleMouseOut = function (e) {
	            return _this.handleMouseOverOut(_this.handleDelayedHide, e);
	        };
	
	        _this._mountNode = null;
	
	        var visible = void 0;
	        if ('visible' in props) {
	            visible = !!props.visible;
	        } else {
	            visible = !!props.defaultOverlayShown;
	        }
	
	        _this.state = {
	            show: visible
	        };
	        return _this;
	    }
	
	    OverlayTrigger.prototype.componentDidMount = function componentDidMount() {
	        this._mountNode = document.createElement('div');
	        !isReact16 && this.renderOverlay();
	    };
	
	    OverlayTrigger.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	        !isReact16 && this.renderOverlay();
	        if ('visible' in this.props && prevProps.visible !== this.props.visible) {
	            this.setState({
	                show: this.props.visible
	            });
	        }
	        if ('isHoverShow' in this.props && prevProps.isHoverShow !== this.props.isHoverShow) {
	            this.setState({
	                show: this.props.isHoverShow
	            });
	        }
	    };
	
	    OverlayTrigger.prototype.componentWillUnmount = function componentWillUnmount() {
	        !isReact16 && _reactDom2["default"].unmountComponentAtNode(this._mountNode);
	        this._mountNode = null;
	        // 加判断去掉 clearTimeout
	        this._hoverShowDelay && clearTimeout(this._hoverShowDelay);
	        this._hoverShowDelay && clearTimeout(this._hoverHideDelay);
	    };
	
	    OverlayTrigger.prototype.handleToggle = function handleToggle() {
	        if (this.state.show) {
	            this.hide();
	        } else {
	            this.show();
	        }
	    };
	
	    OverlayTrigger.prototype.handleDelayedShow = function handleDelayedShow() {
	        var _this2 = this;
	
	        if (this._hoverHideDelay != null) {
	            clearTimeout(this._hoverHideDelay);
	            this._hoverHideDelay = null;
	            return;
	        }
	
	        if (this.state.show || this._hoverShowDelay != null) {
	            return;
	        }
	
	        var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;
	
	        if (!delay) {
	            this.show();
	            return;
	        }
	
	        this._hoverShowDelay = setTimeout(function () {
	            _this2._hoverShowDelay = null;
	            _this2.show();
	        }, delay);
	    };
	
	    OverlayTrigger.prototype.handleDelayedHide = function handleDelayedHide() {
	        var _this3 = this;
	
	        if (this._hoverShowDelay != null) {
	            clearTimeout(this._hoverShowDelay);
	            this._hoverShowDelay = null;
	            return;
	        }
	
	        if (!this.state.show || this._hoverHideDelay != null) {
	            return;
	        }
	
	        var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;
	
	        if (!delay) {
	            this.hide();
	            return;
	        }
	
	        this._hoverHideDelay = setTimeout(function () {
	            _this3._hoverHideDelay = null;
	            _this3.hide();
	        }, delay);
	    };
	
	    // 简单实现mouseEnter和mouseLeave。
	    // React的内置版本是有问题的：https://github.com/facebook/react/issues/4251
	    //在触发器被禁用的情况下，mouseOut / Over可能导致闪烁
	    //从一个子元素移动到另一个子元素。
	
	
	    OverlayTrigger.prototype.handleMouseOverOut = function handleMouseOverOut(handler, e) {
	        var target = e.currentTarget;
	        var related = e.relatedTarget || e.nativeEvent.toElement;
	
	        if (!related || related !== target && !(0, _contains2["default"])(target, related)) {
	            handler(e);
	        }
	    };
	
	    OverlayTrigger.prototype.handleHide = function handleHide() {
	        this.hide();
	    };
	
	    OverlayTrigger.prototype.show = function show() {
	        this.setState({ show: true });
	    };
	
	    OverlayTrigger.prototype.hide = function hide() {
	        this.setState({ show: false });
	    };
	
	    OverlayTrigger.prototype.makeOverlay = function makeOverlay(overlay, props) {
	        return _react2["default"].createElement(
	            _Overlay2["default"],
	            _extends({}, props, {
	                show: this.state.show,
	                onHide: this.handleHide,
	                target: this
	            }),
	            overlay
	        );
	    };
	
	    OverlayTrigger.prototype.renderOverlay = function renderOverlay() {
	        _reactDom2["default"].unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);
	    };
	
	    OverlayTrigger.prototype.render = function render() {
	        var _props = this.props,
	            trigger = _props.trigger,
	            overlay = _props.overlay,
	            children = _props.children,
	            onBlur = _props.onBlur,
	            onClick = _props.onClick,
	            onFocus = _props.onFocus,
	            onMouseOut = _props.onMouseOut,
	            onMouseOver = _props.onMouseOver,
	            props = _objectWithoutProperties(_props, ['trigger', 'overlay', 'children', 'onBlur', 'onClick', 'onFocus', 'onMouseOut', 'onMouseOver']);
	
	        delete props.delay;
	        delete props.delayShow;
	        delete props.delayHide;
	        delete props.defaultOverlayShown;
	
	        var child = _react2["default"].Children.only(children);
	        var childProps = child.props;
	
	        var triggerProps = {
	            'aria-describedby': overlay.props.id
	        };
	
	        // FIXME: 这里用于传递这个组件上的处理程序的逻辑是不一致的。我们不应该通过任何这些道具。
	
	        triggerProps.onClick = (0, _createChainedFunction2["default"])(childProps.onClick, onClick);
	
	        if (isOneOf('click', trigger) && !('visible' in this.props)) {
	            triggerProps.onClick = (0, _createChainedFunction2["default"])(triggerProps.onClick, this.handleToggle);
	        }
	
	        if (isOneOf('hover', trigger) && !('visible' in this.props)) {
	            (0, _warning2["default"])(!(trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the ' + 'visibility of the overlay to just mouse users. Consider also ' + 'including the `"focus"` trigger so that touch and keyboard only ' + 'users can see the overlay as well.');
	
	            triggerProps.onMouseOver = (0, _createChainedFunction2["default"])(childProps.onMouseOver, onMouseOver, this.handleMouseOver);
	            triggerProps.onMouseOut = (0, _createChainedFunction2["default"])(childProps.onMouseOut, onMouseOut, this.handleMouseOut);
	        }
	
	        if (isOneOf('focus', trigger) && !('visible' in this.props)) {
	            triggerProps.onFocus = (0, _createChainedFunction2["default"])(childProps.onFocus, onFocus, this.handleDelayedShow);
	            triggerProps.onBlur = (0, _createChainedFunction2["default"])(childProps.onBlur, onBlur, this.handleDelayedHide);
	        }
	
	        this._overlay = this.makeOverlay(overlay, props);
	
	        if (!isReact16) {
	            return (0, _react.cloneElement)(child, triggerProps);
	        }
	        triggerProps.key = 'overlay';
	
	        var portal = _react2["default"].createElement(
	            _Portal2["default"],
	            {
	                key: 'portal',
	                container: props.container },
	            this._overlay
	        );
	
	        return [(0, _react.cloneElement)(child, triggerProps), portal];
	    };
	
	    return OverlayTrigger;
	}(_react.Component);
	
	OverlayTrigger.propTypes = propTypes;
	OverlayTrigger.defaultProps = defaultProps;
	
	exports["default"] = OverlayTrigger;
	module.exports = exports['default'];

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var root = _inDOM2.default && document.documentElement;
	
	  return root && root.contains ? function (context, node) {
	    return context.contains(node);
	  } : root && root.compareDocumentPosition ? function (context, node) {
	    return context === node || !!(context.compareDocumentPosition(node) & 16);
	  } : function (context, node) {
	    if (node) do {
	      if (node === context) return true;
	    } while (node = node.parentNode);
	
	    return false;
	  };
	}();
	
	module.exports = exports['default'];

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _getContainer = __webpack_require__(112);
	
	var _getContainer2 = _interopRequireDefault(_getContainer);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var isReact16 = _reactDom2["default"].createPortal !== undefined;
	var createPortal = isReact16 ? _reactDom2["default"].createPortal : _reactDom2["default"].unstable_renderSubtreeIntoContainer;
	
	var propTypes = {
	  /**
	   * 存放子组件的容器
	   */
	  container: _propTypes2["default"].oneOfType([_tinperBeeCore.componentOrElement, _propTypes2["default"].func])
	};
	
	var defaultProps = {};
	
	/**
	 * Portal组件是将子组件渲染
	 */
	
	var Portal = function (_Component) {
	  _inherits(Portal, _Component);
	
	  function Portal(props) {
	    _classCallCheck(this, Portal);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.getMountNode = _this.getMountNode.bind(_this);
	    _this.getOverlayDOMNode = _this.getOverlayDOMNode.bind(_this);
	    _this.mountOverlayTarget = _this.mountOverlayTarget.bind(_this);
	    _this.unmountOverlayTarget = _this.unmountOverlayTarget.bind(_this);
	    _this.renderOverlay = _this.renderOverlay.bind(_this);
	    _this.unrenderOverlay = _this.unrenderOverlay.bind(_this);
	
	    _this.overlayTarget = isReact16 ? document.createElement('div') : null;
	    return _this;
	  }
	
	  Portal.prototype.componentDidMount = function componentDidMount() {
	    if (isReact16) {
	      this.portalContainerNode = (0, _getContainer2["default"])(this.props.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    } else {
	      this.renderOverlay();
	    }
	
	    this.mounted = true;
	  };
	
	  Portal.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (isReact16) {
	      var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);
	      if (overlay === null) {
	        this.unrenderOverlay();
	        this.unmountOverlayTarget();
	      } else {}
	    } else {
	      this.renderOverlay();
	    }
	  };
	  //this._overlayTarget为当前的要添加的子组件， this._portalContainerNode要添加组件的容器元素
	
	
	  Portal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.overlayTarget && nextProps.container !== this.props.container) {
	      this.portalContainerNode.removeChild(this.overlayTarget);
	      this.portalContainerNode = (0, _getContainer2["default"])(nextProps.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    }
	  };
	
	  Portal.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unrenderOverlay();
	    this.unmountOverlayTarget();
	
	    this.mounted = false;
	  };
	
	  Portal.prototype.getMountNode = function getMountNode() {
	    return this.overlayTarget;
	  };
	
	  Portal.prototype.getOverlayDOMNode = function getOverlayDOMNode() {
	    if (!this.mounted) {
	      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
	    }
	
	    if (this.overlayInstance) {
	      return _reactDom2["default"].findDOMNode(this.overlayInstance);
	    }
	
	    return null;
	  };
	
	  /**
	   * 如果要添加的子组件不存在，就将div添加到要添加容器的DOM中；
	   */
	
	  Portal.prototype.mountOverlayTarget = function mountOverlayTarget() {
	    if (!this.overlayTarget) {
	      this.overlayTarget = document.createElement('div');
	      this.portalContainerNode = (0, _getContainer2["default"])(this.props.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    }
	  };
	  /**
	   * 将要添加的子元素从容器中移除，并把变量置为null
	   */
	
	
	  Portal.prototype.unmountOverlayTarget = function unmountOverlayTarget() {
	    if (this.overlayTarget) {
	      this.portalContainerNode.removeChild(this.overlayTarget);
	      this.overlayTarget = null;
	    }
	    this.portalContainerNode = null;
	  };
	  /**
	   * 手动渲染_overlayTarget
	   */
	
	
	  Portal.prototype.renderOverlay = function renderOverlay() {
	
	    var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);
	
	    // Save reference for future access.
	    if (overlay !== null) {
	      this.mountOverlayTarget();
	      this.overlayInstance = _reactDom2["default"].unstable_renderSubtreeIntoContainer(this, overlay, this.overlayTarget);
	    } else {
	      // Unrender if the component is null for transitions to null
	      this.unrenderOverlay();
	      this.unmountOverlayTarget();
	    }
	  };
	  /**
	   * 销毁_overlayTarget组件。并把_overlayInstance置为null
	   */
	
	
	  Portal.prototype.unrenderOverlay = function unrenderOverlay() {
	    if (this.overlayTarget) {
	      !isReact16 && _reactDom2["default"].unmountComponentAtNode(this.overlayTarget);
	      this.overlayInstance = null;
	    }
	  };
	
	  Portal.prototype.render = function render() {
	    if (!isReact16) {
	      return null;
	    }
	
	    var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);
	
	    return _reactDom2["default"].createPortal(overlay, this.overlayTarget);
	  };
	
	  return Portal;
	}(_react.Component);
	
	;
	
	Portal.propTypes = propTypes;
	Portal.defaultProps = defaultProps;
	
	exports["default"] = Portal;
	module.exports = exports['default'];

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = getContainer;
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/**
	 * 获取容器组件
	 * @param  {[type]} container        [description]
	 * @param  {[type]} defaultContainer [description]
	 * @return {[type]}                  [description]
	 */
	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2["default"].findDOMNode(container) || defaultContainer;
	}
	module.exports = exports['default'];

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _BaseOverlay = __webpack_require__(114);
	
	var _BaseOverlay2 = _interopRequireDefault(_BaseOverlay);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	var _Fade = __webpack_require__(127);
	
	var _Fade2 = _interopRequireDefault(_Fade);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = _extends({}, _BaseOverlay2["default"].propTypes, {
	
	  /**
	   * 是否显示
	   */
	  show: _propTypes2["default"].bool,
	  /**
	   * 是
	   */
	  rootClose: _propTypes2["default"].bool,
	  /**
	   * 当点击rootClose触发close时的回调函数
	   */
	  onHide: _propTypes2["default"].func,
	
	  /**
	   * 使用动画
	   */
	  animation: _propTypes2["default"].oneOfType([_tinperBeeCore.elementType, _propTypes2["default"].func]),
	
	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _propTypes2["default"].func,
	
	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _propTypes2["default"].func,
	
	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _propTypes2["default"].func,
	
	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _propTypes2["default"].func,
	
	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _propTypes2["default"].func,
	
	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _propTypes2["default"].func,
	
	  /**
	   * Sets the direction of the Overlay.
	   */
	  placement: _propTypes2["default"].oneOf(["top", "right", "bottom", "left", "topLeft", "rightTop", "bottomLeft", "leftTop", "topRight", "rightBottom", "bottomRight", "leftBottom"]),
	
	  /**
	   * 当Overlay在placement方向放不下时的第二优先级方向
	   */
	  secondPlacement: _propTypes2["default"].oneOf(['top', 'right', 'bottom', 'left'])
	});
	
	var defaultProps = {
	  animation: _Fade2["default"],
	  rootClose: false,
	  show: false,
	  placement: 'right'
	};
	
	var Overlay = function (_Component) {
	  _inherits(Overlay, _Component);
	
	  function Overlay() {
	    _classCallCheck(this, Overlay);
	
	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }
	
	  Overlay.prototype.render = function render() {
	    var _props = this.props,
	        animation = _props.animation,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['animation', 'children']);
	
	    var transition = animation === true ? _Fade2["default"] : animation || null;
	
	    var child = void 0;
	
	    if (!transition) {
	      child = (0, _react.cloneElement)(children, {
	        className: (0, _classnames2["default"])(children.props.className, 'in')
	      });
	    } else {
	      child = children;
	    }
	
	    return _react2["default"].createElement(
	      _BaseOverlay2["default"],
	      _extends({}, props, {
	        transition: transition
	      }),
	      child
	    );
	  };
	
	  return Overlay;
	}(_react.Component);
	
	Overlay.propTypes = propTypes;
	Overlay.defaultProps = defaultProps;
	
	exports["default"] = Overlay;
	module.exports = exports['default'];

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Portal = __webpack_require__(111);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _Position = __webpack_require__(115);
	
	var _Position2 = _interopRequireDefault(_Position);
	
	var _RootCloseWrapper = __webpack_require__(126);
	
	var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var isReact16 = _reactDom2["default"].createPortal !== undefined;
	
	var propTypes = _extends({}, _Position2["default"].propTypes, {
	
	  /**
	   * 是否显示
	   */
	  show: _propTypes2["default"].bool,
	
	  /**
	   * 点击其他地方，是否隐藏overlay
	   */
	  rootClose: _propTypes2["default"].bool,
	
	  /**
	   * 当rootClose为true的时候，触发的隐藏方法
	   * @type func
	   */
	  onHide: function onHide(props) {
	    var propType = _propTypes2["default"].func;
	    if (props.rootClose) {
	      propType = propType.isRequired;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    return propType.apply(undefined, [props].concat(args));
	  },
	
	
	  /**
	   * 过渡动画组件
	   */
	  transition: _propTypes2["default"].oneOfType([_tinperBeeCore.elementType, _propTypes2["default"].func]),
	
	  /**
	   * overlay添加动画前的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	
	  /**
	   * 开始动画的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	
	  /**
	   * 渲染之后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	
	  /**
	   * 关闭开始时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	
	  /**
	   * 关闭时的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	
	  /**
	   * 关闭后的钩子函数
	   */
	  onExited: _propTypes2["default"].func
	});
	
	function noop() {}
	
	var defaultProps = {
	  show: false,
	  rootClose: true
	};
	
	/**
	 * 悬浮组件
	 */
	
	var BaseOverlay = function (_Component) {
	  _inherits(BaseOverlay, _Component);
	
	  function BaseOverlay(props, context) {
	    _classCallCheck(this, BaseOverlay);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    _this.state = { exited: !props.show };
	    _this.onHiddenListener = _this.handleHidden.bind(_this);
	    return _this;
	  }
	
	  BaseOverlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };
	
	  BaseOverlay.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });
	
	    if (this.props.onExited) {
	      var _props;
	
	      (_props = this.props).onExited.apply(_props, arguments);
	    }
	  };
	
	  BaseOverlay.prototype.render = function render() {
	    var _props2 = this.props,
	        container = _props2.container,
	        containerPadding = _props2.containerPadding,
	        target = _props2.target,
	        placement = _props2.placement,
	        secondPlacement = _props2.secondPlacement,
	        shouldUpdatePosition = _props2.shouldUpdatePosition,
	        rootClose = _props2.rootClose,
	        positionLeft = _props2.positionLeft,
	        positionTop = _props2.positionTop,
	        children = _props2.children,
	        Transition = _props2.transition,
	        props = _objectWithoutProperties(_props2, ['container', 'containerPadding', 'target', 'placement', 'secondPlacement', 'shouldUpdatePosition', 'rootClose', 'positionLeft', 'positionTop', 'children', 'transition']);
	
	    // Don't un-render the overlay while it's transitioning out.
	
	
	    var mountOverlay = props.show || Transition && !this.state.exited;
	    if (!mountOverlay) {
	      // Don't bother showing anything if we don't have to.
	      return null;
	    }
	
	    var child = children;
	
	    // Position is be inner-most because it adds inline styles into the child,
	    // which the other wrappers don't forward correctly.
	    child = _react2["default"].createElement(
	      _Position2["default"],
	      {
	        container: container,
	        containerPadding: containerPadding,
	        target: target,
	        positionLeft: positionLeft,
	        positionTop: positionTop,
	        placement: placement,
	        secondPlacement: secondPlacement,
	        shouldUpdatePosition: shouldUpdatePosition },
	      child
	    );
	
	    if (Transition) {
	      var onExit = props.onExit,
	          onExiting = props.onExiting,
	          onEnter = props.onEnter,
	          onEntering = props.onEntering,
	          onEntered = props.onEntered;
	
	      // This animates the child node by injecting props, so it must precede
	      // anything that adds a wrapping div.
	
	      child = _react2["default"].createElement(
	        Transition,
	        {
	          'in': props.show,
	          transitionAppear: true,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.onHiddenListener,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        child
	      );
	    }
	
	    // This goes after everything else because it adds a wrapping div.
	    if (rootClose) {
	      child = _react2["default"].createElement(
	        _RootCloseWrapper2["default"],
	        { onRootClose: props.onHide },
	        child
	      );
	    }
	
	    if (isReact16) {
	      return child;
	    } else {
	      return _react2["default"].createElement(
	        _Portal2["default"],
	        { container: container },
	        child
	      );
	    }
	  };
	
	  return BaseOverlay;
	}(_react.Component);
	
	BaseOverlay.propTypes = propTypes;
	BaseOverlay.defaultProps = defaultProps;
	
	exports["default"] = BaseOverlay;
	module.exports = exports['default'];

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	var _requestAnimationFrame = __webpack_require__(116);
	
	var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);
	
	var _calculatePosition = __webpack_require__(117);
	
	var _calculatePosition2 = _interopRequireDefault(_calculatePosition);
	
	var _getContainer = __webpack_require__(112);
	
	var _getContainer2 = _interopRequireDefault(_getContainer);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _ownerWindow = __webpack_require__(124);
	
	var _ownerWindow2 = _interopRequireDefault(_ownerWindow);
	
	var _addEventListener = __webpack_require__(75);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    /**
	     * 要设置定位的元素
	     */
	    target: _propTypes2["default"].oneOfType([_tinperBeeCore.componentOrElement, _propTypes2["default"].func]),
	
	    /**
	     * 存放的容器元素
	     */
	    container: _propTypes2["default"].oneOfType([_tinperBeeCore.componentOrElement, _propTypes2["default"].func]),
	    /**
	     * 容器padding值
	     */
	    containerPadding: _propTypes2["default"].number,
	    /**
	     * 位置设置
	     */
	    placement: _propTypes2["default"].oneOf(["top", "right", "bottom", "left", "topLeft", "rightTop", "bottomLeft", "leftTop", "topRight", "rightBottom", "bottomRight", "leftBottom"]),
	
	    /**
	     * 第二优先级位置设置
	     */
	    secondPlacement: _propTypes2["default"].oneOf(['top', 'right', 'bottom', 'left']),
	
	    /**
	     * 是否需要更新位置
	     */
	    shouldUpdatePosition: _propTypes2["default"].bool,
	    /**
	     * 弹出框向上偏移量
	     */
	    positionTop: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	    /**
	     * 弹出框向左偏移量
	     */
	    positionLeft: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])
	};
	
	var defaultProps = {
	    containerPadding: 0,
	    placement: 'right',
	    shouldUpdatePosition: false
	};
	
	/**
	 * 计算子组件的位置的组件
	 */
	
	var Position = function (_Component) {
	    _inherits(Position, _Component);
	
	    function Position(props, context) {
	        _classCallCheck(this, Position);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	        _this.state = {
	            positionLeft: 0,
	            positionTop: 0,
	            arrowOffsetLeft: null,
	            arrowOffsetTop: null
	        };
	
	        _this.needsFlush = false;
	        _this.lastTarget = null;
	
	        _this.getTarget = _this.getTarget.bind(_this);
	        _this.maybeUpdatePosition = _this.maybeUpdatePosition.bind(_this);
	        _this.updatePosition = _this.updatePosition.bind(_this);
	        _this.onWindowResize = _this.onWindowResize.bind(_this);
	        return _this;
	    }
	
	    Position.prototype.componentDidMount = function componentDidMount() {
	        var _this2 = this;
	
	        this._isMounted = true;
	
	        this._windowResizeListener = (0, _addEventListener2["default"])((0, _ownerWindow2["default"])(this), 'resize', function () {
	            return _this2.onWindowResize();
	        });
	
	        this.updatePosition(this.getTarget());
	    };
	
	    Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
	        this.needsFlush = true;
	    };
	
	    Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	        if (this.needsFlush) {
	            this.needsFlush = false;
	
	            this.maybeUpdatePosition();
	        }
	    };
	
	    Position.prototype.componentWillUnmount = function componentWillUnmount() {
	        this._isMounted = false;
	
	        if (this._windowResizeListener) {
	            this._windowResizeListener.remove();
	        }
	    };
	
	    /**
	     * 获取要设置位置的子元素
	     */
	
	
	    Position.prototype.getTarget = function getTarget() {
	        var target = this.props.target;
	
	        var targetElement = typeof target === 'function' ? target() : target;
	        return targetElement && _reactDom2["default"].findDOMNode(targetElement) || null;
	    };
	
	    /**
	     * 验证是否需要更新位置
	     */
	
	
	    Position.prototype.maybeUpdatePosition = function maybeUpdatePosition(placementChanged) {
	        var target = this.getTarget();
	        if (!this.props.shouldUpdatePosition && target === this.lastTarget && !placementChanged) {
	            return;
	        }
	
	        this.updatePosition(target);
	    };
	
	    Position.prototype.onWindowResize = function onWindowResize() {
	        var _this3 = this;
	
	        (0, _requestAnimationFrame2["default"])(function () {
	            return _this3.updatePosition(_this3.getTarget());
	        });
	    };
	
	    /**
	     * 更新位置
	     */
	
	    Position.prototype.updatePosition = function updatePosition(target) {
	        var _props = this.props,
	            placement = _props.placement,
	            secondPlacement = _props.secondPlacement,
	            positionLeft = _props.positionLeft,
	            positionTop = _props.positionTop;
	
	
	        if (!this._isMounted) {
	            return;
	        }
	        this.lastTarget = target;
	
	        if (!target) {
	            this.setState({
	                positionLeft: 0,
	                positionTop: 0,
	                arrowOffsetLeft: null,
	                arrowOffsetTop: null
	            });
	
	            return;
	        }
	
	        var overlay = _reactDom2["default"].findDOMNode(this);
	        var container = (0, _getContainer2["default"])(this.props.container, (0, _ownerDocument2["default"])(this).body);
	
	        var initPosition = (0, _calculatePosition2["default"])(placement, overlay, target, container, this.props.containerPadding);
	        // 若设置了第二渲染位置，placement的优先级是： placement > secondPlacement > placement的反方向
	        if ("secondPlacement" in this.props && secondPlacement) {
	            if (initPosition.inverseArrow) {
	                var secondPosition = (0, _calculatePosition2["default"])(secondPlacement, overlay, target, container, this.props.containerPadding);
	
	                if (secondPosition.inverseArrow) {
	                    this.setState(_extends({}, initPosition, {
	                        renderPlacement: placement
	                    }));
	                } else {
	                    this.setState(_extends({}, secondPosition, {
	                        renderPlacement: secondPlacement
	                    }));
	                }
	            } else {
	                this.setState(_extends({}, initPosition, {
	                    renderPlacement: placement
	                }));
	            }
	        } else if ("positionLeft" in this.props && positionLeft) {
	            if ("positionTop" in this.props && positionTop) {
	                this.setState(_extends({}, initPosition, {
	                    positionLeft: positionLeft,
	                    positionTop: positionTop
	                }));
	            } else {
	                this.setState(_extends({}, initPosition, {
	                    positionLeft: positionLeft
	                }));
	            }
	        } else if ("positionTop" in this.props && positionTop) {
	            this.setState(_extends({}, initPosition, {
	                positionTop: positionTop
	            }));
	        } else {
	            this.setState((0, _calculatePosition2["default"])(placement, overlay, target, container, this.props.containerPadding));
	        }
	    };
	
	    Position.prototype.render = function render() {
	        var _props2 = this.props,
	            children = _props2.children,
	            className = _props2.className,
	            props = _objectWithoutProperties(_props2, ['children', 'className']);
	
	        var _state = this.state,
	            positionLeft = _state.positionLeft,
	            positionTop = _state.positionTop,
	            inverseArrow = _state.inverseArrow,
	            width = _state.width,
	            arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop', 'inverseArrow', 'width']);
	
	        // These should not be forwarded to the child.
	
	
	        delete props.target;
	        delete props.container;
	        delete props.containerPadding;
	        delete props.shouldUpdatePosition;
	
	        var child = _react2["default"].Children.only(children);
	        return (0, _react.cloneElement)(child, _extends({
	            className: (0, _classnames2["default"])(className, child.props.className, { 'inverse-arrow': inverseArrow })
	        }, arrowPosition, {
	            style: _extends({}, child.props.style, {
	                width: width,
	                left: positionLeft,
	                top: positionTop
	            })
	        }));
	    };
	
	    return Position;
	}(_react.Component);
	
	Position.propTypes = propTypes;
	Position.defaultProps = defaultProps;
	
	exports["default"] = Position;
	module.exports = exports['default'];

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
	var cancel = 'clearTimeout';
	var raf = fallback;
	var compatRaf = void 0;
	
	var getKey = function getKey(vendor, k) {
	  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
	};
	
	if (_inDOM2.default) {
	  vendors.some(function (vendor) {
	    var rafKey = getKey(vendor, 'request');
	
	    if (rafKey in window) {
	      cancel = getKey(vendor, 'cancel');
	      return raf = function raf(cb) {
	        return window[rafKey](cb);
	      };
	    }
	  });
	}
	
	/* https://github.com/component/raf */
	var prev = new Date().getTime();
	
	function fallback(fn) {
	  var curr = new Date().getTime(),
	      ms = Math.max(0, 16 - (curr - prev)),
	      req = setTimeout(fn, ms);
	
	  prev = curr;
	  return req;
	}
	
	compatRaf = function compatRaf(cb) {
	  return raf(cb);
	};
	compatRaf.cancel = function (id) {
	  return window[cancel](id);
	};
	
	exports.default = compatRaf;
	module.exports = exports['default'];

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = calculatePosition;
	
	var _offset = __webpack_require__(118);
	
	var _offset2 = _interopRequireDefault(_offset);
	
	var _position = __webpack_require__(120);
	
	var _position2 = _interopRequireDefault(_position);
	
	var _scrollTop = __webpack_require__(122);
	
	var _scrollTop2 = _interopRequireDefault(_scrollTop);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function getContainerDimensions(containerNode) {
	    var width = void 0,
	        height = void 0,
	        scroll = void 0;
	
	    if (containerNode.tagName === 'BODY') {
	        width = document.body.scrollWidth;
	        height = document.body.scrollHeight;
	
	        scroll = (0, _scrollTop2["default"])((0, _ownerDocument2["default"])(containerNode).documentElement) || (0, _scrollTop2["default"])(containerNode);
	    } else {
	        var _getOffset = (0, _offset2["default"])(containerNode);
	
	        width = _getOffset.width;
	        height = _getOffset.height;
	
	        scroll = (0, _scrollTop2["default"])(containerNode);
	    }
	
	    return { width: width, height: height, scroll: scroll };
	}
	
	function getTopDelta(top, overlayHeight, container, padding) {
	    var containerDimensions = getContainerDimensions(container);
	    var containerScroll = containerDimensions.scroll;
	    var containerHeight = containerDimensions.height;
	
	    var topEdgeOffset = top - padding - containerScroll;
	    var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;
	
	    if (topEdgeOffset < 0) {
	        return -topEdgeOffset;
	    } else if (bottomEdgeOffset > containerHeight) {
	        return containerHeight - bottomEdgeOffset;
	    } else {
	        return 0;
	    }
	}
	
	function getLeftDelta(left, overlayWidth, container, padding) {
	    var containerDimensions = getContainerDimensions(container);
	    var containerWidth = containerDimensions.width;
	
	    var leftEdgeOffset = left - padding;
	    var rightEdgeOffset = left + padding + overlayWidth;
	
	    if (leftEdgeOffset < 0) {
	        return -leftEdgeOffset;
	    } else if (rightEdgeOffset > containerWidth) {
	        return containerWidth - rightEdgeOffset;
	    }
	
	    return 0;
	}
	
	function calculatePosition(placement, overlayNode, target, container, padding) {
	    var childOffset = container.tagName === 'BODY' ? (0, _offset2["default"])(target) : (0, _position2["default"])(target, container);
	
	    var _getOffset2 = (0, _offset2["default"])(overlayNode),
	        overlayHeight = _getOffset2.height,
	        overlayWidth = _getOffset2.width;
	
	    var positionLeft = void 0,
	        positionTop = void 0,
	        arrowOffsetLeft = void 0,
	        arrowOffsetTop = void 0,
	        inverseArrow = void 0;
	
	    if (/^left|^right/.test(placement)) {
	        positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;
	
	        if (/left/.test(placement)) {
	            positionLeft = childOffset.left - overlayWidth;
	        } else {
	            positionLeft = childOffset.left + childOffset.width;
	        }
	
	        if (/Top/.test(placement)) {
	            positionTop = childOffset.top;
	        } else if (/Bottom/.test(placement)) {
	            positionTop = childOffset.top + childOffset.height - overlayHeight;
	        }
	
	        var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);
	        var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
	        //内容超出
	        if (leftDelta > 0) {
	            inverseArrow = true;
	            positionLeft = childOffset.left + childOffset.width + 6;
	        } else if (leftDelta < 0) {
	            inverseArrow = true;
	            positionLeft = childOffset.left - overlayWidth - 6;
	        } else {
	            positionLeft += leftDelta;
	        }
	        positionTop += topDelta;
	        arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
	        arrowOffsetLeft = void 0;
	    } else if (/^top|^bottom/.test(placement)) {
	        positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;
	
	        if (/top/.test(placement)) {
	            positionTop = childOffset.top - overlayHeight;
	        } else {
	            positionTop = childOffset.top + childOffset.height;
	        }
	
	        if (/Left/.test(placement)) {
	            positionLeft = childOffset.left;
	        } else if (/Right/.test(placement)) {
	            positionLeft = childOffset.left + (childOffset.width - overlayWidth);
	        }
	
	        var _leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
	        var _topDelta = getTopDelta(positionTop, overlayHeight, container, padding);
	        positionLeft += _leftDelta;
	        arrowOffsetLeft = 50 * (1 - 2 * _leftDelta / overlayWidth) + '%';
	        arrowOffsetTop = void 0;
	        if (_topDelta > 0) {
	            inverseArrow = true;
	            positionTop = childOffset.top + childOffset.height + 6;
	        } else if (_topDelta < 0) {
	            inverseArrow = true;
	            positionTop = childOffset.top - overlayHeight - 6;
	        } else {
	            positionTop += _topDelta;
	        }
	
	        // if((positionLeft + panelWidth) > docWidth)
	        //         left = docWidth - panelWidth - 10;
	        //     if(left < 0)
	        //         left = 0;
	
	        //      if((top + panelHeight) > docHeight) {
	        //  top = docHeight - panelHeight - 10;
	        //  }
	
	        //      if(top < 0)
	        //          top = 0;
	    } else {
	        throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
	    }
	
	    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop, inverseArrow: inverseArrow, width: overlayWidth };
	}
	module.exports = exports['default'];

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = offset;
	
	var _contains = __webpack_require__(110);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _isWindow = __webpack_require__(119);
	
	var _isWindow2 = _interopRequireDefault(_isWindow);
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function offset(node) {
	  var doc = (0, _ownerDocument2.default)(node),
	      win = (0, _isWindow2.default)(doc),
	      docElem = doc && doc.documentElement,
	      box = { top: 0, left: 0, height: 0, width: 0 };
	
	  if (!doc) return;
	
	  // Make sure it's not a disconnected DOM node
	  if (!(0, _contains2.default)(docElem, node)) return box;
	
	  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();
	
	  if (box.width || box.height) {
	
	    box = {
	      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
	      width: (box.width == null ? node.offsetWidth : box.width) || 0,
	      height: (box.height == null ? node.offsetHeight : box.height) || 0
	    };
	  }
	
	  return box;
	}
	module.exports = exports['default'];

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getWindow;
	function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	}
	module.exports = exports["default"];

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.default = position;
	
	var _offset = __webpack_require__(118);
	
	var _offset2 = _interopRequireDefault(_offset);
	
	var _offsetParent = __webpack_require__(121);
	
	var _offsetParent2 = _interopRequireDefault(_offsetParent);
	
	var _scrollTop = __webpack_require__(122);
	
	var _scrollTop2 = _interopRequireDefault(_scrollTop);
	
	var _scrollLeft = __webpack_require__(123);
	
	var _scrollLeft2 = _interopRequireDefault(_scrollLeft);
	
	var _style = __webpack_require__(17);
	
	var _style2 = _interopRequireDefault(_style);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}
	
	function position(node, offsetParent) {
	  var parentOffset = { top: 0, left: 0 },
	      offset;
	
	  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
	  // because it is its only offset parent
	  if ((0, _style2.default)(node, 'position') === 'fixed') {
	    offset = node.getBoundingClientRect();
	  } else {
	    offsetParent = offsetParent || (0, _offsetParent2.default)(node);
	    offset = (0, _offset2.default)(node);
	
	    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2.default)(offsetParent);
	
	    parentOffset.top += parseInt((0, _style2.default)(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2.default)(offsetParent) || 0;
	    parentOffset.left += parseInt((0, _style2.default)(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2.default)(offsetParent) || 0;
	  }
	
	  // Subtract parent offsets and node margins
	  return _extends({}, offset, {
	    top: offset.top - parentOffset.top - (parseInt((0, _style2.default)(node, 'marginTop'), 10) || 0),
	    left: offset.left - parentOffset.left - (parseInt((0, _style2.default)(node, 'marginLeft'), 10) || 0)
	  });
	}
	module.exports = exports['default'];

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = offsetParent;
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _style = __webpack_require__(17);
	
	var _style2 = _interopRequireDefault(_style);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}
	
	function offsetParent(node) {
	  var doc = (0, _ownerDocument2.default)(node),
	      offsetParent = node && node.offsetParent;
	
	  while (offsetParent && nodeName(node) !== 'html' && (0, _style2.default)(offsetParent, 'position') === 'static') {
	    offsetParent = offsetParent.offsetParent;
	  }
	
	  return offsetParent || doc.documentElement;
	}
	module.exports = exports['default'];

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = scrollTop;
	
	var _isWindow = __webpack_require__(119);
	
	var _isWindow2 = _interopRequireDefault(_isWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function scrollTop(node, val) {
	  var win = (0, _isWindow2.default)(node);
	
	  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;
	
	  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
	}
	module.exports = exports['default'];

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = scrollTop;
	
	var _isWindow = __webpack_require__(119);
	
	var _isWindow2 = _interopRequireDefault(_isWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function scrollTop(node, val) {
	  var win = (0, _isWindow2.default)(node);
	
	  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;
	
	  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
	}
	module.exports = exports['default'];

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports["default"] = function (componentOrElement) {
	  return (0, _ownerWindow2["default"])(_reactDom2["default"].findDOMNode(componentOrElement));
	};
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _ownerWindow = __webpack_require__(125);
	
	var _ownerWindow2 = _interopRequireDefault(_ownerWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	module.exports = exports['default'];

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ownerWindow;
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function ownerWindow(node) {
	  var doc = (0, _ownerDocument2.default)(node);
	  return doc && doc.defaultView || doc.parentWindow;
	}
	module.exports = exports['default'];

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _contains = __webpack_require__(110);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _addEventListener = __webpack_require__(75);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  onRootClose: _propTypes2["default"].func,
	  children: _propTypes2["default"].element,
	  /**
	   * 是否禁用
	   */
	  disabled: _propTypes2["default"].bool,
	  /**
	   * 触发事件选择
	   */
	  event: _propTypes2["default"].oneOf(['click', 'mousedown'])
	};
	
	var defaultProps = {
	  event: 'click'
	};
	
	function isLeftClickEvent(event) {
	  return event.button === 0;
	}
	
	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}
	
	var RootCloseWrapper = function (_Component) {
	  _inherits(RootCloseWrapper, _Component);
	
	  function RootCloseWrapper(props, context) {
	    _classCallCheck(this, RootCloseWrapper);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    _this.handleMouseCapture = function (e) {
	      _this.preventMouseRootClose = isModifiedEvent(e) || !isLeftClickEvent(e) || (0, _contains2["default"])(_reactDom2["default"].findDOMNode(_this), e.target);
	    };
	
	    _this.handleMouse = function () {
	      if (!_this.preventMouseRootClose && _this.props.onRootClose) {
	        _this.props.onRootClose();
	      }
	    };
	
	    _this.handleKeyUp = function (e) {
	      if (e.keyCode === 27 && _this.props.onRootClose) {
	        _this.props.onRootClose();
	      }
	    };
	
	    _this.preventMouseRootClose = false;
	
	    _this.addEventListeners = _this.addEventListeners.bind(_this);
	    _this.removeEventListeners = _this.removeEventListeners.bind(_this);
	
	    return _this;
	  }
	
	  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
	    if (!this.props.disabled) {
	      this.addEventListeners();
	    }
	  };
	
	  RootCloseWrapper.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (!this.props.disabled && prevProps.disabled) {
	      this.addEventListeners();
	    } else if (this.props.disabled && !prevProps.disabled) {
	      this.removeEventListeners();
	    }
	  };
	
	  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (!this.props.disabled) {
	      this.removeEventListeners();
	    }
	  };
	
	  RootCloseWrapper.prototype.addEventListeners = function addEventListeners() {
	    var event = this.props.event;
	
	    var doc = (0, _ownerDocument2["default"])(this);
	
	    // 避免react的监听事件触发引起判断的不准确
	    this.documentMouseCaptureListener = (0, _addEventListener2["default"])(doc, event, this.handleMouseCapture, true);
	
	    this.documentMouseListener = (0, _addEventListener2["default"])(doc, event, this.handleMouse);
	
	    this.documentKeyupListener = (0, _addEventListener2["default"])(doc, 'keyup', this.handleKeyUp);
	  };
	
	  RootCloseWrapper.prototype.removeEventListeners = function removeEventListeners() {
	    if (this.documentMouseCaptureListener) {
	      this.documentMouseCaptureListener.remove();
	    }
	
	    if (this.documentMouseListener) {
	      this.documentMouseListener.remove();
	    }
	
	    if (this.documentKeyupListener) {
	      this.documentKeyupListener.remove();
	    }
	  };
	
	  RootCloseWrapper.prototype.render = function render() {
	    return this.props.children;
	  };
	
	  return RootCloseWrapper;
	}(_react.Component);
	
	RootCloseWrapper.propTypes = propTypes;
	
	RootCloseWrapper.defaultProps = defaultProps;
	
	exports["default"] = RootCloseWrapper;
	module.exports = exports['default'];

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Transition = __webpack_require__(128);
	
	var _Transition2 = _interopRequireDefault(_Transition);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  "in": _propTypes2["default"].bool,
	
	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _propTypes2["default"].bool,
	
	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,
	
	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _propTypes2["default"].number,
	
	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _propTypes2["default"].func
	};
	
	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};
	
	var Fade = function (_React$Component) {
	  _inherits(Fade, _React$Component);
	
	  function Fade() {
	    _classCallCheck(this, Fade);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Fade.prototype.render = function render() {
	    return _react2["default"].createElement(_Transition2["default"], _extends({}, this.props, {
	      className: (0, _classnames2["default"])(this.props.className, 'fade'),
	      enteredClassName: 'in',
	      enteringClassName: 'in'
	    }));
	  };
	
	  return Fade;
	}(_react2["default"].Component);
	
	Fade.propTypes = propTypes;
	Fade.defaultProps = defaultProps;
	
	exports["default"] = Fade;
	module.exports = exports['default'];

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _properties = __webpack_require__(13);
	
	var _properties2 = _interopRequireDefault(_properties);
	
	var _on = __webpack_require__(15);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var transitionEndEvent = _properties2["default"].end;
	
	//设置状态码
	var UNMOUNTED = exports.UNMOUNTED = 0;
	var EXITED = exports.EXITED = 1;
	var ENTERING = exports.ENTERING = 2;
	var ENTERED = exports.ENTERED = 3;
	var EXITING = exports.EXITING = 4;
	
	var propTypes = {
	  /**
	   * 是否触发动画
	   */
	  "in": _propTypes2["default"].bool,
	
	  /**
	   * 不显示的时候是否移除组件
	   */
	  unmountOnExit: _propTypes2["default"].bool,
	
	  /**
	   * 如果设置为默认显示，挂载时显示动画
	   */
	  transitionAppear: _propTypes2["default"].bool,
	
	  /**
	   * 设置超时时间，防止出现问题，可设置为>=动画时间
	   */
	  timeout: _propTypes2["default"].number,
	
	  /**
	   * 退出组件时添加的class
	   */
	  exitedClassName: _propTypes2["default"].string,
	  /**
	   * 退出组件中添加的class
	   */
	  exitingClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画后添加的class
	   */
	  enteredClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画时添加的class
	   */
	  enteringClassName: _propTypes2["default"].string,
	
	  /**
	   * 进入动画开始时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * 进入动画中的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * 进入动画后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * 退出动画开始时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * 退出动画中的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * 退出动画后的钩子函数
	   */
	  onExited: _propTypes2["default"].func
	};
	
	function noop() {}
	
	var defaultProps = {
	  "in": false,
	  unmountOnExit: false,
	  transitionAppear: false,
	  timeout: 5000,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	
	/**
	 * 动画组件
	 */
	
	var Transition = function (_Component) {
	  _inherits(Transition, _Component);
	
	  function Transition(props, context) {
	    _classCallCheck(this, Transition);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    var initialStatus = void 0;
	    if (props["in"]) {
	      // 在componentdidmount时开始执行动画
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    _this.state = { status: initialStatus };
	
	    _this.nextCallback = null;
	
	    _this.performEnter = _this.performEnter.bind(_this);
	    _this.performExit = _this.performExit.bind(_this);
	    _this.cancelNextCallback = _this.cancelNextCallback.bind(_this);
	    _this.onTransitionEnd = _this.onTransitionEnd.bind(_this);
	    _this.safeSetState = _this.safeSetState.bind(_this);
	    _this.setNextCallback = _this.setNextCallback.bind(_this);
	
	    return _this;
	  }
	
	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props["in"]) {
	      this.performEnter(this.props);
	    }
	  };
	
	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps["in"] && this.props.unmountOnExit) {
	      if (this.state.status === UNMOUNTED) {
	        // 在componentDidUpdate执行动画.
	        this.setState({ status: EXITED });
	      }
	    } else {
	      this._needsUpdate = true;
	    }
	  };
	
	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    var status = this.state.status;
	
	    if (this.props.unmountOnExit && status === EXITED) {
	      // 当使用unmountOnExit时，exited为exiting和unmont的过渡状态
	      if (this.props["in"]) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }
	
	      return;
	    }
	
	    // 确保只响应prop变化
	    if (this._needsUpdate) {
	      this._needsUpdate = false;
	
	      if (this.props["in"]) {
	        if (status === EXITING) {
	          this.performEnter(this.props);
	        } else if (status === EXITED) {
	          this.performEnter(this.props);
	        }
	        // 其他，当我们已经输入或输出
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          this.performExit(this.props);
	        }
	        // 我们已经输入或输出完成
	      }
	    }
	  };
	
	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };
	
	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this2 = this;
	
	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);
	
	    // 这里接收新props
	    props.onEnter(node);
	
	    this.safeSetState({ status: ENTERING }, function () {
	      _this2.props.onEntering(node);
	
	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: ENTERED }, function () {
	          _this2.props.onEntered(node);
	        });
	      });
	    });
	  };
	
	  Transition.prototype.performExit = function performExit(props) {
	    var _this3 = this;
	
	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);
	
	    props.onExit(node);
	
	    this.safeSetState({ status: EXITING }, function () {
	      _this3.props.onExiting(node);
	
	      _this3.onTransitionEnd(node, function () {
	        _this3.safeSetState({ status: EXITED }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };
	
	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };
	
	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // 确保在组件销毁后挂起的setState被消除
	    this.setState(nextState, this.setNextCallback(callback));
	  };
	
	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;
	
	    var active = true;
	
	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	
	        callback(event);
	      }
	    };
	
	    this.nextCallback.cancel = function () {
	      active = false;
	    };
	
	    return this.nextCallback;
	  };
	
	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);
	
	    if (node) {
	      (0, _on2["default"])(node, transitionEndEvent, this.nextCallback);
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };
	
	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }
	
	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        childProps = _objectWithoutProperties(_props, ['children', 'className']);
	
	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });
	
	    var transitionClassName = void 0;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }
	
	    var child = _react2["default"].Children.only(children);
	    return _react2["default"].cloneElement(child, _extends({}, childProps, {
	      className: (0, _classnames2["default"])(child.props.className, className, transitionClassName)
	    }));
	  };
	
	  return Transition;
	}(_react.Component);
	
	Transition.propTypes = propTypes;
	
	Transition.defaultProps = defaultProps;
	
	exports["default"] = Transition;

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }
	
	    if (acc === null) {
	      return f;
	    }
	
	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}
	
	exports["default"] = createChainedFunction;
	module.exports = exports['default'];

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.getComponentLocale = getComponentLocale;
	exports.getLocaleCode = getLocaleCode;
	function getComponentLocale(props, context, componentName, getDefaultLocale) {
	    var locale = {};
	    if (context && context.beeLocale && context.beeLocale[componentName]) {
	        locale = context.beeLocale[componentName];
	    } else {
	        var defaultLocale = getDefaultLocale();
	
	        locale = defaultLocale["default"] || defaultLocale;
	    }
	
	    var result = _extends({}, locale, props.locale);
	    if (props.locale) {
	        result.lang = _extends({}, locale.lang, props.locale.lang);
	    } else {
	        result.lang = _extends({}, locale.lang);
	    }
	
	    return result;
	}
	
	function getLocaleCode(context) {
	    var localeCode = context.beeLocale && context.beeLocale.lang;
	    // Had use LocaleProvide but didn't set locale
	    if (context.beeLocale && context.beeLocale.exist && !localeCode) {
	        return 'zh-cn';
	    }
	    return localeCode;
	}

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	    'lang': 'zh-cn',
	    'copy': '复制',
	    'cut': '剪切',
	    'copyReady': '已复制',
	    'cutReady': '已剪切',
	    'copyToClipboard': '复制到剪切板',
	    'close': '关闭',
	
	    'en-us': {
	        'copy': 'copy',
	        'cut': 'cut',
	        'copyReady': 'copied',
	        'cutReady': 'cut',
	        'copyToClipboard': 'copy to clipboard',
	        'close': 'close'
	    },
	    'zh-tw': {
	        'copy': '複製',
	        'cut': '剪切',
	        'copyReady': '已複製',
	        'cutReady': '已剪切',
	        'copyToClipboard': '複製到剪切板',
	        'close': '關閉'
	    }
	};

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Modal = __webpack_require__(133);
	
	var _Modal2 = _interopRequireDefault(_Modal);
	
	var _confirm = __webpack_require__(259);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _beeIcon = __webpack_require__(78);
	
	var _beeIcon2 = _interopRequireDefault(_beeIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	_Modal2["default"].info = function (props) {
	    var config = _extends({
	        type: 'info',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-i-c-2' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};
	
	_Modal2["default"].success = function (props) {
	    var config = _extends({
	        type: 'success',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-correct' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};
	
	_Modal2["default"].error = function (props) {
	    var config = _extends({
	        type: 'error',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-exc-c' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};
	
	_Modal2["default"].warning = function (props) {
	    var config = _extends({
	        type: 'warning',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-exc-t' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};
	
	_Modal2["default"].confirm = function (props) {
	    var config = _extends({
	        type: 'confirm',
	        okCancel: true
	    }, props);
	    return (0, _confirm2["default"])(config);
	};
	
	_Modal2["default"].destroyAll = function () {
	    while (_Modal.destroyFns.length) {
	        var close = _Modal.destroyFns.pop();
	        if (close) {
	            close();
	        }
	    }
	};
	exports["default"] = _Modal2["default"];
	module.exports = exports['default'];

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.destroyFns = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends2;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _events = __webpack_require__(134);
	
	var _events2 = _interopRequireDefault(_events);
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	var _scrollbarSize = __webpack_require__(138);
	
	var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _Modal = __webpack_require__(139);
	
	var _Modal2 = _interopRequireDefault(_Modal);
	
	var _isOverflowing = __webpack_require__(142);
	
	var _isOverflowing2 = _interopRequireDefault(_isOverflowing);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	var _beeTransition = __webpack_require__(11);
	
	var _ModalBody = __webpack_require__(146);
	
	var _ModalBody2 = _interopRequireDefault(_ModalBody);
	
	var _ModalDialog = __webpack_require__(147);
	
	var _ModalDialog2 = _interopRequireDefault(_ModalDialog);
	
	var _ModalFooter = __webpack_require__(256);
	
	var _ModalFooter2 = _interopRequireDefault(_ModalFooter);
	
	var _ModalHeader = __webpack_require__(257);
	
	var _ModalHeader2 = _interopRequireDefault(_ModalHeader);
	
	var _ModalTitle = __webpack_require__(258);
	
	var _ModalTitle2 = _interopRequireDefault(_ModalTitle);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var propTypes = _extends({}, _Modal2["default"].propTypes, _ModalDialog2["default"].propTypes, (_extends2 = {
	
	  /**
	   * 是否弹出遮罩层/遮罩层点击是否触发关闭
	   */
	  backdrop: _propTypes2["default"].oneOf(['static', true, false]),
	
	  /**
	   * 点击遮罩层是否允许关闭
	   */
	  backdropClosable: _propTypes2["default"].bool,
	  /**
	   * esc触发关闭
	   */
	  keyboard: _propTypes2["default"].bool,
	
	  /**
	   * 显隐时是否使用动画
	   */
	  animation: _propTypes2["default"].bool,
	
	  /**
	   * 传递给模态框的样式
	   */
	  dialogComponentClass: _tinperBeeCore.elementType,
	
	  /**
	   * 自动设置焦点
	   */
	  autoFocus: _propTypes2["default"].bool,
	
	  /**
	   * 防止打开时焦点离开模态框
	   */
	  enforceFocus: _propTypes2["default"].bool,
	
	  /**
	   * 是否打开模态框
	   */
	  show: _propTypes2["default"].bool,
	
	  /**
	   * 关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func,
	
	  onEnter: _propTypes2["default"].func,
	
	  onEntering: _propTypes2["default"].func,
	
	  onEntered: _propTypes2["default"].func,
	
	  onExit: _propTypes2["default"].func,
	
	  onExiting: _propTypes2["default"].func,
	
	  onExited: _propTypes2["default"].func,
	
	  containerClassName: _propTypes2["default"].string
	}, _defineProperty(_extends2, 'containerClassName', _propTypes2["default"].string), _defineProperty(_extends2, 'container', _Modal2["default"].propTypes.container), _defineProperty(_extends2, 'size', _propTypes2["default"].oneOf(["sm", "lg", "xlg", ""])), _defineProperty(_extends2, 'width', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'draggable', _propTypes2["default"].bool), _defineProperty(_extends2, 'resizable', _propTypes2["default"].bool), _defineProperty(_extends2, 'onResizeStart', _propTypes2["default"].func), _defineProperty(_extends2, 'onResize', _propTypes2["default"].func), _defineProperty(_extends2, 'onResizeStop', _propTypes2["default"].func), _defineProperty(_extends2, 'minWidth', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'minHeight', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'maxWidth', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'maxHeight', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _extends2));
	
	var defaultProps = _extends({}, _Modal2["default"].defaultProps, {
	  backdropClosable: true,
	  animation: true,
	  dialogComponentClass: _ModalDialog2["default"],
	  draggable: false,
	  resizable: false,
	  clsPrefix: 'u-modal'
	});
	
	var ModalFuncProps = {
	  prefixCls: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  show: _propTypes2["default"].bool,
	  title: _react2["default"].ReactNode,
	  content: _react2["default"].ReactNode,
	  onOk: _propTypes2["default"].func,
	  onCancel: _propTypes2["default"].func,
	  width: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	  okText: _propTypes2["default"].string,
	  okType: _propTypes2["default"].string,
	  cancelText: _propTypes2["default"].string,
	  icon: _react2["default"].ReactNode,
	  backdrop: _propTypes2["default"].oneOf(['static', true, false])
	};
	
	var ModalFunc = function ModalFunc(props) {
	  destroy = function destroy() {};
	  update = function update(newConfig) {};
	};
	
	var destroyFns = exports.destroyFns = [];
	
	var childContextTypes = {
	  $u_modal: _propTypes2["default"].shape({
	    onHide: _propTypes2["default"].func
	  })
	};
	
	var Modal = function (_React$Component) {
	  _inherits(Modal, _React$Component);
	
	  function Modal(props, context) {
	    _classCallCheck(this, Modal);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.handleEntering = _this.handleEntering.bind(_this);
	    _this.handleExited = _this.handleExited.bind(_this);
	    _this.handleWindowResize = _this.handleWindowResize.bind(_this);
	    _this.handleDialogClick = _this.handleDialogClick.bind(_this);
	
	    _this.state = {
	      style: {}
	    };
	    return _this;
	  }
	
	  Modal.prototype.getChildContext = function getChildContext() {
	    return {
	      $u_modal: {
	        onHide: this.props.onHide
	      }
	    };
	  };
	
	  Modal.prototype.componentWillUnmount = function componentWillUnmount() {
	    // Clean up the listener if we need to.
	    this.handleExited();
	  };
	
	  Modal.prototype.handleEntering = function handleEntering() {
	    // FIXME: This should work even when animation is disabled.
	    _events2["default"].on(window, 'resize', this.handleWindowResize);
	    this.updateStyle();
	  };
	
	  Modal.prototype.handleExited = function handleExited() {
	    // FIXME: This should work even when animation is disabled.
	    _events2["default"].off(window, 'resize', this.handleWindowResize);
	  };
	
	  Modal.prototype.handleWindowResize = function handleWindowResize() {
	    this.updateStyle();
	  };
	
	  Modal.prototype.handleDialogClick = function handleDialogClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }
	
	    this.props.onHide();
	  };
	
	  Modal.prototype.updateStyle = function updateStyle() {
	    if (!_inDOM2["default"] || !this._modal) {
	      return;
	    }
	
	    var dialogNode = this._modal.getDialogElement();
	    var dialogHeight = dialogNode.scrollHeight;
	
	    var document = (0, _ownerDocument2["default"])(dialogNode);
	    var bodyIsOverflowing = (0, _isOverflowing2["default"])(_reactDom2["default"].findDOMNode(this.props.container || document.body));
	    var modalIsOverflowing = dialogHeight > document.documentElement.clientHeight;
	
	    this.setState({
	      style: {
	        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _scrollbarSize2["default"])() : undefined,
	        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _scrollbarSize2["default"])() : undefined
	      }
	    });
	  };
	
	  Modal.prototype.render = function render() {
	    var _this2 = this;
	
	    var _props = this.props,
	        backdrop = _props.backdrop,
	        backdropClosable = _props.backdropClosable,
	        animation = _props.animation,
	        show = _props.show,
	        Dialog = _props.dialogComponentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        _props$style = _props.style,
	        style = _props$style === undefined ? {} : _props$style,
	        size = _props.size,
	        width = _props.width,
	        children = _props.children,
	        onEntering = _props.onEntering,
	        onExited = _props.onExited,
	        backdropClassName = _props.backdropClassName,
	        containerClassName = _props.containerClassName,
	        draggable = _props.draggable,
	        props = _objectWithoutProperties(_props, ['backdrop', 'backdropClosable', 'animation', 'show', 'dialogComponentClass', 'className', 'clsPrefix', 'style', 'size', 'width', 'children', 'onEntering', 'onExited', 'backdropClassName', 'containerClassName', 'draggable']);
	
	    var _splitComponent = (0, _tinperBeeCore.splitComponent)(props, _Modal2["default"]),
	        _splitComponent2 = _slicedToArray(_splitComponent, 2),
	        baseModalProps = _splitComponent2[0],
	        dialogProps = _splitComponent2[1];
	
	    var inClassName = show && !animation && 'in';
	
	    var backdropClasses = _defineProperty({}, clsPrefix + '-backdrop', true);
	    var containerClasses = _defineProperty({}, clsPrefix + '-open', true);
	    if (Number(width)) width += 'px';
	
	    var styleRes = _extends({}, this.state.style, style);
	    if (width) {
	      _extends(styleRes, { width: width });
	    }
	    return _react2["default"].createElement(
	      _Modal2["default"],
	      _extends({}, baseModalProps, {
	        ref: function ref(c) {
	          _this2._modal = c;
	        },
	        show: show,
	        onEntering: (0, _tinperBeeCore.createChainedFunction)(onEntering, this.handleEntering),
	        onExited: (0, _tinperBeeCore.createChainedFunction)(onExited, this.handleExited),
	        backdrop: backdrop,
	        backdropClassName: (0, _classnames2["default"])(backdropClasses, inClassName),
	        containerClassName: (0, _classnames2["default"])(containerClasses, containerClassName),
	        transition: animation ? _beeTransition.Fade : undefined,
	        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
	        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
	      }),
	      _react2["default"].createElement(
	        Dialog,
	        _extends({}, dialogProps, {
	          style: styleRes,
	          className: (0, _classnames2["default"])(className, inClassName, backdropClassName),
	          onClick: backdrop === true && !!backdropClosable ? this.handleDialogClick : null,
	          size: size,
	          draggable: draggable
	        }),
	        children
	      )
	    );
	  };
	
	  return Modal;
	}(_react2["default"].Component);
	
	Modal.info = ModalFunc;
	Modal.success = ModalFunc;
	Modal.error = ModalFunc;
	Modal.warn = ModalFunc;
	Modal.warning = ModalFunc;
	Modal.confirm = ModalFunc;
	
	Modal.destroyAll = function () {
	  return;
	};
	
	Modal.propTypes = propTypes;
	Modal.defaultProps = defaultProps;
	Modal.childContextTypes = childContextTypes;
	
	Modal.Body = _ModalBody2["default"];
	Modal.Header = _ModalHeader2["default"];
	Modal.Title = _ModalTitle2["default"];
	Modal.Footer = _ModalFooter2["default"];
	
	Modal.Dialog = _ModalDialog2["default"];
	
	Modal.TRANSITION_DURATION = 200000;
	Modal.BACKDROP_TRANSITION_DURATION = 10000;
	
	exports["default"] = Modal;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.listen = exports.filter = exports.off = exports.on = undefined;
	
	var _on = __webpack_require__(15);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _off = __webpack_require__(76);
	
	var _off2 = _interopRequireDefault(_off);
	
	var _filter = __webpack_require__(135);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _listen = __webpack_require__(137);
	
	var _listen2 = _interopRequireDefault(_listen);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.on = _on2.default;
	exports.off = _off2.default;
	exports.filter = _filter2.default;
	exports.listen = _listen2.default;
	exports.default = { on: _on2.default, off: _off2.default, filter: _filter2.default, listen: _listen2.default };

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = filterEvents;
	
	var _contains = __webpack_require__(110);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _querySelectorAll = __webpack_require__(136);
	
	var _querySelectorAll2 = _interopRequireDefault(_querySelectorAll);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function filterEvents(selector, handler) {
	  return function filterHandler(e) {
	    var top = e.currentTarget,
	        target = e.target,
	        matches = (0, _querySelectorAll2.default)(top, selector);
	
	    if (matches.some(function (match) {
	      return (0, _contains2.default)(match, target);
	    })) handler.call(this, e);
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = qsa;
	// Zepto.js
	// (c) 2010-2015 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.
	var simpleSelectorRE = /^[\w-]*$/;
	var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
	
	function qsa(element, selector) {
	  var maybeID = selector[0] === '#',
	      maybeClass = selector[0] === '.',
	      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
	      isSimple = simpleSelectorRE.test(nameOnly),
	      found;
	
	  if (isSimple) {
	    if (maybeID) {
	      element = element.getElementById ? element : document;
	      return (found = element.getElementById(nameOnly)) ? [found] : [];
	    }
	
	    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));
	
	    return toArray(element.getElementsByTagName(selector));
	  }
	
	  return toArray(element.querySelectorAll(selector));
	}
	module.exports = exports['default'];

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	var _on = __webpack_require__(15);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _off = __webpack_require__(76);
	
	var _off2 = _interopRequireDefault(_off);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var listen = function listen() {};
	
	if (_inDOM2.default) {
	  listen = function listen(node, eventName, handler, capture) {
	    (0, _on2.default)(node, eventName, handler, capture);
	    return function () {
	      (0, _off2.default)(node, eventName, handler, capture);
	    };
	  };
	}
	
	exports.default = listen;
	module.exports = exports['default'];

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (recalc) {
	  if (!size || recalc) {
	    if (_inDOM2.default) {
	      var scrollDiv = document.createElement('div');
	
	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';
	
	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }
	
	  return size;
	};
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var size = void 0;
	
	module.exports = exports['default'];

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*eslint-disable react/prop-types */
	
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(31);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	var _Portal = __webpack_require__(111);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _ModalManager = __webpack_require__(140);
	
	var _ModalManager2 = _interopRequireDefault(_ModalManager);
	
	var _ownerDocument = __webpack_require__(73);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	var _addEventListener = __webpack_require__(75);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	var _addFocusListener = __webpack_require__(144);
	
	var _addFocusListener2 = _interopRequireDefault(_addFocusListener);
	
	var _inDOM = __webpack_require__(14);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	var _activeElement = __webpack_require__(145);
	
	var _activeElement2 = _interopRequireDefault(_activeElement);
	
	var _contains = __webpack_require__(110);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _getContainer = __webpack_require__(112);
	
	var _getContainer2 = _interopRequireDefault(_getContainer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var modalManager = new _ModalManager2["default"]();
	
	/**
	 * 模态框
	 */
	
	var propTypes = _extends({}, _Portal2["default"].propTypes, {
	
	  /**
	   * 是否显示
	   */
	  show: _propTypes2["default"].bool,
	
	  /**
	   * 容器
	   */
	  container: _propTypes2["default"].oneOfType([_tinperBeeCore.componentOrElement, _propTypes2["default"].func]),
	
	  /**
	   * 当模态框打开时的钩子函数
	   */
	  onShow: _propTypes2["default"].func,
	
	  /**
	   * 当show参数为false时触发的模态框关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func,
	
	  /**
	   * 是否包含背景
	   */
	  backdrop: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].oneOf(['static'])]),
	
	  /**
	   *返回背景组件的函数
	   */
	  renderBackdrop: _propTypes2["default"].func,
	
	  /**
	   * 设置esc键特殊钩子函数
	   */
	  onEscapeKeyUp: _propTypes2["default"].func,
	
	  /**
	   * 当点击背景时触发的函数
	   */
	  onBackdropClick: _propTypes2["default"].func,
	
	  /**
	   * 背景的style
	   */
	  backdropStyle: _propTypes2["default"].object,
	
	  /**
	   * 背景的class
	   */
	  backdropClassName: _propTypes2["default"].string,
	
	  /**
	   *容器的class
	   */
	  containerClassName: _propTypes2["default"].string,
	
	  /**
	   * 按esc键是否关闭模态框
	   */
	  keyboard: _propTypes2["default"].bool,
	
	  /**
	   * 动画组件
	   */
	  transition: _tinperBeeCore.elementType,
	
	  /**
	   * 设置动画超时时间
	   */
	  dialogTransitionTimeout: _propTypes2["default"].number,
	
	  /**
	   * 设置背景动画超时时间
	   */
	  backdropTransitionTimeout: _propTypes2["default"].number,
	
	  /**
	   * 是否自动设置焦点
	   */
	  autoFocus: _propTypes2["default"].bool,
	
	  /**
	   * 防止焦点离开模态框
	   */
	  enforceFocus: _propTypes2["default"].bool,
	
	  /**
	   * 模态框进入时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	
	  /**
	   * 模态框开始进入时的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	
	  /**
	   * 模态框进入后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	
	  /**
	   * 模态框退出时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	
	  /**
	   * 模态框开始退出时的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	
	  /**
	   * 模态框推出后的钩子函数
	   */
	  onExited: _propTypes2["default"].func,
	
	  /**
	   *管理model状态的实例
	   */
	  manager: _propTypes2["default"].object.isRequired
	});
	
	var defaultProps = {
	  show: false,
	  backdrop: true,
	  keyboard: true,
	  autoFocus: true,
	  enforceFocus: true,
	  onHide: function onHide() {},
	  manager: modalManager,
	  renderBackdrop: function renderBackdrop(props) {
	    return _react2["default"].createElement('div', props);
	  }
	};
	
	var BaseModal = function (_Component) {
	  _inherits(BaseModal, _Component);
	
	  function BaseModal(props, content) {
	    _classCallCheck(this, BaseModal);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.state = {
	      exited: !_this.props.show
	    };
	
	    _this.onShow = _this.onShow.bind(_this);
	    _this.onHide = _this.onHide.bind(_this);
	    _this.setMountNode = _this.setMountNode.bind(_this);
	    _this.handleHidden = _this.handleHidden.bind(_this);
	    _this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
	    _this.handleDocumentKeyUp = _this.handleDocumentKeyUp.bind(_this);
	    _this.checkForFocus = _this.checkForFocus.bind(_this);
	    _this.focus = _this.focus.bind(_this);
	    _this.restoreLastFocus = _this.restoreLastFocus.bind(_this);
	    _this.enforceFocus = _this.enforceFocus.bind(_this);
	    _this.getDialogElement = _this.getDialogElement.bind(_this);
	    _this.isTopModal = _this.isTopModal.bind(_this);
	    _this.renderBackdrop = _this.renderBackdrop.bind(_this);
	    return _this;
	  }
	
	  BaseModal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };
	
	  BaseModal.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    if (!this.props.show && nextProps.show) {
	      this.checkForFocus();
	    }
	  };
	
	  BaseModal.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.show) {
	      this.onShow();
	    }
	    this.mounted = true;
	  };
	
	  BaseModal.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var transition = this.props.transition;
	
	
	    if (prevProps.show && !this.props.show && !transition) {
	      // Otherwise handleHidden will call this.
	      this.onHide();
	    } else if (!prevProps.show && this.props.show) {
	      this.onShow();
	    }
	  };
	
	  BaseModal.prototype.componentWillUnmount = function componentWillUnmount() {
	    var _props = this.props,
	        show = _props.show,
	        transition = _props.transition;
	
	
	    if (show || transition && !this.state.exited) {
	      this.onHide();
	    }
	
	    this.mounted = false;
	  };
	
	  BaseModal.prototype.onShow = function onShow() {
	    var doc = (0, _ownerDocument2["default"])(this);
	    var container = (0, _getContainer2["default"])(this.props.container, doc.body);
	
	    this.props.manager.add(this, container, this.props.containerClassName);
	
	    this._onDocumentKeyupListener = (0, _addEventListener2["default"])(doc, 'keyup', this.handleDocumentKeyUp);
	
	    this._onFocusinListener = (0, _addFocusListener2["default"])(this.enforceFocus);
	
	    this.focus();
	
	    if (this.props.onShow) {
	      this.props.onShow();
	    }
	  };
	
	  BaseModal.prototype.onHide = function onHide() {
	    this.props.manager.remove(this);
	
	    this._onDocumentKeyupListener.remove();
	
	    this._onFocusinListener.remove();
	
	    this.restoreLastFocus();
	  };
	
	  BaseModal.prototype.setMountNode = function setMountNode(ref) {
	    this.mountNode = ref ? ref.getMountNode() : ref;
	  };
	
	  BaseModal.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });
	    this.onHide();
	
	    if (this.props.onExited) {
	      var _props2;
	
	      (_props2 = this.props).onExited.apply(_props2, arguments);
	    }
	  };
	
	  BaseModal.prototype.handleBackdropClick = function handleBackdropClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }
	
	    if (this.props.onBackdropClick) {
	      this.props.onBackdropClick(e);
	    }
	
	    if (this.props.backdrop === true) {
	      this.props.onHide();
	    }
	  };
	
	  BaseModal.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
	    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
	      if (this.props.onEscapeKeyUp) {
	        this.props.onEscapeKeyUp(e);
	      }
	      this.props.onHide();
	    }
	  };
	
	  BaseModal.prototype.checkForFocus = function checkForFocus() {
	    if (_inDOM2["default"]) {
	      this.lastFocus = (0, _activeElement2["default"])();
	    }
	  };
	
	  BaseModal.prototype.focus = function focus() {
	    var autoFocus = this.props.autoFocus;
	    var modalContent = this.getDialogElement();
	    var current = (0, _activeElement2["default"])((0, _ownerDocument2["default"])(this));
	    var focusInModal = current && (0, _contains2["default"])(modalContent, current);
	
	    if (modalContent && autoFocus && !focusInModal) {
	      this.lastFocus = current;
	
	      if (!modalContent.hasAttribute('tabIndex')) {
	        modalContent.setAttribute('tabIndex', -1);
	        (0, _warning2["default"])(false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
	      }
	
	      modalContent.focus();
	    }
	  };
	
	  BaseModal.prototype.restoreLastFocus = function restoreLastFocus() {
	    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
	    if (this.lastFocus && this.lastFocus.focus) {
	      this.lastFocus.focus();
	      this.lastFocus = null;
	    }
	  };
	
	  BaseModal.prototype.enforceFocus = function enforceFocus() {
	    var enforceFocus = this.props.enforceFocus;
	
	
	    if (!enforceFocus || !this.mounted || !this.isTopModal()) {
	      return;
	    }
	
	    var active = (0, _activeElement2["default"])((0, _ownerDocument2["default"])(this));
	    var modal = this.getDialogElement();
	
	    if (modal && modal !== active && !(0, _contains2["default"])(modal, active)) {
	      modal.focus();
	    }
	  };
	
	  //instead of a ref, which might conflict with one the parent applied.
	
	
	  BaseModal.prototype.getDialogElement = function getDialogElement() {
	    var node = this.modal;
	    return node && node.lastChild;
	  };
	
	  BaseModal.prototype.isTopModal = function isTopModal() {
	    return this.props.manager.isTopModal(this);
	  };
	
	  BaseModal.prototype.renderBackdrop = function renderBackdrop() {
	    var _this2 = this;
	
	    var _props3 = this.props,
	        backdropStyle = _props3.backdropStyle,
	        backdropClassName = _props3.backdropClassName,
	        renderBackdrop = _props3.renderBackdrop,
	        Transition = _props3.transition,
	        backdropTransitionTimeout = _props3.backdropTransitionTimeout;
	
	
	    var backdropRef = function backdropRef(ref) {
	      return _this2.backdrop = ref;
	    };
	
	    var backdrop = _react2["default"].createElement('div', {
	      ref: backdropRef,
	      style: this.props.backdropStyle,
	      className: this.props.backdropClassName,
	      onClick: this.handleBackdropClick
	    });
	
	    if (Transition) {
	      backdrop = _react2["default"].createElement(
	        Transition,
	        { transitionAppear: true,
	          'in': this.props.show,
	          timeout: backdropTransitionTimeout
	        },
	        renderBackdrop({
	          ref: backdropRef,
	          style: backdropStyle,
	          className: backdropClassName,
	          onClick: this.handleBackdropClick
	        })
	      );
	    }
	
	    return backdrop;
	  };
	
	  BaseModal.prototype.render = function render() {
	    var _this3 = this;
	
	    var _props4 = this.props,
	        show = _props4.show,
	        container = _props4.container,
	        children = _props4.children,
	        Transition = _props4.transition,
	        backdrop = _props4.backdrop,
	        dialogTransitionTimeout = _props4.dialogTransitionTimeout,
	        className = _props4.className,
	        style = _props4.style,
	        onExit = _props4.onExit,
	        onExiting = _props4.onExiting,
	        onEnter = _props4.onEnter,
	        onEntering = _props4.onEntering,
	        onEntered = _props4.onEntered;
	
	
	    var dialog = _react2["default"].Children.only(children);
	
	    var mountModal = show || Transition && !this.state.exited;
	    if (!mountModal) {
	      return null;
	    }
	
	    var _dialog$props = dialog.props,
	        role = _dialog$props.role,
	        tabIndex = _dialog$props.tabIndex;
	
	
	    if (role === undefined || tabIndex === undefined) {
	      dialog = (0, _react.cloneElement)(dialog, {
	        role: role === undefined ? 'document' : role,
	        tabIndex: tabIndex == null ? '-1' : tabIndex
	      });
	    }
	
	    if (Transition) {
	      dialog = _react2["default"].createElement(
	        Transition,
	        {
	          transitionAppear: true,
	          unmountOnExit: true,
	          'in': show,
	          timeout: dialogTransitionTimeout,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.handleHidden,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        dialog
	      );
	    }
	
	    return _react2["default"].createElement(
	      _Portal2["default"],
	      {
	        ref: this.setMountNode,
	        container: container
	      },
	      _react2["default"].createElement(
	        'div',
	        {
	          ref: function ref(el) {
	            _this3.modal = el;
	          },
	          role: role || 'dialog',
	          style: style,
	          className: className
	        },
	        backdrop && this.renderBackdrop(),
	        dialog
	      )
	    );
	  };
	
	  return BaseModal;
	}(_react.Component);
	
	;
	
	BaseModal.Manager = _ModalManager2["default"];
	
	BaseModal.propTypes = propTypes;
	BaseModal.defaultProps = defaultProps;
	
	exports["default"] = BaseModal;
	module.exports = exports['default'];

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _style = __webpack_require__(17);
	
	var _style2 = _interopRequireDefault(_style);
	
	var _class = __webpack_require__(141);
	
	var _class2 = _interopRequireDefault(_class);
	
	var _scrollbarSize = __webpack_require__(138);
	
	var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);
	
	var _isOverflowing = __webpack_require__(142);
	
	var _isOverflowing2 = _interopRequireDefault(_isOverflowing);
	
	var _manageAriaHidden = __webpack_require__(143);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function findIndexOf(arr, cb) {
	  var idx = -1;
	  arr.some(function (d, i) {
	    if (cb(d, i)) {
	      idx = i;
	      return true;
	    }
	  });
	  return idx;
	}
	
	//查找容器
	function findContainer(data, modal) {
	  return findIndexOf(data, function (d) {
	    return d.modals.indexOf(modal) !== -1;
	  });
	}
	
	//设置容器style
	function setContainerStyle(state, container) {
	  var style = { overflow: 'hidden' };
	
	  state.style = {
	    overflow: container.style.overflow,
	    paddingRight: container.style.paddingRight
	  };
	
	  if (state.overflowing) {
	    //设置内边距，和添加滚动条宽度
	    style.paddingRight = parseInt((0, _style2["default"])(container, 'paddingRight') || 0, 10) + (0, _scrollbarSize2["default"])() + 'px';
	  }
	
	  (0, _style2["default"])(container, style);
	}
	//移除容器style
	function removeContainerStyle(_ref, container) {
	  var style = _ref.style;
	
	
	  Object.keys(style).forEach(function (key) {
	    return container.style[key] = style[key];
	  });
	}
	/**
	 * 容器的正确状态管理和那些容器中的模态。
	 */
	
	var ModalManager = function () {
	  function ModalManager() {
	    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref2$hideSiblingNode = _ref2.hideSiblingNodes,
	        hideSiblingNodes = _ref2$hideSiblingNode === undefined ? true : _ref2$hideSiblingNode,
	        _ref2$handleContainer = _ref2.handleContainerOverflow,
	        handleContainerOverflow = _ref2$handleContainer === undefined ? true : _ref2$handleContainer;
	
	    _classCallCheck(this, ModalManager);
	
	    this.hideSiblingNodes = hideSiblingNodes;
	    this.handleContainerOverflow = handleContainerOverflow;
	    this.modals = [];
	    this.containers = [];
	    this.data = [];
	  }
	
	  ModalManager.prototype.add = function add(modal, container, className) {
	    var modalIdx = this.modals.indexOf(modal);
	    var containerIdx = this.containers.indexOf(container);
	
	    if (modalIdx !== -1) {
	      return modalIdx;
	    }
	
	    modalIdx = this.modals.length;
	    this.modals.push(modal);
	
	    if (this.hideSiblingNodes) {
	      (0, _manageAriaHidden.hideSiblings)(container, modal.mountNode);
	    }
	
	    if (containerIdx !== -1) {
	      this.data[containerIdx].modals.push(modal);
	      return modalIdx;
	    }
	
	    var data = {
	      modals: [modal],
	      //right now only the first modal of a container will have its classes applied
	      classes: className ? className.split(/\s+/) : [],
	
	      overflowing: (0, _isOverflowing2["default"])(container)
	    };
	
	    if (this.handleContainerOverflow) {
	      setContainerStyle(data, container);
	    }
	
	    data.classes.forEach(_class2["default"].addClass.bind(null, container));
	
	    this.containers.push(container);
	    this.data.push(data);
	
	    return modalIdx;
	  };
	
	  ModalManager.prototype.remove = function remove(modal) {
	    var modalIdx = this.modals.indexOf(modal);
	
	    if (modalIdx === -1) {
	      return;
	    }
	
	    var containerIdx = findContainer(this.data, modal);
	    var data = this.data[containerIdx];
	    var container = this.containers[containerIdx];
	
	    data.modals.splice(data.modals.indexOf(modal), 1);
	
	    this.modals.splice(modalIdx, 1);
	
	    // if that was the last modal in a container,
	    // clean up the container
	    if (data.modals.length === 0) {
	      data.classes.forEach(_class2["default"].removeClass.bind(null, container));
	
	      if (this.handleContainerOverflow) {
	        removeContainerStyle(data, container);
	      }
	
	      if (this.hideSiblingNodes) {
	        (0, _manageAriaHidden.showSiblings)(container, modal.mountNode);
	      }
	      this.containers.splice(containerIdx, 1);
	      this.data.splice(containerIdx, 1);
	    } else if (this.hideSiblingNodes) {
	      //otherwise make sure the next top modal is visible to a SR
	      (0, _manageAriaHidden.ariaHidden)(false, data.modals[data.modals.length - 1].mountNode);
	    }
	  };
	
	  ModalManager.prototype.isTopModal = function isTopModal(modal) {
	    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
	  };
	
	  return ModalManager;
	}();
	
	exports["default"] = ModalManager;
	module.exports = exports['default'];

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hasClass = exports.removeClass = exports.addClass = undefined;
	
	var _addClass = __webpack_require__(88);
	
	var _addClass2 = _interopRequireDefault(_addClass);
	
	var _removeClass = __webpack_require__(90);
	
	var _removeClass2 = _interopRequireDefault(_removeClass);
	
	var _hasClass = __webpack_require__(89);
	
	var _hasClass2 = _interopRequireDefault(_hasClass);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.addClass = _addClass2.default;
	exports.removeClass = _removeClass2.default;
	exports.hasClass = _hasClass2.default;
	exports.default = { addClass: _addClass2.default, removeClass: _removeClass2.default, hasClass: _hasClass2.default };

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = isOverflowing;
	
	var _isWindow = __webpack_require__(119);
	
	var _isWindow2 = _interopRequireDefault(_isWindow);
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function isBody(node) {
	  return node && node.tagName.toLowerCase() === 'body';
	}
	
	function bodyIsOverflowing(node) {
	  var doc = (0, _ownerDocument2["default"])(node);
	  var win = (0, _isWindow2["default"])(doc);
	  var fullWidth = win.innerWidth;
	
	  // Support: ie8, no innerWidth
	  if (!fullWidth) {
	    var documentElementRect = doc.documentElement.getBoundingClientRect();
	    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	  }
	
	  return doc.body.clientWidth < fullWidth;
	}
	
	function isOverflowing(container) {
	  var win = (0, _isWindow2["default"])(container);
	
	  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
	}
	module.exports = exports['default'];

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ariaHidden = ariaHidden;
	exports.hideSiblings = hideSiblings;
	exports.showSiblings = showSiblings;
	
	var BLACKLIST = ['template', 'script', 'style'];
	
	var isHidable = function isHidable(_ref) {
	  var nodeType = _ref.nodeType,
	      tagName = _ref.tagName;
	  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
	};
	
	var siblings = function siblings(container, mount, cb) {
	  mount = [].concat(mount);
	
	  [].forEach.call(container.children, function (node) {
	    if (mount.indexOf(node) === -1 && isHidable(node)) {
	      cb(node);
	    }
	  });
	};
	
	function ariaHidden(show, node) {
	  if (!node) {
	    return;
	  }
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}
	
	function hideSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(true, node);
	  });
	}
	
	function showSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(false, node);
	  });
	}

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = addFocusListener;
	/**
	 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
	 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
	 *
	 * We only allow one Listener at a time to avoid stack overflows
	 */
	function addFocusListener(handler) {
	  var useFocusin = !document.addEventListener;
	  var remove = void 0;
	
	  if (useFocusin) {
	    document.attachEvent('onfocusin', handler);
	    remove = function remove() {
	      return document.detachEvent('onfocusin', handler);
	    };
	  } else {
	    document.addEventListener('focus', handler, true);
	    remove = function remove() {
	      return document.removeEventListener('focus', handler, true);
	    };
	  }
	
	  return { remove: remove };
	}
	module.exports = exports['default'];

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = activeElement;
	
	var _ownerDocument = __webpack_require__(74);
	
	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function activeElement() {
	  var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _ownerDocument2.default)();
	
	  try {
	    return doc.activeElement;
	  } catch (e) {/* ie throws if no active element */}
	}
	module.exports = exports['default'];

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  componentClass: _tinperBeeCore.elementType
	};
	
	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-modal-body'
	};
	
	var ModalBody = function (_React$Component) {
	  _inherits(ModalBody, _React$Component);
	
	  function ModalBody() {
	    _classCallCheck(this, ModalBody);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  ModalBody.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	
	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };
	
	  return ModalBody;
	}(_react2["default"].Component);
	
	ModalBody.propTypes = propTypes;
	ModalBody.defaultProps = defaultProps;
	
	exports["default"] = ModalBody;
	module.exports = exports['default'];

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _beeDnd = __webpack_require__(148);
	
	var _beeDnd2 = _interopRequireDefault(_beeDnd);
	
	var _reResizable = __webpack_require__(255);
	
	var _reResizable2 = _interopRequireDefault(_reResizable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  /**
	   * 传给dialog的classname
	   */
	  dialogClassName: _propTypes2["default"].string,
	  contentStyle: _propTypes2["default"].object
	
	};
	
	var defaultProps = {
	  minHeight: 150,
	  minWidth: 200,
	  clsPrefix: 'u-modal'
	};
	
	var ModalDialog = function (_React$Component) {
	  _inherits(ModalDialog, _React$Component);
	
	  function ModalDialog() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, ModalDialog);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      original: {
	        x: 0,
	        y: 0
	      },
	      maxWidth: Number.MAX_SAFE_INTEGER,
	      maxHeight: Number.MAX_SAFE_INTEGER
	    }, _this.onStart = function () {
	      var draggable = _this.props.draggable;
	
	      return draggable;
	    }, _this.onStop = function (e, delta) {
	      _this.setState({
	        original: {
	          x: delta.x,
	          y: delta.y
	        }
	      });
	    }, _this.onResizeStart = function (e, dir, elementRef) {
	      var onResizeStart = _this.props.onResizeStart;
	
	      typeof onResizeStart === "function" && onResizeStart(e, dir, elementRef);
	    }, _this.onResize = function (e, direction, elementRef, delta) {
	      var onResize = _this.props.onResize;
	      var original = _this.state.original;
	      /* resize 之前的值 */
	
	      var originX = original.x;
	      var originY = original.y;
	
	      /* 移动的位移 */
	      var moveW = delta.width;
	      var moveH = delta.height;
	
	      /* 移动的位移 */
	      var x = null,
	          y = null;
	
	      /* 处理上边缘 */
	      if (/left/i.test(direction)) {
	        x = originX - moveW;
	        y = originY;
	        _this.position = { x: x, y: y
	
	          /* 处理左边缘 */
	        };
	      } else if (/top/i.test(direction)) {
	        x = originX;
	        y = originY - moveH;
	        _this.position = { x: x, y: y };
	      } else {
	        _this.position = null;
	      }
	
	      if (x || y) {
	        elementRef.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
	      }
	      if (delta.height) {
	        _this.updateBodyH();
	      }
	
	      typeof onResize === "function" && onResize(e, direction, elementRef, delta);
	    }, _this.onResizeStop = function (e, direction, elementRef, delta) {
	      var onResizeStop = _this.props.onResizeStop;
	
	
	      if (_this.position) {
	        _this.setState({
	          original: _this.position
	        });
	      }
	
	      typeof onResizeStop === "function" && onResizeStop(e, direction, elementRef, delta);
	    }, _this.updateBodyH = function () {
	      var $resizable = _reactDom2["default"].findDOMNode(_this.resizable);
	      var $header = $resizable.querySelector(".u-modal-header");
	      var $body = $resizable.querySelector(".u-modal-body");
	      var $footer = $resizable.querySelector(".u-modal-footer");
	
	      var totalH = $resizable.style.height;
	      totalH = Number(totalH.replace("px", ""));
	      if ($header) {
	        totalH -= $header.offsetHeight;
	      }
	      if ($footer) {
	        totalH -= $footer.offsetHeight;
	      }
	
	      $body.style.height = totalH + 'px';
	    }, _this.getMaxSizesFromProps = function () {
	      var backDropW = _this.backdrop && _this.backdrop.offsetWidth ? _this.backdrop.offsetWidth : Number.MAX_SAFE_INTEGER;
	      var backDropH = _this.backdrop && _this.backdrop.offsetHeight ? _this.backdrop.offsetHeight : Number.MAX_SAFE_INTEGER;
	
	      var maxWidth = typeof _this.props.maxWidth === "undefined" ? backDropW : _this.props.maxWidth;
	      var maxHeight = typeof _this.props.maxHeight === "undefined" ? backDropH : _this.props.maxHeight;
	      return { maxWidth: maxWidth, maxHeight: maxHeight };
	    }, _this.handleWH = function (value) {
	      var size = value;
	      if (typeof value === "string" && value.endsWith("px")) {
	        size = Number(value.replace("px", ""));
	      } else if (typeof Number(value) === "number" && !Number.isNaN(Number(value))) {
	        size = Number(value);
	      }
	      return size;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  ModalDialog.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _getMaxSizesFromProps = this.getMaxSizesFromProps(),
	        maxWidth = _getMaxSizesFromProps.maxWidth,
	        maxHeight = _getMaxSizesFromProps.maxHeight;
	
	    if (maxWidth != this.state.maxWidth) {
	      this.setState({
	        maxWidth: maxWidth,
	        maxHeight: maxHeight
	      });
	    }
	  };
	
	  /* 开始resize */
	
	
	  /* resizing */
	
	
	  /* resize 结束 */
	
	
	  /**
	   * 更新Modal.Body的高度
	   */
	
	
	  /**
	   * 获取最大宽度和高度
	   */
	
	
	  ModalDialog.prototype.render = function render() {
	    var _dialogClasses,
	        _this2 = this;
	
	    var _props = this.props,
	        dialogClassName = _props.dialogClassName,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        size = _props.size,
	        style = _props.style,
	        contentStyle = _props.contentStyle,
	        children = _props.children,
	        draggable = _props.draggable,
	        resizable = _props.resizable,
	        minHeight = _props.minHeight,
	        minWidth = _props.minWidth,
	        props = _objectWithoutProperties(_props, ['dialogClassName', 'className', 'clsPrefix', 'size', 'style', 'contentStyle', 'children', 'draggable', 'resizable', 'minHeight', 'minWidth']);
	
	    var _state = this.state,
	        original = _state.original,
	        maxWidth = _state.maxWidth,
	        maxHeight = _state.maxHeight;
	
	
	    var uClassName = _defineProperty({}, '' + clsPrefix, true);
	
	    var modalStyle = { display: 'block' };
	
	    var dialogClasses = (_dialogClasses = {}, _defineProperty(_dialogClasses, uClassName, false), _defineProperty(_dialogClasses, clsPrefix + '-dialog', true), _dialogClasses);
	    if (size) {
	      dialogClasses[clsPrefix + '-' + size] = true;
	    }
	    if (draggable) {
	      dialogClasses[clsPrefix + '-draggable'] = true;
	    }
	
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        tabIndex: '-1',
	        role: 'dialog',
	        style: modalStyle,
	        ref: function ref(_ref3) {
	          return _this2.backdrop = _ref3;
	        },
	        className: (0, _classnames2["default"])(className, uClassName)
	      }),
	      _react2["default"].createElement(
	        'div',
	        { className: (0, _classnames2["default"])(dialogClassName, dialogClasses), style: style },
	        _react2["default"].createElement(
	          _beeDnd2["default"],
	          {
	            handle: '.dnd-handle',
	            cancel: '.dnd-cancel',
	            onStart: this.onStart,
	            onStop: this.onStop,
	            position: original,
	            list: []
	          },
	          resizable ? _react2["default"].createElement(
	            _reResizable2["default"],
	            {
	              ref: function ref(c) {
	                if (c) {
	                  _this2.resizable = c;
	                }
	              },
	              onResizeStart: this.onResizeStart,
	              onResize: this.onResize,
	              onResizeStop: this.onResizeStop,
	              minWidth: this.handleWH(minWidth),
	              minHeight: this.handleWH(minHeight),
	              maxWidth: this.handleWH(maxWidth),
	              maxHeight: this.handleWH(maxHeight)
	            },
	            _react2["default"].createElement(
	              'div',
	              { style: _extends({}, contentStyle, { height: "100%" }), className: (0, _classnames2["default"])([clsPrefix + '-content']), role: 'document', ref: function ref(_ref) {
	                  return _this2.resize = _ref;
	                } },
	              children
	            )
	          ) : _react2["default"].createElement(
	            'div',
	            { style: contentStyle, className: (0, _classnames2["default"])([clsPrefix + '-content']), role: 'document', ref: function ref(_ref2) {
	                return _this2.resize = _ref2;
	              } },
	            children
	          )
	        )
	      )
	    );
	  };
	
	  return ModalDialog;
	}(_react2["default"].Component);
	
	ModalDialog.propTypes = propTypes;
	ModalDialog.defaultProps = defaultProps;
	
	exports["default"] = ModalDialog;
	module.exports = exports['default'];

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Dnd = __webpack_require__(149);
	
	var _Dnd2 = _interopRequireDefault(_Dnd);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Dnd2["default"];
	module.exports = exports['default'];

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBeautifulDnd = __webpack_require__(150);
	
	var _reactDraggable = __webpack_require__(250);
	
	var _reactDraggable2 = _interopRequireDefault(_reactDraggable);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _lodash = __webpack_require__(251);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _SortList = __webpack_require__(252);
	
	var _SortList2 = _interopRequireDefault(_SortList);
	
	var _Between = __webpack_require__(254);
	
	var _Between2 = _interopRequireDefault(_Between);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    onStart: _propTypes2["default"].func,
	    onDrag: _propTypes2["default"].func,
	    onStop: _propTypes2["default"].func,
	    onDragUpdate: _propTypes2["default"].func,
	    dropClass: _propTypes2["default"].string,
	    dropOverClass: _propTypes2["default"].string,
	    dragClass: _propTypes2["default"].string,
	    dragingClass: _propTypes2["default"].string,
	    draggedClass: _propTypes2["default"].string,
	    className: _propTypes2["default"].string,
	    style: _propTypes2["default"].object,
	    list: _propTypes2["default"].array,
	    otherList: _propTypes2["default"].array,
	    type: _propTypes2["default"].oneOf(['vertical', 'horizontal', 'betweenVertical', 'betweenHorizontal']),
	    showKey: _propTypes2["default"].string
	
	};
	var defaultProps = {
	    onStart: function onStart() {},
	    onDrag: function onDrag() {},
	    onStop: function onStop() {},
	    onDragUpdate: function onDragUpdate() {},
	    list: false,
	    otherList: [],
	    dropClass: '',
	    dropOverClass: '',
	    dragClass: '',
	    dragingClass: '',
	    draggedClass: '',
	    type: 'vertical'
	};
	
	var Dnd = function (_Component) {
	    _inherits(Dnd, _Component);
	
	    function Dnd(props) {
	        _classCallCheck(this, Dnd);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this.state = {
	            items: _this.props.list || []
	        };
	        return _this;
	    }
	
	    Dnd.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	            this.setState({
	                items: nextProps.list
	            });
	        }
	    };
	
	    Dnd.prototype.render = function render() {
	        var _this2 = this;
	
	        var self = this;
	        var DndType = function DndType() {
	            switch (_this2.props.type) {
	                case 'vertical':
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	                case 'horizontal':
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	                case 'betweenVertical':
	                    return _react2["default"].createElement(_Between2["default"], _this2.props);
	                    break;
	                case 'betweenHorizontal':
	                    return _react2["default"].createElement(_Between2["default"], _this2.props);
	                    break;
	                default:
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	            }
	        };
	        return _react2["default"].createElement(
	            'div',
	            null,
	            self.state.items.length ? DndType() : _react2["default"].createElement(
	                _reactDraggable2["default"],
	                _extends({ defaultClassName: this.props.dragClass,
	                    defaultClassNameDragging: this.props.dragingClass,
	                    defaultClassNameDragged: this.props.draggedClass
	                }, this.props),
	                self.props.children
	            )
	        );
	    };
	
	    return Dnd;
	}(_react.Component);
	
	Dnd.propTypes = propTypes;
	Dnd.defaultProps = defaultProps;
	Dnd.Drag = _reactDraggable2["default"];
	Dnd.DragDropContext = _reactBeautifulDnd.DragDropContext;
	Dnd.Droppable = _reactBeautifulDnd.Droppable;
	Dnd.Draggable = _reactBeautifulDnd.Draggable;
	exports["default"] = Dnd;
	module.exports = exports['default'];

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var _extends = _interopDefault(__webpack_require__(151));
	var invariant = _interopDefault(__webpack_require__(190));
	var cssBoxModel = __webpack_require__(191);
	var _Object$keys = _interopDefault(__webpack_require__(192));
	var memoizeOne = _interopDefault(__webpack_require__(196));
	var redux = __webpack_require__(197);
	var _Object$assign = _interopDefault(__webpack_require__(152));
	var rafSchd = _interopDefault(__webpack_require__(201));
	var _inheritsLoose = _interopDefault(__webpack_require__(202));
	var React = __webpack_require__(1);
	var React__default = _interopDefault(React);
	var PropTypes = _interopDefault(__webpack_require__(6));
	var reactRedux = __webpack_require__(209);
	var reactMotion = __webpack_require__(236);
	
	var vertical = {
	  direction: 'vertical',
	  line: 'y',
	  crossAxisLine: 'x',
	  start: 'top',
	  end: 'bottom',
	  size: 'height',
	  crossAxisStart: 'left',
	  crossAxisEnd: 'right',
	  crossAxisSize: 'width'
	};
	var horizontal = {
	  direction: 'horizontal',
	  line: 'x',
	  crossAxisLine: 'y',
	  start: 'left',
	  end: 'right',
	  size: 'width',
	  crossAxisStart: 'top',
	  crossAxisEnd: 'bottom',
	  crossAxisSize: 'height'
	};
	
	var origin = {
	  x: 0,
	  y: 0
	};
	var add = function add(point1, point2) {
	  return {
	    x: point1.x + point2.x,
	    y: point1.y + point2.y
	  };
	};
	var subtract = function subtract(point1, point2) {
	  return {
	    x: point1.x - point2.x,
	    y: point1.y - point2.y
	  };
	};
	var isEqual = function isEqual(point1, point2) {
	  return point1.x === point2.x && point1.y === point2.y;
	};
	var negate = function negate(point) {
	  return {
	    x: point.x !== 0 ? -point.x : 0,
	    y: point.y !== 0 ? -point.y : 0
	  };
	};
	var absolute = function absolute(point) {
	  return {
	    x: Math.abs(point.x),
	    y: Math.abs(point.y)
	  };
	};
	var patch = function patch(line, value, otherValue) {
	  var _ref;
	
	  if (otherValue === void 0) {
	    otherValue = 0;
	  }
	
	  return _ref = {}, _ref[line] = value, _ref[line === 'x' ? 'y' : 'x'] = otherValue, _ref;
	};
	var distance = function distance(point1, point2) {
	  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
	};
	var closest = function closest(target, points) {
	  return Math.min.apply(Math, points.map(function (point) {
	    return distance(target, point);
	  }));
	};
	var apply = function apply(fn) {
	  return function (point) {
	    return {
	      x: fn(point.x),
	      y: fn(point.y)
	    };
	  };
	};
	
	var offsetByPosition = function offsetByPosition(spacing, point) {
	  return {
	    top: spacing.top + point.y,
	    left: spacing.left + point.x,
	    bottom: spacing.bottom + point.y,
	    right: spacing.right + point.x
	  };
	};
	var expandByPosition = function expandByPosition(spacing, position) {
	  return {
	    top: spacing.top - position.y,
	    left: spacing.left - position.x,
	    right: spacing.right + position.x,
	    bottom: spacing.bottom + position.y
	  };
	};
	var getCorners = function getCorners(spacing) {
	  return [{
	    x: spacing.left,
	    y: spacing.top
	  }, {
	    x: spacing.right,
	    y: spacing.top
	  }, {
	    x: spacing.left,
	    y: spacing.bottom
	  }, {
	    x: spacing.right,
	    y: spacing.bottom
	  }];
	};
	
	var getMaxScroll = (function (_ref) {
	  var scrollHeight = _ref.scrollHeight,
	      scrollWidth = _ref.scrollWidth,
	      height = _ref.height,
	      width = _ref.width;
	  var maxScroll = subtract({
	    x: scrollWidth,
	    y: scrollHeight
	  }, {
	    x: width,
	    y: height
	  });
	  var adjustedMaxScroll = {
	    x: Math.max(0, maxScroll.x),
	    y: Math.max(0, maxScroll.y)
	  };
	  return adjustedMaxScroll;
	});
	
	var clip = function clip(frame, subject) {
	  var result = cssBoxModel.getRect({
	    top: Math.max(subject.top, frame.top),
	    right: Math.min(subject.right, frame.right),
	    bottom: Math.min(subject.bottom, frame.bottom),
	    left: Math.max(subject.left, frame.left)
	  });
	
	  if (result.width <= 0 || result.height <= 0) {
	    return null;
	  }
	
	  return result;
	};
	var getDroppableDimension = function getDroppableDimension(_ref) {
	  var descriptor = _ref.descriptor,
	      isEnabled = _ref.isEnabled,
	      direction = _ref.direction,
	      client = _ref.client,
	      page = _ref.page,
	      closest$$1 = _ref.closest;
	
	  var scrollable = function () {
	    if (!closest$$1) {
	      return null;
	    }
	
	    var maxScroll = getMaxScroll({
	      scrollHeight: closest$$1.scrollHeight,
	      scrollWidth: closest$$1.scrollWidth,
	      height: closest$$1.client.paddingBox.height,
	      width: closest$$1.client.paddingBox.width
	    });
	    return {
	      framePageMarginBox: closest$$1.page.marginBox,
	      shouldClipSubject: closest$$1.shouldClipSubject,
	      scroll: {
	        initial: closest$$1.scroll,
	        current: closest$$1.scroll,
	        max: maxScroll,
	        diff: {
	          value: origin,
	          displacement: origin
	        }
	      }
	    };
	  }();
	
	  var subjectPageMarginBox = page.marginBox;
	  var clippedPageMarginBox = scrollable && scrollable.shouldClipSubject ? clip(scrollable.framePageMarginBox, subjectPageMarginBox) : subjectPageMarginBox;
	  var viewport = {
	    closestScrollable: scrollable,
	    subjectPageMarginBox: subjectPageMarginBox,
	    clippedPageMarginBox: clippedPageMarginBox
	  };
	  var dimension = {
	    descriptor: descriptor,
	    axis: direction === 'vertical' ? vertical : horizontal,
	    isEnabled: isEnabled,
	    client: client,
	    page: page,
	    viewport: viewport
	  };
	  return dimension;
	};
	var scrollDroppable = function scrollDroppable(droppable, newScroll) {
	  !droppable.viewport.closestScrollable ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;
	  var scrollable = droppable.viewport.closestScrollable;
	  var framePageMarginBox = scrollable.framePageMarginBox;
	  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
	  var scrollDisplacement = negate(scrollDiff);
	  var closestScrollable = {
	    framePageMarginBox: scrollable.framePageMarginBox,
	    shouldClipSubject: scrollable.shouldClipSubject,
	    scroll: {
	      initial: scrollable.scroll.initial,
	      current: newScroll,
	      diff: {
	        value: scrollDiff,
	        displacement: scrollDisplacement
	      },
	      max: scrollable.scroll.max
	    }
	  };
	  var displacedSubject = offsetByPosition(droppable.viewport.subjectPageMarginBox, scrollDisplacement);
	  var clippedPageMarginBox = closestScrollable.shouldClipSubject ? clip(framePageMarginBox, displacedSubject) : cssBoxModel.getRect(displacedSubject);
	  var viewport = {
	    closestScrollable: closestScrollable,
	    subjectPageMarginBox: droppable.viewport.subjectPageMarginBox,
	    clippedPageMarginBox: clippedPageMarginBox
	  };
	
	  var result = _extends({}, droppable, {
	    viewport: viewport
	  });
	
	  return result;
	};
	
	var toDroppableMap = memoizeOne(function (droppables) {
	  return droppables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDraggableMap = memoizeOne(function (draggables) {
	  return draggables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDroppableList = memoizeOne(function (droppables) {
	  return _Object$keys(droppables).map(function (id) {
	    return droppables[id];
	  });
	});
	var toDraggableList = memoizeOne(function (draggables) {
	  return _Object$keys(draggables).map(function (id) {
	    return draggables[id];
	  });
	});
	
	var getDraggablesInsideDroppable = memoizeOne(function (droppable, draggables) {
	  return toDraggableList(draggables).filter(function (draggable) {
	    return droppable.descriptor.id === draggable.descriptor.droppableId;
	  }).sort(function (a, b) {
	    return a.descriptor.index - b.descriptor.index;
	  });
	});
	
	var isWithin = (function (lowerBound, upperBound) {
	  return function (value) {
	    return value <= upperBound && value >= lowerBound;
	  };
	});
	
	var isPositionInFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (point) {
	    return isWithinVertical(point.y) && isWithinVertical(point.y) && isWithinHorizontal(point.x) && isWithinHorizontal(point.x);
	  };
	});
	
	var getRequiredGrowth = memoizeOne(function (draggable, draggables, droppable) {
	  var getResult = function getResult(existingSpace) {
	    var requiredSpace = draggable.page.marginBox[droppable.axis.size];
	
	    if (requiredSpace <= existingSpace) {
	      return null;
	    }
	
	    var requiredGrowth = patch(droppable.axis.line, requiredSpace - existingSpace);
	    return requiredGrowth;
	  };
	
	  var dimensions = getDraggablesInsideDroppable(droppable, draggables);
	
	  if (!dimensions.length) {
	    var _existingSpace = droppable.page.marginBox[droppable.axis.size];
	    return getResult(_existingSpace);
	  }
	
	  var endOfDraggables = dimensions[dimensions.length - 1].page.marginBox[droppable.axis.end];
	  var endOfDroppable = droppable.page.marginBox[droppable.axis.end];
	  var existingSpace = endOfDroppable - endOfDraggables;
	  return getResult(existingSpace);
	});
	var getWithGrowth = memoizeOne(function (area, growth) {
	  return cssBoxModel.getRect(expandByPosition(area, growth));
	});
	
	var getClippedRectWithPlaceholder = function getClippedRectWithPlaceholder(_ref) {
	  var draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppable = _ref.droppable,
	      previousDroppableOverId = _ref.previousDroppableOverId;
	  var isHome = draggable.descriptor.droppableId === droppable.descriptor.id;
	  var wasOver = Boolean(previousDroppableOverId && previousDroppableOverId === droppable.descriptor.id);
	  var clippedPageMarginBox = droppable.viewport.clippedPageMarginBox;
	
	  if (!clippedPageMarginBox) {
	    return clippedPageMarginBox;
	  }
	
	  if (isHome || !wasOver) {
	    return clippedPageMarginBox;
	  }
	
	  var requiredGrowth = getRequiredGrowth(draggable, draggables, droppable);
	
	  if (!requiredGrowth) {
	    return clippedPageMarginBox;
	  }
	
	  var subjectWithGrowth = getWithGrowth(clippedPageMarginBox, requiredGrowth);
	  var closestScrollable = droppable.viewport.closestScrollable;
	
	  if (!closestScrollable) {
	    return subjectWithGrowth;
	  }
	
	  if (!closestScrollable.shouldClipSubject) {
	    return subjectWithGrowth;
	  }
	
	  return clip(closestScrollable.framePageMarginBox, subjectWithGrowth);
	};
	
	var getDroppableOver = (function (_ref2) {
	  var target = _ref2.target,
	      draggable = _ref2.draggable,
	      draggables = _ref2.draggables,
	      droppables = _ref2.droppables,
	      previousDroppableOverId = _ref2.previousDroppableOverId;
	  var maybe = toDroppableList(droppables).filter(function (droppable) {
	    return droppable.isEnabled;
	  }).find(function (droppable) {
	    var withPlaceholder = getClippedRectWithPlaceholder({
	      draggable: draggable,
	      draggables: draggables,
	      droppable: droppable,
	      previousDroppableOverId: previousDroppableOverId
	    });
	
	    if (!withPlaceholder) {
	      return false;
	    }
	
	    return isPositionInFrame(withPlaceholder)(target);
	  });
	  return maybe ? maybe.descriptor.id : null;
	});
	
	var noMovement = {
	  displaced: [],
	  amount: origin,
	  isBeyondStartPosition: false
	};
	var noImpact = {
	  movement: noMovement,
	  direction: null,
	  destination: null
	};
	
	var getDisplacementMap = memoizeOne(function (displaced) {
	  return displaced.reduce(function (map, displacement) {
	    map[displacement.draggableId] = displacement;
	    return map;
	  }, {});
	});
	
	var isPartiallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
	
	    if (isContained) {
	      return true;
	    }
	
	    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
	    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
	    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
	
	    if (isPartiallyContained) {
	      return true;
	    }
	
	    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
	    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
	    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
	
	    if (isTargetBiggerThanFrame) {
	      return true;
	    }
	
	    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
	    return isTargetBiggerOnOneAxis;
	  };
	});
	
	var isTotallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
	    return isContained;
	  };
	});
	
	var isVisible = function isVisible(_ref) {
	  var target = _ref.target,
	      destination = _ref.destination,
	      viewport = _ref.viewport,
	      isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
	  var displacement = destination.viewport.closestScrollable ? destination.viewport.closestScrollable.scroll.diff.displacement : origin;
	  var withDisplacement = offsetByPosition(target, displacement);
	
	  if (!destination.viewport.clippedPageMarginBox) {
	    return false;
	  }
	
	  var isVisibleInDroppable = isVisibleThroughFrameFn(destination.viewport.clippedPageMarginBox)(withDisplacement);
	  var isVisibleInViewport = isVisibleThroughFrameFn(viewport)(withDisplacement);
	  return isVisibleInDroppable && isVisibleInViewport;
	};
	
	var isPartiallyVisible = function isPartiallyVisible(_ref2) {
	  var target = _ref2.target,
	      destination = _ref2.destination,
	      viewport = _ref2.viewport;
	  return isVisible({
	    target: target,
	    destination: destination,
	    viewport: viewport,
	    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
	  });
	};
	var isTotallyVisible = function isTotallyVisible(_ref3) {
	  var target = _ref3.target,
	      destination = _ref3.destination,
	      viewport = _ref3.viewport;
	  return isVisible({
	    target: target,
	    destination: destination,
	    viewport: viewport,
	    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
	  });
	};
	
	var getDisplacement = (function (_ref) {
	  var draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var id = draggable.descriptor.id;
	  var map = getDisplacementMap(previousImpact.movement.displaced);
	  var isVisible = isPartiallyVisible({
	    target: draggable.page.marginBox,
	    destination: destination,
	    viewport: viewport
	  });
	
	  var shouldAnimate = function () {
	    if (!isVisible) {
	      return false;
	    }
	
	    var previous = map[id];
	
	    if (!previous) {
	      return true;
	    }
	
	    return previous.shouldAnimate;
	  }();
	
	  var displacement = {
	    draggableId: id,
	    isVisible: isVisible,
	    shouldAnimate: shouldAnimate
	  };
	  return displacement;
	});
	
	var withDroppableScroll = (function (droppable, point) {
	  var closestScrollable = droppable.viewport.closestScrollable;
	
	  if (!closestScrollable) {
	    return point;
	  }
	
	  return add(point, closestScrollable.scroll.diff.value);
	});
	
	var inHomeList = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      home = _ref.home,
	      insideHome = _ref.insideHome,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = home.axis;
	  var originalCenter = draggable.page.borderBox.center;
	  var currentCenter = withDroppableScroll(home, pageBorderBoxCenter);
	  var isBeyondStartPosition = currentCenter[axis.line] - originalCenter[axis.line] > 0;
	  var amount = patch(axis.line, draggable.client.marginBox[axis.size]);
	  var displaced = insideHome.filter(function (child) {
	    if (child === draggable) {
	      return false;
	    }
	
	    var borderBox = child.page.borderBox;
	
	    if (isBeyondStartPosition) {
	      if (borderBox.center[axis.line] < originalCenter[axis.line]) {
	        return false;
	      }
	
	      return currentCenter[axis.line] > borderBox[axis.start];
	    }
	
	    if (originalCenter[axis.line] < borderBox.center[axis.line]) {
	      return false;
	    }
	
	    return currentCenter[axis.line] < borderBox[axis.end];
	  }).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: home,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var ordered = isBeyondStartPosition ? displaced.reverse() : displaced;
	
	  var index = function () {
	    var startIndex = draggable.descriptor.index;
	    var length = ordered.length;
	
	    if (!length) {
	      return startIndex;
	    }
	
	    if (isBeyondStartPosition) {
	      return startIndex + length;
	    }
	
	    return startIndex - length;
	  }();
	
	  var movement = {
	    amount: amount,
	    displaced: ordered,
	    isBeyondStartPosition: isBeyondStartPosition
	  };
	  var impact = {
	    movement: movement,
	    direction: axis.direction,
	    destination: {
	      droppableId: home.descriptor.id,
	      index: index
	    }
	  };
	  return impact;
	});
	
	var inForeignList = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var currentCenter = withDroppableScroll(destination, pageBorderBoxCenter);
	  var displaced = insideDestination.filter(function (child) {
	    var threshold = child.page.borderBox[axis.end];
	    return threshold > currentCenter[axis.line];
	  }).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var newIndex = insideDestination.length - displaced.length;
	  var movement = {
	    amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	    displaced: displaced,
	    isBeyondStartPosition: false
	  };
	  var impact = {
	    movement: movement,
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: newIndex
	    }
	  };
	  return impact;
	});
	
	var getDragImpact = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var previousDroppableOverId = previousImpact.destination && previousImpact.destination.droppableId;
	  var destinationId = getDroppableOver({
	    target: pageBorderBoxCenter,
	    draggable: draggable,
	    draggables: draggables,
	    droppables: droppables,
	    previousDroppableOverId: previousDroppableOverId
	  });
	
	  if (!destinationId) {
	    return noImpact;
	  }
	
	  var destination = droppables[destinationId];
	
	  if (!destination.isEnabled) {
	    return noImpact;
	  }
	
	  var home = droppables[draggable.descriptor.droppableId];
	  var isWithinHomeDroppable = home.descriptor.id === destinationId;
	  var insideDestination = getDraggablesInsideDroppable(destination, draggables);
	
	  if (isWithinHomeDroppable) {
	    return inHomeList({
	      pageBorderBoxCenter: pageBorderBoxCenter,
	      draggable: draggable,
	      home: home,
	      insideHome: insideDestination,
	      previousImpact: previousImpact || noImpact,
	      viewport: viewport
	    });
	  }
	
	  return inForeignList({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    draggable: draggable,
	    destination: destination,
	    insideDestination: insideDestination,
	    previousImpact: previousImpact || noImpact,
	    viewport: viewport
	  });
	});
	
	var getHomeLocation = (function (critical) {
	  return {
	    index: critical.draggable.index,
	    droppableId: critical.droppable.id
	  };
	});
	
	var getSafeClipped = function getSafeClipped(droppable) {
	  var rect = droppable.viewport.clippedPageMarginBox;
	  !rect ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get clipped area from droppable') : invariant(false) : void 0;
	  return rect;
	};
	
	var getBestCrossAxisDroppable = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      source = _ref.source,
	      droppables = _ref.droppables,
	      viewport = _ref.viewport;
	  var sourceClipped = source.viewport.clippedPageMarginBox;
	
	  if (!sourceClipped) {
	    return null;
	  }
	
	  var axis = source.axis;
	  var isBetweenSourceClipped = isWithin(sourceClipped[axis.start], sourceClipped[axis.end]);
	  var candidates = toDroppableList(droppables).filter(function (droppable) {
	    return droppable !== source;
	  }).filter(function (droppable) {
	    return droppable.isEnabled;
	  }).filter(function (droppable) {
	    var clippedPageMarginBox = droppable.viewport.clippedPageMarginBox;
	
	    if (!clippedPageMarginBox) {
	      return false;
	    }
	
	    return isPartiallyVisibleThroughFrame(viewport.frame)(clippedPageMarginBox);
	  }).filter(function (droppable) {
	    var targetClipped = getSafeClipped(droppable);
	
	    if (isMovingForward) {
	      return sourceClipped[axis.crossAxisEnd] < targetClipped[axis.crossAxisEnd];
	    }
	
	    return targetClipped[axis.crossAxisStart] < sourceClipped[axis.crossAxisStart];
	  }).filter(function (droppable) {
	    var targetClipped = getSafeClipped(droppable);
	    var isBetweenDestinationClipped = isWithin(targetClipped[axis.start], targetClipped[axis.end]);
	    return isBetweenSourceClipped(targetClipped[axis.start]) || isBetweenSourceClipped(targetClipped[axis.end]) || isBetweenDestinationClipped(sourceClipped[axis.start]) || isBetweenDestinationClipped(sourceClipped[axis.end]);
	  }).sort(function (a, b) {
	    var first = getSafeClipped(a)[axis.crossAxisStart];
	    var second = getSafeClipped(b)[axis.crossAxisStart];
	
	    if (isMovingForward) {
	      return first - second;
	    }
	
	    return second - first;
	  }).filter(function (droppable, index, array) {
	    return getSafeClipped(droppable)[axis.crossAxisStart] === getSafeClipped(array[0])[axis.crossAxisStart];
	  });
	
	  if (!candidates.length) {
	    return null;
	  }
	
	  if (candidates.length === 1) {
	    return candidates[0];
	  }
	
	  var contains = candidates.filter(function (droppable) {
	    var isWithinDroppable = isWithin(getSafeClipped(droppable)[axis.start], getSafeClipped(droppable)[axis.end]);
	    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
	  });
	
	  if (contains.length === 1) {
	    return contains[0];
	  }
	
	  if (contains.length > 1) {
	    return contains.sort(function (a, b) {
	      return getSafeClipped(a)[axis.start] - getSafeClipped(b)[axis.start];
	    })[0];
	  }
	
	  return candidates.sort(function (a, b) {
	    var first = closest(pageBorderBoxCenter, getCorners(getSafeClipped(a)));
	    var second = closest(pageBorderBoxCenter, getCorners(getSafeClipped(b)));
	
	    if (first !== second) {
	      return first - second;
	    }
	
	    return getSafeClipped(a)[axis.start] - getSafeClipped(b)[axis.start];
	  })[0];
	});
	
	var withDroppableDisplacement = (function (droppable, point) {
	  var closestScrollable = droppable.viewport.closestScrollable;
	
	  if (!closestScrollable) {
	    return point;
	  }
	
	  return add(point, closestScrollable.scroll.diff.displacement);
	});
	
	var getClosestDraggable = (function (_ref) {
	  var axis = _ref.axis,
	      viewport = _ref.viewport,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination;
	
	  if (!insideDestination.length) {
	    return null;
	  }
	
	  var result = insideDestination.filter(function (draggable) {
	    return isTotallyVisible({
	      target: draggable.page.borderBox,
	      destination: destination,
	      viewport: viewport.frame
	    });
	  }).sort(function (a, b) {
	    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, a.page.borderBox.center));
	    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, b.page.borderBox.center));
	
	    if (distanceToA < distanceToB) {
	      return -1;
	    }
	
	    if (distanceToB < distanceToA) {
	      return 1;
	    }
	
	    return a.page.borderBox[axis.start] - b.page.borderBox[axis.start];
	  });
	  return result.length ? result[0] : null;
	});
	
	var moveToEdge = (function (_ref) {
	  var source = _ref.source,
	      sourceEdge = _ref.sourceEdge,
	      destination = _ref.destination,
	      destinationEdge = _ref.destinationEdge,
	      destinationAxis = _ref.destinationAxis;
	
	  var getCorner = function getCorner(area) {
	    return patch(destinationAxis.line, area[destinationAxis[destinationEdge]], area[destinationAxis.crossAxisStart]);
	  };
	
	  var corner = getCorner(destination);
	  var centerDiff = absolute(subtract(source.center, getCorner(source)));
	  var signed = patch(destinationAxis.line, (sourceEdge === 'end' ? -1 : 1) * centerDiff[destinationAxis.line], centerDiff[destinationAxis.crossAxisLine]);
	  return add(corner, signed);
	});
	
	var toHomeList = (function (_ref) {
	  var amount = _ref.amount,
	      homeIndex = _ref.homeIndex,
	      movingRelativeTo = _ref.movingRelativeTo,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var targetIndex = insideDestination.indexOf(movingRelativeTo);
	  !(targetIndex !== -1) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Unable to find target in destination droppable') : invariant(false) : void 0;
	
	  if (targetIndex === homeIndex) {
	    var _newCenter = draggable.page.borderBox.center;
	    var _newImpact = {
	      movement: {
	        displaced: [],
	        amount: amount,
	        isBeyondStartPosition: false
	      },
	      direction: destination.axis.direction,
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: homeIndex
	      }
	    };
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(destination, _newCenter),
	      impact: _newImpact
	    };
	  }
	
	  var isMovingPastOriginalIndex = targetIndex > homeIndex;
	  var edge = isMovingPastOriginalIndex ? 'end' : 'start';
	  var newCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: edge,
	    destination: isMovingPastOriginalIndex ? movingRelativeTo.page.borderBox : movingRelativeTo.page.marginBox,
	    destinationEdge: edge,
	    destinationAxis: axis
	  });
	
	  var modified = function () {
	    if (!isMovingPastOriginalIndex) {
	      return insideDestination.slice(targetIndex, homeIndex);
	    }
	
	    var from = homeIndex + 1;
	    var to = targetIndex + 1;
	    return insideDestination.slice(from, to).reverse();
	  }();
	
	  var displaced = modified.map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: amount,
	      isBeyondStartPosition: isMovingPastOriginalIndex
	    },
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: targetIndex
	    }
	  };
	  return {
	    pageBorderBoxCenter: withDroppableDisplacement(destination, newCenter),
	    impact: newImpact
	  };
	});
	
	var toForeignList = (function (_ref) {
	  var amount = _ref.amount,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      movingRelativeTo = _ref.movingRelativeTo,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var isGoingBeforeTarget = Boolean(movingRelativeTo && pageBorderBoxCenter[destination.axis.line] < movingRelativeTo.page.borderBox.center[destination.axis.line]);
	
	  if (!movingRelativeTo) {
	    var _newCenter = moveToEdge({
	      source: draggable.page.borderBox,
	      sourceEdge: 'start',
	      destination: destination.page.contentBox,
	      destinationEdge: 'start',
	      destinationAxis: axis
	    });
	
	    var _newImpact = {
	      movement: {
	        displaced: [],
	        amount: amount,
	        isBeyondStartPosition: false
	      },
	      direction: axis.direction,
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: 0
	      }
	    };
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(destination, _newCenter),
	      impact: _newImpact
	    };
	  }
	
	  var targetIndex = insideDestination.indexOf(movingRelativeTo);
	  !(targetIndex !== -1) ? process.env.NODE_ENV !== "production" ? invariant(false, 'The target was not found within its droppable') : invariant(false) : void 0;
	  var proposedIndex = isGoingBeforeTarget ? targetIndex : targetIndex + 1;
	  var newCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: 'start',
	    destination: movingRelativeTo.page.marginBox,
	    destinationEdge: isGoingBeforeTarget ? 'start' : 'end',
	    destinationAxis: axis
	  });
	  var displaced = insideDestination.slice(proposedIndex, insideDestination.length).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      viewport: viewport.frame,
	      previousImpact: previousImpact
	    });
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: amount,
	      isBeyondStartPosition: false
	    },
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: proposedIndex
	    }
	  };
	  return {
	    pageBorderBoxCenter: withDroppableDisplacement(destination, newCenter),
	    impact: newImpact
	  };
	});
	
	var moveToNewDroppable = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      movingRelativeTo = _ref.movingRelativeTo,
	      home = _ref.home,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var amount = patch(destination.axis.line, draggable.client.marginBox[destination.axis.size]);
	
	  if (destination.descriptor.id === draggable.descriptor.droppableId) {
	    !movingRelativeTo ? process.env.NODE_ENV !== "production" ? invariant(false, 'There will always be a target in the original list') : invariant(false) : void 0;
	    return toHomeList({
	      amount: amount,
	      homeIndex: home.index,
	      movingRelativeTo: movingRelativeTo,
	      insideDestination: insideDestination,
	      draggable: draggable,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport
	    });
	  }
	
	  return toForeignList({
	    amount: amount,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    movingRelativeTo: movingRelativeTo,
	    insideDestination: insideDestination,
	    draggable: draggable,
	    destination: destination,
	    previousImpact: previousImpact,
	    viewport: viewport
	  });
	});
	
	var moveCrossAxis = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggableId = _ref.draggableId,
	      droppableId = _ref.droppableId,
	      home = _ref.home,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var draggable = draggables[draggableId];
	  var source = droppables[droppableId];
	  var destination = getBestCrossAxisDroppable({
	    isMovingForward: isMovingForward,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    source: source,
	    droppables: droppables,
	    viewport: viewport
	  });
	
	  if (!destination) {
	    return null;
	  }
	
	  var insideDestination = getDraggablesInsideDroppable(destination, draggables);
	  var movingRelativeTo = getClosestDraggable({
	    axis: destination.axis,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    destination: destination,
	    insideDestination: insideDestination,
	    viewport: viewport
	  });
	
	  if (insideDestination.length && !movingRelativeTo) {
	    return null;
	  }
	
	  return moveToNewDroppable({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    destination: destination,
	    draggable: draggable,
	    movingRelativeTo: movingRelativeTo,
	    insideDestination: insideDestination,
	    home: home,
	    previousImpact: previousImpact || noImpact,
	    viewport: viewport
	  });
	});
	
	var isTotallyVisibleInNewLocation = (function (_ref) {
	  var draggable = _ref.draggable,
	      destination = _ref.destination,
	      newPageBorderBoxCenter = _ref.newPageBorderBoxCenter,
	      viewport = _ref.viewport;
	  var diff = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);
	  var shifted = offsetByPosition(draggable.page.borderBox, diff);
	  return isTotallyVisible({
	    target: shifted,
	    destination: destination,
	    viewport: viewport
	  });
	});
	
	var withFirstAdded = function withFirstAdded(_ref) {
	  var add = _ref.add,
	      previousImpact = _ref.previousImpact,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  var newDisplacement = {
	    draggableId: add,
	    isVisible: true,
	    shouldAnimate: true
	  };
	  var added = [newDisplacement].concat(previousImpact.movement.displaced);
	  var withUpdatedVisibility = added.map(function (current) {
	    if (current === newDisplacement) {
	      return current;
	    }
	
	    var updated = getDisplacement({
	      draggable: draggables[current.draggableId],
	      destination: droppable,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	    return updated;
	  });
	  return withUpdatedVisibility;
	};
	
	var forceVisibleDisplacement = function forceVisibleDisplacement(current) {
	  if (current.isVisible) {
	    return current;
	  }
	
	  return {
	    draggableId: current.draggableId,
	    isVisible: true,
	    shouldAnimate: false
	  };
	};
	
	var withFirstRemoved = function withFirstRemoved(_ref2) {
	  var dragging = _ref2.dragging,
	      isVisibleInNewLocation = _ref2.isVisibleInNewLocation,
	      previousImpact = _ref2.previousImpact,
	      droppable = _ref2.droppable,
	      draggables = _ref2.draggables;
	  var last = previousImpact.movement.displaced;
	  !last.length ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove displacement from empty list') : invariant(false) : void 0;
	  var withFirstRestored = last.slice(1, last.length);
	
	  if (!withFirstRestored.length) {
	    return withFirstRestored;
	  }
	
	  if (isVisibleInNewLocation) {
	    return withFirstRestored;
	  }
	
	  var axis = droppable.axis;
	  var sizeOfRestored = draggables[last[0].draggableId].page.marginBox[axis.size];
	  var sizeOfDragging = draggables[dragging].page.marginBox[axis.size];
	  var buffer = sizeOfRestored + sizeOfDragging;
	  var withUpdatedVisibility = withFirstRestored.map(function (displacement, index) {
	    if (index === 0) {
	      return forceVisibleDisplacement(displacement);
	    }
	
	    if (buffer > 0) {
	      var current = draggables[displacement.draggableId];
	      var size = current.page.marginBox[axis.size];
	      buffer -= size;
	      return forceVisibleDisplacement(displacement);
	    }
	
	    return {
	      draggableId: displacement.draggableId,
	      isVisible: false,
	      shouldAnimate: false
	    };
	  });
	  return withUpdatedVisibility;
	};
	
	var inHomeList$1 = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggableId = _ref.draggableId,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      previousImpact = _ref.previousImpact,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  var location = previousImpact.destination;
	  !location ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot move to next index in home list when there is no previous destination') : invariant(false) : void 0;
	  var draggable = draggables[draggableId];
	  var axis = droppable.axis;
	  var insideDroppable = getDraggablesInsideDroppable(droppable, draggables);
	  var startIndex = draggable.descriptor.index;
	  var currentIndex = location.index;
	  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
	
	  if (proposedIndex > insideDroppable.length - 1) {
	    return null;
	  }
	
	  if (proposedIndex < 0) {
	    return null;
	  }
	
	  var destination = insideDroppable[proposedIndex];
	  var isMovingTowardStart = isMovingForward && proposedIndex <= startIndex || !isMovingForward && proposedIndex >= startIndex;
	
	  var edge = function () {
	    if (!isMovingTowardStart) {
	      return isMovingForward ? 'end' : 'start';
	    }
	
	    return isMovingForward ? 'start' : 'end';
	  }();
	
	  var newPageBorderBoxCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: edge,
	    destination: destination.page.borderBox,
	    destinationEdge: edge,
	    destinationAxis: droppable.axis
	  });
	  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	    draggable: draggable,
	    destination: droppable,
	    newPageBorderBoxCenter: newPageBorderBoxCenter,
	    viewport: viewport.frame
	  });
	  var displaced = isMovingTowardStart ? withFirstRemoved({
	    dragging: draggableId,
	    isVisibleInNewLocation: isVisibleInNewLocation,
	    previousImpact: previousImpact,
	    droppable: droppable,
	    draggables: draggables
	  }) : withFirstAdded({
	    add: destination.descriptor.id,
	    previousImpact: previousImpact,
	    droppable: droppable,
	    draggables: draggables,
	    viewport: viewport
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	      isBeyondStartPosition: proposedIndex > startIndex
	    },
	    destination: {
	      droppableId: droppable.descriptor.id,
	      index: proposedIndex
	    },
	    direction: droppable.axis.direction
	  };
	
	  if (isVisibleInNewLocation) {
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(droppable, newPageBorderBoxCenter),
	      impact: newImpact,
	      scrollJumpRequest: null
	    };
	  }
	
	  var distance$$1 = subtract(newPageBorderBoxCenter, previousPageBorderBoxCenter);
	  var distanceWithScroll = withDroppableDisplacement(droppable, distance$$1);
	  return {
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    impact: newImpact,
	    scrollJumpRequest: distanceWithScroll
	  };
	});
	
	var inForeignList$1 = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggableId = _ref.draggableId,
	      previousImpact = _ref.previousImpact,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  !previousImpact.destination ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot move to next index where there is no previous destination') : invariant(false) : void 0;
	  var location = previousImpact.destination;
	  var draggable = draggables[draggableId];
	  var axis = droppable.axis;
	  var insideForeignDroppable = getDraggablesInsideDroppable(droppable, draggables);
	  var currentIndex = location.index;
	  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
	  var lastIndex = insideForeignDroppable.length - 1;
	
	  if (proposedIndex > insideForeignDroppable.length) {
	    return null;
	  }
	
	  if (proposedIndex < 0) {
	    return null;
	  }
	
	  var movingRelativeTo = insideForeignDroppable[Math.min(proposedIndex, lastIndex)];
	  var isMovingPastLastIndex = proposedIndex > lastIndex;
	  var sourceEdge = 'start';
	
	  var destinationEdge = function () {
	    if (isMovingPastLastIndex) {
	      return 'end';
	    }
	
	    return 'start';
	  }();
	
	  var newPageBorderBoxCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: sourceEdge,
	    destination: movingRelativeTo.page.marginBox,
	    destinationEdge: destinationEdge,
	    destinationAxis: droppable.axis
	  });
	  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	    draggable: draggable,
	    destination: droppable,
	    newPageBorderBoxCenter: newPageBorderBoxCenter,
	    viewport: viewport.frame
	  });
	
	  var displaced = function () {
	    if (isMovingForward) {
	      return withFirstRemoved({
	        dragging: draggableId,
	        isVisibleInNewLocation: isVisibleInNewLocation,
	        previousImpact: previousImpact,
	        droppable: droppable,
	        draggables: draggables
	      });
	    }
	
	    return withFirstAdded({
	      add: movingRelativeTo.descriptor.id,
	      previousImpact: previousImpact,
	      droppable: droppable,
	      draggables: draggables,
	      viewport: viewport
	    });
	  }();
	
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	      isBeyondStartPosition: false
	    },
	    destination: {
	      droppableId: droppable.descriptor.id,
	      index: proposedIndex
	    },
	    direction: droppable.axis.direction
	  };
	
	  if (isVisibleInNewLocation) {
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(droppable, newPageBorderBoxCenter),
	      impact: newImpact,
	      scrollJumpRequest: null
	    };
	  }
	
	  var distanceMoving = subtract(newPageBorderBoxCenter, previousPageBorderBoxCenter);
	  var distanceWithScroll = withDroppableDisplacement(droppable, distanceMoving);
	  return {
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    impact: newImpact,
	    scrollJumpRequest: distanceWithScroll
	  };
	});
	
	var moveToNextIndex = (function (args) {
	  var draggableId = args.draggableId,
	      draggables = args.draggables,
	      droppable = args.droppable;
	  var draggable = draggables[draggableId];
	  var isInHomeList = draggable.descriptor.droppableId === droppable.descriptor.id;
	
	  if (!droppable.isEnabled) {
	    return null;
	  }
	
	  if (isInHomeList) {
	    return inHomeList$1(args);
	  }
	
	  return inForeignList$1(args);
	});
	
	var getClientSelection = function getClientSelection(pageBorderBoxCenter, currentScroll) {
	  return subtract(pageBorderBoxCenter, currentScroll);
	};
	
	var moveInDirection = (function (_ref) {
	  var state = _ref.state,
	      type = _ref.type;
	
	  var _ref2 = function () {
	    if (state.impact.destination) {
	      return {
	        droppable: state.dimensions.droppables[state.impact.destination.droppableId],
	        isMainAxisMovementAllowed: true
	      };
	    }
	
	    return {
	      droppable: state.dimensions.droppables[state.critical.droppable.id],
	      isMainAxisMovementAllowed: false
	    };
	  }(),
	      droppable = _ref2.droppable,
	      isMainAxisMovementAllowed = _ref2.isMainAxisMovementAllowed;
	
	  var direction = droppable.axis.direction;
	  var isMovingOnMainAxis = direction === 'vertical' && (type === 'MOVE_UP' || type === 'MOVE_DOWN') || direction === 'horizontal' && (type === 'MOVE_LEFT' || type === 'MOVE_RIGHT');
	
	  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
	    return null;
	  }
	
	  var isMovingForward = type === 'MOVE_DOWN' || type === 'MOVE_RIGHT';
	
	  if (isMovingOnMainAxis) {
	    var _result = moveToNextIndex({
	      isMovingForward: isMovingForward,
	      draggableId: state.critical.draggable.id,
	      droppable: droppable,
	      draggables: state.dimensions.draggables,
	      previousPageBorderBoxCenter: state.current.page.borderBoxCenter,
	      previousImpact: state.impact,
	      viewport: state.viewport
	    });
	
	    if (!_result) {
	      return null;
	    }
	
	    return {
	      impact: _result.impact,
	      clientSelection: getClientSelection(_result.pageBorderBoxCenter, state.viewport.scroll.current),
	      scrollJumpRequest: _result.scrollJumpRequest
	    };
	  }
	
	  var home = getHomeLocation(state.critical);
	  var result = moveCrossAxis({
	    isMovingForward: isMovingForward,
	    pageBorderBoxCenter: state.current.page.borderBoxCenter,
	    draggableId: state.critical.draggable.id,
	    droppableId: droppable.descriptor.id,
	    home: home,
	    draggables: state.dimensions.draggables,
	    droppables: state.dimensions.droppables,
	    previousImpact: state.impact,
	    viewport: state.viewport
	  });
	
	  if (!result) {
	    return null;
	  }
	
	  return {
	    clientSelection: getClientSelection(result.pageBorderBoxCenter, state.viewport.scroll.current),
	    impact: result.impact,
	    scrollJumpRequest: null
	  };
	});
	
	var scrollViewport = (function (viewport, newScroll) {
	  var diff = subtract(newScroll, viewport.scroll.initial);
	  var displacement = negate(diff);
	  var frame = cssBoxModel.getRect({
	    top: newScroll.y,
	    bottom: newScroll.y + viewport.frame.height,
	    left: newScroll.x,
	    right: newScroll.x + viewport.frame.width
	  });
	  var updated = {
	    frame: frame,
	    scroll: {
	      initial: viewport.scroll.initial,
	      max: viewport.scroll.max,
	      current: newScroll,
	      diff: {
	        value: diff,
	        displacement: displacement
	      }
	    }
	  };
	  return updated;
	});
	
	var getHomeImpact = (function (critical, dimensions) {
	  var home = dimensions.droppables[critical.droppable.id];
	  var axis = home.axis;
	  var draggable = dimensions.draggables[critical.draggable.id];
	  return {
	    movement: {
	      displaced: [],
	      isBeyondStartPosition: false,
	      amount: patch(axis.line, draggable.client.marginBox[axis.size])
	    },
	    direction: axis.direction,
	    destination: getHomeLocation(critical)
	  };
	});
	
	var getPageItemPositions = (function (client, windowScroll) {
	  return {
	    selection: add(client.selection, windowScroll),
	    borderBoxCenter: add(client.borderBoxCenter, windowScroll),
	    offset: add(client.offset, windowScroll)
	  };
	});
	
	function isMovementAllowed(state) {
	  return state.phase === 'DRAGGING' || state.phase === 'COLLECTING';
	}
	
	var idle = {
	  phase: 'IDLE'
	};
	var preparing = {
	  phase: 'PREPARING'
	};
	
	var moveWithPositionUpdates = function moveWithPositionUpdates(_ref) {
	  var state = _ref.state,
	      clientSelection = _ref.clientSelection,
	      shouldAnimate = _ref.shouldAnimate,
	      viewport = _ref.viewport,
	      impact = _ref.impact,
	      scrollJumpRequest = _ref.scrollJumpRequest;
	  var newViewport = viewport || state.viewport;
	  var currentWindowScroll = newViewport.scroll.current;
	
	  var client = function () {
	    var offset = subtract(clientSelection, state.initial.client.selection);
	    return {
	      offset: offset,
	      selection: clientSelection,
	      borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)
	    };
	  }();
	
	  var page = getPageItemPositions(client, currentWindowScroll);
	  var current = {
	    client: client,
	    page: page
	  };
	
	  if (state.phase === 'COLLECTING') {
	    return _extends({
	      phase: 'COLLECTING'
	    }, state, {
	      current: current
	    });
	  }
	
	  var newImpact = impact || getDragImpact({
	    pageBorderBoxCenter: page.borderBoxCenter,
	    draggable: state.dimensions.draggables[state.critical.draggable.id],
	    draggables: state.dimensions.draggables,
	    droppables: state.dimensions.droppables,
	    previousImpact: state.impact,
	    viewport: newViewport
	  });
	
	  var result = _extends({}, state, {
	    current: current,
	    shouldAnimate: shouldAnimate,
	    impact: newImpact,
	    scrollJumpRequest: scrollJumpRequest || null,
	    viewport: newViewport
	  });
	
	  return result;
	};
	
	var reducer = (function (state, action) {
	  if (state === void 0) {
	    state = idle;
	  }
	
	  if (action.type === 'CLEAN') {
	    return idle;
	  }
	
	  if (action.type === 'PREPARE') {
	    return preparing;
	  }
	
	  if (action.type === 'INITIAL_PUBLISH') {
	    !(state.phase === 'PREPARING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'INITIAL_PUBLISH must come after a PREPARING phase') : invariant(false) : void 0;
	    var _action$payload = action.payload,
	        critical = _action$payload.critical,
	        client = _action$payload.client,
	        viewport = _action$payload.viewport,
	        dimensions = _action$payload.dimensions,
	        autoScrollMode = _action$payload.autoScrollMode;
	    var initial = {
	      client: client,
	      page: {
	        selection: add(client.selection, viewport.scroll.initial),
	        borderBoxCenter: add(client.selection, viewport.scroll.initial),
	        offset: origin
	      }
	    };
	    var result = {
	      phase: 'DRAGGING',
	      isDragging: true,
	      critical: critical,
	      autoScrollMode: autoScrollMode,
	      dimensions: dimensions,
	      initial: initial,
	      current: initial,
	      impact: getHomeImpact(critical, dimensions),
	      viewport: viewport,
	      scrollJumpRequest: null,
	      shouldAnimate: false
	    };
	    return result;
	  }
	
	  if (action.type === 'COLLECTION_STARTING') {
	    var _extends2;
	
	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }
	
	    !(state.phase === 'DRAGGING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Collection cannot start from phase " + state.phase) : invariant(false) : void 0;
	
	    var _result = _extends({
	      phase: 'COLLECTING'
	    }, state, (_extends2 = {}, _extends2["phase"] = 'COLLECTING', _extends2));
	
	    return _result;
	  }
	
	  if (action.type === 'PUBLISH') {
	    !(state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant(false) : void 0;
	    process.env.NODE_ENV !== "production" ? invariant(false, "Dynamic additions and removals of Draggable and Droppable components\n      is currently not supported. But will be soon!") : invariant(false);
	  }
	
	  if (action.type === 'MOVE') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }
	
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }
	
	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " not permitted in phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload2 = action.payload,
	        _client = _action$payload2.client,
	        shouldAnimate = _action$payload2.shouldAnimate;
	
	    if (state.shouldAnimate === shouldAnimate && isEqual(_client, state.current.client.selection)) {
	      return state;
	    }
	
	    var impact = state.autoScrollMode === 'JUMP' ? state.impact : null;
	    return moveWithPositionUpdates({
	      state: state,
	      clientSelection: _client,
	      impact: impact,
	      shouldAnimate: shouldAnimate
	    });
	  }
	
	  if (action.type === 'UPDATE_DROPPABLE_SCROLL') {
	    var _extends3, _extends4;
	
	    if (state.phase === 'PREPARING') {
	      return state;
	    }
	
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }
	
	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " not permitted in phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload3 = action.payload,
	        id = _action$payload3.id,
	        offset = _action$payload3.offset;
	    var target = state.dimensions.droppables[id];
	
	    if (!target) {
	      return state;
	    }
	
	    var updated = scrollDroppable(target, offset);
	
	    var _dimensions = _extends({}, state.dimensions, {
	      droppables: _extends({}, state.dimensions.droppables, (_extends3 = {}, _extends3[id] = updated, _extends3))
	    });
	
	    var _impact = function () {
	      !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;
	
	      if (state.autoScrollMode === 'JUMP') {
	        return state.impact;
	      }
	
	      return getDragImpact({
	        pageBorderBoxCenter: state.current.page.borderBoxCenter,
	        draggable: _dimensions.draggables[state.critical.draggable.id],
	        draggables: _dimensions.draggables,
	        droppables: _dimensions.droppables,
	        previousImpact: state.impact,
	        viewport: state.viewport
	      });
	    }();
	
	    return _extends({
	      phase: 'DRAGGING'
	    }, state, (_extends4 = {}, _extends4["phase"] = state.phase, _extends4.impact = _impact, _extends4.dimensions = _dimensions, _extends4.scrollJumpRequest = null, _extends4));
	  }
	
	  if (action.type === 'UPDATE_DROPPABLE_IS_ENABLED') {
	    var _extends5, _extends6;
	
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }
	
	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, "Attempting to move in an unsupported phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload4 = action.payload,
	        _id = _action$payload4.id,
	        isEnabled = _action$payload4.isEnabled;
	    var _target = state.dimensions.droppables[_id];
	    !_target ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant(false) : void 0;
	    !(_target.isEnabled !== isEnabled) ? process.env.NODE_ENV !== "production" ? invariant(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant(false) : void 0;
	
	    var _updated = _extends({}, _target, {
	      isEnabled: isEnabled
	    });
	
	    var _dimensions2 = _extends({}, state.dimensions, {
	      droppables: _extends({}, state.dimensions.droppables, (_extends5 = {}, _extends5[_id] = _updated, _extends5))
	    });
	
	    var _impact2 = getDragImpact({
	      pageBorderBoxCenter: state.current.page.borderBoxCenter,
	      draggable: _dimensions2.draggables[state.critical.draggable.id],
	      draggables: _dimensions2.draggables,
	      droppables: _dimensions2.droppables,
	      previousImpact: state.impact,
	      viewport: state.viewport
	    });
	
	    return _extends({
	      phase: 'DRAGGING'
	    }, state, (_extends6 = {}, _extends6["phase"] = state.phase, _extends6.impact = _impact2, _extends6.dimensions = _dimensions2, _extends6));
	  }
	
	  if (action.type === 'MOVE_BY_WINDOW_SCROLL') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }
	
	    if (state.phase === 'DROP_PENDING' || state.phase === 'DROP_ANIMATING') {
	      return state;
	    }
	
	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot move by window in phase " + state.phase) : invariant(false) : void 0;
	    var newScroll = action.payload.scroll;
	
	    if (isEqual(state.viewport.scroll.current, newScroll)) {
	      return state;
	    }
	
	    var isJumpScrolling = state.autoScrollMode === 'JUMP';
	
	    var _impact3 = isJumpScrolling ? state.impact : null;
	
	    var _viewport = scrollViewport(state.viewport, newScroll);
	
	    return moveWithPositionUpdates({
	      state: state,
	      clientSelection: state.current.client.selection,
	      viewport: _viewport,
	      shouldAnimate: false,
	      impact: _impact3
	    });
	  }
	
	  if (action.type === 'UPDATE_VIEWPORT_MAX_SCROLL') {
	    var _extends7;
	
	    !state.isDragging ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update the max viewport scroll if not dragging') : invariant(false) : void 0;
	    var existing = state.viewport;
	
	    var _viewport2 = _extends({}, existing, {
	      scroll: _extends({}, existing.scroll, {
	        max: action.payload
	      })
	    });
	
	    return _extends({
	      phase: 'DRAGGING'
	    }, state, (_extends7 = {}, _extends7["phase"] = state.phase, _extends7.viewport = _viewport2, _extends7));
	  }
	
	  if (action.type === 'MOVE_UP' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_RIGHT') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }
	
	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }
	
	    !(state.phase === 'DRAGGING') ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " received while not in DRAGGING phase") : invariant(false) : void 0;
	
	    var _result2 = moveInDirection({
	      state: state,
	      type: action.type
	    });
	
	    if (!_result2) {
	      return state;
	    }
	
	    return moveWithPositionUpdates({
	      state: state,
	      impact: _result2.impact,
	      clientSelection: _result2.clientSelection,
	      shouldAnimate: true,
	      scrollJumpRequest: _result2.scrollJumpRequest
	    });
	  }
	
	  if (action.type === 'DROP_PENDING') {
	    var _extends8;
	
	    var reason = action.payload.reason;
	    !(state.phase === 'COLLECTING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Can only move into the DROP_PENDING phase from the COLLECTING phase') : invariant(false) : void 0;
	
	    var newState = _extends({
	      phase: 'DROP_PENDING'
	    }, state, (_extends8 = {}, _extends8["phase"] = 'DROP_PENDING', _extends8.isWaiting = true, _extends8.reason = reason, _extends8));
	
	    return newState;
	  }
	
	  if (action.type === 'DROP_ANIMATE') {
	    var pending = action.payload;
	    !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot animate drop from phase " + state.phase) : invariant(false) : void 0;
	    var _result3 = {
	      phase: 'DROP_ANIMATING',
	      pending: pending,
	      dimensions: state.dimensions
	    };
	    return _result3;
	  }
	
	  if (action.type === 'DROP_COMPLETE') {
	    return idle;
	  }
	
	  return state;
	});
	
	var lift = function lift(args) {
	  return {
	    type: 'LIFT',
	    payload: args
	  };
	};
	var initialPublish = function initialPublish(args) {
	  return {
	    type: 'INITIAL_PUBLISH',
	    payload: args
	  };
	};
	var publish = function publish(args) {
	  return {
	    type: 'PUBLISH',
	    payload: args
	  };
	};
	var collectionStarting = function collectionStarting() {
	  return {
	    type: 'COLLECTION_STARTING',
	    payload: null
	  };
	};
	var updateDroppableScroll = function updateDroppableScroll(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_SCROLL',
	    payload: args
	  };
	};
	var updateDroppableIsEnabled = function updateDroppableIsEnabled(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_IS_ENABLED',
	    payload: args
	  };
	};
	var move = function move(args) {
	  return {
	    type: 'MOVE',
	    payload: args
	  };
	};
	var moveByWindowScroll = function moveByWindowScroll(args) {
	  return {
	    type: 'MOVE_BY_WINDOW_SCROLL',
	    payload: args
	  };
	};
	var updateViewportMaxScroll = function updateViewportMaxScroll(max) {
	  return {
	    type: 'UPDATE_VIEWPORT_MAX_SCROLL',
	    payload: max
	  };
	};
	var moveUp = function moveUp() {
	  return {
	    type: 'MOVE_UP',
	    payload: null
	  };
	};
	var moveDown = function moveDown() {
	  return {
	    type: 'MOVE_DOWN',
	    payload: null
	  };
	};
	var moveRight = function moveRight() {
	  return {
	    type: 'MOVE_RIGHT',
	    payload: null
	  };
	};
	var moveLeft = function moveLeft() {
	  return {
	    type: 'MOVE_LEFT',
	    payload: null
	  };
	};
	var clean = function clean() {
	  return {
	    type: 'CLEAN',
	    payload: null
	  };
	};
	var prepare = function prepare() {
	  return {
	    type: 'PREPARE',
	    payload: null
	  };
	};
	var animateDrop = function animateDrop(pending) {
	  return {
	    type: 'DROP_ANIMATE',
	    payload: pending
	  };
	};
	var completeDrop = function completeDrop(result) {
	  return {
	    type: 'DROP_COMPLETE',
	    payload: result
	  };
	};
	var drop = function drop(args) {
	  return {
	    type: 'DROP',
	    payload: args
	  };
	};
	var dropPending = function dropPending(args) {
	  return {
	    type: 'DROP_PENDING',
	    payload: args
	  };
	};
	var dropAnimationFinished = function dropAnimationFinished() {
	  return {
	    type: 'DROP_ANIMATION_FINISHED',
	    payload: null
	  };
	};
	
	var lift$1 = (function (getMarshal) {
	  var timeoutId = null;
	
	  var tryAbortCriticalCollection = function tryAbortCriticalCollection() {
	    if (timeoutId == null) {
	      return;
	    }
	
	    clearTimeout(timeoutId);
	    timeoutId = null;
	  };
	
	  return function (_ref) {
	    var getState = _ref.getState,
	        dispatch = _ref.dispatch;
	    return function (next) {
	      return function (action) {
	        if (action.type === 'CLEAN') {
	          tryAbortCriticalCollection();
	          next(action);
	          return;
	        }
	
	        if (action.type !== 'LIFT') {
	          next(action);
	          return;
	        }
	
	        !!timeoutId ? process.env.NODE_ENV !== "production" ? invariant(false, 'There should not be a pending complete lift phase when a lift action is fired') : invariant(false) : void 0;
	        var marshal = getMarshal();
	        var _action$payload = action.payload,
	            id = _action$payload.id,
	            client = _action$payload.client,
	            autoScrollMode = _action$payload.autoScrollMode,
	            viewport = _action$payload.viewport;
	        var initial = getState();
	
	        if (initial.phase === 'DROP_ANIMATING') {
	          dispatch(completeDrop(initial.pending.result));
	        }
	
	        var postFlushState = getState();
	        !(postFlushState.phase === 'IDLE') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Incorrect phase to start a drag') : invariant(false) : void 0;
	        dispatch(prepare());
	        timeoutId = setTimeout(function () {
	          timeoutId = null;
	          var state = getState();
	          !(state.phase === 'PREPARING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Invalid phase for completing lift') : invariant(false) : void 0;
	          var scrollOptions = {
	            shouldPublishImmediately: autoScrollMode === 'JUMP'
	          };
	          var request = {
	            draggableId: id,
	            scrollOptions: scrollOptions
	          };
	
	          var _marshal$startPublish = marshal.startPublishing(request, viewport.scroll.current),
	              critical = _marshal$startPublish.critical,
	              dimensions = _marshal$startPublish.dimensions;
	
	          dispatch(initialPublish({
	            critical: critical,
	            dimensions: dimensions,
	            client: client,
	            autoScrollMode: autoScrollMode,
	            viewport: viewport
	          }));
	        });
	      };
	    };
	  };
	});
	
	var style = (function (marshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          marshal.dragging();
	        }
	
	        if (action.type === 'COLLECTION_STARTING') {
	          marshal.collecting();
	        }
	
	        if (action.type === 'PUBLISH') {
	          marshal.dragging();
	        }
	
	        if (action.type === 'DROP_ANIMATE') {
	          marshal.dropping(action.payload.result.reason);
	        }
	
	        if (action.type === 'CLEAN' || action.type === 'DROP_COMPLETE') {
	          marshal.resting();
	        }
	
	        next(action);
	      };
	    };
	  };
	});
	
	var getNewHomeClientBorderBoxCenter = (function (_ref) {
	  var movement = _ref.movement,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      destination = _ref.destination;
	  var originalCenter = draggable.client.borderBox.center;
	
	  if (destination == null) {
	    return originalCenter;
	  }
	
	  var displaced = movement.displaced,
	      isBeyondStartPosition = movement.isBeyondStartPosition;
	  var axis = destination.axis;
	  var isWithinHomeDroppable = destination.descriptor.id === draggable.descriptor.droppableId;
	
	  if (isWithinHomeDroppable && !displaced.length) {
	    return originalCenter;
	  }
	
	  var draggablesInDestination = getDraggablesInsideDroppable(destination, draggables);
	
	  var movingRelativeTo = function () {
	    if (isWithinHomeDroppable) {
	      return draggables[displaced[0].draggableId].client.borderBox;
	    }
	
	    if (displaced.length) {
	      return draggables[displaced[0].draggableId].client.borderBox;
	    }
	
	    if (draggablesInDestination.length) {
	      return draggablesInDestination[draggablesInDestination.length - 1].client.marginBox;
	    }
	
	    return destination.client.contentBox;
	  }();
	
	  var _ref2 = function () {
	    if (isWithinHomeDroppable) {
	      if (isBeyondStartPosition) {
	        return {
	          sourceEdge: 'end',
	          destinationEdge: 'end'
	        };
	      }
	
	      return {
	        sourceEdge: 'start',
	        destinationEdge: 'start'
	      };
	    }
	
	    if (!displaced.length && draggablesInDestination.length) {
	      return {
	        sourceEdge: 'start',
	        destinationEdge: 'end'
	      };
	    }
	
	    return {
	      sourceEdge: 'start',
	      destinationEdge: 'start'
	    };
	  }(),
	      sourceEdge = _ref2.sourceEdge,
	      destinationEdge = _ref2.destinationEdge;
	
	  var source = draggable.client.borderBox;
	  var targetCenter = moveToEdge({
	    source: source,
	    sourceEdge: sourceEdge,
	    destination: movingRelativeTo,
	    destinationEdge: destinationEdge,
	    destinationAxis: axis
	  });
	  return targetCenter;
	});
	
	var getScrollDisplacement = function getScrollDisplacement(droppable, viewport) {
	  return withDroppableDisplacement(droppable, viewport.scroll.diff.displacement);
	};
	
	var drop$1 = (function (_ref) {
	  var getState = _ref.getState,
	      dispatch = _ref.dispatch;
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP') {
	        next(action);
	        return;
	      }
	
	      var state = getState();
	      var reason = action.payload.reason;
	
	      if (state.phase === 'COLLECTING') {
	        dispatch(dropPending({
	          reason: reason
	        }));
	        return;
	      }
	
	      if (state.phase === 'PREPARING') {
	        dispatch(clean());
	        return;
	      }
	
	      if (state.phase === 'IDLE') {
	        return;
	      }
	
	      var isWaitingForDrop = state.phase === 'DROP_PENDING' && state.isWaiting;
	      !!isWaitingForDrop ? process.env.NODE_ENV !== "production" ? invariant(false, 'A DROP action occurred while DROP_PENDING and still waiting') : invariant(false) : void 0;
	      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot drop in phase: " + state.phase) : invariant(false) : void 0;
	      var critical = state.critical;
	      var dimensions = state.dimensions;
	      var impact = reason === 'DROP' ? state.impact : noImpact;
	      var home = dimensions.droppables[state.critical.droppable.id];
	      var draggable = dimensions.draggables[state.critical.draggable.id];
	      var droppable = impact && impact.destination ? dimensions.droppables[impact.destination.droppableId] : null;
	      var source = {
	        index: critical.draggable.index,
	        droppableId: critical.droppable.id
	      };
	      var destination = reason === 'DROP' ? impact.destination : null;
	      var result = {
	        draggableId: draggable.descriptor.id,
	        type: home.descriptor.type,
	        source: source,
	        destination: destination,
	        reason: reason
	      };
	
	      var clientOffset = function () {
	        if (reason === 'CANCEL') {
	          return origin;
	        }
	
	        var newBorderBoxClientCenter = getNewHomeClientBorderBoxCenter({
	          movement: impact.movement,
	          draggable: draggable,
	          draggables: dimensions.draggables,
	          destination: droppable
	        });
	        return subtract(newBorderBoxClientCenter, draggable.client.borderBox.center);
	      }();
	
	      var newHomeOffset = add(clientOffset, getScrollDisplacement(droppable || home, state.viewport));
	      var isAnimationRequired = !isEqual(state.current.client.offset, newHomeOffset);
	      var pending = {
	        newHomeOffset: newHomeOffset,
	        result: result,
	        impact: impact
	      };
	
	      if (isAnimationRequired) {
	        dispatch(animateDrop(pending));
	        return;
	      }
	
	      dispatch(completeDrop(result));
	    };
	  };
	});
	
	var onDragStart = function onDragStart(start) {
	  return "\n  You have lifted an item in position " + (start.source.index + 1) + ".\n  Use the arrow keys to move, space bar to drop, and escape to cancel.\n";
	};
	
	var onDragUpdate = function onDragUpdate(update) {
	  if (!update.destination) {
	    return 'You are currently not dragging over a droppable area';
	  }
	
	  if (update.source.droppableId === update.destination.droppableId) {
	    return "You have moved the item to position " + (update.destination.index + 1);
	  }
	
	  return "\n    You have moved the item from list " + update.source.droppableId + " in position " + (update.source.index + 1) + "\n    to list " + update.destination.droppableId + " in position " + (update.destination.index + 1) + "\n  ";
	};
	
	var onDragEnd = function onDragEnd(result) {
	  if (result.reason === 'CANCEL') {
	    return "\n      Movement cancelled.\n      The item has returned to its starting position of " + (result.source.index + 1) + "\n    ";
	  }
	
	  if (!result.destination) {
	    return "\n      The item has been dropped while not over a droppable location.\n      The item has returned to its starting position of " + (result.source.index + 1) + "\n    ";
	  }
	
	  if (result.source.droppableId === result.destination.droppableId) {
	    if (result.source.index === result.destination.index) {
	      return "\n        You have dropped the item.\n        It has been dropped on its starting position of " + (result.source.index + 1) + "\n      ";
	    }
	
	    return "\n      You have dropped the item.\n      It has moved from position " + (result.source.index + 1) + " to " + (result.destination.index + 1) + "\n    ";
	  }
	
	  return "\n    You have dropped the item.\n    It has moved from position " + (result.source.index + 1) + " in list " + result.source.droppableId + "\n    to position " + (result.destination.index + 1) + " in list " + result.destination.droppableId + "\n  ";
	};
	
	var preset = {
	  onDragStart: onDragStart,
	  onDragUpdate: onDragUpdate,
	  onDragEnd: onDragEnd
	};
	
	var records = {};
	var flag = '__react-beautiful-dnd-debug-timings-hook__';
	
	var isTimingsEnabled = function isTimingsEnabled() {
	  return Boolean(window[flag]);
	};
	
	var start = function start(key) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!isTimingsEnabled()) {
	      return;
	    }
	
	    var now = performance.now();
	    records[key] = now;
	  }
	};
	var finish = function finish(key) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!isTimingsEnabled()) {
	      return;
	    }
	
	    var now = performance.now();
	    var previous = records[key];
	    !previous ? process.env.NODE_ENV !== "production" ? invariant(false, 'cannot finish timing as no previous time found') : invariant(false) : void 0;
	    var result = now - previous;
	    var rounded = result.toFixed(2);
	
	    var style = function () {
	      if (result < 12) {
	        return {
	          textColor: 'green',
	          symbol: '✅'
	        };
	      }
	
	      if (result < 40) {
	        return {
	          textColor: 'orange',
	          symbol: '⚠️'
	        };
	      }
	
	      return {
	        textColor: 'red',
	        symbol: '❌'
	      };
	    }();
	
	    console.log(style.symbol + " %cTiming %c" + rounded + " %cms %c" + key, 'color: blue; font-weight: bold; ', "color: " + style.textColor + "; font-size: 1.1em;", 'color: grey;', 'color: purple; font-weight: bold;');
	  }
	};
	
	var withTimings = function withTimings(key, fn) {
	  start(key);
	  fn();
	  finish(key);
	};
	
	var areLocationsEqual = function areLocationsEqual(first, second) {
	  if (first == null && second == null) {
	    return true;
	  }
	
	  if (first == null || second == null) {
	    return false;
	  }
	
	  return first.droppableId === second.droppableId && first.index === second.index;
	};
	
	var isCriticalEqual = function isCriticalEqual(first, second) {
	  if (first === second) {
	    return true;
	  }
	
	  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
	  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
	  return isDraggableEqual && isDroppableEqual;
	};
	
	var getExpiringAnnounce = function getExpiringAnnounce(announce) {
	  var wasCalled = false;
	  var isExpired = false;
	  setTimeout(function () {
	    isExpired = true;
	  });
	
	  var result = function result(message) {
	    if (wasCalled) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn('Announcement already made. Not making a second announcement');
	      }
	
	      return;
	    }
	
	    if (isExpired) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn("\n          Announcements cannot be made asynchronously.\n          Default message has already been announced.\n        ");
	      }
	
	      return;
	    }
	
	    wasCalled = true;
	    announce(message);
	  };
	
	  result.wasCalled = function () {
	    return wasCalled;
	  };
	
	  return result;
	};
	
	var getDragStart = function getDragStart(critical) {
	  return {
	    draggableId: critical.draggable.id,
	    type: critical.droppable.type,
	    source: {
	      droppableId: critical.droppable.id,
	      index: critical.draggable.index
	    }
	  };
	};
	
	var hooks = (function (getHooks, announce) {
	  var execute = function execute(hook, data, getDefaultMessage) {
	    if (!hook) {
	      announce(getDefaultMessage(data));
	      return;
	    }
	
	    var willExpire = getExpiringAnnounce(announce);
	    var provided = {
	      announce: willExpire
	    };
	    hook(data, provided);
	
	    if (!willExpire.wasCalled()) {
	      announce(getDefaultMessage(data));
	    }
	  };
	
	  var publisher = function () {
	    var lastLocation = null;
	    var lastCritical = null;
	    var _isDragStartPublished = false;
	
	    var beforeStart = function beforeStart(critical) {
	      !!_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published') : invariant(false) : void 0;
	      withTimings('onBeforeDragStart', function () {
	        var fn = getHooks().onBeforeDragStart;
	
	        if (fn) {
	          fn(getDragStart(critical));
	        }
	      });
	    };
	
	    var start$$1 = function start$$1(critical) {
	      !!_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published') : invariant(false) : void 0;
	      var data = getDragStart(critical);
	      lastCritical = critical;
	      lastLocation = data.source;
	      _isDragStartPublished = true;
	      withTimings('onDragStart', function () {
	        return execute(getHooks().onDragStart, data, preset.onDragStart);
	      });
	    };
	
	    var move = function move(critical, location) {
	      !(_isDragStartPublished && lastCritical) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onDragMove when onDragStart has not been called') : invariant(false) : void 0;
	      var hasCriticalChanged = !isCriticalEqual(critical, lastCritical);
	
	      if (hasCriticalChanged) {
	        lastCritical = critical;
	      }
	
	      var hasLocationChanged = !areLocationsEqual(lastLocation, location);
	
	      if (hasLocationChanged) {
	        lastLocation = location;
	      }
	
	      if (!hasCriticalChanged && !hasLocationChanged) {
	        return;
	      }
	
	      var data = _extends({}, getDragStart(critical), {
	        destination: location
	      });
	
	      withTimings('onDragUpdate', function () {
	        return execute(getHooks().onDragUpdate, data, preset.onDragUpdate);
	      });
	    };
	
	    var drop = function drop(result) {
	      !_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onDragEnd when there is no matching onDragStart') : invariant(false) : void 0;
	      _isDragStartPublished = false;
	      lastLocation = null;
	      lastCritical = null;
	      withTimings('onDragEnd', function () {
	        return execute(getHooks().onDragEnd, result, preset.onDragEnd);
	      });
	    };
	
	    var abort = function abort() {
	      !(_isDragStartPublished && lastCritical) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot cancel when onDragStart not fired') : invariant(false) : void 0;
	
	      var result = _extends({}, getDragStart(lastCritical), {
	        destination: null,
	        reason: 'CANCEL'
	      });
	
	      drop(result);
	    };
	
	    return {
	      beforeStart: beforeStart,
	      start: start$$1,
	      move: move,
	      drop: drop,
	      abort: abort,
	      isDragStartPublished: function isDragStartPublished() {
	        return _isDragStartPublished;
	      }
	    };
	  }();
	
	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          var critical = action.payload.critical;
	          publisher.beforeStart(critical);
	          next(action);
	          publisher.start(critical);
	          return;
	        }
	
	        next(action);
	
	        if (action.type === 'DROP_COMPLETE') {
	          var result = action.payload;
	          publisher.drop(result);
	          return;
	        }
	
	        if (action.type === 'CLEAN') {
	          if (publisher.isDragStartPublished()) {
	            publisher.abort();
	          }
	
	          return;
	        }
	
	        if (!publisher.isDragStartPublished()) {
	          return;
	        }
	
	        var state = store.getState();
	
	        if (state.phase === 'DRAGGING') {
	          publisher.move(state.critical, state.impact.destination);
	        }
	      };
	    };
	  };
	});
	
	var dropAnimationFinish = (function (store) {
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP_ANIMATION_FINISHED') {
	        next(action);
	        return;
	      }
	
	      var state = store.getState();
	      !(state.phase === 'DROP_ANIMATING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot finish a drop animating when no drop is occurring') : invariant(false) : void 0;
	      store.dispatch(completeDrop(state.pending.result));
	    };
	  };
	});
	
	var dimensionMarshalStopper = (function (getMarshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'DROP_COMPLETE' || action.type === 'CLEAN' || action.type === 'DROP_ANIMATE') {
	          var marshal = getMarshal();
	          marshal.stopPublishing();
	        }
	
	        next(action);
	      };
	    };
	  };
	});
	
	var shouldCancel = function shouldCancel(action) {
	  return action.type === 'CANCEL' || action.type === 'DROP_ANIMATE' || action.type === 'DROP' || action.type === 'DROP_COMPLETE' || action.type === 'COLLECTION_STARTING';
	};
	
	var autoScroll = (function (getScroller) {
	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (shouldCancel(action)) {
	          getScroller().cancel();
	          next(action);
	          return;
	        }
	
	        next(action);
	        var state = store.getState();
	
	        if (state.phase !== 'DRAGGING') {
	          return;
	        }
	
	        if (state.autoScrollMode === 'FLUID') {
	          getScroller().fluidScroll(state);
	          return;
	        }
	
	        if (!state.scrollJumpRequest) {
	          return;
	        }
	
	        getScroller().jumpScroll(state);
	      };
	    };
	  };
	});
	
	var shouldCheckOnAction = function shouldCheckOnAction(action) {
	  return action.type === 'MOVE' || action.type === 'MOVE_UP' || action.type === 'MOVE_RIGHT' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_BY_WINDOW_SCROLL';
	};
	
	var hasDroppableOverChanged = function hasDroppableOverChanged(previous, current) {
	  if (!previous) {
	    return Boolean(current);
	  }
	
	  if (!current) {
	    return Boolean(previous);
	  }
	
	  return previous.droppableId !== current.droppableId;
	};
	
	var getNewMaxScroll = function getNewMaxScroll(previous, current, action) {
	  if (!shouldCheckOnAction(action)) {
	    return null;
	  }
	
	  if (!isMovementAllowed(previous) || !isMovementAllowed(current)) {
	    return null;
	  }
	
	  if (!hasDroppableOverChanged(previous.impact.destination, current.impact.destination)) {
	    return null;
	  }
	
	  var viewport = current.viewport;
	  var doc = document.documentElement;
	  !doc ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find document.documentElement') : invariant(false) : void 0;
	  var maxScroll = getMaxScroll({
	    scrollHeight: doc.scrollHeight,
	    scrollWidth: doc.scrollWidth,
	    width: viewport.frame.width,
	    height: viewport.frame.height
	  });
	
	  if (isEqual(maxScroll, viewport.scroll.max)) {
	    return null;
	  }
	
	  return maxScroll;
	};
	
	var maxScrollUpdater = (function (store) {
	  return function (next) {
	    return function (action) {
	      var previous = store.getState();
	      next(action);
	      var current = store.getState();
	      var maxScroll = getNewMaxScroll(previous, current, action);
	
	      if (maxScroll) {
	        next(updateViewportMaxScroll(maxScroll));
	      }
	    };
	  };
	});
	
	var composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : redux.compose;
	var createStore = (function (_ref) {
	  var getDimensionMarshal = _ref.getDimensionMarshal,
	      styleMarshal = _ref.styleMarshal,
	      getHooks = _ref.getHooks,
	      announce = _ref.announce,
	      getScroller = _ref.getScroller;
	  return redux.createStore(reducer, composeEnhancers(redux.applyMiddleware(style(styleMarshal), dimensionMarshalStopper(getDimensionMarshal), lift$1(getDimensionMarshal), drop$1, dropAnimationFinish, maxScrollUpdater, autoScroll(getScroller), hooks(getHooks, announce))));
	});
	
	var getEmptyMap = function getEmptyMap() {
	  return {
	    draggables: {},
	    droppables: {}
	  };
	};
	
	var timingKey = 'Publish collection from DOM';
	var createPublisher = (function (_ref) {
	  var getProvided = _ref.getProvided,
	      callbacks = _ref.callbacks;
	
	  var advancedUsageWarning = function () {
	    if (process.env.NODE_ENV === 'production') {
	      return function () {};
	    }
	
	    var hasAnnounced = false;
	    return function () {
	      if (hasAnnounced) {
	        return;
	      }
	
	      hasAnnounced = true;
	
	      if (process.env.NODE_ENV === 'production') {
	        return;
	      }
	
	      console.warn("\n        Advanced usage warning: you are adding or removing a dimension during a drag\n        This an advanced feature used to support dynamic interactions such as lazy loading lists.\n\n        Keep in mind the following restrictions:\n\n        - Draggable's can only be added to Droppable's that are scroll containers\n        - Adding a Droppable cannot impact the placement of other Droppables\n          (it cannot push a Droppable on the page)\n\n        (This warning will be stripped in production builds)\n      ".trim());
	    };
	  }();
	
	  var additions = getEmptyMap();
	  var removals = getEmptyMap();
	  var frameId = null;
	
	  var reset = function reset() {
	    additions = getEmptyMap();
	    removals = getEmptyMap();
	  };
	
	  var collect = function collect() {
	    advancedUsageWarning();
	
	    if (frameId) {
	      return;
	    }
	
	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      callbacks.collectionStarting();
	      start(timingKey);
	
	      var _getProvided = getProvided(),
	          entries = _getProvided.entries,
	          collection = _getProvided.collection;
	
	      var windowScroll = collection.initialWindowScroll;
	
	      var draggables = _Object$keys(additions.draggables).map(function (id) {
	        return entries.draggables[id].getDimension(windowScroll);
	      });
	
	      var droppables = _Object$keys(additions.droppables).map(function (id) {
	        return entries.droppables[id].callbacks.getDimensionAndWatchScroll(windowScroll, collection.scrollOptions);
	      });
	
	      var result = {
	        additions: {
	          draggables: draggables,
	          droppables: droppables
	        },
	        removals: {
	          draggables: _Object$keys(removals.draggables),
	          droppables: _Object$keys(removals.droppables)
	        }
	      };
	      reset();
	      finish(timingKey);
	      callbacks.publish(result);
	    });
	  };
	
	  var addDraggable = function addDraggable(id) {
	    additions.draggables[id] = true;
	
	    if (removals.draggables[id]) {
	      delete removals.draggables[id];
	    }
	
	    collect();
	  };
	
	  var removeDraggable = function removeDraggable(id) {
	    removals.draggables[id] = true;
	
	    if (additions.draggables[id]) {
	      delete additions.draggables[id];
	    }
	
	    collect();
	  };
	
	  var addDroppable = function addDroppable(id) {
	    additions.droppables[id] = true;
	
	    if (removals.droppables[id]) {
	      delete removals.droppables[id];
	    }
	
	    collect();
	  };
	
	  var removeDroppable = function removeDroppable(id) {
	    removals.droppables[id] = true;
	
	    if (additions.droppables[id]) {
	      delete additions.droppables[id];
	    }
	
	    collect();
	  };
	
	  var stop = function stop() {
	    if (!frameId) {
	      return;
	    }
	
	    cancelAnimationFrame(frameId);
	    frameId = null;
	    reset();
	  };
	
	  return {
	    addDraggable: addDraggable,
	    removeDraggable: removeDraggable,
	    addDroppable: addDroppable,
	    removeDroppable: removeDroppable,
	    stop: stop
	  };
	});
	
	var createDimensionMarshal = (function (callbacks) {
	  var entries = {
	    droppables: {},
	    draggables: {}
	  };
	  var collection = null;
	  var publisher = createPublisher({
	    callbacks: {
	      publish: callbacks.publish,
	      collectionStarting: callbacks.collectionStarting
	    },
	    getProvided: function getProvided() {
	      !collection ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get scroll options when there is no collection') : invariant(false) : void 0;
	      return {
	        entries: entries,
	        collection: collection
	      };
	    }
	  });
	
	  var registerDraggable = function registerDraggable(descriptor, getDimension) {
	    var entry = {
	      descriptor: descriptor,
	      getDimension: getDimension
	    };
	    entries.draggables[descriptor.id] = entry;
	
	    if (!collection) {
	      return;
	    }
	
	    if (collection.critical.draggable.type !== descriptor.type) {
	      return;
	    }
	
	    publisher.addDraggable(descriptor.id);
	  };
	
	  var updateDraggable = function updateDraggable(previous, descriptor, getDimension) {
	    !entries.draggables[previous.id] ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update draggable registration as no previous registration was found') : invariant(false) : void 0;
	    delete entries.draggables[previous.id];
	    var entry = {
	      descriptor: descriptor,
	      getDimension: getDimension
	    };
	    entries.draggables[descriptor.id] = entry;
	  };
	
	  var unregisterDraggable = function unregisterDraggable(descriptor) {
	    var entry = entries.draggables[descriptor.id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot unregister Draggable with id " + descriptor.id + " as it is not registered") : invariant(false) : void 0;
	
	    if (entry.descriptor !== descriptor) {
	      return;
	    }
	
	    delete entries.draggables[descriptor.id];
	
	    if (!collection) {
	      return;
	    }
	
	    !(collection.critical.draggable.id !== descriptor.id) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove the dragging item during a drag') : invariant(false) : void 0;
	
	    if (descriptor.type !== collection.critical.draggable.type) {
	      return;
	    }
	
	    publisher.removeDraggable(descriptor.id);
	  };
	
	  var registerDroppable = function registerDroppable(descriptor, droppableCallbacks) {
	    var id = descriptor.id;
	    entries.droppables[id] = {
	      descriptor: descriptor,
	      callbacks: droppableCallbacks
	    };
	
	    if (!collection) {
	      return;
	    }
	
	    if (descriptor.type !== collection.critical.droppable.type) {
	      return;
	    }
	
	    publisher.addDroppable(id);
	  };
	
	  var updateDroppable = function updateDroppable(previous, descriptor, droppableCallbacks) {
	    !entries.droppables[previous.id] ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update droppable registration as no previous registration was found') : invariant(false) : void 0;
	    delete entries.droppables[previous.id];
	    var entry = {
	      descriptor: descriptor,
	      callbacks: droppableCallbacks
	    };
	    entries.droppables[descriptor.id] = entry;
	
	    if (collection) {
	      process.env.NODE_ENV !== "production" ? invariant(false, 'You are not able to update the id or type of a droppable during a drag') : invariant(false);
	    }
	  };
	
	  var unregisterDroppable = function unregisterDroppable(descriptor) {
	    var entry = entries.droppables[descriptor.id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot unregister Droppable with id " + descriptor.id + " as as it is not registered") : invariant(false) : void 0;
	
	    if (entry.descriptor !== descriptor) {
	      return;
	    }
	
	    delete entries.droppables[descriptor.id];
	
	    if (!collection) {
	      return;
	    }
	
	    !(collection.critical.droppable.id !== descriptor.id) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove the home Droppable during a drag') : invariant(false) : void 0;
	
	    if (collection.critical.droppable.type !== descriptor.type) {
	      return;
	    }
	
	    publisher.removeDroppable(descriptor.id);
	  };
	
	  var updateDroppableIsEnabled = function updateDroppableIsEnabled(id, isEnabled) {
	    !entries.droppables[id] ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant(false) : void 0;
	
	    if (!collection) {
	      return;
	    }
	
	    callbacks.updateDroppableIsEnabled({
	      id: id,
	      isEnabled: isEnabled
	    });
	  };
	
	  var updateDroppableScroll = function updateDroppableScroll(id, newScroll) {
	    !entries.droppables[id] ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant(false) : void 0;
	
	    if (!collection) {
	      return;
	    }
	
	    callbacks.updateDroppableScroll({
	      id: id,
	      offset: newScroll
	    });
	  };
	
	  var scrollDroppable = function scrollDroppable(id, change) {
	    var entry = entries.droppables[id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot scroll Droppable " + id + " as it is not registered") : invariant(false) : void 0;
	
	    if (!collection) {
	      return;
	    }
	
	    entry.callbacks.scroll(change);
	  };
	
	  var getInitialPublish = function getInitialPublish(args) {
	    var critical = args.critical,
	        scrollOptions = args.scrollOptions,
	        windowScroll = args.initialWindowScroll;
	    var timingKey = 'Initial collection from DOM';
	    start(timingKey);
	    var home = critical.droppable;
	
	    var droppables = _Object$keys(entries.droppables).map(function (id) {
	      return entries.droppables[id];
	    }).filter(function (entry) {
	      return entry.descriptor.type === home.type;
	    }).map(function (entry) {
	      return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
	    }).reduce(function (previous, dimension) {
	      previous[dimension.descriptor.id] = dimension;
	      return previous;
	    }, {});
	
	    var draggables = _Object$keys(entries.draggables).map(function (id) {
	      return entries.draggables[id];
	    }).filter(function (entry) {
	      return entry.descriptor.type === critical.draggable.type;
	    }).map(function (entry) {
	      return entry.getDimension(windowScroll);
	    }).reduce(function (previous, dimension) {
	      previous[dimension.descriptor.id] = dimension;
	      return previous;
	    }, {});
	
	    finish(timingKey);
	    var dimensions = {
	      draggables: draggables,
	      droppables: droppables
	    };
	    var result = {
	      dimensions: dimensions,
	      critical: critical
	    };
	    return result;
	  };
	
	  var stopPublishing = function stopPublishing() {
	    if (!collection) {
	      return;
	    }
	
	    publisher.stop();
	    var home = collection.critical.droppable;
	
	    _Object$keys(entries.droppables).filter(function (id) {
	      return entries.droppables[id].descriptor.type === home.type;
	    }).forEach(function (id) {
	      return entries.droppables[id].callbacks.unwatchScroll();
	    });
	
	    collection = null;
	  };
	
	  var startPublishing = function startPublishing(request, windowScroll) {
	    !!collection ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot start capturing critical dimensions as there is already a collection') : invariant(false) : void 0;
	    var entry = entries.draggables[request.draggableId];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find critical draggable entry') : invariant(false) : void 0;
	    var home = entries.droppables[entry.descriptor.droppableId];
	    !home ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find critical droppable entry') : invariant(false) : void 0;
	    var critical = {
	      draggable: entry.descriptor,
	      droppable: home.descriptor
	    };
	    collection = {
	      scrollOptions: request.scrollOptions,
	      critical: critical,
	      initialWindowScroll: windowScroll
	    };
	    return getInitialPublish(collection);
	  };
	
	  var marshal = {
	    registerDraggable: registerDraggable,
	    updateDraggable: updateDraggable,
	    unregisterDraggable: unregisterDraggable,
	    registerDroppable: registerDroppable,
	    updateDroppable: updateDroppable,
	    unregisterDroppable: unregisterDroppable,
	    updateDroppableIsEnabled: updateDroppableIsEnabled,
	    scrollDroppable: scrollDroppable,
	    updateDroppableScroll: updateDroppableScroll,
	    startPublishing: startPublishing,
	    stopPublishing: stopPublishing
	  };
	  return marshal;
	});
	
	var physics = function () {
	  var base = {
	    stiffness: 1000,
	    damping: 60,
	    precision: 0.99
	  };
	
	  var standard = _extends({}, base);
	
	  var fast = _extends({}, base, {
	    stiffness: base.stiffness * 2
	  });
	
	  return {
	    standard: standard,
	    fast: fast
	  };
	}();
	var css = {
	  outOfTheWay: 'transform 0.2s cubic-bezier(0.2, 0, 0, 1)'
	};
	
	var prefix = 'data-react-beautiful-dnd';
	var dragHandle = prefix + "-drag-handle";
	var draggable = prefix + "-draggable";
	var droppable = prefix + "-droppable";
	
	var getStyles = (function (styleContext) {
	  var dragHandleSelector = "[" + dragHandle + "=\"" + styleContext + "\"]";
	  var draggableSelector = "[" + draggable + "=\"" + styleContext + "\"]";
	  var droppableSelector = "[" + droppable + "=\"" + styleContext + "\"]";
	  var dragHandleStyles = {
	    base: "\n      " + dragHandleSelector + " {\n        -webkit-touch-callout: none;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        touch-action: manipulation;\n      }\n    ",
	    grabCursor: "\n      " + dragHandleSelector + " {\n        cursor: -webkit-grab;\n        cursor: grab;\n      }\n    ",
	    blockPointerEvents: "\n      " + dragHandleSelector + " {\n        pointer-events: none;\n      }\n    "
	  };
	  var draggableStyles = {
	    animateMovement: "\n      " + draggableSelector + " {\n        transition: " + css.outOfTheWay + ";\n      }\n    "
	  };
	  var droppableStyles = {
	    base: "\n      " + droppableSelector + " {\n        overflow-anchor: none;\n      }\n    "
	  };
	  var bodyStyles = {
	    whileActiveDragging: "\n      body {\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n      }\n    "
	  };
	  var base = [dragHandleStyles.base, droppableStyles.base];
	  var resting = base.concat([dragHandleStyles.grabCursor]);
	  var collecting = base.concat([dragHandleStyles.blockPointerEvents, bodyStyles.whileActiveDragging]);
	  var dragging = collecting.concat([draggableStyles.animateMovement]);
	  var dropAnimating = base.concat([dragHandleStyles.grabCursor, draggableStyles.animateMovement]);
	  var userCancel = base.concat([draggableStyles.animateMovement]);
	  return {
	    resting: resting.join(''),
	    dragging: dragging.join(''),
	    dropAnimating: dropAnimating.join(''),
	    collecting: collecting.join(''),
	    userCancel: userCancel.join('')
	  };
	});
	
	var count = 0;
	var resetStyleContext = function resetStyleContext() {
	  count = 0;
	};
	
	var getHead = function getHead() {
	  var head = document.querySelector('head');
	  !head ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find the head to append a style to') : invariant(false) : void 0;
	  return head;
	};
	
	var createStyleMarshal = (function () {
	  var context = "" + count++;
	  var styles = getStyles(context);
	  var el = null;
	  var setStyle = memoizeOne(function (proposed) {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot set style of style tag if not mounted') : invariant(false) : void 0;
	    el.innerHTML = proposed;
	  });
	
	  var mount = function mount() {
	    !!el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Style marshal already mounted') : invariant(false) : void 0;
	    el = document.createElement('style');
	    el.type = 'text/css';
	    el.setAttribute(prefix, context);
	    getHead().appendChild(el);
	    setStyle(styles.resting);
	  };
	
	  var collecting = function collecting() {
	    return setStyle(styles.collecting);
	  };
	
	  var dragging = function dragging() {
	    return setStyle(styles.dragging);
	  };
	
	  var dropping = function dropping(reason) {
	    if (reason === 'DROP') {
	      setStyle(styles.dropAnimating);
	      return;
	    }
	
	    setStyle(styles.userCancel);
	  };
	
	  var resting = function resting() {
	    return setStyle(styles.resting);
	  };
	
	  var unmount = function unmount() {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unmount style marshal as it is already unmounted') : invariant(false) : void 0;
	    getHead().removeChild(el);
	    el = null;
	  };
	
	  var marshal = {
	    collecting: collecting,
	    dragging: dragging,
	    dropping: dropping,
	    resting: resting,
	    styleContext: context,
	    mount: mount,
	    unmount: unmount
	  };
	  return marshal;
	});
	
	var canStartDrag = (function (state, id) {
	  if (state.phase === 'IDLE') {
	    return true;
	  }
	
	  if (state.phase !== 'DROP_ANIMATING') {
	    return false;
	  }
	
	  if (state.pending.result.draggableId === id) {
	    return false;
	  }
	
	  return state.pending.result.reason === 'DROP';
	});
	
	var scrollWindow = (function (change) {
	  window.scrollBy(change.x, change.y);
	});
	
	var count$1 = 0;
	var visuallyHidden = {
	  position: 'absolute',
	  width: '1px',
	  height: '1px',
	  margin: '-1px',
	  border: '0',
	  padding: '0',
	  overflow: 'hidden',
	  clip: 'rect(0 0 0 0)',
	  'clip-path': 'inset(100%)'
	};
	
	var getBody = function getBody() {
	  !document.body ? process.env.NODE_ENV !== "production" ? invariant(false, 'Announcer cannot find document.body') : invariant(false) : void 0;
	  return document.body;
	};
	
	var createAnnouncer = (function () {
	  var id = "react-beautiful-dnd-announcement-" + count$1++;
	  var el = null;
	
	  var announce = function announce(message) {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot announce to unmounted node') : invariant(false) : void 0;
	    el.textContent = message;
	  };
	
	  var mount = function mount() {
	    !!el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Announcer already mounted') : invariant(false) : void 0;
	    el = document.createElement('div');
	    el.id = id;
	    el.setAttribute('aria-live', 'assertive');
	    el.setAttribute('role', 'log');
	    el.setAttribute('aria-atomic', 'true');
	
	    _Object$assign(el.style, visuallyHidden);
	
	    getBody().appendChild(el);
	  };
	
	  var unmount = function unmount() {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Will not unmount annoucer as it is already unmounted') : invariant(false) : void 0;
	    getBody().removeChild(el);
	    el = null;
	  };
	
	  var announcer = {
	    announce: announce,
	    id: id,
	    mount: mount,
	    unmount: unmount
	  };
	  return announcer;
	});
	
	var getScrollableDroppables = memoizeOne(function (droppables) {
	  return toDroppableList(droppables).filter(function (droppable) {
	    if (!droppable.isEnabled) {
	      return false;
	    }
	
	    if (!droppable.viewport.closestScrollable) {
	      return false;
	    }
	
	    return true;
	  });
	});
	
	var getScrollableDroppableOver = function getScrollableDroppableOver(target, droppables) {
	  var maybe = getScrollableDroppables(droppables).find(function (droppable) {
	    !droppable.viewport.closestScrollable ? process.env.NODE_ENV !== "production" ? invariant(false, 'Invalid result') : invariant(false) : void 0;
	    return isPositionInFrame(droppable.viewport.closestScrollable.framePageMarginBox)(target);
	  });
	  return maybe;
	};
	
	var getBestScrollableDroppable = (function (_ref) {
	  var center = _ref.center,
	      destination = _ref.destination,
	      droppables = _ref.droppables;
	
	  if (destination) {
	    var _dimension = droppables[destination.droppableId];
	
	    if (!_dimension.viewport.closestScrollable) {
	      return null;
	    }
	
	    return _dimension;
	  }
	
	  var dimension = getScrollableDroppableOver(center, droppables);
	  return dimension;
	});
	
	var smallestSigned = apply(function (value) {
	  if (value === 0) {
	    return 0;
	  }
	
	  return value > 0 ? 1 : -1;
	});
	var getOverlap = function () {
	  var getRemainder = function getRemainder(target, max) {
	    if (target < 0) {
	      return target;
	    }
	
	    if (target > max) {
	      return target - max;
	    }
	
	    return 0;
	  };
	
	  return function (_ref) {
	    var current = _ref.current,
	        max = _ref.max,
	        change = _ref.change;
	    var targetScroll = add(current, change);
	    var overlap = {
	      x: getRemainder(targetScroll.x, max.x),
	      y: getRemainder(targetScroll.y, max.y)
	    };
	
	    if (isEqual(overlap, origin)) {
	      return null;
	    }
	
	    return overlap;
	  };
	}();
	var canPartiallyScroll = function canPartiallyScroll(_ref2) {
	  var rawMax = _ref2.max,
	      current = _ref2.current,
	      change = _ref2.change;
	  var max = {
	    x: Math.max(current.x, rawMax.x),
	    y: Math.max(current.y, rawMax.y)
	  };
	  var smallestChange = smallestSigned(change);
	  var overlap = getOverlap({
	    max: max,
	    current: current,
	    change: smallestChange
	  });
	
	  if (!overlap) {
	    return true;
	  }
	
	  if (smallestChange.x !== 0 && overlap.x === 0) {
	    return true;
	  }
	
	  if (smallestChange.y !== 0 && overlap.y === 0) {
	    return true;
	  }
	
	  return false;
	};
	var canScrollWindow = function canScrollWindow(viewport, change) {
	  return canPartiallyScroll({
	    current: viewport.scroll.current,
	    max: viewport.scroll.max,
	    change: change
	  });
	};
	var getWindowOverlap = function getWindowOverlap(viewport, change) {
	  if (!canScrollWindow(viewport, change)) {
	    return null;
	  }
	
	  var max = viewport.scroll.max;
	  var current = viewport.scroll.current;
	  return getOverlap({
	    current: current,
	    max: max,
	    change: change
	  });
	};
	var canScrollDroppable = function canScrollDroppable(droppable, change) {
	  var closest$$1 = droppable.viewport.closestScrollable;
	
	  if (!closest$$1) {
	    return false;
	  }
	
	  return canPartiallyScroll({
	    current: closest$$1.scroll.current,
	    max: closest$$1.scroll.max,
	    change: change
	  });
	};
	var getDroppableOverlap = function getDroppableOverlap(droppable, change) {
	  var closest$$1 = droppable.viewport.closestScrollable;
	
	  if (!closest$$1) {
	    return null;
	  }
	
	  if (!canScrollDroppable(droppable, change)) {
	    return null;
	  }
	
	  return getOverlap({
	    current: closest$$1.scroll.current,
	    max: closest$$1.scroll.max,
	    change: change
	  });
	};
	
	var config = {
	  startFrom: 0.25,
	  maxSpeedAt: 0.05,
	  maxScrollSpeed: 28,
	  ease: function ease(percentage) {
	    return Math.pow(percentage, 2);
	  }
	};
	var clean$1 = apply(function (value) {
	  return value === 0 ? 0 : value;
	});
	var getPixelThresholds = function getPixelThresholds(container, axis) {
	  var startFrom = container[axis.size] * config.startFrom;
	  var maxSpeedAt = container[axis.size] * config.maxSpeedAt;
	  var accelerationPlane = startFrom - maxSpeedAt;
	  var thresholds = {
	    startFrom: startFrom,
	    maxSpeedAt: maxSpeedAt,
	    accelerationPlane: accelerationPlane
	  };
	  return thresholds;
	};
	
	var getSpeed = function getSpeed(distance$$1, thresholds) {
	  if (distance$$1 >= thresholds.startFrom) {
	    return 0;
	  }
	
	  if (distance$$1 <= thresholds.maxSpeedAt) {
	    return config.maxScrollSpeed;
	  }
	
	  var distancePastStart = thresholds.startFrom - distance$$1;
	  var percentage = distancePastStart / thresholds.accelerationPlane;
	  var transformed = config.ease(percentage);
	  var speed = config.maxScrollSpeed * transformed;
	  return speed;
	};
	
	var adjustForSizeLimits = function adjustForSizeLimits(_ref) {
	  var container = _ref.container,
	      subject = _ref.subject,
	      proposedScroll = _ref.proposedScroll;
	  var isTooBigVertically = subject.height > container.height;
	  var isTooBigHorizontally = subject.width > container.width;
	
	  if (!isTooBigHorizontally && !isTooBigVertically) {
	    return proposedScroll;
	  }
	
	  if (isTooBigHorizontally && isTooBigVertically) {
	    return null;
	  }
	
	  return {
	    x: isTooBigHorizontally ? 0 : proposedScroll.x,
	    y: isTooBigVertically ? 0 : proposedScroll.y
	  };
	};
	
	var getRequiredScroll = function getRequiredScroll(_ref2) {
	  var container = _ref2.container,
	      subject = _ref2.subject,
	      center = _ref2.center;
	  var distance$$1 = {
	    top: center.y - container.top,
	    right: container.right - center.x,
	    bottom: container.bottom - center.y,
	    left: center.x - container.left
	  };
	
	  var y = function () {
	    var thresholds = getPixelThresholds(container, vertical);
	    var isCloserToBottom = distance$$1.bottom < distance$$1.top;
	
	    if (isCloserToBottom) {
	      return getSpeed(distance$$1.bottom, thresholds);
	    }
	
	    return -1 * getSpeed(distance$$1.top, thresholds);
	  }();
	
	  var x = function () {
	    var thresholds = getPixelThresholds(container, horizontal);
	    var isCloserToRight = distance$$1.right < distance$$1.left;
	
	    if (isCloserToRight) {
	      return getSpeed(distance$$1.right, thresholds);
	    }
	
	    return -1 * getSpeed(distance$$1.left, thresholds);
	  }();
	
	  var required = clean$1({
	    x: x,
	    y: y
	  });
	
	  if (isEqual(required, origin)) {
	    return null;
	  }
	
	  var limited = adjustForSizeLimits({
	    container: container,
	    subject: subject,
	    proposedScroll: required
	  });
	
	  if (!limited) {
	    return null;
	  }
	
	  return isEqual(limited, origin) ? null : limited;
	};
	
	var withPlaceholder = function withPlaceholder(droppable, draggable) {
	  var closest$$1 = droppable.viewport.closestScrollable;
	
	  if (!closest$$1) {
	    return null;
	  }
	
	  var isOverHome = droppable.descriptor.id === draggable.descriptor.droppableId;
	  var max = closest$$1.scroll.max;
	  var current = closest$$1.scroll.current;
	
	  if (isOverHome) {
	    return {
	      max: max,
	      current: current
	    };
	  }
	
	  var spaceForPlaceholder = patch(droppable.axis.line, draggable.placeholder.client.borderBox[droppable.axis.size]);
	  var newMax = add(max, spaceForPlaceholder);
	  var newCurrent = {
	    x: Math.min(current.x, newMax.x),
	    y: Math.min(current.y, newMax.y)
	  };
	  return {
	    max: newMax,
	    current: newCurrent
	  };
	};
	
	var createFluidScroller = (function (_ref3) {
	  var scrollWindow = _ref3.scrollWindow,
	      scrollDroppable = _ref3.scrollDroppable;
	  var scheduleWindowScroll = rafSchd(scrollWindow);
	  var scheduleDroppableScroll = rafSchd(scrollDroppable);
	
	  var scroller = function scroller(state) {
	    var center = state.current.page.borderBoxCenter;
	    var draggable = state.dimensions.draggables[state.critical.draggable.id];
	    var subject = draggable.page.marginBox;
	    var viewport = state.viewport;
	    var requiredWindowScroll = getRequiredScroll({
	      container: viewport.frame,
	      subject: subject,
	      center: center
	    });
	
	    if (requiredWindowScroll && canScrollWindow(viewport, requiredWindowScroll)) {
	      scheduleWindowScroll(requiredWindowScroll);
	      return;
	    }
	
	    var droppable = getBestScrollableDroppable({
	      center: center,
	      destination: state.impact.destination,
	      droppables: state.dimensions.droppables
	    });
	
	    if (!droppable) {
	      return;
	    }
	
	    var closestScrollable = droppable.viewport.closestScrollable;
	
	    if (!closestScrollable) {
	      return;
	    }
	
	    var requiredFrameScroll = getRequiredScroll({
	      container: closestScrollable.framePageMarginBox,
	      subject: subject,
	      center: center
	    });
	
	    if (!requiredFrameScroll) {
	      return;
	    }
	
	    var result = withPlaceholder(droppable, draggable);
	
	    if (!result) {
	      return;
	    }
	
	    var closest$$1 = droppable.viewport.closestScrollable;
	
	    if (!closest$$1) {
	      return;
	    }
	
	    var canScrollDroppable$$1 = canPartiallyScroll({
	      current: result.current,
	      max: result.max,
	      change: requiredFrameScroll
	    });
	
	    if (canScrollDroppable$$1) {
	      scheduleDroppableScroll(droppable.descriptor.id, requiredFrameScroll);
	    }
	  };
	
	  scroller.cancel = function () {
	    scheduleWindowScroll.cancel();
	    scheduleDroppableScroll.cancel();
	  };
	
	  return scroller;
	});
	
	var createJumpScroller = (function (_ref) {
	  var move = _ref.move,
	      scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow;
	
	  var moveByOffset = function moveByOffset(state, offset) {
	    var client = add(state.current.client.selection, offset);
	    move({
	      client: client,
	      shouldAnimate: true
	    });
	  };
	
	  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan(droppable, change) {
	    if (!canScrollDroppable(droppable, change)) {
	      return change;
	    }
	
	    var overlap = getDroppableOverlap(droppable, change);
	
	    if (!overlap) {
	      scrollDroppable(droppable.descriptor.id, change);
	      return null;
	    }
	
	    var whatTheDroppableCanScroll = subtract(change, overlap);
	    scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);
	    var remainder = subtract(change, whatTheDroppableCanScroll);
	    return remainder;
	  };
	
	  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan(viewport, change) {
	    if (!canScrollWindow(viewport, change)) {
	      return change;
	    }
	
	    var overlap = getWindowOverlap(viewport, change);
	
	    if (!overlap) {
	      scrollWindow(change);
	      return null;
	    }
	
	    var whatTheWindowCanScroll = subtract(change, overlap);
	    scrollWindow(whatTheWindowCanScroll);
	    var remainder = subtract(change, whatTheWindowCanScroll);
	    return remainder;
	  };
	
	  var jumpScroller = function jumpScroller(state) {
	    var request = state.scrollJumpRequest;
	
	    if (!request) {
	      return;
	    }
	
	    var destination = state.impact.destination;
	    !destination ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot perform a jump scroll when there is no destination') : invariant(false) : void 0;
	    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination.droppableId], request);
	
	    if (!droppableRemainder) {
	      return;
	    }
	
	    var viewport = state.viewport;
	    var windowRemainder = scrollWindowAsMuchAsItCan(viewport, droppableRemainder);
	
	    if (!windowRemainder) {
	      return;
	    }
	
	    moveByOffset(state, windowRemainder);
	  };
	
	  return jumpScroller;
	});
	
	var createAutoScroller = (function (_ref) {
	  var scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow,
	      move = _ref.move;
	  var fluidScroll = createFluidScroller({
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });
	  var jumpScroll = createJumpScroller({
	    move: move,
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });
	  var marshal = {
	    cancel: fluidScroll.cancel,
	    fluidScroll: fluidScroll,
	    jumpScroll: jumpScroll
	  };
	  return marshal;
	});
	
	var prefix$1 = function prefix(key) {
	  return "private-react-beautiful-dnd-key-do-not-use-" + key;
	};
	
	var storeKey = prefix$1('store');
	var droppableIdKey = prefix$1('droppable-id');
	var droppableTypeKey = prefix$1('droppable-type');
	var dimensionMarshalKey = prefix$1('dimension-marshal');
	var styleContextKey = prefix$1('style-context');
	var canLiftContextKey = prefix$1('can-lift');
	
	var _DragDropContext$chil;
	var resetServerContext = function resetServerContext() {
	  resetStyleContext();
	};
	
	var printFatalDevError = function printFatalDevError(error) {
	  if (process.env.NODE_ENV === 'production') {
	    return;
	  }
	
	  console.warn("\n    An error has occurred while a drag is occurring.\n    Any existing drag will be cancelled.\n\n    Raw error:\n  ");
	  console.error(error);
	};
	
	var DragDropContext = function (_React$Component) {
	  _inheritsLoose(DragDropContext, _React$Component);
	
	  function DragDropContext(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	    _this.store = void 0;
	    _this.dimensionMarshal = void 0;
	    _this.styleMarshal = void 0;
	    _this.autoScroller = void 0;
	    _this.announcer = void 0;
	    _this.unsubscribe = void 0;
	
	    _this.canLift = function (id) {
	      return canStartDrag(_this.store.getState(), id);
	    };
	
	    _this.onFatalError = function (error) {
	      printFatalDevError(error);
	
	      var state = _this.store.getState();
	
	      if (state.phase !== 'IDLE') {
	        _this.store.dispatch(clean());
	      }
	    };
	
	    _this.onWindowError = function (error) {
	      return _this.onFatalError(error);
	    };
	
	    _this.announcer = createAnnouncer();
	    _this.styleMarshal = createStyleMarshal();
	    _this.store = createStore({
	      getDimensionMarshal: function getDimensionMarshal() {
	        return _this.dimensionMarshal;
	      },
	      styleMarshal: _this.styleMarshal,
	      getHooks: function getHooks() {
	        return {
	          onBeforeDragStart: _this.props.onBeforeDragStart,
	          onDragStart: _this.props.onDragStart,
	          onDragEnd: _this.props.onDragEnd,
	          onDragUpdate: _this.props.onDragUpdate
	        };
	      },
	      announce: _this.announcer.announce,
	      getScroller: function getScroller() {
	        return _this.autoScroller;
	      }
	    });
	    var callbacks = redux.bindActionCreators({
	      collectionStarting: collectionStarting,
	      publish: publish,
	      updateDroppableScroll: updateDroppableScroll,
	      updateDroppableIsEnabled: updateDroppableIsEnabled
	    }, _this.store.dispatch);
	    _this.dimensionMarshal = createDimensionMarshal(callbacks);
	    _this.autoScroller = createAutoScroller(_extends({
	      scrollWindow: scrollWindow,
	      scrollDroppable: _this.dimensionMarshal.scrollDroppable
	    }, redux.bindActionCreators({
	      move: move
	    }, _this.store.dispatch)));
	    return _this;
	  }
	
	  var _proto = DragDropContext.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    var _ref;
	
	    return _ref = {}, _ref[storeKey] = this.store, _ref[dimensionMarshalKey] = this.dimensionMarshal, _ref[styleContextKey] = this.styleMarshal.styleContext, _ref[canLiftContextKey] = this.canLift, _ref;
	  };
	
	  _proto.componentDidMount = function componentDidMount() {
	    window.addEventListener('error', this.onWindowError);
	    this.styleMarshal.mount();
	    this.announcer.mount();
	  };
	
	  _proto.componentDidCatch = function componentDidCatch(error) {
	    this.onFatalError(error);
	
	    if (error.message.indexOf('Invariant failed') !== -1) {
	      this.setState({});
	      return;
	    }
	
	    throw error;
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    window.removeEventListener('error', this.onWindowError);
	    var state = this.store.getState();
	
	    if (state.phase !== 'IDLE') {
	      this.store.dispatch(clean());
	    }
	
	    this.styleMarshal.unmount();
	    this.announcer.unmount();
	  };
	
	  _proto.render = function render() {
	    return this.props.children;
	  };
	
	  return DragDropContext;
	}(React__default.Component);
	
	DragDropContext.childContextTypes = (_DragDropContext$chil = {}, _DragDropContext$chil[storeKey] = PropTypes.shape({
	  dispatch: PropTypes.func.isRequired,
	  subscribe: PropTypes.func.isRequired,
	  getState: PropTypes.func.isRequired
	}).isRequired, _DragDropContext$chil[dimensionMarshalKey] = PropTypes.object.isRequired, _DragDropContext$chil[styleContextKey] = PropTypes.string.isRequired, _DragDropContext$chil[canLiftContextKey] = PropTypes.func.isRequired, _DragDropContext$chil);
	
	var isScrollable = function isScrollable() {
	  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
	    values[_key] = arguments[_key];
	  }
	
	  return values.some(function (value) {
	    return value === 'auto' || value === 'scroll';
	  });
	};
	
	var isElementScrollable = function isElementScrollable(el) {
	  var style = window.getComputedStyle(el);
	  return isScrollable(style.overflow, style.overflowY, style.overflowX);
	};
	
	var getClosestScrollable = function getClosestScrollable(el) {
	  if (el == null) {
	    return null;
	  }
	
	  if (!isElementScrollable(el)) {
	    return getClosestScrollable(el.parentElement);
	  }
	
	  return el;
	};
	
	var _DroppableDimensionPu;
	
	var getScroll = function getScroll(el) {
	  return {
	    x: el.scrollLeft,
	    y: el.scrollTop
	  };
	};
	
	var checkForNestedScrollContainers = function checkForNestedScrollContainers(scrollable) {
	  if (process.env.NODE_ENV === 'production') {
	    return;
	  }
	
	  if (!scrollable) {
	    return;
	  }
	
	  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);
	
	  if (!anotherScrollParent) {
	    return;
	  }
	
	  console.warn("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ");
	};
	
	var listenerOptions = {
	  passive: true
	};
	
	var DroppableDimensionPublisher = function (_React$Component) {
	  _inheritsLoose(DroppableDimensionPublisher, _React$Component);
	
	  function DroppableDimensionPublisher(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	    _this.watchingScroll = null;
	    _this.callbacks = void 0;
	    _this.publishedDescriptor = null;
	
	    _this.getClosestScroll = function () {
	      if (!_this.watchingScroll) {
	        return origin;
	      }
	
	      return getScroll(_this.watchingScroll.closestScrollable);
	    };
	
	    _this.memoizedUpdateScroll = memoizeOne(function (x, y) {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update scroll on unpublished droppable') : invariant(false) : void 0;
	      var newScroll = {
	        x: x,
	        y: y
	      };
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.updateDroppableScroll(_this.publishedDescriptor.id, newScroll);
	    });
	
	    _this.updateScroll = function () {
	      var offset = _this.getClosestScroll();
	
	      _this.memoizedUpdateScroll(offset.x, offset.y);
	    };
	
	    _this.scheduleScrollUpdate = rafSchd(_this.updateScroll);
	
	    _this.onClosestScroll = function () {
	      !_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find scroll options while scrolling') : invariant(false) : void 0;
	      var options = _this.watchingScroll.options;
	
	      if (options.shouldPublishImmediately) {
	        _this.updateScroll();
	
	        return;
	      }
	
	      _this.scheduleScrollUpdate();
	    };
	
	    _this.scroll = function (change) {
	      !_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot scroll a droppable with no closest scrollable') : invariant(false) : void 0;
	      var closestScrollable = _this.watchingScroll.closestScrollable;
	      closestScrollable.scrollTop += change.y;
	      closestScrollable.scrollLeft += change.x;
	    };
	
	    _this.watchScroll = function (closestScrollable, options) {
	      !!_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Droppable cannot watch scroll as it is already watching scroll') : invariant(false) : void 0;
	
	      if (!closestScrollable) {
	        return;
	      }
	
	      _this.watchingScroll = {
	        options: options,
	        closestScrollable: closestScrollable
	      };
	      closestScrollable.addEventListener('scroll', _this.onClosestScroll, listenerOptions);
	    };
	
	    _this.unwatchScroll = function () {
	      var watching = _this.watchingScroll;
	
	      if (!watching) {
	        return;
	      }
	
	      _this.scheduleScrollUpdate.cancel();
	
	      watching.closestScrollable.removeEventListener('scroll', _this.onClosestScroll, listenerOptions);
	      _this.watchingScroll = null;
	    };
	
	    _this.getMemoizedDescriptor = memoizeOne(function (id, type) {
	      return {
	        id: id,
	        type: type
	      };
	    });
	
	    _this.publish = function () {
	      var marshal = _this.context[dimensionMarshalKey];
	
	      var descriptor = _this.getMemoizedDescriptor(_this.props.droppableId, _this.props.type);
	
	      if (!_this.publishedDescriptor) {
	        marshal.registerDroppable(descriptor, _this.callbacks);
	        _this.publishedDescriptor = descriptor;
	        return;
	      }
	
	      if (_this.publishedDescriptor === descriptor) {
	        return;
	      }
	
	      marshal.updateDroppable(_this.publishedDescriptor, descriptor, _this.callbacks);
	      _this.publishedDescriptor = descriptor;
	    };
	
	    _this.unpublish = function () {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unpublish descriptor when none is published') : invariant(false) : void 0;
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.unregisterDroppable(_this.publishedDescriptor);
	      _this.publishedDescriptor = null;
	    };
	
	    _this.getDimensionAndWatchScroll = function (windowScroll, options) {
	      var _this$props = _this.props,
	          direction = _this$props.direction,
	          ignoreContainerClipping = _this$props.ignoreContainerClipping,
	          isDropDisabled = _this$props.isDropDisabled,
	          getDroppableRef = _this$props.getDroppableRef;
	      var targetRef = getDroppableRef();
	      var descriptor = _this.publishedDescriptor;
	      !targetRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot calculate a dimension when not attached to the DOM') : invariant(false) : void 0;
	      !descriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get dimension for unpublished droppable') : invariant(false) : void 0;
	      var scrollableRef = getClosestScrollable(targetRef);
	      checkForNestedScrollContainers(scrollableRef);
	
	      _this.watchScroll(scrollableRef, options);
	
	      var client = function () {
	        var base = cssBoxModel.getBox(targetRef);
	
	        if (!scrollableRef) {
	          return base;
	        }
	
	        if (targetRef !== scrollableRef) {
	          return base;
	        }
	
	        var top = base.paddingBox.top - scrollableRef.scrollTop;
	        var left = base.paddingBox.left - scrollableRef.scrollLeft;
	        var bottom = top + scrollableRef.scrollHeight;
	        var right = left + scrollableRef.scrollWidth;
	        var paddingBox = {
	          top: top,
	          right: right,
	          bottom: bottom,
	          left: left
	        };
	        var borderBox = {
	          top: paddingBox.top - base.border.top,
	          right: paddingBox.right + base.border.right,
	          bottom: paddingBox.bottom + base.border.bottom,
	          left: paddingBox.left - base.border.left
	        };
	        return cssBoxModel.createBox({
	          borderBox: borderBox,
	          margin: base.margin,
	          border: base.border,
	          padding: base.padding
	        });
	      }();
	
	      var page = cssBoxModel.withScroll(client, windowScroll);
	
	      var closest$$1 = function () {
	        if (!scrollableRef) {
	          return null;
	        }
	
	        var frameClient = cssBoxModel.getBox(scrollableRef);
	        return {
	          client: frameClient,
	          page: cssBoxModel.withScroll(frameClient),
	          scrollHeight: scrollableRef.scrollHeight,
	          scrollWidth: scrollableRef.scrollWidth,
	          scroll: getScroll(scrollableRef),
	          shouldClipSubject: !ignoreContainerClipping
	        };
	      }();
	
	      return getDroppableDimension({
	        descriptor: descriptor,
	        isEnabled: !isDropDisabled,
	        direction: direction,
	        client: client,
	        page: page,
	        closest: closest$$1
	      });
	    };
	
	    var callbacks = {
	      getDimensionAndWatchScroll: _this.getDimensionAndWatchScroll,
	      unwatchScroll: _this.unwatchScroll,
	      scroll: _this.scroll
	    };
	    _this.callbacks = callbacks;
	    return _this;
	  }
	
	  var _proto = DroppableDimensionPublisher.prototype;
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.publish();
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    this.publish();
	
	    if (this.props.isDropDisabled === prevProps.isDropDisabled) {
	      return;
	    }
	
	    var marshal = this.context[dimensionMarshalKey];
	    marshal.updateDroppableIsEnabled(this.props.droppableId, !this.props.isDropDisabled);
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.watchingScroll) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn('Unmounting droppable while it was watching scroll');
	      }
	
	      this.unwatchScroll();
	    }
	
	    this.unpublish();
	  };
	
	  _proto.render = function render() {
	    return this.props.children;
	  };
	
	  return DroppableDimensionPublisher;
	}(React__default.Component);
	
	DroppableDimensionPublisher.contextTypes = (_DroppableDimensionPu = {}, _DroppableDimensionPu[dimensionMarshalKey] = PropTypes.object.isRequired, _DroppableDimensionPu);
	
	var Placeholder = function (_PureComponent) {
	  _inheritsLoose(Placeholder, _PureComponent);
	
	  function Placeholder() {
	    return _PureComponent.apply(this, arguments) || this;
	  }
	
	  var _proto = Placeholder.prototype;
	
	  _proto.componentDidMount = function componentDidMount() {
	    if (this.props.onMount) {
	      this.props.onMount();
	    }
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.onUnmount) {
	      this.props.onUnmount();
	    }
	  };
	
	  _proto.render = function render() {
	    var placeholder = this.props.placeholder;
	    var client = placeholder.client,
	        display = placeholder.display,
	        tagName = placeholder.tagName;
	    var style = {
	      display: display,
	      boxSizing: 'border-box',
	      width: client.borderBox.width,
	      height: client.borderBox.height,
	      marginTop: client.margin.top,
	      marginRight: client.margin.right,
	      marginBottom: client.margin.bottom,
	      marginLeft: client.margin.left,
	      flexShrink: '0',
	      flexGrow: '0',
	      pointerEvents: 'none'
	    };
	    return React__default.createElement(tagName, {
	      style: style
	    });
	  };
	
	  return Placeholder;
	}(React.PureComponent);
	
	var throwIfRefIsInvalid = (function (ref) {
	  !(ref && ref instanceof HTMLElement) ? process.env.NODE_ENV !== "production" ? invariant(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant(false) : void 0;
	});
	
	var _Droppable$contextTyp, _Droppable$childConte;
	
	var Droppable = function (_Component) {
	  _inheritsLoose(Droppable, _Component);
	
	  function Droppable(props, context) {
	    var _this;
	
	    _this = _Component.call(this, props, context) || this;
	    _this.styleContext = void 0;
	    _this.ref = null;
	    _this.isPlaceholderMounted = false;
	
	    _this.onPlaceholderMount = function () {
	      _this.isPlaceholderMounted = true;
	    };
	
	    _this.onPlaceholderUnmount = function () {
	      _this.isPlaceholderMounted = false;
	    };
	
	    _this.setRef = function (ref) {
	      if (ref === null) {
	        return;
	      }
	
	      if (ref === _this.ref) {
	        return;
	      }
	
	      _this.ref = ref;
	      throwIfRefIsInvalid(ref);
	    };
	
	    _this.getDroppableRef = function () {
	      return _this.ref;
	    };
	
	    _this.styleContext = context[styleContextKey];
	    return _this;
	  }
	
	  var _proto = Droppable.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    var _value;
	
	    var value = (_value = {}, _value[droppableIdKey] = this.props.droppableId, _value[droppableTypeKey] = this.props.type, _value);
	    return value;
	  };
	
	  _proto.componentDidMount = function componentDidMount() {
	    throwIfRefIsInvalid(this.ref);
	    this.warnIfPlaceholderNotMounted();
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate() {
	    this.warnIfPlaceholderNotMounted();
	  };
	
	  _proto.warnIfPlaceholderNotMounted = function warnIfPlaceholderNotMounted() {
	    if (process.env.NODE_ENV === 'production') {
	      return;
	    }
	
	    if (!this.props.placeholder) {
	      return;
	    }
	
	    if (this.isPlaceholderMounted) {
	      return;
	    }
	
	    console.warn("\n      Droppable setup issue: DroppableProvided > placeholder could not be found.\n      Please be sure to add the {provided.placeholder} Node as a child of your Droppable\n\n      More information: https://github.com/atlassian/react-beautiful-dnd#1-provided-droppableprovided\n    ");
	  };
	
	  _proto.getPlaceholder = function getPlaceholder() {
	    if (!this.props.placeholder) {
	      return null;
	    }
	
	    return React__default.createElement(Placeholder, {
	      placeholder: this.props.placeholder,
	      onMount: this.onPlaceholderMount,
	      onUnmount: this.onPlaceholderUnmount
	    });
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        direction = _this$props.direction,
	        droppableId = _this$props.droppableId,
	        ignoreContainerClipping = _this$props.ignoreContainerClipping,
	        isDraggingOver = _this$props.isDraggingOver,
	        isDropDisabled = _this$props.isDropDisabled,
	        draggingOverWith = _this$props.draggingOverWith,
	        type = _this$props.type;
	    var provided = {
	      innerRef: this.setRef,
	      placeholder: this.getPlaceholder(),
	      droppableProps: {
	        'data-react-beautiful-dnd-droppable': this.styleContext
	      }
	    };
	    var snapshot = {
	      isDraggingOver: isDraggingOver,
	      draggingOverWith: draggingOverWith
	    };
	    return React__default.createElement(DroppableDimensionPublisher, {
	      droppableId: droppableId,
	      type: type,
	      direction: direction,
	      ignoreContainerClipping: ignoreContainerClipping,
	      isDropDisabled: isDropDisabled,
	      getDroppableRef: this.getDroppableRef
	    }, children(provided, snapshot));
	  };
	
	  return Droppable;
	}(React.Component);
	
	Droppable.contextTypes = (_Droppable$contextTyp = {}, _Droppable$contextTyp[styleContextKey] = PropTypes.string.isRequired, _Droppable$contextTyp);
	Droppable.childContextTypes = (_Droppable$childConte = {}, _Droppable$childConte[droppableIdKey] = PropTypes.string.isRequired, _Droppable$childConte[droppableTypeKey] = PropTypes.string.isRequired, _Droppable$childConte);
	
	var isStrictEqual = (function (a, b) {
	  return a === b;
	});
	
	var makeMapStateToProps = function makeMapStateToProps() {
	  var getIsDraggingOver = function getIsDraggingOver(id, destination) {
	    if (!destination) {
	      return false;
	    }
	
	    return destination.droppableId === id;
	  };
	
	  var shouldUsePlaceholder = function shouldUsePlaceholder(id, descriptor, destination) {
	    if (!destination) {
	      return false;
	    }
	
	    if (id === descriptor.droppableId) {
	      return false;
	    }
	
	    return id === destination.droppableId;
	  };
	
	  var getMapProps = memoizeOne(function (isDraggingOver, draggingOverWith, placeholder) {
	    return {
	      isDraggingOver: isDraggingOver,
	      draggingOverWith: draggingOverWith,
	      placeholder: placeholder
	    };
	  });
	
	  var getDefault = function getDefault() {
	    return getMapProps(false, null, null);
	  };
	
	  var selector = function selector(state, ownProps) {
	    if (ownProps.isDropDisabled) {
	      return getDefault();
	    }
	
	    var id = ownProps.droppableId;
	
	    if (state.isDragging) {
	      var destination = state.impact.destination;
	      var isDraggingOver = getIsDraggingOver(id, destination);
	      var draggableId = state.critical.draggable.id;
	      var draggingOverWith = isDraggingOver ? draggableId : null;
	      var draggable = state.dimensions.draggables[draggableId];
	      var placeholder = shouldUsePlaceholder(id, draggable.descriptor, destination) ? draggable.placeholder : null;
	      return getMapProps(isDraggingOver, draggingOverWith, placeholder);
	    }
	
	    if (state.phase === 'DROP_ANIMATING') {
	      var _destination = state.pending.impact.destination;
	
	      var _isDraggingOver = getIsDraggingOver(id, _destination);
	
	      var _draggableId = state.pending.result.draggableId;
	
	      var _draggingOverWith = _isDraggingOver ? _draggableId : null;
	
	      var _draggable = state.dimensions.draggables[_draggableId];
	
	      var _placeholder = shouldUsePlaceholder(id, _draggable.descriptor, _destination) ? _draggable.placeholder : null;
	
	      return getMapProps(_isDraggingOver, _draggingOverWith, _placeholder);
	    }
	
	    return getDefault();
	  };
	
	  return selector;
	};
	var connectedDroppable = reactRedux.connect(makeMapStateToProps, null, null, {
	  storeKey: storeKey,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Droppable);
	connectedDroppable.defaultProps = {
	  type: 'DEFAULT',
	  isDropDisabled: false,
	  direction: 'vertical',
	  ignoreContainerClipping: false
	};
	
	var _DraggableDimensionPu;
	
	var DraggableDimensionPublisher = function (_Component) {
	  _inheritsLoose(DraggableDimensionPublisher, _Component);
	
	  function DraggableDimensionPublisher() {
	    var _this;
	
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
	    _this.publishedDescriptor = null;
	    _this.getMemoizedDescriptor = memoizeOne(function (id, index, droppableId, type) {
	      return {
	        id: id,
	        index: index,
	        droppableId: droppableId,
	        type: type
	      };
	    });
	
	    _this.publish = function () {
	      var marshal = _this.context[dimensionMarshalKey];
	
	      var descriptor = _this.getMemoizedDescriptor(_this.props.draggableId, _this.props.index, _this.props.droppableId, _this.props.type);
	
	      if (!_this.publishedDescriptor) {
	        marshal.registerDraggable(descriptor, _this.getDimension);
	        _this.publishedDescriptor = descriptor;
	        return;
	      }
	
	      if (descriptor === _this.publishedDescriptor) {
	        return;
	      }
	
	      marshal.updateDraggable(_this.publishedDescriptor, descriptor, _this.getDimension);
	      _this.publishedDescriptor = descriptor;
	    };
	
	    _this.unpublish = function () {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unpublish descriptor when none is published') : invariant(false) : void 0;
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.unregisterDraggable(_this.publishedDescriptor);
	      _this.publishedDescriptor = null;
	    };
	
	    _this.getDimension = function (windowScroll) {
	      var targetRef = _this.props.getDraggableRef();
	
	      var descriptor = _this.publishedDescriptor;
	      !targetRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'DraggableDimensionPublisher cannot calculate a dimension when not attached to the DOM') : invariant(false) : void 0;
	      !descriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get dimension for unpublished draggable') : invariant(false) : void 0;
	      var computedStyles = window.getComputedStyle(targetRef);
	      var borderBox = targetRef.getBoundingClientRect();
	      var client = cssBoxModel.calculateBox(borderBox, computedStyles);
	      var page = cssBoxModel.withScroll(client, windowScroll);
	      var placeholder = {
	        client: client,
	        tagName: targetRef.tagName.toLowerCase(),
	        display: computedStyles.display
	      };
	      var dimension = {
	        descriptor: descriptor,
	        placeholder: placeholder,
	        client: client,
	        page: page
	      };
	      return dimension;
	    };
	
	    return _this;
	  }
	
	  var _proto = DraggableDimensionPublisher.prototype;
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.publish();
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate() {
	    this.publish();
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.unpublish();
	  };
	
	  _proto.render = function render() {
	    return this.props.children;
	  };
	
	  return DraggableDimensionPublisher;
	}(React.Component);
	
	DraggableDimensionPublisher.contextTypes = (_DraggableDimensionPu = {}, _DraggableDimensionPu[dimensionMarshalKey] = PropTypes.object.isRequired, _DraggableDimensionPu);
	
	var DoubleRenderBlocker = function (_React$Component) {
	  _inheritsLoose(DoubleRenderBlocker, _React$Component);
	
	  function DoubleRenderBlocker() {
	    return _React$Component.apply(this, arguments) || this;
	  }
	
	  var _proto = DoubleRenderBlocker.prototype;
	
	  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    if (isEqual(origin, nextProps.change)) {
	      return true;
	    }
	
	    if (isEqual(this.props.change, nextProps.change)) {
	      return false;
	    }
	
	    return true;
	  };
	
	  _proto.render = function render() {
	    return this.props.children(this.props.change);
	  };
	
	  return DoubleRenderBlocker;
	}(React__default.Component);
	
	var Moveable = function (_Component) {
	  _inheritsLoose(Moveable, _Component);
	
	  function Moveable() {
	    return _Component.apply(this, arguments) || this;
	  }
	
	  var _proto2 = Moveable.prototype;
	
	  _proto2.getFinal = function getFinal() {
	    var destination = this.props.destination;
	    var speed = this.props.speed;
	
	    if (speed === 'INSTANT') {
	      return destination;
	    }
	
	    var config = speed === 'FAST' ? physics.fast : physics.standard;
	    return {
	      x: reactMotion.spring(destination.x, config),
	      y: reactMotion.spring(destination.y, config)
	    };
	  };
	
	  _proto2.render = function render() {
	    var _this = this;
	
	    var final = this.getFinal();
	    return React__default.createElement(reactMotion.Motion, {
	      defaultStyle: origin,
	      style: final,
	      onRest: this.props.onMoveEnd
	    }, function (current) {
	      var _this$props = _this.props,
	          speed = _this$props.speed,
	          destination = _this$props.destination,
	          children = _this$props.children;
	      var target = speed === 'INSTANT' ? destination : current;
	      return React__default.createElement(DoubleRenderBlocker, {
	        change: target
	      }, children);
	    });
	  };
	
	  return Moveable;
	}(React.Component);
	
	Moveable.defaultProps = {
	  destination: origin
	};
	
	var getWindowFromRef = (function (ref) {
	  return ref ? ref.ownerDocument.defaultView : window;
	});
	
	var selector = "[" + dragHandle + "]";
	
	var isSVG = function isSVG(el) {
	  if (typeof SVGElement === 'undefined') {
	    return false;
	  }
	
	  return el instanceof SVGElement;
	};
	
	var throwIfSVG = function throwIfSVG(el) {
	  !!isSVG(el) ? process.env.NODE_ENV !== "production" ? invariant(false, "A drag handle cannot be an SVGElement: it has inconsistent focus support.\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/tree/master/docs/guides/dragging-svgs.md") : invariant(false) : void 0;
	};
	
	var getDragHandleRef = function getDragHandleRef(draggableRef) {
	  if (draggableRef.hasAttribute(dragHandle)) {
	    throwIfSVG(draggableRef);
	    return draggableRef;
	  }
	
	  var el = draggableRef.querySelector(selector);
	  throwIfSVG(draggableRef);
	  !el ? process.env.NODE_ENV !== "production" ? invariant(false, "\n      Cannot find drag handle element inside of Draggable.\n      Please be sure to apply the {...provided.dragHandleProps} to your Draggable\n\n      More information: https://github.com/atlassian/react-beautiful-dnd#draggable\n    ") : invariant(false) : void 0;
	  !(el instanceof HTMLElement) ? process.env.NODE_ENV !== "production" ? invariant(false, 'A drag handle must be a HTMLElement') : invariant(false) : void 0;
	  return el;
	};
	
	var retainingFocusFor = null;
	var listenerOptions$1 = {
	  capture: true
	};
	
	var clearRetentionOnFocusChange = function () {
	  var isBound = false;
	
	  var bind = function bind() {
	    if (isBound) {
	      return;
	    }
	
	    isBound = true;
	    window.addEventListener('focus', onWindowFocusChange, listenerOptions$1);
	  };
	
	  var unbind = function unbind() {
	    if (!isBound) {
	      return;
	    }
	
	    isBound = false;
	    window.removeEventListener('focus', onWindowFocusChange, listenerOptions$1);
	  };
	
	  var onWindowFocusChange = function onWindowFocusChange() {
	    unbind();
	    retainingFocusFor = null;
	  };
	
	  var result = function result() {
	    return bind();
	  };
	
	  result.cancel = function () {
	    return unbind();
	  };
	
	  return result;
	}();
	
	var retain = function retain(id) {
	  retainingFocusFor = id;
	  clearRetentionOnFocusChange();
	};
	
	var tryRestoreFocus = function tryRestoreFocus(id, draggableRef) {
	  if (!retainingFocusFor) {
	    return;
	  }
	
	  if (id !== retainingFocusFor) {
	    return;
	  }
	
	  retainingFocusFor = null;
	  clearRetentionOnFocusChange.cancel();
	  var dragHandleRef = getDragHandleRef(draggableRef);
	
	  if (!dragHandleRef) {
	    console.warn('Could not find drag handle in the DOM to focus on it');
	    return;
	  }
	
	  dragHandleRef.focus();
	};
	
	var retainer = {
	  retain: retain,
	  tryRestoreFocus: tryRestoreFocus
	};
	
	var interactiveTagNames = {
	  input: true,
	  button: true,
	  textarea: true,
	  select: true,
	  option: true,
	  optgroup: true,
	  video: true,
	  audio: true
	};
	
	var isAnInteractiveElement = function isAnInteractiveElement(parent, current) {
	  if (current == null) {
	    return false;
	  }
	
	  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);
	
	  if (hasAnInteractiveTag) {
	    return true;
	  }
	
	  var attribute = current.getAttribute('contenteditable');
	
	  if (attribute === 'true' || attribute === '') {
	    return true;
	  }
	
	  if (current === parent) {
	    return false;
	  }
	
	  return isAnInteractiveElement(parent, current.parentElement);
	};
	
	var shouldAllowDraggingFromTarget = (function (event, props) {
	  if (props.canDragInteractiveElements) {
	    return true;
	  }
	
	  var target = event.target,
	      currentTarget = event.currentTarget;
	
	  if (!(target instanceof Element) || !(currentTarget instanceof Element)) {
	    return true;
	  }
	
	  return !isAnInteractiveElement(currentTarget, target);
	});
	
	var createScheduler = (function (callbacks) {
	  var memoizedMove = memoizeOne(function (x, y) {
	    var point = {
	      x: x,
	      y: y
	    };
	    callbacks.onMove(point);
	  });
	  var move = rafSchd(function (point) {
	    return memoizedMove(point.x, point.y);
	  });
	  var moveUp = rafSchd(callbacks.onMoveUp);
	  var moveDown = rafSchd(callbacks.onMoveDown);
	  var moveRight = rafSchd(callbacks.onMoveRight);
	  var moveLeft = rafSchd(callbacks.onMoveLeft);
	  var windowScrollMove = rafSchd(callbacks.onWindowScroll);
	
	  var cancel = function cancel() {
	    move.cancel();
	    moveUp.cancel();
	    moveDown.cancel();
	    moveRight.cancel();
	    moveLeft.cancel();
	    windowScrollMove.cancel();
	  };
	
	  return {
	    move: move,
	    moveUp: moveUp,
	    moveDown: moveDown,
	    moveRight: moveRight,
	    moveLeft: moveLeft,
	    windowScrollMove: windowScrollMove,
	    cancel: cancel
	  };
	});
	
	var sloppyClickThreshold = 5;
	var isSloppyClickThresholdExceeded = (function (original, current) {
	  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
	});
	
	var tab = 9;
	var enter = 13;
	var escape = 27;
	var space = 32;
	var pageUp = 33;
	var pageDown = 34;
	var end = 35;
	var home = 36;
	var arrowLeft = 37;
	var arrowUp = 38;
	var arrowRight = 39;
	var arrowDown = 40;
	
	var _preventedKeys;
	var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
	var preventStandardKeyEvents = (function (event) {
	  if (preventedKeys[event.keyCode]) {
	    event.preventDefault();
	  }
	});
	
	var getOptions = function getOptions(shared, fromBinding) {
	  return _extends({}, shared, fromBinding);
	};
	
	var bindEvents = function bindEvents(el, bindings, sharedOptions) {
	  bindings.forEach(function (binding) {
	    var options = getOptions(sharedOptions, binding.options);
	    el.addEventListener(binding.eventName, binding.fn, options);
	  });
	};
	var unbindEvents = function unbindEvents(el, bindings, sharedOptions) {
	  bindings.forEach(function (binding) {
	    var options = getOptions(sharedOptions, binding.options);
	    el.removeEventListener(binding.eventName, binding.fn, options);
	  });
	};
	
	var sharedOptions = {
	  capture: true
	};
	var createPostDragEventPreventer = (function (getWindow) {
	  var isBound = false;
	
	  var bind = function bind() {
	    if (isBound) {
	      return;
	    }
	
	    isBound = true;
	    bindEvents(getWindow(), pointerEvents, sharedOptions);
	  };
	
	  var unbind = function unbind() {
	    if (!isBound) {
	      return;
	    }
	
	    isBound = false;
	    unbindEvents(getWindow(), pointerEvents, sharedOptions);
	  };
	
	  var pointerEvents = [{
	    eventName: 'click',
	    fn: function fn(event) {
	      event.preventDefault();
	      unbind();
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: unbind
	  }, {
	    eventName: 'touchstart',
	    fn: unbind
	  }];
	
	  var preventNext = function preventNext() {
	    if (isBound) {
	      unbind();
	    }
	
	    bind();
	  };
	
	  var preventer = {
	    preventNext: preventNext,
	    abort: unbind
	  };
	  return preventer;
	});
	
	var createEventMarshal = (function () {
	  var isMouseDownHandled = false;
	
	  var handle = function handle() {
	    !!isMouseDownHandled ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot handle mouse down as it is already handled') : invariant(false) : void 0;
	    isMouseDownHandled = true;
	  };
	
	  var isHandled = function isHandled() {
	    return isMouseDownHandled;
	  };
	
	  var reset = function reset() {
	    isMouseDownHandled = false;
	  };
	
	  return {
	    handle: handle,
	    isHandled: isHandled,
	    reset: reset
	  };
	});
	
	var supportedEventName = function () {
	  var base = 'visibilitychange';
	
	  if (typeof document === 'undefined') {
	    return base;
	  }
	
	  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
	  var supported = candidates.find(function (eventName) {
	    return "on" + eventName in document;
	  });
	  return supported || base;
	}();
	
	var primaryButton = 0;
	
	var noop = function noop() {};
	
	var mouseDownMarshal = createEventMarshal();
	var createMouseSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = {
	    isDragging: false,
	    pending: null
	  };
	
	  var setState = function setState(newState) {
	    state = newState;
	  };
	
	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };
	
	  var isCapturing = function isCapturing() {
	    return Boolean(state.pending || state.isDragging);
	  };
	
	  var schedule = createScheduler(callbacks);
	  var postDragEventPreventer = createPostDragEventPreventer(getWindow);
	
	  var startDragging = function startDragging(fn) {
	    if (fn === void 0) {
	      fn = noop;
	    }
	
	    setState({
	      pending: null,
	      isDragging: true
	    });
	    fn();
	  };
	
	  var stopDragging = function stopDragging(fn, shouldBlockClick) {
	    if (fn === void 0) {
	      fn = noop;
	    }
	
	    if (shouldBlockClick === void 0) {
	      shouldBlockClick = true;
	    }
	
	    schedule.cancel();
	    unbindWindowEvents();
	    mouseDownMarshal.reset();
	
	    if (shouldBlockClick) {
	      postDragEventPreventer.preventNext();
	    }
	
	    setState({
	      isDragging: false,
	      pending: null
	    });
	    fn();
	  };
	
	  var startPendingDrag = function startPendingDrag(point) {
	    setState({
	      pending: point,
	      isDragging: false
	    });
	    bindWindowEvents();
	  };
	
	  var stopPendingDrag = function stopPendingDrag() {
	    stopDragging(noop, false);
	  };
	
	  var kill = function kill(fn) {
	    if (fn === void 0) {
	      fn = noop;
	    }
	
	    if (state.pending) {
	      stopPendingDrag();
	      return;
	    }
	
	    stopDragging(fn);
	  };
	
	  var unmount = function unmount() {
	    kill();
	    postDragEventPreventer.abort();
	  };
	
	  var cancel = function cancel() {
	    kill(callbacks.onCancel);
	  };
	
	  var windowBindings = [{
	    eventName: 'mousemove',
	    fn: function fn(event) {
	      var button = event.button,
	          clientX = event.clientX,
	          clientY = event.clientY;
	
	      if (button !== primaryButton) {
	        return;
	      }
	
	      var point = {
	        x: clientX,
	        y: clientY
	      };
	
	      if (state.isDragging) {
	        event.preventDefault();
	        schedule.move(point);
	        return;
	      }
	
	      if (!state.pending) {
	        kill();
	        process.env.NODE_ENV !== "production" ? invariant(false, 'Expected there to be a pending drag') : invariant(false);
	      }
	
	      if (!isSloppyClickThresholdExceeded(state.pending, point)) {
	        return;
	      }
	
	      event.preventDefault();
	      startDragging(function () {
	        return callbacks.onLift({
	          clientSelection: point,
	          autoScrollMode: 'FLUID'
	        });
	      });
	    }
	  }, {
	    eventName: 'mouseup',
	    fn: function fn(event) {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }
	
	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: function fn(event) {
	      if (state.isDragging) {
	        event.preventDefault();
	      }
	
	      stopDragging(callbacks.onCancel);
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        cancel();
	        return;
	      }
	
	      if (event.keyCode === escape) {
	        event.preventDefault();
	        cancel();
	        return;
	      }
	
	      preventStandardKeyEvents(event);
	    }
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn() {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }
	
	      schedule.windowScrollMove();
	    }
	  }, {
	    eventName: 'webkitmouseforcechanged',
	    fn: function fn(event) {
	      if (event.webkitForce == null || MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN == null) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.warn('handling a mouse force changed event when it is not supported');
	        }
	
	        return;
	      }
	
	      var forcePressThreshold = MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN;
	      var isForcePressing = event.webkitForce >= forcePressThreshold;
	
	      if (isForcePressing) {
	        cancel();
	      }
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	
	  var bindWindowEvents = function bindWindowEvents() {
	    var win = getWindow();
	    bindEvents(win, windowBindings, {
	      capture: true
	    });
	  };
	
	  var unbindWindowEvents = function unbindWindowEvents() {
	    var win = getWindow();
	    unbindEvents(win, windowBindings, {
	      capture: true
	    });
	  };
	
	  var onMouseDown = function onMouseDown(event) {
	    if (mouseDownMarshal.isHandled()) {
	      return;
	    }
	
	    !!isCapturing() ? process.env.NODE_ENV !== "production" ? invariant(false, 'Should not be able to perform a mouse down while a drag or pending drag is occurring') : invariant(false) : void 0;
	
	    if (!canStartCapturing(event)) {
	      return;
	    }
	
	    if (event.button !== primaryButton) {
	      return;
	    }
	
	    if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
	      return;
	    }
	
	    mouseDownMarshal.handle();
	    event.preventDefault();
	    var point = {
	      x: event.clientX,
	      y: event.clientY
	    };
	    startPendingDrag(point);
	  };
	
	  var sensor = {
	    onMouseDown: onMouseDown,
	    kill: kill,
	    isCapturing: isCapturing,
	    isDragging: isDragging,
	    unmount: unmount
	  };
	  return sensor;
	});
	
	var getBorderBoxCenterPosition = (function (el) {
	  return cssBoxModel.getRect(el.getBoundingClientRect()).center;
	});
	
	var _scrollJumpKeys;
	var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);
	
	var noop$1 = function noop() {};
	
	var createKeyboardSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      getDraggableRef = _ref.getDraggableRef,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = {
	    isDragging: false
	  };
	
	  var setState = function setState(newState) {
	    state = newState;
	  };
	
	  var startDragging = function startDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$1;
	    }
	
	    setState({
	      isDragging: true
	    });
	    bindWindowEvents();
	    fn();
	  };
	
	  var stopDragging = function stopDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$1;
	    }
	
	    schedule.cancel();
	    unbindWindowEvents();
	    setState({
	      isDragging: false
	    });
	    fn();
	  };
	
	  var kill = function kill() {
	    return stopDragging();
	  };
	
	  var cancel = function cancel() {
	    stopDragging(callbacks.onCancel);
	  };
	
	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };
	
	  var schedule = createScheduler(callbacks);
	
	  var onKeyDown = function onKeyDown(event) {
	    if (!isDragging()) {
	      if (event.defaultPrevented) {
	        return;
	      }
	
	      if (!canStartCapturing(event)) {
	        return;
	      }
	
	      if (event.keyCode !== space) {
	        return;
	      }
	
	      var ref = getDraggableRef();
	      !ref ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot start a keyboard drag without a draggable ref') : invariant(false) : void 0;
	      var center = getBorderBoxCenterPosition(ref);
	      event.preventDefault();
	      startDragging(function () {
	        return callbacks.onLift({
	          clientSelection: center,
	          autoScrollMode: 'JUMP'
	        });
	      });
	      return;
	    }
	
	    if (event.keyCode === escape) {
	      event.preventDefault();
	      cancel();
	      return;
	    }
	
	    if (event.keyCode === space) {
	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	      return;
	    }
	
	    if (event.keyCode === arrowDown) {
	      event.preventDefault();
	      schedule.moveDown();
	      return;
	    }
	
	    if (event.keyCode === arrowUp) {
	      event.preventDefault();
	      schedule.moveUp();
	      return;
	    }
	
	    if (event.keyCode === arrowRight) {
	      event.preventDefault();
	      schedule.moveRight();
	      return;
	    }
	
	    if (event.keyCode === arrowLeft) {
	      event.preventDefault();
	      schedule.moveLeft();
	      return;
	    }
	
	    if (scrollJumpKeys[event.keyCode]) {
	      event.preventDefault();
	      return;
	    }
	
	    preventStandardKeyEvents(event);
	  };
	
	  var windowBindings = [{
	    eventName: 'mousedown',
	    fn: cancel
	  }, {
	    eventName: 'mouseup',
	    fn: cancel
	  }, {
	    eventName: 'click',
	    fn: cancel
	  }, {
	    eventName: 'touchstart',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'wheel',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      capture: false
	    },
	    fn: callbacks.onWindowScroll
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	
	  var bindWindowEvents = function bindWindowEvents() {
	    bindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };
	
	  var unbindWindowEvents = function unbindWindowEvents() {
	    unbindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };
	
	  var sensor = {
	    onKeyDown: onKeyDown,
	    kill: kill,
	    isDragging: isDragging,
	    isCapturing: isDragging,
	    unmount: kill
	  };
	  return sensor;
	});
	
	var timeForLongPress = 150;
	var forcePressThreshold = 0.15;
	var touchStartMarshal = createEventMarshal();
	
	var noop$2 = function noop() {};
	
	var webkitHack = function () {
	  var stub = {
	    preventTouchMove: noop$2,
	    releaseTouchMove: noop$2
	  };
	
	  if (typeof window === 'undefined') {
	    return stub;
	  }
	
	  if (!('ontouchstart' in window)) {
	    return stub;
	  }
	
	  var isBlocking = false;
	  window.addEventListener('touchmove', function (event) {
	    if (!isBlocking) {
	      return;
	    }
	
	    if (event.defaultPrevented) {
	      return;
	    }
	
	    event.preventDefault();
	  }, {
	    passive: false,
	    capture: false
	  });
	
	  var preventTouchMove = function preventTouchMove() {
	    isBlocking = true;
	  };
	
	  var releaseTouchMove = function releaseTouchMove() {
	    isBlocking = false;
	  };
	
	  return {
	    preventTouchMove: preventTouchMove,
	    releaseTouchMove: releaseTouchMove
	  };
	}();
	
	var initial = {
	  isDragging: false,
	  pending: null,
	  hasMoved: false,
	  longPressTimerId: null
	};
	var createTouchSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = initial;
	
	  var setState = function setState(partial) {
	    state = _extends({}, state, partial);
	  };
	
	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };
	
	  var isCapturing = function isCapturing() {
	    return Boolean(state.pending || state.isDragging || state.longPressTimerId);
	  };
	
	  var schedule = createScheduler(callbacks);
	  var postDragEventPreventer = createPostDragEventPreventer(getWindow);
	
	  var startDragging = function startDragging() {
	    var pending = state.pending;
	
	    if (!pending) {
	      kill();
	      process.env.NODE_ENV !== "production" ? invariant(false, 'cannot start a touch drag without a pending position') : invariant(false);
	    }
	
	    setState({
	      isDragging: true,
	      hasMoved: false,
	      pending: null,
	      longPressTimerId: null
	    });
	    callbacks.onLift({
	      clientSelection: pending,
	      autoScrollMode: 'FLUID'
	    });
	  };
	
	  var stopDragging = function stopDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$2;
	    }
	
	    schedule.cancel();
	    touchStartMarshal.reset();
	    webkitHack.releaseTouchMove();
	    unbindWindowEvents();
	    postDragEventPreventer.preventNext();
	    setState(initial);
	    fn();
	  };
	
	  var startPendingDrag = function startPendingDrag(event) {
	    var touch = event.touches[0];
	    var clientX = touch.clientX,
	        clientY = touch.clientY;
	    var point = {
	      x: clientX,
	      y: clientY
	    };
	    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
	    setState({
	      longPressTimerId: longPressTimerId,
	      pending: point,
	      isDragging: false,
	      hasMoved: false
	    });
	    bindWindowEvents();
	  };
	
	  var stopPendingDrag = function stopPendingDrag() {
	    if (state.longPressTimerId) {
	      clearTimeout(state.longPressTimerId);
	    }
	
	    schedule.cancel();
	    touchStartMarshal.reset();
	    webkitHack.releaseTouchMove();
	    unbindWindowEvents();
	    setState(initial);
	  };
	
	  var kill = function kill(fn) {
	    if (fn === void 0) {
	      fn = noop$2;
	    }
	
	    if (state.pending) {
	      stopPendingDrag();
	      return;
	    }
	
	    stopDragging(fn);
	  };
	
	  var unmount = function unmount() {
	    kill();
	    postDragEventPreventer.abort();
	  };
	
	  var cancel = function cancel() {
	    kill(callbacks.onCancel);
	  };
	
	  var windowBindings = [{
	    eventName: 'touchmove',
	    options: {
	      passive: false
	    },
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }
	
	      if (!state.hasMoved) {
	        setState({
	          hasMoved: true
	        });
	      }
	
	      var _event$touches$ = event.touches[0],
	          clientX = _event$touches$.clientX,
	          clientY = _event$touches$.clientY;
	      var point = {
	        x: clientX,
	        y: clientY
	      };
	      event.preventDefault();
	      schedule.move(point);
	    }
	  }, {
	    eventName: 'touchend',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }
	
	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	    }
	  }, {
	    eventName: 'touchcancel',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }
	
	      event.preventDefault();
	      stopDragging(callbacks.onCancel);
	    }
	  }, {
	    eventName: 'touchstart',
	    fn: cancel
	  }, {
	    eventName: 'orientationchange',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn() {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }
	
	      schedule.windowScrollMove();
	    }
	  }, {
	    eventName: 'contextmenu',
	    fn: function fn(event) {
	      event.preventDefault();
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        cancel();
	        return;
	      }
	
	      if (event.keyCode === escape) {
	        event.preventDefault();
	      }
	
	      cancel();
	    }
	  }, {
	    eventName: 'touchforcechange',
	    fn: function fn(event) {
	      if (state.hasMoved) {
	        event.preventDefault();
	        return;
	      }
	
	      var touch = event.touches[0];
	
	      if (touch.force >= forcePressThreshold) {
	        cancel();
	      }
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	
	  var bindWindowEvents = function bindWindowEvents() {
	    bindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };
	
	  var unbindWindowEvents = function unbindWindowEvents() {
	    unbindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };
	
	  var onTouchStart = function onTouchStart(event) {
	    if (touchStartMarshal.isHandled()) {
	      return;
	    }
	
	    !!isCapturing() ? process.env.NODE_ENV !== "production" ? invariant(false, 'Should not be able to perform a touch start while a drag or pending drag is occurring') : invariant(false) : void 0;
	
	    if (!canStartCapturing(event)) {
	      return;
	    }
	
	    touchStartMarshal.handle();
	    webkitHack.preventTouchMove();
	    startPendingDrag(event);
	  };
	
	  var sensor = {
	    onTouchStart: onTouchStart,
	    kill: kill,
	    isCapturing: isCapturing,
	    isDragging: isDragging,
	    unmount: unmount
	  };
	  return sensor;
	});
	
	var _DragHandle$contextTy;
	
	var preventHtml5Dnd = function preventHtml5Dnd(event) {
	  event.preventDefault();
	};
	
	var DragHandle = function (_Component) {
	  _inheritsLoose(DragHandle, _Component);
	
	  function DragHandle(props, context) {
	    var _this;
	
	    _this = _Component.call(this, props, context) || this;
	    _this.mouseSensor = void 0;
	    _this.keyboardSensor = void 0;
	    _this.touchSensor = void 0;
	    _this.sensors = void 0;
	    _this.styleContext = void 0;
	    _this.canLift = void 0;
	    _this.isFocused = false;
	    _this.lastDraggableRef = void 0;
	
	    _this.onFocus = function () {
	      _this.isFocused = true;
	    };
	
	    _this.onBlur = function () {
	      _this.isFocused = false;
	    };
	
	    _this.onKeyDown = function (event) {
	      if (_this.mouseSensor.isCapturing() || _this.touchSensor.isCapturing()) {
	        return;
	      }
	
	      _this.keyboardSensor.onKeyDown(event);
	    };
	
	    _this.onMouseDown = function (event) {
	      if (_this.keyboardSensor.isCapturing() || _this.mouseSensor.isCapturing()) {
	        return;
	      }
	
	      _this.mouseSensor.onMouseDown(event);
	    };
	
	    _this.onTouchStart = function (event) {
	      if (_this.mouseSensor.isCapturing() || _this.keyboardSensor.isCapturing()) {
	        return;
	      }
	
	      _this.touchSensor.onTouchStart(event);
	    };
	
	    _this.canStartCapturing = function (event) {
	      if (_this.isAnySensorCapturing()) {
	        return false;
	      }
	
	      if (!_this.canLift(_this.props.draggableId)) {
	        return false;
	      }
	
	      return shouldAllowDraggingFromTarget(event, _this.props);
	    };
	
	    _this.isAnySensorCapturing = function () {
	      return _this.sensors.some(function (sensor) {
	        return sensor.isCapturing();
	      });
	    };
	
	    _this.getProvided = memoizeOne(function (isEnabled) {
	      if (!isEnabled) {
	        return null;
	      }
	
	      var provided = {
	        onMouseDown: _this.onMouseDown,
	        onKeyDown: _this.onKeyDown,
	        onTouchStart: _this.onTouchStart,
	        onFocus: _this.onFocus,
	        onBlur: _this.onBlur,
	        tabIndex: 0,
	        'data-react-beautiful-dnd-drag-handle': _this.styleContext,
	        'aria-roledescription': 'Draggable item. Press space bar to lift',
	        draggable: false,
	        onDragStart: preventHtml5Dnd
	      };
	      return provided;
	    });
	
	    var getWindow = function getWindow() {
	      return getWindowFromRef(_this.props.getDraggableRef());
	    };
	
	    var args = {
	      callbacks: _this.props.callbacks,
	      getDraggableRef: _this.props.getDraggableRef,
	      getWindow: getWindow,
	      canStartCapturing: _this.canStartCapturing
	    };
	    _this.mouseSensor = createMouseSensor(args);
	    _this.keyboardSensor = createKeyboardSensor(args);
	    _this.touchSensor = createTouchSensor(args);
	    _this.sensors = [_this.mouseSensor, _this.keyboardSensor, _this.touchSensor];
	    _this.styleContext = context[styleContextKey];
	    _this.canLift = context[canLiftContextKey];
	    return _this;
	  }
	
	  var _proto = DragHandle.prototype;
	
	  _proto.componentDidMount = function componentDidMount() {
	    var draggableRef = this.props.getDraggableRef();
	    this.lastDraggableRef = draggableRef;
	    !draggableRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get draggable ref from drag handle') : invariant(false) : void 0;
	
	    if (!this.props.isEnabled) {
	      return;
	    }
	
	    var dragHandleRef = getDragHandleRef(draggableRef);
	    retainer.tryRestoreFocus(this.props.draggableId, dragHandleRef);
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var _this2 = this;
	
	    var ref = this.props.getDraggableRef();
	
	    if (ref !== this.lastDraggableRef) {
	      this.lastDraggableRef = ref;
	
	      if (!ref || !this.isFocused) {
	        return;
	      }
	
	      if (!this.props.isEnabled) {
	        return;
	      }
	
	      getDragHandleRef(ref).focus();
	    }
	
	    var isCapturing = this.isAnySensorCapturing();
	
	    if (!isCapturing) {
	      return;
	    }
	
	    var isDragStopping = prevProps.isDragging && !this.props.isDragging;
	
	    if (isDragStopping) {
	      this.sensors.forEach(function (sensor) {
	        if (sensor.isCapturing()) {
	          sensor.kill();
	        }
	      });
	    }
	
	    if (this.props.isEnabled) {
	      return;
	    }
	
	    this.sensors.forEach(function (sensor) {
	      if (!sensor.isCapturing()) {
	        return;
	      }
	
	      var wasDragging = sensor.isDragging();
	      sensor.kill();
	
	      if (wasDragging) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.warn('You have disabled dragging on a Draggable while it was dragging. The drag has been cancelled');
	        }
	
	        _this2.props.callbacks.onCancel();
	      }
	    });
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    var _this3 = this;
	
	    this.sensors.forEach(function (sensor) {
	      var wasDragging = sensor.isDragging();
	      sensor.unmount();
	
	      if (wasDragging) {
	        _this3.props.callbacks.onCancel();
	      }
	    });
	
	    var shouldRetainFocus = function () {
	      if (!_this3.props.isEnabled) {
	        return false;
	      }
	
	      if (!_this3.isFocused) {
	        return false;
	      }
	
	      return _this3.props.isDragging || _this3.props.isDropAnimating;
	    }();
	
	    if (shouldRetainFocus) {
	      retainer.retain(this.props.draggableId);
	    }
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        isEnabled = _this$props.isEnabled;
	    return children(this.getProvided(isEnabled));
	  };
	
	  return DragHandle;
	}(React.Component);
	
	DragHandle.contextTypes = (_DragHandle$contextTy = {}, _DragHandle$contextTy[styleContextKey] = PropTypes.string.isRequired, _DragHandle$contextTy[canLiftContextKey] = PropTypes.func.isRequired, _DragHandle$contextTy);
	
	var getWindowScroll = (function () {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	});
	
	var getViewport = (function () {
	  var scroll = getWindowScroll();
	  var top = scroll.y;
	  var left = scroll.x;
	  var doc = document.documentElement;
	  !doc ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find document.documentElement') : invariant(false) : void 0;
	  var width = doc.clientWidth;
	  var height = doc.clientHeight;
	  var right = left + width;
	  var bottom = top + height;
	  var frame = cssBoxModel.getRect({
	    top: top,
	    left: left,
	    right: right,
	    bottom: bottom
	  });
	  var maxScroll = getMaxScroll({
	    scrollHeight: doc.scrollHeight,
	    scrollWidth: doc.scrollWidth,
	    width: frame.width,
	    height: frame.height
	  });
	  var viewport = {
	    frame: frame,
	    scroll: {
	      initial: scroll,
	      current: scroll,
	      max: maxScroll,
	      diff: {
	        value: origin,
	        displacement: origin
	      }
	    }
	  };
	  return viewport;
	});
	
	var _Draggable$contextTyp;
	var zIndexOptions = {
	  dragging: 5000,
	  dropAnimating: 4500
	};
	
	var getTranslate = function getTranslate(offset) {
	  if (isEqual(offset, origin)) {
	    return null;
	  }
	
	  return "translate(" + offset.x + "px, " + offset.y + "px)";
	};
	
	var getSpeed$1 = function getSpeed(isDragging, shouldAnimateDragMovement, isDropAnimating) {
	  if (isDropAnimating) {
	    return 'STANDARD';
	  }
	
	  if (isDragging && shouldAnimateDragMovement) {
	    return 'FAST';
	  }
	
	  return 'INSTANT';
	};
	
	var Draggable = function (_Component) {
	  _inheritsLoose(Draggable, _Component);
	
	  function Draggable(props, context) {
	    var _this;
	
	    _this = _Component.call(this, props, context) || this;
	    _this.callbacks = void 0;
	    _this.styleContext = void 0;
	    _this.ref = null;
	
	    _this.onMoveEnd = function () {
	      if (_this.props.isDropAnimating) {
	        _this.props.dropAnimationFinished();
	      }
	    };
	
	    _this.onLift = function (options) {
	      start('LIFT');
	      var ref = _this.ref;
	      !ref ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;
	      !!_this.props.isDragDisabled ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot lift a Draggable when it is disabled') : invariant(false) : void 0;
	      var clientSelection = options.clientSelection,
	          autoScrollMode = options.autoScrollMode;
	      var _this$props = _this.props,
	          lift = _this$props.lift,
	          draggableId = _this$props.draggableId;
	      var client = {
	        selection: clientSelection,
	        borderBoxCenter: getBorderBoxCenterPosition(ref),
	        offset: origin
	      };
	      lift({
	        id: draggableId,
	        client: client,
	        autoScrollMode: autoScrollMode,
	        viewport: getViewport()
	      });
	      finish('LIFT');
	    };
	
	    _this.setRef = function (ref) {
	      if (ref === null) {
	        return;
	      }
	
	      if (ref === _this.ref) {
	        return;
	      }
	
	      _this.ref = ref;
	      throwIfRefIsInvalid(ref);
	    };
	
	    _this.getDraggableRef = function () {
	      return _this.ref;
	    };
	
	    _this.getDraggingStyle = memoizeOne(function (change, dimension, isDropAnimating) {
	      var box = dimension.client;
	      var style = {
	        position: 'fixed',
	        top: box.marginBox.top,
	        left: box.marginBox.left,
	        boxSizing: 'border-box',
	        width: box.borderBox.width,
	        height: box.borderBox.height,
	        transition: 'none',
	        zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
	        transform: getTranslate(change),
	        pointerEvents: 'none'
	      };
	      return style;
	    });
	    _this.getNotDraggingStyle = memoizeOne(function (current, shouldAnimateDisplacement) {
	      var style = {
	        transform: getTranslate(current),
	        transition: shouldAnimateDisplacement ? null : 'none'
	      };
	      return style;
	    });
	    _this.getProvided = memoizeOne(function (change, isDragging, isDropAnimating, shouldAnimateDisplacement, dimension, dragHandleProps) {
	      var useDraggingStyle = isDragging || isDropAnimating;
	
	      var draggableStyle = function () {
	        if (!useDraggingStyle) {
	          return _this.getNotDraggingStyle(change, shouldAnimateDisplacement);
	        }
	
	        !dimension ? process.env.NODE_ENV !== "production" ? invariant(false, 'draggable dimension required for dragging') : invariant(false) : void 0;
	        return _this.getDraggingStyle(change, dimension, isDropAnimating);
	      }();
	
	      var provided = {
	        innerRef: _this.setRef,
	        draggableProps: {
	          'data-react-beautiful-dnd-draggable': _this.styleContext,
	          style: draggableStyle
	        },
	        dragHandleProps: dragHandleProps
	      };
	      return provided;
	    });
	    _this.getSnapshot = memoizeOne(function (isDragging, isDropAnimating, draggingOver) {
	      return {
	        isDragging: isDragging || isDropAnimating,
	        isDropAnimating: isDropAnimating,
	        draggingOver: draggingOver
	      };
	    });
	
	    _this.renderChildren = function (change, dragHandleProps) {
	      var _this$props2 = _this.props,
	          isDragging = _this$props2.isDragging,
	          isDropAnimating = _this$props2.isDropAnimating,
	          dimension = _this$props2.dimension,
	          draggingOver = _this$props2.draggingOver,
	          shouldAnimateDisplacement = _this$props2.shouldAnimateDisplacement,
	          children = _this$props2.children;
	      var child = children(_this.getProvided(change, isDragging, isDropAnimating, shouldAnimateDisplacement, dimension, dragHandleProps), _this.getSnapshot(isDragging, isDropAnimating, draggingOver));
	      var isDraggingOrDropping = isDragging || isDropAnimating;
	
	      var placeholder = function () {
	        if (!isDraggingOrDropping) {
	          return null;
	        }
	
	        !dimension ? process.env.NODE_ENV !== "production" ? invariant(false, 'Draggable: Dimension is required for dragging') : invariant(false) : void 0;
	        return React__default.createElement(Placeholder, {
	          placeholder: dimension.placeholder
	        });
	      }();
	
	      return React__default.createElement(React.Fragment, null, child, placeholder);
	    };
	
	    var callbacks = {
	      onLift: _this.onLift,
	      onMove: function onMove(clientSelection) {
	        return props.move({
	          client: clientSelection,
	          shouldAnimate: false
	        });
	      },
	      onDrop: function onDrop() {
	        return props.drop({
	          reason: 'DROP'
	        });
	      },
	      onCancel: function onCancel() {
	        return props.drop({
	          reason: 'CANCEL'
	        });
	      },
	      onMoveUp: props.moveUp,
	      onMoveDown: props.moveDown,
	      onMoveRight: props.moveRight,
	      onMoveLeft: props.moveLeft,
	      onWindowScroll: function onWindowScroll() {
	        return props.moveByWindowScroll({
	          scroll: getWindowScroll()
	        });
	      }
	    };
	    _this.callbacks = callbacks;
	    _this.styleContext = context[styleContextKey];
	    return _this;
	  }
	
	  var _proto = Draggable.prototype;
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.ref = null;
	  };
	
	  _proto.render = function render() {
	    var _this2 = this;
	
	    var _this$props3 = this.props,
	        draggableId = _this$props3.draggableId,
	        index = _this$props3.index,
	        offset = _this$props3.offset,
	        isDragging = _this$props3.isDragging,
	        isDropAnimating = _this$props3.isDropAnimating,
	        isDragDisabled = _this$props3.isDragDisabled,
	        shouldAnimateDragMovement = _this$props3.shouldAnimateDragMovement,
	        disableInteractiveElementBlocking = _this$props3.disableInteractiveElementBlocking;
	    var droppableId = this.context[droppableIdKey];
	    var type = this.context[droppableTypeKey];
	    var speed = getSpeed$1(isDragging, shouldAnimateDragMovement, isDropAnimating);
	    return React__default.createElement(DraggableDimensionPublisher, {
	      key: draggableId,
	      draggableId: draggableId,
	      droppableId: droppableId,
	      type: type,
	      index: index,
	      getDraggableRef: this.getDraggableRef
	    }, React__default.createElement(Moveable, {
	      speed: speed,
	      destination: offset,
	      onMoveEnd: this.onMoveEnd
	    }, function (change) {
	      return React__default.createElement(DragHandle, {
	        draggableId: draggableId,
	        isDragging: isDragging,
	        isDropAnimating: isDropAnimating,
	        isEnabled: !isDragDisabled,
	        callbacks: _this2.callbacks,
	        getDraggableRef: _this2.getDraggableRef,
	        canDragInteractiveElements: disableInteractiveElementBlocking
	      }, function (dragHandleProps) {
	        return _this2.renderChildren(change, dragHandleProps);
	      });
	    }));
	  };
	
	  return Draggable;
	}(React.Component);
	
	Draggable.contextTypes = (_Draggable$contextTyp = {}, _Draggable$contextTyp[droppableIdKey] = PropTypes.string.isRequired, _Draggable$contextTyp[droppableTypeKey] = PropTypes.string.isRequired, _Draggable$contextTyp[styleContextKey] = PropTypes.string.isRequired, _Draggable$contextTyp);
	
	var defaultMapProps = {
	  isDropAnimating: false,
	  isDragging: false,
	  offset: origin,
	  shouldAnimateDragMovement: false,
	  shouldAnimateDisplacement: true,
	  dimension: null,
	  draggingOver: null
	};
	var makeMapStateToProps$1 = function makeMapStateToProps() {
	  var memoizedOffset = memoizeOne(function (x, y) {
	    return {
	      x: x,
	      y: y
	    };
	  });
	  var getNotDraggingProps = memoizeOne(function (offset, shouldAnimateDisplacement) {
	    return {
	      isDropAnimating: false,
	      isDragging: false,
	      offset: offset,
	      shouldAnimateDisplacement: shouldAnimateDisplacement,
	      shouldAnimateDragMovement: false,
	      dimension: null,
	      draggingOver: null
	    };
	  });
	  var getDraggingProps = memoizeOne(function (offset, shouldAnimateDragMovement, dimension, draggingOver) {
	    return {
	      isDragging: true,
	      isDropAnimating: false,
	      shouldAnimateDisplacement: false,
	      offset: offset,
	      shouldAnimateDragMovement: shouldAnimateDragMovement,
	      dimension: dimension,
	      draggingOver: draggingOver
	    };
	  });
	
	  var getOutOfTheWayMovement = function getOutOfTheWayMovement(id, movement) {
	    var map = getDisplacementMap(movement.displaced);
	    var displacement = map[id];
	
	    if (!displacement) {
	      return null;
	    }
	
	    if (!displacement.isVisible) {
	      return null;
	    }
	
	    var amount = movement.isBeyondStartPosition ? negate(movement.amount) : movement.amount;
	    return getNotDraggingProps(memoizedOffset(amount.x, amount.y), displacement.shouldAnimate);
	  };
	
	  var draggingSelector = function draggingSelector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id !== ownProps.draggableId) {
	        return null;
	      }
	
	      var offset = state.current.client.offset;
	      var dimension = state.dimensions.draggables[ownProps.draggableId];
	      var shouldAnimateDragMovement = state.shouldAnimate;
	      var draggingOver = state.impact.destination ? state.impact.destination.droppableId : null;
	      return getDraggingProps(memoizedOffset(offset.x, offset.y), shouldAnimateDragMovement, dimension, draggingOver);
	    }
	
	    if (state.phase === 'DROP_ANIMATING') {
	      var pending = state.pending;
	
	      if (pending.result.draggableId !== ownProps.draggableId) {
	        return null;
	      }
	
	      var _draggingOver = pending.result.destination ? pending.result.destination.droppableId : null;
	
	      return {
	        isDragging: false,
	        isDropAnimating: true,
	        offset: pending.newHomeOffset,
	        dimension: state.dimensions.draggables[ownProps.draggableId],
	        draggingOver: _draggingOver,
	        shouldAnimateDragMovement: false,
	        shouldAnimateDisplacement: false
	      };
	    }
	
	    return null;
	  };
	
	  var movingOutOfTheWaySelector = function movingOutOfTheWaySelector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id === ownProps.draggableId) {
	        return null;
	      }
	
	      return getOutOfTheWayMovement(ownProps.draggableId, state.impact.movement);
	    }
	
	    if (state.phase === 'DROP_ANIMATING') {
	      if (state.pending.result.draggableId === ownProps.draggableId) {
	        return null;
	      }
	
	      return getOutOfTheWayMovement(ownProps.draggableId, state.pending.impact.movement);
	    }
	
	    return null;
	  };
	
	  var selector = function selector(state, ownProps) {
	    var dragging = draggingSelector(state, ownProps);
	
	    if (dragging) {
	      return dragging;
	    }
	
	    var movingOutOfTheWay = movingOutOfTheWaySelector(state, ownProps);
	
	    if (movingOutOfTheWay) {
	      return movingOutOfTheWay;
	    }
	
	    return defaultMapProps;
	  };
	
	  return selector;
	};
	var mapDispatchToProps = {
	  lift: lift,
	  move: move,
	  moveUp: moveUp,
	  moveDown: moveDown,
	  moveLeft: moveLeft,
	  moveRight: moveRight,
	  moveByWindowScroll: moveByWindowScroll,
	  drop: drop,
	  dropAnimationFinished: dropAnimationFinished
	};
	var ConnectedDraggable = reactRedux.connect(makeMapStateToProps$1, mapDispatchToProps, null, {
	  storeKey: storeKey,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Draggable);
	ConnectedDraggable.defaultProps = {
	  isDragDisabled: false,
	  disableInteractiveElementBlocking: false
	};
	
	exports.DragDropContext = DragDropContext;
	exports.Droppable = connectedDroppable;
	exports.Draggable = ConnectedDraggable;
	exports.resetServerContext = resetServerContext;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	var _Object$assign = __webpack_require__(152);
	
	function _extends() {
	  module.exports = _extends = _Object$assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	
	    return target;
	  };
	
	  return _extends.apply(this, arguments);
	}
	
	module.exports = _extends;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(153);

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(154);
	module.exports = __webpack_require__(157).Object.assign;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(155);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(171) });


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(156);
	var core = __webpack_require__(157);
	var ctx = __webpack_require__(158);
	var hide = __webpack_require__(160);
	var has = __webpack_require__(170);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 157 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(159);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 159 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(161);
	var createDesc = __webpack_require__(169);
	module.exports = __webpack_require__(165) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(162);
	var IE8_DOM_DEFINE = __webpack_require__(164);
	var toPrimitive = __webpack_require__(168);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(165) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(163);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 163 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(165) && !__webpack_require__(166)(function () {
	  return Object.defineProperty(__webpack_require__(167)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(166)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(163);
	var document = __webpack_require__(156).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(163);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 169 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(172);
	var gOPS = __webpack_require__(187);
	var pIE = __webpack_require__(188);
	var toObject = __webpack_require__(189);
	var IObject = __webpack_require__(175);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(166)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(173);
	var enumBugKeys = __webpack_require__(186);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(170);
	var toIObject = __webpack_require__(174);
	var arrayIndexOf = __webpack_require__(178)(false);
	var IE_PROTO = __webpack_require__(182)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(175);
	var defined = __webpack_require__(177);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(176);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 177 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(174);
	var toLength = __webpack_require__(179);
	var toAbsoluteIndex = __webpack_require__(181);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(180);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 180 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(180);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(183)('keys');
	var uid = __webpack_require__(185);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(157);
	var global = __webpack_require__(156);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(184) ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 184 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 185 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 186 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 187 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 188 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(177);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var isProduction = process.env.NODE_ENV === 'production';
	var prefix = 'Invariant failed';
	function invariant(condition, message) {
	  if (condition) {
	    return;
	  }
	
	  if (isProduction) {
	    throw new Error(prefix);
	  } else {
	    throw new Error(prefix + ": " + (message || ''));
	  }
	}
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var invariant = _interopDefault(__webpack_require__(190));
	
	var getRect = function getRect(_ref) {
	  var top = _ref.top,
	      right = _ref.right,
	      bottom = _ref.bottom,
	      left = _ref.left;
	  var width = right - left;
	  var height = bottom - top;
	  var rect = {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left,
	    width: width,
	    height: height,
	    x: left,
	    y: top,
	    center: {
	      x: (right + left) / 2,
	      y: (bottom + top) / 2
	    }
	  };
	  return rect;
	};
	var expand = function expand(target, expandBy) {
	  return {
	    top: target.top - expandBy.top,
	    left: target.left - expandBy.left,
	    bottom: target.bottom + expandBy.bottom,
	    right: target.right + expandBy.right
	  };
	};
	var shrink = function shrink(target, shrinkBy) {
	  return {
	    top: target.top + shrinkBy.top,
	    left: target.left + shrinkBy.left,
	    bottom: target.bottom - shrinkBy.bottom,
	    right: target.right - shrinkBy.right
	  };
	};
	
	var shift = function shift(target, shiftBy) {
	  return {
	    top: target.top + shiftBy.y,
	    left: target.left + shiftBy.x,
	    bottom: target.bottom + shiftBy.y,
	    right: target.right + shiftBy.x
	  };
	};
	
	var noSpacing = {
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0
	};
	var createBox = function createBox(_ref2) {
	  var borderBox = _ref2.borderBox,
	      _ref2$margin = _ref2.margin,
	      margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin,
	      _ref2$border = _ref2.border,
	      border = _ref2$border === void 0 ? noSpacing : _ref2$border,
	      _ref2$padding = _ref2.padding,
	      padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
	  var marginBox = getRect(expand(borderBox, margin));
	  var paddingBox = getRect(shrink(borderBox, border));
	  var contentBox = getRect(shrink(paddingBox, padding));
	  return {
	    marginBox: marginBox,
	    borderBox: getRect(borderBox),
	    paddingBox: paddingBox,
	    contentBox: contentBox,
	    margin: margin,
	    border: border,
	    padding: padding
	  };
	};
	
	var parse = function parse(raw) {
	  var value = raw.slice(0, -2);
	  var suffix = raw.slice(-2);
	
	  if (suffix !== 'px') {
	    return 0;
	  }
	
	  var result = Number(value);
	  !!isNaN(result) ? process.env.NODE_ENV !== "production" ? invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant(false) : void 0;
	  return result;
	};
	
	var getWindowScroll = function getWindowScroll() {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	};
	
	var offset = function offset(original, change) {
	  var borderBox = original.borderBox,
	      border = original.border,
	      margin = original.margin,
	      padding = original.padding;
	  var shifted = shift(borderBox, change);
	  return createBox({
	    borderBox: shifted,
	    border: border,
	    margin: margin,
	    padding: padding
	  });
	};
	var withScroll = function withScroll(original, scroll) {
	  if (scroll === void 0) {
	    scroll = getWindowScroll();
	  }
	
	  return offset(original, scroll);
	};
	var calculateBox = function calculateBox(borderBox, styles) {
	  var margin = {
	    top: parse(styles.marginTop),
	    right: parse(styles.marginRight),
	    bottom: parse(styles.marginBottom),
	    left: parse(styles.marginLeft)
	  };
	  var padding = {
	    top: parse(styles.paddingTop),
	    right: parse(styles.paddingRight),
	    bottom: parse(styles.paddingBottom),
	    left: parse(styles.paddingLeft)
	  };
	  var border = {
	    top: parse(styles.borderTopWidth),
	    right: parse(styles.borderRightWidth),
	    bottom: parse(styles.borderBottomWidth),
	    left: parse(styles.borderLeftWidth)
	  };
	  return createBox({
	    borderBox: borderBox,
	    margin: margin,
	    padding: padding,
	    border: border
	  });
	};
	var getBox = function getBox(el) {
	  var borderBox = el.getBoundingClientRect();
	  var styles = window.getComputedStyle(el);
	  return calculateBox(borderBox, styles);
	};
	
	exports.calculateBox = calculateBox;
	exports.createBox = createBox;
	exports.expand = expand;
	exports.getBox = getBox;
	exports.getRect = getRect;
	exports.offset = offset;
	exports.shrink = shrink;
	exports.withScroll = withScroll;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(193);

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(194);
	module.exports = __webpack_require__(157).Object.keys;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(189);
	var $keys = __webpack_require__(172);
	
	__webpack_require__(195)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(155);
	var core = __webpack_require__(157);
	var fails = __webpack_require__(166);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	'use strict';
	
	var simpleIsEqual = function simpleIsEqual(a, b) {
	  return a === b;
	};
	
	function index (resultFn, isEqual) {
	  if (isEqual === void 0) {
	    isEqual = simpleIsEqual;
	  }
	
	  var lastThis;
	  var lastArgs = [];
	  var lastResult;
	  var calledOnce = false;
	
	  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
	    return isEqual(newArg, lastArgs[index]);
	  };
	
	  var result = function result() {
	    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {
	      newArgs[_key] = arguments[_key];
	    }
	
	    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
	      return lastResult;
	    }
	
	    lastResult = resultFn.apply(this, newArgs);
	    calledOnce = true;
	    lastThis = this;
	    lastArgs = newArgs;
	    return lastResult;
	  };
	
	  return result;
	}
	
	module.exports = index;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var $$observable = _interopDefault(__webpack_require__(198));
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};
	
	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};
	
	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;
	
	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }
	
	  return Object.getPrototypeOf(obj) === proto;
	}
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	
	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;
	
	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
	  }
	
	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, preloadedState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	
	
	  function getState() {
	    if (isDispatching) {
	      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }
	
	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	
	
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected the listener to be a function.');
	    }
	
	    if (isDispatching) {
	      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	    }
	
	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      if (isDispatching) {
	        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	      }
	
	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	
	
	  function dispatch(action) {
	    if (!isPlainObject(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }
	
	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	
	
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	
	
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[$$observable] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	
	
	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[$$observable] = observable, _ref2;
	}
	
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	
	
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty
	
	}
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
	  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!isPlainObject(inputState)) {
	    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	  if (action && action.type === ActionTypes.REPLACE) return;
	
	  if (unexpectedKeys.length > 0) {
	    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
	  }
	}
	
	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, {
	      type: ActionTypes.INIT
	    });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
	    }
	
	    if (typeof reducer(undefined, {
	      type: ActionTypes.PROBE_UNKNOWN_ACTION()
	    }) === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
	    }
	  });
	}
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	
	
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        warning("No reducer provided for key \"" + key + "\"");
	      }
	    }
	
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	
	  var finalReducerKeys = Object.keys(finalReducers);
	  var unexpectedKeyCache;
	
	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }
	
	  var shapeAssertionError;
	
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }
	
	  return function combination(state, action) {
	    if (state === void 0) {
	      state = {};
	    }
	
	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	
	      if (warningMessage) {
	        warning(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	
	    return hasChanged ? nextState : state;
	  };
	}
	
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(this, arguments));
	  };
	}
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	
	
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	
	  return boundActionCreators;
	}
	
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	}
	
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);
	
	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }
	
	    ownKeys.forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    });
	  }
	
	  return target;
	}
	
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	
	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(void 0, arguments));
	    };
	  });
	}
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function () {
	      var store = createStore.apply(void 0, arguments);
	
	      var _dispatch = function dispatch() {
	        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
	      };
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch() {
	          return _dispatch.apply(void 0, arguments);
	        }
	      };
	      var chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(void 0, chain)(store.dispatch);
	      return _objectSpread({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}
	
	/*
	 * This is a dummy function to check if the function name has been altered by minification.
	 * If the function has been minified and NODE_ENV !== 'production', warn the user.
	 */
	
	function isCrushed() {}
	
	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = createStore;
	exports.combineReducers = combineReducers;
	exports.bindActionCreators = bindActionCreators;
	exports.applyMiddleware = applyMiddleware;
	exports.compose = compose;
	exports.__DO_NOT_USE__ActionTypes = ActionTypes;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ponyfill = __webpack_require__(200);
	
	var _ponyfill2 = _interopRequireDefault(_ponyfill);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var root; /* global window */
	
	
	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}
	
	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(199)(module)))

/***/ }),
/* 199 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;
	
		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};

/***/ }),
/* 201 */
/***/ (function(module, exports) {

	'use strict';
	
	var index = (function (fn) {
	  var lastArgs = [];
	  var frameId = null;
	
	  var wrapperFn = function wrapperFn() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    lastArgs = args;
	
	    if (frameId) {
	      return;
	    }
	
	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      fn.apply(undefined, lastArgs);
	    });
	  };
	
	  wrapperFn.cancel = function () {
	    if (!frameId) {
	      return;
	    }
	
	    cancelAnimationFrame(frameId);
	    frameId = null;
	  };
	
	  var resultFn = wrapperFn;
	
	  return resultFn;
	});
	
	module.exports = index;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var _Object$create = __webpack_require__(203);
	
	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = _Object$create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}
	
	module.exports = _inheritsLoose;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(204);

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(205);
	var $Object = __webpack_require__(157).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(155);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(206) });


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(162);
	var dPs = __webpack_require__(207);
	var enumBugKeys = __webpack_require__(186);
	var IE_PROTO = __webpack_require__(182)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(167)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(208).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(161);
	var anObject = __webpack_require__(162);
	var getKeys = __webpack_require__(172);
	
	module.exports = __webpack_require__(165) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(156).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	var _interopRequireWildcard = __webpack_require__(211);
	
	exports.__esModule = true;
	
	var _Provider = _interopRequireWildcard(__webpack_require__(212));
	
	exports.Provider = _Provider.default;
	exports.createProvider = _Provider.createProvider;
	
	var _connectAdvanced = _interopRequireDefault(__webpack_require__(216));
	
	exports.connectAdvanced = _connectAdvanced.default;
	
	var _connect = _interopRequireDefault(__webpack_require__(226));
	
	exports.connect = _connect.default;

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	
	module.exports = _interopRequireDefault;

/***/ }),
/* 211 */
/***/ (function(module, exports) {

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};
	
	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
	
	          if (desc.get || desc.set) {
	            Object.defineProperty(newObj, key, desc);
	          } else {
	            newObj[key] = obj[key];
	          }
	        }
	      }
	    }
	
	    newObj["default"] = obj;
	    return newObj;
	  }
	}
	
	module.exports = _interopRequireWildcard;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.createProvider = createProvider;
	exports.default = void 0;
	
	var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(213));
	
	var _react = __webpack_require__(1);
	
	var _propTypes = _interopRequireDefault(__webpack_require__(6));
	
	var _PropTypes = __webpack_require__(214);
	
	var _warning = _interopRequireDefault(__webpack_require__(215));
	
	var didWarnAboutReceivingStore = false;
	
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	
	  didWarnAboutReceivingStore = true;
	  (0, _warning.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reduxjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}
	
	function createProvider(storeKey) {
	  var _Provider$childContex;
	
	  if (storeKey === void 0) {
	    storeKey = 'store';
	  }
	
	  var subscriptionKey = storeKey + "Subscription";
	
	  var Provider =
	  /*#__PURE__*/
	  function (_Component) {
	    (0, _inheritsLoose2.default)(Provider, _Component);
	    var _proto = Provider.prototype;
	
	    _proto.getChildContext = function getChildContext() {
	      var _ref;
	
	      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
	    };
	
	    function Provider(props, context) {
	      var _this;
	
	      _this = _Component.call(this, props, context) || this;
	      _this[storeKey] = props.store;
	      return _this;
	    }
	
	    _proto.render = function render() {
	      return _react.Children.only(this.props.children);
	    };
	
	    return Provider;
	  }(_react.Component);
	
	  if (process.env.NODE_ENV !== 'production') {
	    Provider.prototype.componentWillReceiveProps = function (nextProps) {
	      if (this[storeKey] !== nextProps.store) {
	        warnAboutReceivingStore();
	      }
	    };
	  }
	
	  Provider.propTypes = {
	    store: _PropTypes.storeShape.isRequired,
	    children: _propTypes.default.element.isRequired
	  };
	  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _PropTypes.storeShape.isRequired, _Provider$childContex[subscriptionKey] = _PropTypes.subscriptionShape, _Provider$childContex);
	  return Provider;
	}
	
	var _default = createProvider();
	
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 213 */
/***/ (function(module, exports) {

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}
	
	module.exports = _inheritsLoose;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.storeShape = exports.subscriptionShape = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(6));
	
	var subscriptionShape = _propTypes.default.shape({
	  trySubscribe: _propTypes.default.func.isRequired,
	  tryUnsubscribe: _propTypes.default.func.isRequired,
	  notifyNestedSubs: _propTypes.default.func.isRequired,
	  isSubscribed: _propTypes.default.func.isRequired
	});
	
	exports.subscriptionShape = subscriptionShape;
	
	var storeShape = _propTypes.default.shape({
	  subscribe: _propTypes.default.func.isRequired,
	  dispatch: _propTypes.default.func.isRequired,
	  getState: _propTypes.default.func.isRequired
	});
	
	exports.storeShape = storeShape;

/***/ }),
/* 215 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = warning;
	
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	
	
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	
	}

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.default = connectAdvanced;
	
	var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(213));
	
	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(217));
	
	var _extends2 = _interopRequireDefault(__webpack_require__(218));
	
	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(219));
	
	var _hoistNonReactStatics = _interopRequireDefault(__webpack_require__(220));
	
	var _invariant = _interopRequireDefault(__webpack_require__(224));
	
	var _react = __webpack_require__(1);
	
	var _reactIs = __webpack_require__(221);
	
	var _Subscription = _interopRequireDefault(__webpack_require__(225));
	
	var _PropTypes = __webpack_require__(214);
	
	var hotReloadingVersion = 0;
	var dummyState = {};
	
	function noop() {}
	
	function makeSelectorStateful(sourceSelector, store) {
	  // wrap the selector in an object that tracks its results between runs.
	  var selector = {
	    run: function runComponentSelector(props) {
	      try {
	        var nextProps = sourceSelector(store.getState(), props);
	
	        if (nextProps !== selector.props || selector.error) {
	          selector.shouldComponentUpdate = true;
	          selector.props = nextProps;
	          selector.error = null;
	        }
	      } catch (error) {
	        selector.shouldComponentUpdate = true;
	        selector.error = error;
	      }
	    }
	  };
	  return selector;
	}
	
	function connectAdvanced(
	/*
	  selectorFactory is a func that is responsible for returning the selector function used to
	  compute new props from state, props, and dispatch. For example:
	     export default connectAdvanced((dispatch, options) => (state, props) => ({
	      thing: state.things[props.thingId],
	      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
	    }))(YourComponent)
	   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
	  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
	  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
	   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
	  props. Do not use connectAdvanced directly without memoizing results between calls to your
	  selector, otherwise the Connect component will re-render on every state or props change.
	*/
	selectorFactory, // options object:
	_ref) {
	  var _contextTypes, _childContextTypes;
	
	  if (_ref === void 0) {
	    _ref = {};
	  }
	
	  var _ref2 = _ref,
	      _ref2$getDisplayName = _ref2.getDisplayName,
	      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
	    return "ConnectAdvanced(" + name + ")";
	  } : _ref2$getDisplayName,
	      _ref2$methodName = _ref2.methodName,
	      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
	      _ref2$renderCountProp = _ref2.renderCountProp,
	      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
	      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
	      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
	      _ref2$storeKey = _ref2.storeKey,
	      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
	      _ref2$withRef = _ref2.withRef,
	      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
	      connectOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);
	  var subscriptionKey = storeKey + 'Subscription';
	  var version = hotReloadingVersion++;
	  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
	  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);
	  return function wrapWithConnect(WrappedComponent) {
	    (0, _invariant.default)((0, _reactIs.isValidElementType)(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + JSON.stringify(WrappedComponent)));
	    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	    var displayName = getDisplayName(wrappedComponentName);
	    var selectorFactoryOptions = (0, _extends2.default)({}, connectOptions, {
	      getDisplayName: getDisplayName,
	      methodName: methodName,
	      renderCountProp: renderCountProp,
	      shouldHandleStateChanges: shouldHandleStateChanges,
	      storeKey: storeKey,
	      withRef: withRef,
	      displayName: displayName,
	      wrappedComponentName: wrappedComponentName,
	      WrappedComponent: WrappedComponent // TODO Actually fix our use of componentWillReceiveProps
	
	      /* eslint-disable react/no-deprecated */
	
	    });
	
	    var Connect =
	    /*#__PURE__*/
	    function (_Component) {
	      (0, _inheritsLoose2.default)(Connect, _Component);
	
	      function Connect(props, context) {
	        var _this;
	
	        _this = _Component.call(this, props, context) || this;
	        _this.version = version;
	        _this.state = {};
	        _this.renderCount = 0;
	        _this.store = props[storeKey] || context[storeKey];
	        _this.propsMode = Boolean(props[storeKey]);
	        _this.setWrappedInstance = _this.setWrappedInstance.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
	        (0, _invariant.default)(_this.store, "Could not find \"" + storeKey + "\" in either the context or props of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + ("or explicitly pass \"" + storeKey + "\" as a prop to \"" + displayName + "\"."));
	
	        _this.initSelector();
	
	        _this.initSubscription();
	
	        return _this;
	      }
	
	      var _proto = Connect.prototype;
	
	      _proto.getChildContext = function getChildContext() {
	        var _ref3;
	
	        // If this component received store from props, its subscription should be transparent
	        // to any descendants receiving store+subscription from context; it passes along
	        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
	        // Connect to control ordering of notifications to flow top-down.
	        var subscription = this.propsMode ? null : this.subscription;
	        return _ref3 = {}, _ref3[subscriptionKey] = subscription || this.context[subscriptionKey], _ref3;
	      };
	
	      _proto.componentDidMount = function componentDidMount() {
	        if (!shouldHandleStateChanges) return; // componentWillMount fires during server side rendering, but componentDidMount and
	        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
	        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
	        // To handle the case where a child component may have triggered a state change by
	        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
	        // re-render.
	
	        this.subscription.trySubscribe();
	        this.selector.run(this.props);
	        if (this.selector.shouldComponentUpdate) this.forceUpdate();
	      };
	
	      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        this.selector.run(nextProps);
	      };
	
	      _proto.shouldComponentUpdate = function shouldComponentUpdate() {
	        return this.selector.shouldComponentUpdate;
	      };
	
	      _proto.componentWillUnmount = function componentWillUnmount() {
	        if (this.subscription) this.subscription.tryUnsubscribe();
	        this.subscription = null;
	        this.notifyNestedSubs = noop;
	        this.store = null;
	        this.selector.run = noop;
	        this.selector.shouldComponentUpdate = false;
	      };
	
	      _proto.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant.default)(withRef, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + methodName + "() call."));
	        return this.wrappedInstance;
	      };
	
	      _proto.setWrappedInstance = function setWrappedInstance(ref) {
	        this.wrappedInstance = ref;
	      };
	
	      _proto.initSelector = function initSelector() {
	        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
	        this.selector = makeSelectorStateful(sourceSelector, this.store);
	        this.selector.run(this.props);
	      };
	
	      _proto.initSubscription = function initSubscription() {
	        if (!shouldHandleStateChanges) return; // parentSub's source should match where store came from: props vs. context. A component
	        // connected to the store via props shouldn't use subscription from context, or vice versa.
	
	        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
	        this.subscription = new _Subscription.default(this.store, parentSub, this.onStateChange.bind(this)); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
	        // the middle of the notification loop, where `this.subscription` will then be null. An
	        // extra null check every change can be avoided by copying the method onto `this` and then
	        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
	        // listeners logic is changed to not call listeners that have been unsubscribed in the
	        // middle of the notification loop.
	
	        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
	      };
	
	      _proto.onStateChange = function onStateChange() {
	        this.selector.run(this.props);
	
	        if (!this.selector.shouldComponentUpdate) {
	          this.notifyNestedSubs();
	        } else {
	          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
	          this.setState(dummyState);
	        }
	      };
	
	      _proto.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
	        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
	        // needs to notify nested subs. Once called, it unimplements itself until further state
	        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
	        // a boolean check every time avoids an extra method call most of the time, resulting
	        // in some perf boost.
	        this.componentDidUpdate = undefined;
	        this.notifyNestedSubs();
	      };
	
	      _proto.isSubscribed = function isSubscribed() {
	        return Boolean(this.subscription) && this.subscription.isSubscribed();
	      };
	
	      _proto.addExtraProps = function addExtraProps(props) {
	        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props; // make a shallow copy so that fields added don't leak to the original selector.
	        // this is especially important for 'ref' since that's a reference back to the component
	        // instance. a singleton memoized selector would then be holding a reference to the
	        // instance, preventing the instance from being garbage collected, and that would be bad
	
	        var withExtras = (0, _extends2.default)({}, props);
	        if (withRef) withExtras.ref = this.setWrappedInstance;
	        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
	        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
	        return withExtras;
	      };
	
	      _proto.render = function render() {
	        var selector = this.selector;
	        selector.shouldComponentUpdate = false;
	
	        if (selector.error) {
	          throw selector.error;
	        } else {
	          return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));
	        }
	      };
	
	      return Connect;
	    }(_react.Component);
	    /* eslint-enable react/no-deprecated */
	
	
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = displayName;
	    Connect.childContextTypes = childContextTypes;
	    Connect.contextTypes = contextTypes;
	    Connect.propTypes = contextTypes;
	
	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        var _this2 = this;
	
	        // We are hot reloading!
	        if (this.version !== version) {
	          this.version = version;
	          this.initSelector(); // If any connected descendants don't hot reload (and resubscribe in the process), their
	          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
	          // listeners, this does mean that the old versions of connected descendants will still be
	          // notified of state changes; however, their onStateChange function is a no-op so this
	          // isn't a huge deal.
	
	          var oldListeners = [];
	
	          if (this.subscription) {
	            oldListeners = this.subscription.listeners.get();
	            this.subscription.tryUnsubscribe();
	          }
	
	          this.initSubscription();
	
	          if (shouldHandleStateChanges) {
	            this.subscription.trySubscribe();
	            oldListeners.forEach(function (listener) {
	              return _this2.subscription.listeners.subscribe(listener);
	            });
	          }
	        }
	      };
	    }
	
	    return (0, _hoistNonReactStatics.default)(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return self;
	}
	
	module.exports = _assertThisInitialized;

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	
	    return target;
	  };
	
	  return _extends.apply(this, arguments);
	}
	
	module.exports = _extends;

/***/ }),
/* 219 */
/***/ (function(module, exports) {

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	
	  return target;
	}
	
	module.exports = _objectWithoutPropertiesLoose;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var ReactIs = __webpack_require__(221);
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextType: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromError: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};
	
	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};
	
	var FORWARD_REF_STATICS = {
	    '$$typeof': true,
	    render: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true
	};
	
	var MEMO_STATICS = {
	    '$$typeof': true,
	    compare: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true,
	    type: true
	};
	
	var TYPE_STATICS = {};
	TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;
	
	function getStatics(component) {
	    if (ReactIs.isMemo(component)) {
	        return MEMO_STATICS;
	    }
	    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}
	
	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') {
	        // don't hoist over string (html) components
	
	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }
	
	        var keys = getOwnPropertyNames(sourceComponent);
	
	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }
	
	        var targetStatics = getStatics(targetComponent);
	        var sourceStatics = getStatics(sourceComponent);
	
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try {
	                    // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }
	
	        return targetComponent;
	    }
	
	    return targetComponent;
	}
	
	module.exports = hoistNonReactStatics;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(222);
	} else {
	  module.exports = __webpack_require__(223);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 222 */
/***/ (function(module, exports) {

	/** @license React v16.8.6
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
	60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
	exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
	exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
	exports.isSuspense=function(a){return t(a)===p};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	
	
	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	
	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}
	
	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var lowPriorityWarning = function () {};
	
	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	
	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }
	
	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}
	
	var lowPriorityWarning$1 = lowPriorityWarning;
	
	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;
	
	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;
	          default:
	            var $$typeofType = type && type.$$typeof;
	
	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_LAZY_TYPE:
	      case REACT_MEMO_TYPE:
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }
	
	  return undefined;
	}
	
	// AsyncMode is deprecated along with isAsyncMode
	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	
	// AsyncMode should be deprecated
	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }
	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	
	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 225 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	// encapsulates the subscription logic for connecting a component to the redux store, as
	// well as nesting subscriptions of descendant components, so that we can ensure the
	// ancestor components re-render before descendants
	var CLEARED = null;
	var nullListeners = {
	  notify: function notify() {}
	};
	
	function createListenerCollection() {
	  // the current/next pattern is copied from redux's createStore code.
	  // TODO: refactor+expose that code to be reusable here?
	  var current = [];
	  var next = [];
	  return {
	    clear: function clear() {
	      next = CLEARED;
	      current = CLEARED;
	    },
	    notify: function notify() {
	      var listeners = current = next;
	
	      for (var i = 0; i < listeners.length; i++) {
	        listeners[i]();
	      }
	    },
	    get: function get() {
	      return next;
	    },
	    subscribe: function subscribe(listener) {
	      var isSubscribed = true;
	      if (next === current) next = current.slice();
	      next.push(listener);
	      return function unsubscribe() {
	        if (!isSubscribed || current === CLEARED) return;
	        isSubscribed = false;
	        if (next === current) next = current.slice();
	        next.splice(next.indexOf(listener), 1);
	      };
	    }
	  };
	}
	
	var Subscription =
	/*#__PURE__*/
	function () {
	  function Subscription(store, parentSub, onStateChange) {
	    this.store = store;
	    this.parentSub = parentSub;
	    this.onStateChange = onStateChange;
	    this.unsubscribe = null;
	    this.listeners = nullListeners;
	  }
	
	  var _proto = Subscription.prototype;
	
	  _proto.addNestedSub = function addNestedSub(listener) {
	    this.trySubscribe();
	    return this.listeners.subscribe(listener);
	  };
	
	  _proto.notifyNestedSubs = function notifyNestedSubs() {
	    this.listeners.notify();
	  };
	
	  _proto.isSubscribed = function isSubscribed() {
	    return Boolean(this.unsubscribe);
	  };
	
	  _proto.trySubscribe = function trySubscribe() {
	    if (!this.unsubscribe) {
	      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
	      this.listeners = createListenerCollection();
	    }
	  };
	
	  _proto.tryUnsubscribe = function tryUnsubscribe() {
	    if (this.unsubscribe) {
	      this.unsubscribe();
	      this.unsubscribe = null;
	      this.listeners.clear();
	      this.listeners = nullListeners;
	    }
	  };
	
	  return Subscription;
	}();
	
	exports.default = Subscription;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.createConnect = createConnect;
	exports.default = void 0;
	
	var _extends2 = _interopRequireDefault(__webpack_require__(218));
	
	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(219));
	
	var _connectAdvanced = _interopRequireDefault(__webpack_require__(216));
	
	var _shallowEqual = _interopRequireDefault(__webpack_require__(227));
	
	var _mapDispatchToProps = _interopRequireDefault(__webpack_require__(228));
	
	var _mapStateToProps = _interopRequireDefault(__webpack_require__(232));
	
	var _mergeProps = _interopRequireDefault(__webpack_require__(233));
	
	var _selectorFactory = _interopRequireDefault(__webpack_require__(234));
	
	/*
	  connect is a facade over connectAdvanced. It turns its args into a compatible
	  selectorFactory, which has the signature:
	
	    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
	  
	  connect passes its args to connectAdvanced as options, which will in turn pass them to
	  selectorFactory each time a Connect component instance is instantiated or hot reloaded.
	
	  selectorFactory returns a final props selector from its mapStateToProps,
	  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
	  mergePropsFactories, and pure args.
	
	  The resulting final props selector is called by the Connect component instance whenever
	  it receives new props or store state.
	 */
	function match(arg, factories, name) {
	  for (var i = factories.length - 1; i >= 0; i--) {
	    var result = factories[i](arg);
	    if (result) return result;
	  }
	
	  return function (dispatch, options) {
	    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
	  };
	}
	
	function strictEqual(a, b) {
	  return a === b;
	} // createConnect with default args builds the 'official' connect behavior. Calling it with
	// different options opens up some testing and extensibility scenarios
	
	
	function createConnect(_temp) {
	  var _ref = _temp === void 0 ? {} : _temp,
	      _ref$connectHOC = _ref.connectHOC,
	      connectHOC = _ref$connectHOC === void 0 ? _connectAdvanced.default : _ref$connectHOC,
	      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
	      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps.default : _ref$mapStateToPropsF,
	      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
	      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps.default : _ref$mapDispatchToPro,
	      _ref$mergePropsFactor = _ref.mergePropsFactories,
	      mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps.default : _ref$mergePropsFactor,
	      _ref$selectorFactory = _ref.selectorFactory,
	      selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory.default : _ref$selectorFactory;
	
	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
	    if (_ref2 === void 0) {
	      _ref2 = {};
	    }
	
	    var _ref3 = _ref2,
	        _ref3$pure = _ref3.pure,
	        pure = _ref3$pure === void 0 ? true : _ref3$pure,
	        _ref3$areStatesEqual = _ref3.areStatesEqual,
	        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
	        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
	        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqual.default : _ref3$areOwnPropsEqua,
	        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
	        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqual.default : _ref3$areStatePropsEq,
	        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
	        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqual.default : _ref3$areMergedPropsE,
	        extraOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
	    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
	    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
	    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
	    return connectHOC(selectorFactory, (0, _extends2.default)({
	      // used in error messages
	      methodName: 'connect',
	      // used to compute Connect's displayName from the wrapped component's displayName.
	      getDisplayName: function getDisplayName(name) {
	        return "Connect(" + name + ")";
	      },
	      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
	      shouldHandleStateChanges: Boolean(mapStateToProps),
	      // passed through to selectorFactory
	      initMapStateToProps: initMapStateToProps,
	      initMapDispatchToProps: initMapDispatchToProps,
	      initMergeProps: initMergeProps,
	      pure: pure,
	      areStatesEqual: areStatesEqual,
	      areOwnPropsEqual: areOwnPropsEqual,
	      areStatePropsEqual: areStatePropsEqual,
	      areMergedPropsEqual: areMergedPropsEqual
	    }, extraOptions));
	  };
	}
	
	var _default = createConnect();
	
	exports.default = _default;

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = shallowEqual;
	var hasOwn = Object.prototype.hasOwnProperty;
	
	function is(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}
	
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) return true;
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;
	
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
	exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
	exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;
	exports.default = void 0;
	
	var _redux = __webpack_require__(197);
	
	var _wrapMapToProps = __webpack_require__(229);
	
	function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
	  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
	}
	
	function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
	  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
	    return {
	      dispatch: dispatch
	    };
	  }) : undefined;
	}
	
	function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
	    return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
	  }) : undefined;
	}
	
	var _default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
	exports.default = _default;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
	exports.getDependsOnOwnProps = getDependsOnOwnProps;
	exports.wrapMapToPropsFunc = wrapMapToPropsFunc;
	
	var _verifyPlainObject = _interopRequireDefault(__webpack_require__(230));
	
	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);
	
	    function constantSelector() {
	      return constant;
	    }
	
	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	// 
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..
	
	
	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	// 
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//    
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//    
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//    
	
	
	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;
	
	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    }; // allow detectFactoryAndVerify to get ownProps
	
	
	    proxy.dependsOnOwnProps = true;
	
	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);
	
	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }
	
	      if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject.default)(props, displayName, methodName);
	      return props;
	    };
	
	    return proxy;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.default = verifyPlainObject;
	
	var _isPlainObject = _interopRequireDefault(__webpack_require__(231));
	
	var _warning = _interopRequireDefault(__webpack_require__(215));
	
	function verifyPlainObject(value, displayName, methodName) {
	  if (!(0, _isPlainObject.default)(value)) {
	    (0, _warning.default)(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
	  }
	}

/***/ }),
/* 231 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = isPlainObject;
	
	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  if (proto === null) return true;
	  var baseProto = proto;
	
	  while (Object.getPrototypeOf(baseProto) !== null) {
	    baseProto = Object.getPrototypeOf(baseProto);
	  }
	
	  return proto === baseProto;
	}

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
	exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;
	exports.default = void 0;
	
	var _wrapMapToProps = __webpack_require__(229);
	
	function whenMapStateToPropsIsFunction(mapStateToProps) {
	  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
	}
	
	function whenMapStateToPropsIsMissing(mapStateToProps) {
	  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
	    return {};
	  }) : undefined;
	}
	
	var _default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
	exports.default = _default;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.defaultMergeProps = defaultMergeProps;
	exports.wrapMergePropsFunc = wrapMergePropsFunc;
	exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
	exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
	exports.default = void 0;
	
	var _extends2 = _interopRequireDefault(__webpack_require__(218));
	
	var _verifyPlainObject = _interopRequireDefault(__webpack_require__(230));
	
	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  return (0, _extends2.default)({}, ownProps, stateProps, dispatchProps);
	}
	
	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, _ref) {
	    var displayName = _ref.displayName,
	        pure = _ref.pure,
	        areMergedPropsEqual = _ref.areMergedPropsEqual;
	    var hasRunOnce = false;
	    var mergedProps;
	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	
	      if (hasRunOnce) {
	        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;
	        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject.default)(mergedProps, displayName, 'mergeProps');
	      }
	
	      return mergedProps;
	    };
	  };
	}
	
	function whenMergePropsIsFunction(mergeProps) {
	  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
	}
	
	function whenMergePropsIsOmitted(mergeProps) {
	  return !mergeProps ? function () {
	    return defaultMergeProps;
	  } : undefined;
	}
	
	var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
	exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
	exports.default = finalPropsSelectorFactory;
	
	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(219));
	
	var _verifySubselectors = _interopRequireDefault(__webpack_require__(235));
	
	function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
	  return function impureFinalPropsSelector(state, ownProps) {
	    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
	  };
	}
	
	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
	  var areStatesEqual = _ref.areStatesEqual,
	      areOwnPropsEqual = _ref.areOwnPropsEqual,
	      areStatePropsEqual = _ref.areStatePropsEqual;
	  var hasRunAtLeastOnce = false;
	  var state;
	  var ownProps;
	  var stateProps;
	  var dispatchProps;
	  var mergedProps;
	
	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }
	
	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }
	
	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }
	
	  function handleNewState() {
	    var nextStateProps = mapStateToProps(state, ownProps);
	    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;
	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }
	
	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    var stateChanged = !areStatesEqual(nextState, state);
	    state = nextState;
	    ownProps = nextOwnProps;
	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }
	
	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	} // TODO: Add more comments
	// If pure is true, the selector returned by selectorFactory will memoize its results,
	// allowing connectAdvanced's shouldComponentUpdate to return false if final
	// props have not changed. If false, the selector will always return a new
	// object and shouldComponentUpdate will always return true.
	
	
	function finalPropsSelectorFactory(dispatch, _ref2) {
	  var initMapStateToProps = _ref2.initMapStateToProps,
	      initMapDispatchToProps = _ref2.initMapDispatchToProps,
	      initMergeProps = _ref2.initMergeProps,
	      options = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
	  var mapStateToProps = initMapStateToProps(dispatch, options);
	  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  var mergeProps = initMergeProps(dispatch, options);
	
	  if (process.env.NODE_ENV !== 'production') {
	    (0, _verifySubselectors.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
	  }
	
	  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
	  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(210);
	
	exports.__esModule = true;
	exports.default = verifySubselectors;
	
	var _warning = _interopRequireDefault(__webpack_require__(215));
	
	function verify(selector, methodName, displayName) {
	  if (!selector) {
	    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
	      (0, _warning.default)("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
	    }
	  }
	}
	
	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
	  verify(mapStateToProps, 'mapStateToProps', displayName);
	  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
	  verify(mergeProps, 'mergeProps', displayName);
	}

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }
	
	var _Motion = __webpack_require__(237);
	
	exports.Motion = _interopRequire(_Motion);
	
	var _StaggeredMotion = __webpack_require__(244);
	
	exports.StaggeredMotion = _interopRequire(_StaggeredMotion);
	
	var _TransitionMotion = __webpack_require__(245);
	
	exports.TransitionMotion = _interopRequire(_TransitionMotion);
	
	var _spring = __webpack_require__(247);
	
	exports.spring = _interopRequire(_spring);
	
	var _presets = __webpack_require__(248);
	
	exports.presets = _interopRequire(_presets);
	
	var _stripStyle = __webpack_require__(239);
	
	exports.stripStyle = _interopRequire(_stripStyle);
	
	// deprecated, dummy warning function
	
	var _reorderKeys = __webpack_require__(249);
	
	exports.reorderKeys = _interopRequire(_reorderKeys);

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(238);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(239);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(240);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _performanceNow = __webpack_require__(241);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(242);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(243);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	var Motion = (function (_React$Component) {
	  _inherits(Motion, _React$Component);
	
	  _createClass(Motion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      onRest: _propTypes2['default'].func
	    },
	    enumerable: true
	  }]);
	
	  function Motion(props) {
	    var _this = this;
	
	    _classCallCheck(this, Motion);
	
	    _React$Component.call(this, props);
	    this.wasAnimating = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyle = null;
	
	    this.clearUnreadPropStyle = function (destStyle) {
	      var dirty = false;
	      var _state = _this.state;
	      var currentStyle = _state.currentStyle;
	      var currentVelocity = _state.currentVelocity;
	      var lastIdealStyle = _state.lastIdealStyle;
	      var lastIdealVelocity = _state.lastIdealVelocity;
	
	      for (var key in destStyle) {
	        if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	          continue;
	        }
	
	        var styleValue = destStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyle = _extends({}, currentStyle);
	            currentVelocity = _extends({}, currentVelocity);
	            lastIdealStyle = _extends({}, lastIdealStyle);
	            lastIdealVelocity = _extends({}, lastIdealVelocity);
	          }
	
	          currentStyle[key] = styleValue;
	          currentVelocity[key] = 0;
	          lastIdealStyle[key] = styleValue;
	          lastIdealVelocity[key] = 0;
	        }
	      }
	
	      if (dirty) {
	        _this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	      }
	    };
	
	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // check if we need to animate in the first place
	        var propsStyle = _this.props.style;
	        if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	          if (_this.wasAnimating && _this.props.onRest) {
	            _this.props.onRest();
	          }
	
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.wasAnimating = false;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        _this.wasAnimating = true;
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	
	        for (var key in propsStyle) {
	          if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
	            continue;
	          }
	
	          var styleValue = propsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	            for (var i = 0; i < framesToCatchUp; i++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }
	
	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];
	
	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyle: newCurrentStyle,
	          currentVelocity: newCurrentVelocity,
	          lastIdealStyle: newLastIdealStyle,
	          lastIdealVelocity: newLastIdealVelocity
	        });
	
	        _this.unreadPropStyle = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  Motion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;
	
	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  };
	
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	
	  Motion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  Motion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }
	
	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  Motion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  Motion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return Motion;
	})(_react2['default'].Component);
	
	exports['default'] = Motion;
	module.exports = exports['default'];
	
	// after checking for unreadPropStyle != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ }),
/* 238 */
/***/ (function(module, exports) {

	
	
	// currently used to initiate the velocity style object to 0
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = mapToZero;
	
	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}
	
	module.exports = exports['default'];

/***/ }),
/* 239 */
/***/ (function(module, exports) {

	
	// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by
	// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}
	
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = stripStyle;
	
	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}
	
	module.exports = exports['default'];

/***/ }),
/* 240 */
/***/ (function(module, exports) {

	
	
	// stepper is used a lot. Saves allocation to return the same array wrapper.
	// This is fine and danger-free against mutations because the callsite
	// immediately destructures it and gets the numbers inside without passing the
	"use strict";
	
	exports.__esModule = true;
	exports["default"] = stepper;
	
	var reusedTuple = [0, 0];
	
	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2
	
	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);
	
	  // Damping, in kg / s
	  var Fdamper = -b * v;
	
	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;
	
	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;
	
	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }
	
	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}
	
	module.exports = exports["default"];
	// array reference around.

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	//# sourceMappingURL=performance-now.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(241)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]
	
	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}
	
	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60
	
	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }
	
	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}
	
	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf
	  object.cancelAnimationFrame = caf
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 243 */
/***/ (function(module, exports) {

	
	
	// usage assumption: currentStyle values have already been rendered but it says
	// nothing of whether currentStyle is stale (see unreadPropStyle)
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;
	
	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	
	    if (currentVelocity[key] !== 0) {
	      return false;
	    }
	
	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = exports['default'];

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(238);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(239);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(240);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _performanceNow = __webpack_require__(241);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(242);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(243);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}
	
	var StaggeredMotion = (function (_React$Component) {
	  _inherits(StaggeredMotion, _React$Component);
	
	  _createClass(StaggeredMotion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),
	      styles: _propTypes2['default'].func.isRequired,
	      children: _propTypes2['default'].func.isRequired
	    },
	    enumerable: true
	  }]);
	
	  function StaggeredMotion(props) {
	    var _this = this;
	
	    _classCallCheck(this, StaggeredMotion);
	
	    _React$Component.call(this, props);
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;
	
	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _state = _this.state;
	      var currentStyles = _state.currentStyles;
	      var currentVelocities = _state.currentVelocities;
	      var lastIdealStyles = _state.lastIdealStyles;
	      var lastIdealVelocities = _state.lastIdealVelocities;
	
	      var someDirty = false;
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i];
	        var dirty = false;
	
	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }
	
	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              someDirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	          }
	        }
	      }
	
	      if (someDirty) {
	        _this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	      }
	    };
	
	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        var destStyles = _this.props.styles(_this.state.lastIdealStyles);
	
	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var newLastIdealStyles = [];
	        var newLastIdealVelocities = [];
	        var newCurrentStyles = [];
	        var newCurrentVelocities = [];
	
	        for (var i = 0; i < destStyles.length; i++) {
	          var destStyle = destStyles[i];
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};
	
	          for (var key in destStyle) {
	            if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	              continue;
	            }
	
	            var styleValue = destStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	              var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }
	
	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];
	
	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }
	
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities
	        });
	
	        _this.unreadPropStyles = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  StaggeredMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	
	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  };
	
	  StaggeredMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  StaggeredMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }
	
	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  StaggeredMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  StaggeredMotion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return StaggeredMotion;
	})(_react2['default'].Component);
	
	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];
	
	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400
	
	// after checking for unreadPropStyles != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(238);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(239);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(240);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _mergeDiff = __webpack_require__(246);
	
	var _mergeDiff2 = _interopRequireDefault(_mergeDiff);
	
	var _performanceNow = __webpack_require__(241);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(242);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(243);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  // Copy the value to a `const` so that Flow understands that the const won't
	  // change and will be non-nullable in the callback below.
	  var cUnreadPropStyles = unreadPropStyles;
	  if (cUnreadPropStyles == null) {
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    for (var j = 0; j < cUnreadPropStyles.length; j++) {
	      if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          key: cUnreadPropStyles[j].key,
	          data: cUnreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}
	
	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }
	
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }
	
	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	// core key merging logic
	
	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key
	
	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });
	
	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;
	
	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }
	
	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}
	
	var TransitionMotion = (function (_React$Component) {
	  _inherits(TransitionMotion, _React$Component);
	
	  _createClass(TransitionMotion, null, [{
	    key: 'propTypes',
	    value: {
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired
	      })),
	      styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired
	      }))]).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      willEnter: _propTypes2['default'].func,
	      willLeave: _propTypes2['default'].func,
	      didLeave: _propTypes2['default'].func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      },
	      didLeave: function didLeave() {}
	    },
	    enumerable: true
	  }]);
	
	  function TransitionMotion(props) {
	    var _this = this;
	
	    _classCallCheck(this, TransitionMotion);
	
	    _React$Component.call(this, props);
	    this.unmounting = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;
	
	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
	
	      var mergedPropsStyles = _mergeAndSync[0];
	      var currentStyles = _mergeAndSync[1];
	      var currentVelocities = _mergeAndSync[2];
	      var lastIdealStyles = _mergeAndSync[3];
	      var lastIdealVelocities = _mergeAndSync[4];
	
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i].style;
	        var dirty = false;
	
	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }
	
	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	              mergedPropsStyles[i] = {
	                key: mergedPropsStyles[i].key,
	                data: mergedPropsStyles[i].data,
	                style: _extends({}, mergedPropsStyles[i].style)
	              };
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	            mergedPropsStyles[i].style[key] = styleValue;
	          }
	        }
	      }
	
	      // unlike the other 2 components, we can't detect staleness and optionally
	      // opt out of setState here. each style object's data might contain new
	      // stuff we're not/cannot compare
	      _this.setState({
	        currentStyles: currentStyles,
	        currentVelocities: currentVelocities,
	        mergedPropsStyles: mergedPropsStyles,
	        lastIdealStyles: lastIdealStyles,
	        lastIdealVelocities: lastIdealVelocities
	      });
	    };
	
	    this.startAnimationIfNecessary = function () {
	      if (_this.unmounting) {
	        return;
	      }
	
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // https://github.com/chenglou/react-motion/pull/420
	        // > if execution passes the conditional if (this.unmounting), then
	        // executes async defaultRaf and after that component unmounts and after
	        // that the callback of defaultRaf is called, then setState will be called
	        // on unmounted component.
	        if (_this.unmounting) {
	          return;
	        }
	
	        var propStyles = _this.props.styles;
	        var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;
	
	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
	
	        var newMergedPropsStyles = _mergeAndSync2[0];
	        var newCurrentStyles = _mergeAndSync2[1];
	        var newCurrentVelocities = _mergeAndSync2[2];
	        var newLastIdealStyles = _mergeAndSync2[3];
	        var newLastIdealVelocities = _mergeAndSync2[4];
	
	        for (var i = 0; i < newMergedPropsStyles.length; i++) {
	          var newMergedPropsStyle = newMergedPropsStyles[i].style;
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};
	
	          for (var key in newMergedPropsStyle) {
	            if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
	              continue;
	            }
	
	            var styleValue = newMergedPropsStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = newLastIdealStyles[i][key];
	              var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }
	
	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];
	
	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }
	
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities,
	          mergedPropsStyles: newMergedPropsStyles
	        });
	
	        _this.unreadPropStyles = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  TransitionMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;
	    var didLeave = _props.didLeave;
	
	    var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles;
	
	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });
	
	    var _mergeAndSync3 = mergeAndSync(
	    // Because this is an old-style createReactClass component, Flow doesn't
	    // understand that the willEnter and willLeave props have default values
	    // and will always be present.
	    willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);
	
	    var mergedPropsStyles = _mergeAndSync3[0];
	    var currentStyles = _mergeAndSync3[1];
	    var currentVelocities = _mergeAndSync3[2];
	    var lastIdealStyles = _mergeAndSync3[3];
	    var lastIdealVelocities = _mergeAndSync3[4];
	    // oldLastIdealVelocities really
	
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  };
	
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	
	  TransitionMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  TransitionMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }
	
	    var styles = props.styles;
	    if (typeof styles === 'function') {
	      this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = styles;
	    }
	
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  TransitionMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounting = true;
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  TransitionMotion.prototype.render = function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return TransitionMotion;
	})(_react2['default'].Component);
	
	exports['default'] = TransitionMotion;
	module.exports = exports['default'];
	
	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function
	
	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives
	
	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400

/***/ }),
/* 246 */
/***/ (function(module, exports) {

	
	
	// core keys merging algorithm. If previous render's keys are [a, b], and the
	// next render's [c, b, d], what's the final merged keys and ordering?
	
	// - c and a must both be before b
	// - b before d
	// - ordering between a and c ambiguous
	
	// this reduces to merging two partially ordered lists (e.g. lists where not
	// every item has a definite ordering, like comparing a and c above). For the
	// ambiguous ordering we deterministically choose to place the next render's
	// item after the previous'; so c after a
	
	// this is called a topological sorting. Except the existing algorithms don't
	// work well with js bc of the amount of allocation, and isn't optimized for our
	// current use-case bc the runtime is linear in terms of edges (see wiki for
	// meaning), which is huge when two lists have many common elements
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = mergeDiff;
	
	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster
	
	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }
	
	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }
	
	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];
	
	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev
	
	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	          continue;
	        }
	
	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}
	
	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports['default'] = spring;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _presets = __webpack_require__(248);
	
	var _presets2 = _interopRequireDefault(_presets);
	
	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});
	
	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}
	
	module.exports = exports['default'];

/***/ }),
/* 248 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports['default'] = reorderKeys;
	
	var hasWarned = false;
	
	function reorderKeys() {
	  if (process.env.NODE_ENV === 'development') {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}
	
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? module.exports = factory(__webpack_require__(2), __webpack_require__(1)) :
		typeof define === 'function' && define.amd ? define(['react-dom', 'react'], factory) :
		(global.ReactDraggable = factory(global.ReactDOM,global.React));
	}(this, (function (ReactDOM,React) { 'use strict';
	
		ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;
		React = React && React.hasOwnProperty('default') ? React['default'] : React;
	
		function createCommonjsModule(fn, module) {
			return module = { exports: {} }, fn(module, module.exports), module.exports;
		}
	
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
	
		function makeEmptyFunction(arg) {
		  return function () {
		    return arg;
		  };
		}
	
		/**
		 * This function accepts and discards inputs; it has no side effects. This is
		 * primarily useful idiomatically for overridable function endpoints which
		 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
		 */
		var emptyFunction = function emptyFunction() {};
	
		emptyFunction.thatReturns = makeEmptyFunction;
		emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
		emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
		emptyFunction.thatReturnsNull = makeEmptyFunction(null);
		emptyFunction.thatReturnsThis = function () {
		  return this;
		};
		emptyFunction.thatReturnsArgument = function (arg) {
		  return arg;
		};
	
		var emptyFunction_1 = emptyFunction;
	
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 */
	
		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */
	
		var validateFormat = function validateFormat(format) {};
	
		{
		  validateFormat = function validateFormat(format) {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  };
		}
	
		function invariant(condition, format, a, b, c, d, e, f) {
		  validateFormat(format);
	
		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(format.replace(/%s/g, function () {
		        return args[argIndex++];
		      }));
		      error.name = 'Invariant Violation';
		    }
	
		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		}
	
		var invariant_1 = invariant;
	
		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */
	
		var warning = emptyFunction_1;
	
		{
		  var printWarning = function printWarning(format) {
		    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }
	
		    var argIndex = 0;
		    var message = 'Warning: ' + format.replace(/%s/g, function () {
		      return args[argIndex++];
		    });
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
	
		  warning = function warning(condition, format) {
		    if (format === undefined) {
		      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
		    }
	
		    if (format.indexOf('Failed Composite propType: ') === 0) {
		      return; // Ignore CompositeComponent proptype check.
		    }
	
		    if (!condition) {
		      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		        args[_key2 - 2] = arguments[_key2];
		      }
	
		      printWarning.apply(undefined, [format].concat(args));
		    }
		  };
		}
	
		var warning_1 = warning;
	
		/*
		object-assign
		(c) Sindre Sorhus
		@license MIT
		*/
		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}
	
			return Object(val);
		}
	
		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}
	
				// Detect buggy property enumeration order in older V8 versions.
	
				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}
	
				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}
	
				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}
	
				return true;
			} catch (err) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}
	
		var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;
	
			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);
	
				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}
	
				if (getOwnPropertySymbols) {
					symbols = getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}
	
			return to;
		};
	
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */
	
		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
		var ReactPropTypesSecret_1 = ReactPropTypesSecret;
	
		{
		  var invariant$1 = invariant_1;
		  var warning$1 = warning_1;
		  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
		  var loggedTypeFailures = {};
		}
	
		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  {
		    for (var typeSpecName in typeSpecs) {
		      if (typeSpecs.hasOwnProperty(typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
		        } catch (ex) {
		          error = ex;
		        }
		        warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;
	
		          var stack = getStack ? getStack() : '';
	
		          warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
		        }
		      }
		    }
		  }
		}
	
		var checkPropTypes_1 = checkPropTypes;
	
		var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }
	
		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */
	
		  var ANONYMOUS = '<<anonymous>>';
	
		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),
	
		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker,
		  };
	
		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/
	
		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message) {
		    this.message = message;
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;
	
		  function createChainableTypeChecker(validate) {
		    {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;
	
		      if (secret !== ReactPropTypesSecret_1) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          invariant_1(
		            false,
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		        } else if ("development" !== 'production' && typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            warning_1(
		              false,
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `%s` prop on `%s`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
		              propFullName,
		              componentName
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }
	
		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);
	
		    return chainedCheckType;
		  }
	
		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);
	
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);
		  }
	
		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');
		      return emptyFunction_1.thatReturnsNull;
		    }
	
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }
	
		      var valuesString = JSON.stringify(expectedValues);
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (propValue.hasOwnProperty(key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');
		      return emptyFunction_1.thatReturnsNull;
		    }
	
		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        warning_1(
		          false,
		          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
		          'received %s at index %s.',
		          getPostfixForTypeWarning(checker),
		          i
		        );
		        return emptyFunction_1.thatReturnsNull;
		      }
		    }
	
		    function validate(props, propName, componentName, location, propFullName) {
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
		          return null;
		        }
		      }
	
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (!checker) {
		          continue;
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
	
		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from
		      // props.
		      var allKeys = objectAssign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (!checker) {
		          return new PropTypeError(
		            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
		            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
		            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
		          );
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
	
		    return createChainableTypeChecker(validate);
		  }
	
		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }
	
		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }
	
		        return true;
		      default:
		        return false;
		    }
		  }
	
		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }
	
		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }
	
		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }
	
		    return false;
		  }
	
		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }
	
		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }
	
		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }
	
		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }
	
		  ReactPropTypes.checkPropTypes = checkPropTypes_1;
		  ReactPropTypes.PropTypes = ReactPropTypes;
	
		  return ReactPropTypes;
		};
	
		var propTypes = createCommonjsModule(function (module) {
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */
	
		{
		  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
		    Symbol.for &&
		    Symbol.for('react.element')) ||
		    0xeac7;
	
		  var isValidElement = function(object) {
		    return typeof object === 'object' &&
		      object !== null &&
		      object.$$typeof === REACT_ELEMENT_TYPE;
		  };
	
		  // By explicitly using `prop-types` you are opting into new development behavior.
		  // http://fb.me/prop-types-in-prod
		  var throwOnDirectAccess = true;
		  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
		}
		});
	
		var classnames = createCommonjsModule(function (module) {
		/*!
		  Copyright (c) 2016 Jed Watson.
		  Licensed under the MIT License (MIT), see
		  http://jedwatson.github.io/classnames
		*/
		/* global define */
	
		(function () {
	
			var hasOwn = {}.hasOwnProperty;
	
			function classNames () {
				var classes = [];
	
				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;
	
					var argType = typeof arg;
	
					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						classes.push(classNames.apply(null, arg));
					} else if (argType === 'object') {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}
	
				return classes.join(' ');
			}
	
			if ('object' !== 'undefined' && module.exports) {
				module.exports = classNames;
			} else if (false) {
				// register as 'classnames', consistent with npm package name
				undefined('classnames', [], function () {
					return classNames;
				});
			} else {
				window.classNames = classNames;
			}
		}());
		});
	
		// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
		function findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/ {
		  for (var i = 0, length = array.length; i < length; i++) {
		    if (callback.apply(callback, [array[i], i, array])) return array[i];
		  }
		}
	
		function isFunction(func /*: any*/) /*: boolean*/ {
		  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
		}
	
		function isNum(num /*: any*/) /*: boolean*/ {
		  return typeof num === 'number' && !isNaN(num);
		}
	
		function int(a /*: string*/) /*: number*/ {
		  return parseInt(a, 10);
		}
	
		function dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) {
		  if (props[propName]) {
		    return new Error('Invalid prop ' + propName + ' passed to ' + componentName + ' - do not set this, set it on the child.');
		  }
		}
	
		var prefixes = ['Moz', 'Webkit', 'O', 'ms'];
		function getPrefix() /*: string*/ {
		  var prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
	
		  // Checking specifically for 'window.document' is for pseudo-browser server-side
		  // environments that define 'window' as the global context.
		  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)
		  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';
	
		  var style = window.document.documentElement.style;
	
		  if (prop in style) return '';
	
		  for (var i = 0; i < prefixes.length; i++) {
		    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
		  }
	
		  return '';
		}
	
		function browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/ {
		  return prefix ? '' + prefix + kebabToTitleCase(prop) : prop;
		}
	
		function kebabToTitleCase(str /*: string*/) /*: string*/ {
		  var out = '';
		  var shouldCapitalize = true;
		  for (var i = 0; i < str.length; i++) {
		    if (shouldCapitalize) {
		      out += str[i].toUpperCase();
		      shouldCapitalize = false;
		    } else if (str[i] === '-') {
		      shouldCapitalize = true;
		    } else {
		      out += str[i];
		    }
		  }
		  return out;
		}
	
		// Default export is the prefix itself, like 'Moz', 'Webkit', etc
		// Note that you may have to re-test for certain things; for instance, Chrome 50
		// can handle unprefixed `transform`, but not unprefixed `user-select`
		var browserPrefix = getPrefix();
	
		var classCallCheck = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};
	
		var createClass = function () {
		  function defineProperties(target, props) {
		    for (var i = 0; i < props.length; i++) {
		      var descriptor = props[i];
		      descriptor.enumerable = descriptor.enumerable || false;
		      descriptor.configurable = true;
		      if ("value" in descriptor) descriptor.writable = true;
		      Object.defineProperty(target, descriptor.key, descriptor);
		    }
		  }
	
		  return function (Constructor, protoProps, staticProps) {
		    if (protoProps) defineProperties(Constructor.prototype, protoProps);
		    if (staticProps) defineProperties(Constructor, staticProps);
		    return Constructor;
		  };
		}();
	
		var defineProperty = function (obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }
	
		  return obj;
		};
	
		var _extends = Object.assign || function (target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = arguments[i];
	
		    for (var key in source) {
		      if (Object.prototype.hasOwnProperty.call(source, key)) {
		        target[key] = source[key];
		      }
		    }
		  }
	
		  return target;
		};
	
		var inherits = function (subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		  }
	
		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		};
	
		var possibleConstructorReturn = function (self, call) {
		  if (!self) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
	
		  return call && (typeof call === "object" || typeof call === "function") ? call : self;
		};
	
		var slicedToArray = function () {
		  function sliceIterator(arr, i) {
		    var _arr = [];
		    var _n = true;
		    var _d = false;
		    var _e = undefined;
	
		    try {
		      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		        _arr.push(_s.value);
	
		        if (i && _arr.length === i) break;
		      }
		    } catch (err) {
		      _d = true;
		      _e = err;
		    } finally {
		      try {
		        if (!_n && _i["return"]) _i["return"]();
		      } finally {
		        if (_d) throw _e;
		      }
		    }
	
		    return _arr;
		  }
	
		  return function (arr, i) {
		    if (Array.isArray(arr)) {
		      return arr;
		    } else if (Symbol.iterator in Object(arr)) {
		      return sliceIterator(arr, i);
		    } else {
		      throw new TypeError("Invalid attempt to destructure non-iterable instance");
		    }
		  };
		}();
	
		/*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/
	
	
		var matchesSelectorFunc = '';
		function matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/ {
		  if (!matchesSelectorFunc) {
		    matchesSelectorFunc = findInArray(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
		      // $FlowIgnore: Doesn't think elements are indexable
		      return isFunction(el[method]);
		    });
		  }
	
		  // Might not be found entirely (not an Element?) - in that case, bail
		  // $FlowIgnore: Doesn't think elements are indexable
		  if (!isFunction(el[matchesSelectorFunc])) return false;
	
		  // $FlowIgnore: Doesn't think elements are indexable
		  return el[matchesSelectorFunc](selector);
		}
	
		// Works up the tree to the draggable itself attempting to match selector.
		function matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/ {
		  var node = el;
		  do {
		    if (matchesSelector(node, selector)) return true;
		    if (node === baseNode) return false;
		    node = node.parentNode;
		  } while (node);
	
		  return false;
		}
	
		function addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.attachEvent) {
		    el.attachEvent('on' + event, handler);
		  } else if (el.addEventListener) {
		    el.addEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = handler;
		  }
		}
	
		function removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.detachEvent) {
		    el.detachEvent('on' + event, handler);
		  } else if (el.removeEventListener) {
		    el.removeEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = null;
		  }
		}
	
		function outerHeight(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetTop which is including margin. See getBoundPosition
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height += int(computedStyle.borderTopWidth);
		  height += int(computedStyle.borderBottomWidth);
		  return height;
		}
	
		function outerWidth(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetLeft which is including margin. See getBoundPosition
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width += int(computedStyle.borderLeftWidth);
		  width += int(computedStyle.borderRightWidth);
		  return width;
		}
		function innerHeight(node /*: HTMLElement*/) /*: number*/ {
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height -= int(computedStyle.paddingTop);
		  height -= int(computedStyle.paddingBottom);
		  return height;
		}
	
		function innerWidth(node /*: HTMLElement*/) /*: number*/ {
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width -= int(computedStyle.paddingLeft);
		  width -= int(computedStyle.paddingRight);
		  return width;
		}
	
		// Get from offsetParent
		function offsetXYFromParent(evt /*: {clientX: number, clientY: number}*/, offsetParent /*: HTMLElement*/) /*: ControlPosition*/ {
		  var isBody = offsetParent === offsetParent.ownerDocument.body;
		  var offsetParentRect = isBody ? { left: 0, top: 0 } : offsetParent.getBoundingClientRect();
	
		  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;
		  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;
	
		  return { x: x, y: y };
		}
	
		function createCSSTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: Object*/ {
		  var translation = getTranslation(controlPos, positionOffset, 'px');
		  return defineProperty({}, browserPrefixToKey('transform', browserPrefix), translation);
		}
	
		function createSVGTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: string*/ {
		  var translation = getTranslation(controlPos, positionOffset, '');
		  return translation;
		}
		function getTranslation(_ref2, positionOffset /*: PositionOffsetControlPosition*/, unitSuffix /*: string*/) /*: string*/ {
		  var x = _ref2.x,
		      y = _ref2.y;
	
		  var translation = 'translate(' + x + unitSuffix + ',' + y + unitSuffix + ')';
		  if (positionOffset) {
		    var defaultX = '' + (typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);
		    var defaultY = '' + (typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);
		    translation = 'translate(' + defaultX + ', ' + defaultY + ')' + translation;
		  }
		  return translation;
		}
	
		function getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/ {
		  return e.targetTouches && findInArray(e.targetTouches, function (t) {
		    return identifier === t.identifier;
		  }) || e.changedTouches && findInArray(e.changedTouches, function (t) {
		    return identifier === t.identifier;
		  });
		}
	
		function getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/ {
		  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
		  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
		}
	
		// User-select Hacks:
		//
		// Useful for preventing blue highlights all over everything when dragging.
	
		// Note we're passing `document` b/c we could be iframed
		function addUserSelectStyles(doc /*: ?Document*/) {
		  if (!doc) return;
		  var styleEl = doc.getElementById('react-draggable-style-el');
		  if (!styleEl) {
		    styleEl = doc.createElement('style');
		    styleEl.type = 'text/css';
		    styleEl.id = 'react-draggable-style-el';
		    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {background: transparent;}\n';
		    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {background: transparent;}\n';
		    doc.getElementsByTagName('head')[0].appendChild(styleEl);
		  }
		  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');
		}
	
		function removeUserSelectStyles(doc /*: ?Document*/) {
		  try {
		    if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');
		    // $FlowIgnore: IE
		    if (doc.selection) {
		      // $FlowIgnore: IE
		      doc.selection.empty();
		    } else {
		      window.getSelection().removeAllRanges(); // remove selection caused by scroll
		    }
		  } catch (e) {
		    // probably IE
		  }
		}
	
		function styleHacks() /*: Object*/ {
		  var childStyle /*: Object*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		  // Workaround IE pointer events; see #51
		  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278
		  return _extends({
		    touchAction: 'none'
		  }, childStyle);
		}
	
		function addClassName(el /*: HTMLElement*/, className /*: string*/) {
		  if (el.classList) {
		    el.classList.add(className);
		  } else {
		    if (!el.className.match(new RegExp('(?:^|\\s)' + className + '(?!\\S)'))) {
		      el.className += ' ' + className;
		    }
		  }
		}
	
		function removeClassName(el /*: HTMLElement*/, className /*: string*/) {
		  if (el.classList) {
		    el.classList.remove(className);
		  } else {
		    el.className = el.className.replace(new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g'), '');
		  }
		}
	
		/*:: import type Draggable from '../Draggable';*/
		/*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/
		/*:: import type DraggableCore from '../DraggableCore';*/
	
	
		function getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/ {
		  // If no bounds, short-circuit and move on
		  if (!draggable.props.bounds) return [x, y];
	
		  // Clone new bounds
		  var bounds = draggable.props.bounds;
	
		  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
		  var node = findDOMNode(draggable);
	
		  if (typeof bounds === 'string') {
		    var ownerDocument = node.ownerDocument;
	
		    var ownerWindow = ownerDocument.defaultView;
		    var boundNode = void 0;
		    if (bounds === 'parent') {
		      boundNode = node.parentNode;
		    } else {
		      boundNode = ownerDocument.querySelector(bounds);
		    }
		    if (!(boundNode instanceof ownerWindow.HTMLElement)) {
		      throw new Error('Bounds selector "' + bounds + '" could not find an element.');
		    }
		    var nodeStyle = ownerWindow.getComputedStyle(node);
		    var boundNodeStyle = ownerWindow.getComputedStyle(boundNode);
		    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
		    bounds = {
		      left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),
		      top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),
		      right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft + int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),
		      bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop + int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)
		    };
		  }
	
		  // Keep x and y below right and bottom limits...
		  if (isNum(bounds.right)) x = Math.min(x, bounds.right);
		  if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);
	
		  // But above left and top limits.
		  if (isNum(bounds.left)) x = Math.max(x, bounds.left);
		  if (isNum(bounds.top)) y = Math.max(y, bounds.top);
	
		  return [x, y];
		}
	
		function snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/ {
		  var x = Math.round(pendingX / grid[0]) * grid[0];
		  var y = Math.round(pendingY / grid[1]) * grid[1];
		  return [x, y];
		}
	
		function canDragX(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'x';
		}
	
		function canDragY(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'y';
		}
	
		// Get {x, y} positions from event.
		function getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/ {
		  var touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;
		  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch
		  var node = findDOMNode(draggableCore);
		  // User can provide an offsetParent if desired.
		  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
		  return offsetXYFromParent(touchObj || e, offsetParent);
		}
	
		// Create an data object exposed by <DraggableCore>'s events
		function createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/ {
		  var state = draggable.state;
		  var isStart = !isNum(state.lastX);
		  var node = findDOMNode(draggable);
	
		  if (isStart) {
		    // If this is our first move, use the x and y as last coords.
		    return {
		      node: node,
		      deltaX: 0, deltaY: 0,
		      lastX: x, lastY: y,
		      x: x, y: y
		    };
		  } else {
		    // Otherwise calculate proper values.
		    return {
		      node: node,
		      deltaX: x - state.lastX, deltaY: y - state.lastY,
		      lastX: state.lastX, lastY: state.lastY,
		      x: x, y: y
		    };
		  }
		}
	
		// Create an data exposed by <Draggable>'s events
		function createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/ {
		  var scale = draggable.props.scale;
		  return {
		    node: coreData.node,
		    x: draggable.state.x + coreData.deltaX / scale,
		    y: draggable.state.y + coreData.deltaY / scale,
		    deltaX: coreData.deltaX / scale,
		    deltaY: coreData.deltaY / scale,
		    lastX: draggable.state.x,
		    lastY: draggable.state.y
		  };
		}
	
		// A lot faster than stringify/parse
		function cloneBounds(bounds /*: Bounds*/) /*: Bounds*/ {
		  return {
		    left: bounds.left,
		    top: bounds.top,
		    right: bounds.right,
		    bottom: bounds.bottom
		  };
		}
	
		function findDOMNode(draggable /*: Draggable | DraggableCore*/) /*: HTMLElement*/ {
		  var node = ReactDOM.findDOMNode(draggable);
		  if (!node) {
		    throw new Error('<DraggableCore>: Unmounted during event!');
		  }
		  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME
		  return node;
		}
	
		/*eslint no-console:0*/
		function log() {
		}
	
		/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/
	
	
		// Simple abstraction for dragging events names.
		/*:: import type {Element as ReactElement} from 'react';*/
		var eventsFor = {
		  touch: {
		    start: 'touchstart',
		    move: 'touchmove',
		    stop: 'touchend'
		  },
		  mouse: {
		    start: 'mousedown',
		    move: 'mousemove',
		    stop: 'mouseup'
		  }
		};
	
		// Default to mouse events.
		var dragEventFor = eventsFor.mouse;
	
		/*:: type DraggableCoreState = {
		  dragging: boolean,
		  lastX: number,
		  lastY: number,
		  touchIdentifier: ?number
		};*/
		/*:: export type DraggableBounds = {
		  left: number,
		  right: number,
		  top: number,
		  bottom: number,
		};*/
		/*:: export type DraggableData = {
		  node: HTMLElement,
		  x: number, y: number,
		  deltaX: number, deltaY: number,
		  lastX: number, lastY: number,
		};*/
		/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;*/
		/*:: export type ControlPosition = {x: number, y: number};*/
		/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/
	
	
		//
		// Define <DraggableCore>.
		//
		// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
		// work well with libraries that require more control over the element.
		//
	
		/*:: export type DraggableCoreProps = {
		  allowAnyClick: boolean,
		  cancel: string,
		  children: ReactElement<any>,
		  disabled: boolean,
		  enableUserSelectHack: boolean,
		  offsetParent: HTMLElement,
		  grid: [number, number],
		  handle: string,
		  onStart: DraggableEventHandler,
		  onDrag: DraggableEventHandler,
		  onStop: DraggableEventHandler,
		  onMouseDown: (e: MouseEvent) => void,
		};*/
	
		var DraggableCore = function (_React$Component) {
		  inherits(DraggableCore, _React$Component);
	
		  function DraggableCore() {
		    var _ref;
	
		    var _temp, _this, _ret;
	
		    classCallCheck(this, DraggableCore);
	
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
	
		    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DraggableCore.__proto__ || Object.getPrototypeOf(DraggableCore)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      dragging: false,
		      // Used while dragging to determine deltas.
		      lastX: NaN, lastY: NaN,
		      touchIdentifier: null
		    }, _this.handleDragStart = function (e) {
		      // Make it possible to attach event handlers on top of this one.
		      _this.props.onMouseDown(e);
	
		      // Only accept left-clicks.
		      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;
	
		      // Get nodes. Be sure to grab relative document (could be iframed)
		      var thisNode = ReactDOM.findDOMNode(_this);
		      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
		        throw new Error('<DraggableCore> not mounted on DragStart!');
		      }
		      var ownerDocument = thisNode.ownerDocument;
	
		      // Short circuit if handle or cancel prop was provided and selector doesn't match.
	
		      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !matchesSelectorAndParentsTo(e.target, _this.props.handle, thisNode) || _this.props.cancel && matchesSelectorAndParentsTo(e.target, _this.props.cancel, thisNode)) {
		        return;
		      }
	
		      // Set touch identifier in component state if this is a touch event. This allows us to
		      // distinguish between individual touches on multitouch screens by identifying which
		      // touchpoint was set to this element.
		      var touchIdentifier = getTouchIdentifier(e);
		      _this.setState({ touchIdentifier: touchIdentifier });
	
		      // Get the current drag point from the event. This is used as the offset.
		      var position = getControlPosition(e, touchIdentifier, _this);
		      if (position == null) return; // not possible but satisfies flow
		      var x = position.x,
		          y = position.y;
	
		      // Create an event object with all the data parents need to make a decision here.
	
		      var coreEvent = createCoreData(_this, x, y);
	
		      // Call event handler. If it returns explicit false, cancel.
		      log('calling', _this.props.onStart);
		      var shouldUpdate = _this.props.onStart(e, coreEvent);
		      if (shouldUpdate === false) return;
	
		      // Add a style to the body to disable user-select. This prevents text from
		      // being selected all over the page.
		      if (_this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);
	
		      // Initiate dragging. Set the current x and y as offsets
		      // so we know how much we've moved during the drag. This allows us
		      // to drag elements around even if they have been moved, without issue.
		      _this.setState({
		        dragging: true,
	
		        lastX: x,
		        lastY: y
		      });
	
		      // Add events to the document directly so we catch when the user's mouse/touch moves outside of
		      // this element. We use different events depending on whether or not we have detected that this
		      // is a touch-capable device.
		      addEvent(ownerDocument, dragEventFor.move, _this.handleDrag);
		      addEvent(ownerDocument, dragEventFor.stop, _this.handleDragStop);
		    }, _this.handleDrag = function (e) {
	
		      // Prevent scrolling on mobile devices, like ipad/iphone.
		      if (e.type === 'touchmove') e.preventDefault();
	
		      // Get the current drag point from the event. This is used as the offset.
		      var position = getControlPosition(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;
	
		      // Snap to grid if prop has been provided
	
		      if (Array.isArray(_this.props.grid)) {
		        var _deltaX = x - _this.state.lastX,
		            _deltaY = y - _this.state.lastY;
	
		        var _snapToGrid = snapToGrid(_this.props.grid, _deltaX, _deltaY);
	
		        var _snapToGrid2 = slicedToArray(_snapToGrid, 2);
	
		        _deltaX = _snapToGrid2[0];
		        _deltaY = _snapToGrid2[1];
	
		        if (!_deltaX && !_deltaY) return; // skip useless drag
		        x = _this.state.lastX + _deltaX, y = _this.state.lastY + _deltaY;
		      }
	
		      var coreEvent = createCoreData(_this, x, y);
	
		      // Call event handler. If it returns explicit false, trigger end.
		      var shouldUpdate = _this.props.onDrag(e, coreEvent);
		      if (shouldUpdate === false) {
		        try {
		          // $FlowIgnore
		          _this.handleDragStop(new MouseEvent('mouseup'));
		        } catch (err) {
		          // Old browsers
		          var event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);
		          // I see why this insanity was deprecated
		          // $FlowIgnore
		          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		          _this.handleDragStop(event);
		        }
		        return;
		      }
	
		      _this.setState({
		        lastX: x,
		        lastY: y
		      });
		    }, _this.handleDragStop = function (e) {
		      if (!_this.state.dragging) return;
	
		      var position = getControlPosition(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;
	
		      var coreEvent = createCoreData(_this, x, y);
	
		      var thisNode = ReactDOM.findDOMNode(_this);
		      if (thisNode) {
		        // Remove user-select hack
		        if (_this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);
		      }
	
		      // Reset the el.
		      _this.setState({
		        dragging: false,
		        lastX: NaN,
		        lastY: NaN
		      });
	
		      // Call event handler
		      _this.props.onStop(e, coreEvent);
	
		      if (thisNode) {
		        removeEvent(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
		        removeEvent(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
		      }
		    }, _this.onMouseDown = function (e) {
		      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse
	
		      return _this.handleDragStart(e);
		    }, _this.onMouseUp = function (e) {
		      dragEventFor = eventsFor.mouse;
	
		      return _this.handleDragStop(e);
		    }, _this.onTouchStart = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;
	
		      return _this.handleDragStart(e);
		    }, _this.onTouchEnd = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;
	
		      return _this.handleDragStop(e);
		    }, _temp), possibleConstructorReturn(_this, _ret);
		  }
	
		  createClass(DraggableCore, [{
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      // Remove any leftover event handlers. Remove both touch and mouse handlers in case
		      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.
		      var thisNode = ReactDOM.findDOMNode(this);
		      if (thisNode) {
		        var ownerDocument = thisNode.ownerDocument;
	
		        removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);
		        removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);
		        removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
		        removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
		        if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);
		      }
		    }
	
		    // Same as onMouseDown (start drag), but now consider this a touch device.
	
		  }, {
		    key: 'render',
		    value: function render() {
		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return React.cloneElement(React.Children.only(this.props.children), {
		        style: styleHacks(this.props.children.props.style),
	
		        // Note: mouseMove handler is attached to document so it will still function
		        // when the user drags quickly and leaves the bounds of the element.
		        onMouseDown: this.onMouseDown,
		        onTouchStart: this.onTouchStart,
		        onMouseUp: this.onMouseUp,
		        onTouchEnd: this.onTouchEnd
		      });
		    }
		  }]);
		  return DraggableCore;
		}(React.Component);
	
		DraggableCore.displayName = 'DraggableCore';
		DraggableCore.propTypes = {
		  /**
		   * `allowAnyClick` allows dragging using any mouse button.
		   * By default, we only accept the left button.
		   *
		   * Defaults to `false`.
		   */
		  allowAnyClick: propTypes.bool,
	
		  /**
		   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
		   * with the exception of `onMouseDown`, will not fire.
		   */
		  disabled: propTypes.bool,
	
		  /**
		   * By default, we add 'user-select:none' attributes to the document body
		   * to prevent ugly text selection during drag. If this is causing problems
		   * for your app, set this to `false`.
		   */
		  enableUserSelectHack: propTypes.bool,
	
		  /**
		   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
		   * instead of using the parent node.
		   */
		  offsetParent: function offsetParent(props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {
		    if (props[propName] && props[propName].nodeType !== 1) {
		      throw new Error('Draggable\'s offsetParent must be a DOM Node.');
		    }
		  },
	
		  /**
		   * `grid` specifies the x and y that dragging should snap to.
		   */
		  grid: propTypes.arrayOf(propTypes.number),
	
		  /**
		   * `scale` specifies the scale of the area you are dragging inside of. It allows
		   * the drag deltas to scale correctly with how far zoomed in/out you are.
		   */
		  scale: propTypes.number,
	
		  /**
		   * `handle` specifies a selector to be used as the handle that initiates drag.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable handle=".handle">
		   *              <div>
		   *                  <div className="handle">Click me to drag</div>
		   *                  <div>This is some other content</div>
		   *              </div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  handle: propTypes.string,
	
		  /**
		   * `cancel` specifies a selector to be used to prevent drag initialization.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *           return(
		   *               <Draggable cancel=".cancel">
		   *                   <div>
		   *                     <div className="cancel">You can't drag from here</div>
		   *                     <div>Dragging here works fine</div>
		   *                   </div>
		   *               </Draggable>
		   *           );
		   *       }
		   *   });
		   * ```
		   */
		  cancel: propTypes.string,
	
		  /**
		   * Called when dragging starts.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onStart: propTypes.func,
	
		  /**
		   * Called while dragging.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onDrag: propTypes.func,
	
		  /**
		   * Called when dragging stops.
		   * If this function returns the boolean false, the drag will remain active.
		   */
		  onStop: propTypes.func,
	
		  /**
		   * A workaround option which can be passed if onMouseDown needs to be accessed,
		   * since it'll always be blocked (as there is internal use of onMouseDown)
		   */
		  onMouseDown: propTypes.func,
	
		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: dontSetMe,
		  style: dontSetMe,
		  transform: dontSetMe
		};
		DraggableCore.defaultProps = {
		  allowAnyClick: false, // by default only accept left click
		  cancel: null,
		  disabled: false,
		  enableUserSelectHack: true,
		  offsetParent: null,
		  handle: null,
		  grid: null,
		  transform: null,
		  onStart: function onStart() {},
		  onDrag: function onDrag() {},
		  onStop: function onStop() {},
		  onMouseDown: function onMouseDown() {}
		};
	
		/*:: import type {DraggableEventHandler} from './utils/types';*/
		/*:: import type {Element as ReactElement} from 'react';*/
		/*:: type DraggableState = {
		  dragging: boolean,
		  dragged: boolean,
		  x: number, y: number,
		  slackX: number, slackY: number,
		  isElementSVG: boolean
		};*/
	
	
		//
		// Define <Draggable>
		//
	
		/*:: export type DraggableProps = {
		  ...$Exact<DraggableCoreProps>,
		  axis: 'both' | 'x' | 'y' | 'none',
		  bounds: DraggableBounds | string | false,
		  defaultClassName: string,
		  defaultClassNameDragging: string,
		  defaultClassNameDragged: string,
		  defaultPosition: ControlPosition,
		  positionOffset: PositionOffsetControlPosition,
		  position: ControlPosition,
		  scale: number
		};*/
	
		var Draggable = function (_React$Component) {
		  inherits(Draggable, _React$Component);
	
		  function Draggable(props /*: DraggableProps*/) {
		    classCallCheck(this, Draggable);
	
		    var _this = possibleConstructorReturn(this, (Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call(this, props));
	
		    _this.onDragStart = function (e, coreData) {
	
		      // Short-circuit if user's callback killed it.
		      var shouldStart = _this.props.onStart(e, createDraggableData(_this, coreData));
		      // Kills start event on core as well, so move handlers are never bound.
		      if (shouldStart === false) return false;
	
		      _this.setState({ dragging: true, dragged: true });
		    };
	
		    _this.onDrag = function (e, coreData) {
		      if (!_this.state.dragging) return false;
	
		      var uiData = createDraggableData(_this, coreData);
	
		      var newState /*: $Shape<DraggableState>*/ = {
		        x: uiData.x,
		        y: uiData.y
		      };
	
		      // Keep within bounds.
		      if (_this.props.bounds) {
		        // Save original x and y.
		        var _x = newState.x,
		            _y = newState.y;
	
		        // Add slack to the values used to calculate bound position. This will ensure that if
		        // we start removing slack, the element won't react to it right away until it's been
		        // completely removed.
	
		        newState.x += _this.state.slackX;
		        newState.y += _this.state.slackY;
	
		        // Get bound position. This will ceil/floor the x and y within the boundaries.
	
		        var _getBoundPosition = getBoundPosition(_this, newState.x, newState.y),
		            _getBoundPosition2 = slicedToArray(_getBoundPosition, 2),
		            newStateX = _getBoundPosition2[0],
		            newStateY = _getBoundPosition2[1];
	
		        newState.x = newStateX;
		        newState.y = newStateY;
	
		        // Recalculate slack by noting how much was shaved by the boundPosition handler.
		        newState.slackX = _this.state.slackX + (_x - newState.x);
		        newState.slackY = _this.state.slackY + (_y - newState.y);
	
		        // Update the event we fire to reflect what really happened after bounds took effect.
		        uiData.x = newState.x;
		        uiData.y = newState.y;
		        uiData.deltaX = newState.x - _this.state.x;
		        uiData.deltaY = newState.y - _this.state.y;
		      }
	
		      // Short-circuit if user's callback killed it.
		      var shouldUpdate = _this.props.onDrag(e, uiData);
		      if (shouldUpdate === false) return false;
	
		      _this.setState(newState);
		    };
	
		    _this.onDragStop = function (e, coreData) {
		      if (!_this.state.dragging) return false;
	
		      // Short-circuit if user's callback killed it.
		      var shouldStop = _this.props.onStop(e, createDraggableData(_this, coreData));
		      if (shouldStop === false) return false;
	
		      var newState /*: $Shape<DraggableState>*/ = {
		        dragging: false,
		        slackX: 0,
		        slackY: 0
		      };
	
		      // If this is a controlled component, the result of this operation will be to
		      // revert back to the old position. We expect a handler on `onDragStop`, at the least.
		      var controlled = Boolean(_this.props.position);
		      if (controlled) {
		        var _this$props$position = _this.props.position,
		            _x2 = _this$props$position.x,
		            _y2 = _this$props$position.y;
	
		        newState.x = _x2;
		        newState.y = _y2;
		      }
	
		      _this.setState(newState);
		    };
	
		    _this.state = {
		      // Whether or not we are currently dragging.
		      dragging: false,
	
		      // Whether or not we have been dragged before.
		      dragged: false,
	
		      // Current transform x and y.
		      x: props.position ? props.position.x : props.defaultPosition.x,
		      y: props.position ? props.position.y : props.defaultPosition.y,
	
		      // Used for compensating for out-of-bounds drags
		      slackX: 0, slackY: 0,
	
		      // Can only determine if SVG after mounting
		      isElementSVG: false
		    };
		    return _this;
		  }
	
		  createClass(Draggable, [{
		    key: 'componentWillMount',
		    value: function componentWillMount() {
		      if (this.props.position && !(this.props.onDrag || this.props.onStop)) {
		        // eslint-disable-next-line
		        console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
		      }
		    }
		  }, {
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      // Check to see if the element passed is an instanceof SVGElement
		      if (typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {
		        this.setState({ isElementSVG: true });
		      }
		    }
		  }, {
		    key: 'componentWillReceiveProps',
		    value: function componentWillReceiveProps(nextProps /*: Object*/) {
		      // Set x/y if position has changed
		      if (nextProps.position && (!this.props.position || nextProps.position.x !== this.props.position.x || nextProps.position.y !== this.props.position.y)) {
		        this.setState({ x: nextProps.position.x, y: nextProps.position.y });
		      }
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      this.setState({ dragging: false }); // prevents invariant if unmounted while dragging
		    }
		  }, {
		    key: 'render',
		    value: function render() /*: ReactElement<any>*/ {
		      var _classNames;
	
		      var style = {},
		          svgTransform = null;
	
		      // If this is controlled, we don't want to move it - unless it's dragging.
		      var controlled = Boolean(this.props.position);
		      var draggable = !controlled || this.state.dragging;
	
		      var position = this.props.position || this.props.defaultPosition;
		      var transformOpts = {
		        // Set left if horizontal drag is enabled
		        x: canDragX(this) && draggable ? this.state.x : position.x,
	
		        // Set top if vertical drag is enabled
		        y: canDragY(this) && draggable ? this.state.y : position.y
		      };
	
		      // If this element was SVG, we use the `transform` attribute.
		      if (this.state.isElementSVG) {
		        svgTransform = createSVGTransform(transformOpts, this.props.positionOffset);
		      } else {
		        // Add a CSS transform to move the element around. This allows us to move the element around
		        // without worrying about whether or not it is relatively or absolutely positioned.
		        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
		        // has a clean slate.
		        style = createCSSTransform(transformOpts, this.props.positionOffset);
		      }
	
		      var _props = this.props,
		          defaultClassName = _props.defaultClassName,
		          defaultClassNameDragging = _props.defaultClassNameDragging,
		          defaultClassNameDragged = _props.defaultClassNameDragged;
	
	
		      var children = React.Children.only(this.props.children);
	
		      // Mark with class while dragging
		      var className = classnames(children.props.className || '', defaultClassName, (_classNames = {}, defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames));
	
		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return React.createElement(
		        DraggableCore,
		        _extends({}, this.props, { onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop }),
		        React.cloneElement(children, {
		          className: className,
		          style: _extends({}, children.props.style, style),
		          transform: svgTransform
		        })
		      );
		    }
		  }]);
		  return Draggable;
		}(React.Component);
	
		Draggable.displayName = 'Draggable';
		Draggable.propTypes = _extends({}, DraggableCore.propTypes, {
	
		  /**
		   * `axis` determines which axis the draggable can move.
		   *
		   *  Note that all callbacks will still return data as normal. This only
		   *  controls flushing to the DOM.
		   *
		   * 'both' allows movement horizontally and vertically.
		   * 'x' limits movement to horizontal axis.
		   * 'y' limits movement to vertical axis.
		   * 'none' limits all movement.
		   *
		   * Defaults to 'both'.
		   */
		  axis: propTypes.oneOf(['both', 'x', 'y', 'none']),
	
		  /**
		   * `bounds` determines the range of movement available to the element.
		   * Available values are:
		   *
		   * 'parent' restricts movement within the Draggable's parent node.
		   *
		   * Alternatively, pass an object with the following properties, all of which are optional:
		   *
		   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
		   *
		   * All values are in px.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable bounds={{right: 300, bottom: 300}}>
		   *              <div>Content</div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  bounds: propTypes.oneOfType([propTypes.shape({
		    left: propTypes.number,
		    right: propTypes.number,
		    top: propTypes.number,
		    bottom: propTypes.number
		  }), propTypes.string, propTypes.oneOf([false])]),
	
		  defaultClassName: propTypes.string,
		  defaultClassNameDragging: propTypes.string,
		  defaultClassNameDragged: propTypes.string,
	
		  /**
		   * `defaultPosition` specifies the x and y that the dragged item should start at
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  defaultPosition: propTypes.shape({
		    x: propTypes.number,
		    y: propTypes.number
		  }),
		  positionOffset: propTypes.shape({
		    x: propTypes.oneOfType([propTypes.number, propTypes.string]),
		    y: propTypes.oneOfType([propTypes.number, propTypes.string])
		  }),
	
		  /**
		   * `position`, if present, defines the current position of the element.
		   *
		   *  This is similar to how form elements in React work - if no `position` is supplied, the component
		   *  is uncontrolled.
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable position={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  position: propTypes.shape({
		    x: propTypes.number,
		    y: propTypes.number
		  }),
	
		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: dontSetMe,
		  style: dontSetMe,
		  transform: dontSetMe
		});
		Draggable.defaultProps = _extends({}, DraggableCore.defaultProps, {
		  axis: 'both',
		  bounds: false,
		  defaultClassName: 'react-draggable',
		  defaultClassNameDragging: 'react-draggable-dragging',
		  defaultClassNameDragged: 'react-draggable-dragged',
		  defaultPosition: { x: 0, y: 0 },
		  position: null,
		  scale: 1
		});
	
		// Previous versions of this lib exported <Draggable> as the root export. As to not break
		// them, or TypeScript, we export *both* as the root and as 'default'.
		// See https://github.com/mzabriskie/react-draggable/pull/254
		// and https://github.com/mzabriskie/react-draggable/issues/266
		Draggable.default = Draggable;
		Draggable.DraggableCore = DraggableCore;
	
		return Draggable;
	
	})));
	//# sourceMappingURL=react-draggable.js.map


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    asyncTag = '[object AsyncFunction]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    nullTag = '[object Null]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    proxyTag = '[object Proxy]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    undefinedTag = '[object Undefined]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}
	
	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;
	
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	
	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}
	
	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);
	
	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);
	
	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice,
	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);
	
	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');
	
	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;
	
	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}
	
	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	
	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}
	
	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;
	
	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	
	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	
	  this.size = data.size;
	  return result;
	}
	
	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}
	
	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}
	
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	
	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}
	
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);
	
	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;
	
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;
	
	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
	
	  stack.set(array, other);
	  stack.set(other, array);
	
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	
	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;
	
	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');
	
	    case mapTag:
	      var convert = mapToArray;
	
	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);
	
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;
	
	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;
	
	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}
	
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	
	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};
	
	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;
	
	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';
	
	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	  return value === proto;
	}
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}
	
	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	module.exports = isEqual;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(199)(module)))

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactBeautifulDnd = __webpack_require__(150);
	
	var _util = __webpack_require__(253);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _lodash = __webpack_require__(251);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var reorder = function reorder(list, startIndex, endIndex) {
	  var result = Array.from(list);
	
	  var _result$splice = result.splice(startIndex, 1),
	      _result$splice2 = _slicedToArray(_result$splice, 1),
	      removed = _result$splice2[0];
	
	  result.splice(endIndex, 0, removed);
	
	  return result;
	};
	
	var Vertical = function (_Component) {
	  _inherits(Vertical, _Component);
	
	  function Vertical(props) {
	    _classCallCheck(this, Vertical);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.onDragEnd = function (result) {
	      if (!result.destination) {
	        return;
	      }
	      var items = reorder(_this.state.items, result.source.index, result.destination.index);
	
	      _this.setState({
	        items: items
	      });
	      _this.props.onStop(result, items);
	    };
	
	    _this.onDragStart = function (result) {
	      _this.props.onStart(result, _this.state.items);
	    };
	
	    _this.state = {
	      items: _this.props.list || []
	    };
	    return _this;
	  }
	
	  Vertical.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	      this.setState({
	        items: nextProps.list
	      });
	    }
	  };
	
	  Vertical.prototype.render = function render() {
	    var _this2 = this;
	
	    var _props = this.props,
	        onStart = _props.onStart,
	        onDrag = _props.onDrag,
	        onStop = _props.onStop,
	        onDragUpdate = _props.onDragUpdate,
	        dropClass = _props.dropClass,
	        dropOverClass = _props.dropOverClass,
	        dragClass = _props.dragClass,
	        dragingClass = _props.dragingClass,
	        showKey = _props.showKey,
	        type = _props.type;
	
	
	    return _react2["default"].createElement(
	      _reactBeautifulDnd.DragDropContext,
	      { onDragEnd: this.onDragEnd, onDragStart: this.onDragStart, onDragUpdate: onDragUpdate },
	      _react2["default"].createElement(
	        _reactBeautifulDnd.Droppable,
	        { droppableId: 'droppable', direction: type },
	        function (provided, snapshot) {
	          return _react2["default"].createElement(
	            'div',
	            {
	              ref: provided.innerRef,
	              className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDraggingOver).drop))
	            },
	            _this2.state.items.map(function (item, index) {
	              return _react2["default"].createElement(
	                _reactBeautifulDnd.Draggable,
	                { key: index, draggableId: index, index: index },
	                function (provided, snapshot) {
	                  return _react2["default"].createElement(
	                    'div',
	                    _extends({
	                      ref: provided.innerRef
	                    }, provided.draggableProps, provided.dragHandleProps, {
	                      className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                      style: _extends({}, provided.draggableProps.style)
	                    }),
	                    showKey ? item[showKey] : item
	                  );
	                }
	              );
	            }),
	            provided.placeholder
	          );
	        }
	      )
	    );
	  };
	
	  return Vertical;
	}(_react.Component);
	
	exports["default"] = Vertical;
	module.exports = exports['default'];

/***/ }),
/* 253 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var getClass = exports.getClass = function getClass(props, doing) {
	    var dropClass = props.dropClass,
	        dropOverClass = props.dropOverClass,
	        dragClass = props.dragClass,
	        dragingClass = props.dragingClass,
	        type = props.type;
	
	
	    var verticalObj = {
	        drop: {}, drag: {}
	    };
	    verticalObj.drop['u-drop ' + dropClass] = true;
	    verticalObj.drop['u-droping ' + dropOverClass] = doing;
	    verticalObj.drag['u-drag ' + dragClass] = true;
	    verticalObj.drag['u-draging ' + dragingClass] = doing;
	
	    var horizontalObj = {
	        drop: {}, drag: {}
	    };
	    horizontalObj.drop['u-drop u-drop-horizontal ' + dropClass] = true;
	    horizontalObj.drop['u-droping u-droping-horizontal ' + dropOverClass] = doing;
	    horizontalObj.drag['u-drag u-drag-horizontal ' + dragClass] = true;
	    horizontalObj.drag['u-draging u-draging-horizontal ' + dragingClass] = doing;
	
	    switch (type) {
	        case 'vertical':
	            return verticalObj;
	            break;
	        case 'horizontal':
	            return horizontalObj;
	            break;
	        case 'betweenVertical':
	            return verticalObj;
	            break;
	        case 'betweenHorizontal':
	            return horizontalObj;
	            break;
	    }
	};

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactBeautifulDnd = __webpack_require__(150);
	
	var _util = __webpack_require__(253);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _lodash = __webpack_require__(251);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var reorder = function reorder(list, startIndex, endIndex) {
	    var result = Array.from(list);
	
	    var _result$splice = result.splice(startIndex, 1),
	        _result$splice2 = _slicedToArray(_result$splice, 1),
	        removed = _result$splice2[0];
	
	    result.splice(endIndex, 0, removed);
	
	    return result;
	};
	
	/**
	 * Moves an item from one list to another list.
	 */
	var move = function move(source, destination, droppableSource, droppableDestination) {
	    var sourceClone = Array.from(source);
	    var destClone = Array.from(destination);
	
	    var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),
	        _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),
	        removed = _sourceClone$splice2[0];
	
	    destClone.splice(droppableDestination.index, 0, removed);
	
	    var result = {};
	    result[droppableSource.droppableId] = sourceClone;
	    result[droppableDestination.droppableId] = destClone;
	
	    return result;
	};
	
	var Between = function (_Component) {
	    _inherits(Between, _Component);
	
	    function Between(props) {
	        _classCallCheck(this, Between);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this.id2List = {
	            droppable: 'items',
	            droppable2: 'selected'
	        };
	
	        _this.getList = function (id) {
	            return _this.state[_this.id2List[id]];
	        };
	
	        _this.onDragEnd = function (result) {
	            console.log(result);
	            var source = result.source,
	                destination = result.destination;
	
	            // dropped outside the list
	
	            if (!destination) {
	                return;
	            }
	            var list = _this.state.items;
	            var otherList = _this.state.selected;
	
	            if (source.droppableId === destination.droppableId) {
	                var items = reorder(_this.getList(source.droppableId), source.index, destination.index);
	
	                var state = { items: items };
	                list = items;
	
	                if (source.droppableId === 'droppable2') {
	                    state = { selected: items };
	                    otherList = items;
	                    list = _this.state.items;
	                }
	                _this.setState(state);
	            } else {
	                var _result = move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);
	
	                _this.setState({
	                    items: _result.droppable,
	                    selected: _result.droppable2
	                });
	                list = _result.droppable;
	                otherList = _result.droppable2;
	            }
	            _this.props.onStop(result, {
	                list: list,
	                otherList: otherList
	            });
	        };
	
	        _this.onDragStart = function (result) {
	            _this.props.onStart(result, {
	                list: _this.state.list,
	                otherList: _this.state.selected
	            });
	        };
	
	        _this.state = {
	            items: _this.props.list,
	            selected: _this.props.otherList
	        };
	        return _this;
	    }
	
	    Between.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	            this.setState({
	                items: nextProps.list
	            });
	        }
	        if (!(0, _lodash2["default"])(this.state.selected, nextProps.otherList)) {
	            this.setState({
	                selected: nextProps.otherList
	            });
	        }
	    };
	
	    Between.prototype.render = function render() {
	        var _this2 = this;
	
	        var _props = this.props,
	            onStart = _props.onStart,
	            onDrag = _props.onDrag,
	            onStop = _props.onStop,
	            onDragUpdate = _props.onDragUpdate,
	            dropClass = _props.dropClass,
	            dropOverClass = _props.dropOverClass,
	            dragClass = _props.dragClass,
	            dragingClass = _props.dragingClass,
	            showKey = _props.showKey,
	            type = _props.type;
	
	
	        return _react2["default"].createElement(
	            'div',
	            { className: (0, _classnames2["default"])({
	                    'u-drag-between': type == 'betweenVertical',
	                    'u-drag-between u-drag-between-horizontal': type == 'betweenHorizontal'
	
	                }) },
	            _react2["default"].createElement(
	                _reactBeautifulDnd.DragDropContext,
	                { onDragEnd: this.onDragEnd, onDragStart: this.onDragStart, onDragUpdate: onDragUpdate },
	                _react2["default"].createElement(
	                    _reactBeautifulDnd.Droppable,
	                    { droppableId: 'droppable', direction: type == 'betweenVertical' ? 'vertical' : 'horizontal' },
	                    function (provided, snapshot) {
	                        return _react2["default"].createElement(
	                            'div',
	                            {
	                                ref: provided.innerRef,
	                                className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDraggingOver).drop)) },
	                            _this2.state.items.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    _reactBeautifulDnd.Draggable,
	                                    {
	                                        key: '1' + index,
	                                        draggableId: '1' + index,
	                                        index: index },
	                                    function (provided, snapshot) {
	                                        return _react2["default"].createElement(
	                                            'div',
	                                            _extends({
	                                                ref: provided.innerRef
	                                            }, provided.draggableProps, provided.dragHandleProps, {
	                                                className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                                                style: _extends({}, provided.draggableProps.style) }),
	                                            showKey ? item[showKey] : item
	                                        );
	                                    }
	                                );
	                            }),
	                            provided.placeholder
	                        );
	                    }
	                ),
	                _react2["default"].createElement(
	                    _reactBeautifulDnd.Droppable,
	                    { droppableId: 'droppable2', direction: type == 'betweenVertical' ? 'vertical' : 'horizontal' },
	                    function (provided, snapshot) {
	                        return _react2["default"].createElement(
	                            'div',
	                            {
	                                ref: provided.innerRef,
	                                className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDraggingOver).drop)) },
	                            _this2.state.selected.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    _reactBeautifulDnd.Draggable,
	                                    {
	                                        key: '2' + index,
	                                        draggableId: '2' + index,
	                                        index: index },
	                                    function (provided, snapshot) {
	                                        return _react2["default"].createElement(
	                                            'div',
	                                            _extends({
	                                                ref: provided.innerRef
	                                            }, provided.draggableProps, provided.dragHandleProps, {
	                                                className: (0, _classnames2["default"])(_extends({}, (0, _util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                                                style: _extends({}, provided.draggableProps.style) }),
	                                            showKey ? item[showKey] : item
	                                        );
	                                    }
	                                );
	                            }),
	                            provided.placeholder
	                        );
	                    }
	                )
	            )
	        );
	    };
	
	    return Between;
	}(_react.Component);
	
	exports["default"] = Between;
	module.exports = exports['default'];

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(1);
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};
	
	var styles = {
	  base: {
	    position: 'absolute',
	    userSelect: 'none',
	    MsUserSelect: 'none'
	  },
	  top: {
	    width: '100%',
	    height: '10px',
	    top: '-5px',
	    left: '0px',
	    cursor: 'row-resize'
	  },
	  right: {
	    width: '10px',
	    height: '100%',
	    top: '0px',
	    right: '-5px',
	    cursor: 'col-resize'
	  },
	  bottom: {
	    width: '100%',
	    height: '10px',
	    bottom: '-5px',
	    left: '0px',
	    cursor: 'row-resize'
	  },
	  left: {
	    width: '10px',
	    height: '100%',
	    top: '0px',
	    left: '-5px',
	    cursor: 'col-resize'
	  },
	  topRight: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    right: '-10px',
	    top: '-10px',
	    cursor: 'ne-resize'
	  },
	  bottomRight: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    right: '-10px',
	    bottom: '-10px',
	    cursor: 'se-resize'
	  },
	  bottomLeft: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    left: '-10px',
	    bottom: '-10px',
	    cursor: 'sw-resize'
	  },
	  topLeft: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    left: '-10px',
	    top: '-10px',
	    cursor: 'nw-resize'
	  }
	};
	
	var Resizer = (function (props) {
	  return React.createElement(
	    'div',
	    {
	      className: props.className,
	      style: _extends({}, styles.base, styles[props.direction], props.replaceStyles || {}),
	      onMouseDown: function onMouseDown(e) {
	        props.onResizeStart(e, props.direction);
	      },
	      onTouchStart: function onTouchStart(e) {
	        props.onResizeStart(e, props.direction);
	      }
	    },
	    props.children
	  );
	});
	
	var userSelectNone = {
	  userSelect: 'none',
	  MozUserSelect: 'none',
	  WebkitUserSelect: 'none',
	  MsUserSelect: 'none'
	};
	
	var userSelectAuto = {
	  userSelect: 'auto',
	  MozUserSelect: 'auto',
	  WebkitUserSelect: 'auto',
	  MsUserSelect: 'auto'
	};
	
	var clamp = function clamp(n, min, max) {
	  return Math.max(Math.min(n, max), min);
	};
	var snap = function snap(n, size) {
	  return Math.round(n / size) * size;
	};
	
	var findClosestSnap = function findClosestSnap(n, snapArray) {
	  return snapArray.reduce(function (prev, curr) {
	    return Math.abs(curr - n) < Math.abs(prev - n) ? curr : prev;
	  });
	};
	
	var endsWith = function endsWith(str, searchStr) {
	  return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
	};
	
	var getStringSize = function getStringSize(n) {
	  if (n.toString() === 'auto') return n.toString();
	  if (endsWith(n.toString(), 'px')) return n.toString();
	  if (endsWith(n.toString(), '%')) return n.toString();
	  if (endsWith(n.toString(), 'vh')) return n.toString();
	  if (endsWith(n.toString(), 'vw')) return n.toString();
	  if (endsWith(n.toString(), 'vmax')) return n.toString();
	  if (endsWith(n.toString(), 'vmin')) return n.toString();
	  return n + 'px';
	};
	
	var definedProps = ['style', 'className', 'grid', 'snap', 'bounds', 'size', 'defaultSize', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'lockAspectRatio', 'lockAspectRatioExtraWidth', 'lockAspectRatioExtraHeight', 'enable', 'handleStyles', 'handleClasses', 'handleWrapperStyle', 'handleWrapperClass', 'children', 'onResizeStart', 'onResize', 'onResizeStop', 'handleComponent', 'scale', 'resizeRatio'];
	
	var baseClassName = '__resizable_base__';
	
	var Resizable = function (_React$Component) {
	  inherits(Resizable, _React$Component);
	
	  function Resizable(props) {
	    classCallCheck(this, Resizable);
	
	    var _this = possibleConstructorReturn(this, (Resizable.__proto__ || Object.getPrototypeOf(Resizable)).call(this, props));
	
	    _this.state = {
	      isResizing: false,
	      resizeCursor: 'auto',
	      width: typeof (_this.propsSize && _this.propsSize.width) === 'undefined' ? 'auto' : _this.propsSize && _this.propsSize.width,
	      height: typeof (_this.propsSize && _this.propsSize.height) === 'undefined' ? 'auto' : _this.propsSize && _this.propsSize.height,
	      direction: 'right',
	      original: {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	      }
	    };
	
	    _this.updateExtendsProps(props);
	    _this.onResizeStart = _this.onResizeStart.bind(_this);
	    _this.onMouseMove = _this.onMouseMove.bind(_this);
	    _this.onMouseUp = _this.onMouseUp.bind(_this);
	
	    if (typeof window !== 'undefined') {
	      window.addEventListener('mouseup', _this.onMouseUp);
	      window.addEventListener('mousemove', _this.onMouseMove);
	      window.addEventListener('mouseleave', _this.onMouseUp);
	      window.addEventListener('touchmove', _this.onMouseMove);
	      window.addEventListener('touchend', _this.onMouseUp);
	    }
	    return _this;
	  }
	
	  createClass(Resizable, [{
	    key: 'updateExtendsProps',
	    value: function updateExtendsProps(props) {
	      this.extendsProps = Object.keys(props).reduce(function (acc, key) {
	        if (definedProps.indexOf(key) !== -1) return acc;
	        acc[key] = props[key];
	        return acc;
	      }, {});
	    }
	  }, {
	    key: 'getParentSize',
	    value: function getParentSize() {
	      var base = this.base;
	
	      if (!base) return { width: window.innerWidth, height: window.innerHeight };
	      // INFO: To calculate parent width with flex layout
	      var wrapChanged = false;
	      var wrap = this.parentNode.style.flexWrap;
	      var minWidth = base.style.minWidth;
	      if (wrap !== 'wrap') {
	        wrapChanged = true;
	        this.parentNode.style.flexWrap = 'wrap';
	        // HACK: Use relative to get parent padding size
	      }
	      base.style.position = 'relative';
	      base.style.minWidth = '100%';
	      var size = {
	        width: base.offsetWidth,
	        height: base.offsetHeight
	      };
	      base.style.position = 'absolute';
	      if (wrapChanged) this.parentNode.style.flexWrap = wrap;
	      base.style.minWidth = minWidth;
	      return size;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var size = this.size;
	
	      this.setState({
	        width: this.state.width || size.width,
	        height: this.state.height || size.height
	      });
	      var parent = this.parentNode;
	      if (!(parent instanceof HTMLElement)) return;
	      if (this.base) return;
	      var element = document.createElement('div');
	      element.style.width = '100%';
	      element.style.height = '100%';
	      element.style.position = 'absolute';
	      element.style.transform = 'scale(0, 0)';
	      element.style.left = '0';
	      element.style.flex = '0';
	      if (element.classList) {
	        element.classList.add(baseClassName);
	      } else {
	        element.className += baseClassName;
	      }
	      parent.appendChild(element);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(next) {
	      this.updateExtendsProps(next);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (typeof window !== 'undefined') {
	        window.removeEventListener('mouseup', this.onMouseUp);
	        window.removeEventListener('mousemove', this.onMouseMove);
	        window.removeEventListener('mouseleave', this.onMouseUp);
	        window.removeEventListener('touchmove', this.onMouseMove);
	        window.removeEventListener('touchend', this.onMouseUp);
	        var parent = this.parentNode;
	        var base = this.base;
	
	        if (!base || !parent) return;
	        if (!(parent instanceof HTMLElement) || !(base instanceof Node)) return;
	        parent.removeChild(base);
	      }
	    }
	  }, {
	    key: 'calculateNewSize',
	    value: function calculateNewSize(newSize, kind) {
	      var propsSize = this.propsSize && this.propsSize[kind];
	      return this.state[kind] === 'auto' && this.state.original[kind] === newSize && (typeof propsSize === 'undefined' || propsSize === 'auto') ? 'auto' : newSize;
	    }
	  }, {
	    key: 'onResizeStart',
	    value: function onResizeStart(event, direction) {
	      var clientX = 0;
	      var clientY = 0;
	      if (event.nativeEvent instanceof MouseEvent) {
	        clientX = event.nativeEvent.clientX;
	        clientY = event.nativeEvent.clientY;
	
	        // When user click with right button the resize is stuck in resizing mode
	        // until users clicks again, dont continue if right click is used.
	        // HACK: MouseEvent does not have `which` from flow-bin v0.68.
	        if (event.nativeEvent.which === 3) {
	          return;
	        }
	      } else if (event.nativeEvent instanceof TouchEvent) {
	        clientX = event.nativeEvent.touches[0].clientX;
	        clientY = event.nativeEvent.touches[0].clientY;
	      }
	      if (this.props.onResizeStart) {
	        this.props.onResizeStart(event, direction, this.resizable);
	      }
	
	      // Fix #168
	      if (this.props.size) {
	        if (typeof this.props.size.height !== 'undefined' && this.props.size.height !== this.state.height) {
	          this.setState({ height: this.props.size.height });
	        }
	        if (typeof this.props.size.width !== 'undefined' && this.props.size.width !== this.state.width) {
	          this.setState({ width: this.props.size.width });
	        }
	      }
	
	      this.setState({
	        original: {
	          x: clientX,
	          y: clientY,
	          width: this.size.width,
	          height: this.size.height
	        },
	        isResizing: true,
	        resizeCursor: window.getComputedStyle(event.target).cursor,
	        direction: direction
	      });
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (!this.state.isResizing) return;
	      var clientX = event instanceof MouseEvent ? event.clientX : event.touches[0].clientX;
	      var clientY = event instanceof MouseEvent ? event.clientY : event.touches[0].clientY;
	      var _state = this.state,
	          direction = _state.direction,
	          original = _state.original,
	          width = _state.width,
	          height = _state.height;
	      var _props = this.props,
	          lockAspectRatio = _props.lockAspectRatio,
	          lockAspectRatioExtraHeight = _props.lockAspectRatioExtraHeight,
	          lockAspectRatioExtraWidth = _props.lockAspectRatioExtraWidth;
	
	      var scale = this.props.scale || 1;
	      var _props2 = this.props,
	          maxWidth = _props2.maxWidth,
	          maxHeight = _props2.maxHeight,
	          minWidth = _props2.minWidth,
	          minHeight = _props2.minHeight;
	
	      var resizeRatio = this.props.resizeRatio || 1;
	
	      // TODO: refactor
	      var parentSize = this.getParentSize();
	      if (maxWidth && typeof maxWidth === 'string' && endsWith(maxWidth, '%')) {
	        var _ratio = Number(maxWidth.replace('%', '')) / 100;
	        maxWidth = parentSize.width * _ratio;
	      }
	      if (maxHeight && typeof maxHeight === 'string' && endsWith(maxHeight, '%')) {
	        var _ratio2 = Number(maxHeight.replace('%', '')) / 100;
	        maxHeight = parentSize.height * _ratio2;
	      }
	      if (minWidth && typeof minWidth === 'string' && endsWith(minWidth, '%')) {
	        var _ratio3 = Number(minWidth.replace('%', '')) / 100;
	        minWidth = parentSize.width * _ratio3;
	      }
	      if (minHeight && typeof minHeight === 'string' && endsWith(minHeight, '%')) {
	        var _ratio4 = Number(minHeight.replace('%', '')) / 100;
	        minHeight = parentSize.height * _ratio4;
	      }
	      maxWidth = typeof maxWidth === 'undefined' ? undefined : Number(maxWidth);
	      maxHeight = typeof maxHeight === 'undefined' ? undefined : Number(maxHeight);
	      minWidth = typeof minWidth === 'undefined' ? undefined : Number(minWidth);
	      minHeight = typeof minHeight === 'undefined' ? undefined : Number(minHeight);
	
	      var ratio = typeof lockAspectRatio === 'number' ? lockAspectRatio : original.width / original.height;
	      var newWidth = original.width;
	      var newHeight = original.height;
	      if (/right/i.test(direction)) {
	        newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
	        if (lockAspectRatio) newHeight = (newWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	      }
	      if (/left/i.test(direction)) {
	        newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
	        if (lockAspectRatio) newHeight = (newWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	      }
	      if (/bottom/i.test(direction)) {
	        newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
	        if (lockAspectRatio) newWidth = (newHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	      }
	      if (/top/i.test(direction)) {
	        newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
	        if (lockAspectRatio) newWidth = (newHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	      }
	
	      if (this.props.bounds === 'parent') {
	        var parent = this.parentNode;
	        if (parent instanceof HTMLElement) {
	          var parentRect = parent.getBoundingClientRect();
	          var parentLeft = parentRect.left;
	          var parentTop = parentRect.top;
	
	          var _resizable$getBoundin = this.resizable.getBoundingClientRect(),
	              _left = _resizable$getBoundin.left,
	              _top = _resizable$getBoundin.top;
	
	          var boundWidth = parent.offsetWidth + (parentLeft - _left);
	          var boundHeight = parent.offsetHeight + (parentTop - _top);
	          maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
	          maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
	        }
	      } else if (this.props.bounds === 'window') {
	        if (typeof window !== 'undefined') {
	          var _resizable$getBoundin2 = this.resizable.getBoundingClientRect(),
	              _left2 = _resizable$getBoundin2.left,
	              _top2 = _resizable$getBoundin2.top;
	
	          var _boundWidth = window.innerWidth - _left2;
	          var _boundHeight = window.innerHeight - _top2;
	          maxWidth = maxWidth && maxWidth < _boundWidth ? maxWidth : _boundWidth;
	          maxHeight = maxHeight && maxHeight < _boundHeight ? maxHeight : _boundHeight;
	        }
	      } else if (this.props.bounds instanceof HTMLElement) {
	        var targetRect = this.props.bounds.getBoundingClientRect();
	        var targetLeft = targetRect.left;
	        var targetTop = targetRect.top;
	
	        var _resizable$getBoundin3 = this.resizable.getBoundingClientRect(),
	            _left3 = _resizable$getBoundin3.left,
	            _top3 = _resizable$getBoundin3.top;
	
	        if (!(this.props.bounds instanceof HTMLElement)) return;
	        var _boundWidth2 = this.props.bounds.offsetWidth + (targetLeft - _left3);
	        var _boundHeight2 = this.props.bounds.offsetHeight + (targetTop - _top3);
	        maxWidth = maxWidth && maxWidth < _boundWidth2 ? maxWidth : _boundWidth2;
	        maxHeight = maxHeight && maxHeight < _boundHeight2 ? maxHeight : _boundHeight2;
	      }
	
	      var computedMinWidth = typeof minWidth === 'undefined' ? 10 : minWidth;
	      var computedMaxWidth = typeof maxWidth === 'undefined' || maxWidth < 0 ? newWidth : maxWidth;
	      var computedMinHeight = typeof minHeight === 'undefined' ? 10 : minHeight;
	      var computedMaxHeight = typeof maxHeight === 'undefined' || maxHeight < 0 ? newHeight : maxHeight;
	
	      if (lockAspectRatio) {
	        var extraMinWidth = (computedMinHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	        var extraMaxWidth = (computedMaxHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	        var extraMinHeight = (computedMinWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	        var extraMaxHeight = (computedMaxWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	        var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
	        var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
	        var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
	        var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
	        newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
	        newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
	      } else {
	        newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
	        newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
	      }
	      if (this.props.grid) {
	        newWidth = snap(newWidth, this.props.grid[0]);
	      }
	      if (this.props.grid) {
	        newHeight = snap(newHeight, this.props.grid[1]);
	      }
	
	      if (this.props.snap && this.props.snap.x) {
	        newWidth = findClosestSnap(newWidth, this.props.snap.x);
	      }
	      if (this.props.snap && this.props.snap.y) {
	        newHeight = findClosestSnap(newHeight, this.props.snap.y);
	      }
	
	      var delta = {
	        width: newWidth - original.width,
	        height: newHeight - original.height
	      };
	
	      if (width && typeof width === 'string' && endsWith(width, '%')) {
	        var percent = newWidth / parentSize.width * 100;
	        newWidth = percent + '%';
	      }
	
	      if (height && typeof height === 'string' && endsWith(height, '%')) {
	        var _percent = newHeight / parentSize.height * 100;
	        newHeight = _percent + '%';
	      }
	
	      this.setState({
	        width: this.calculateNewSize(newWidth, 'width'),
	        height: this.calculateNewSize(newHeight, 'height')
	      });
	
	      if (this.props.onResize) {
	        this.props.onResize(event, direction, this.resizable, delta);
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp(event) {
	      var _state2 = this.state,
	          isResizing = _state2.isResizing,
	          direction = _state2.direction,
	          original = _state2.original;
	
	      if (!isResizing) return;
	      var delta = {
	        width: this.size.width - original.width,
	        height: this.size.height - original.height
	      };
	      if (this.props.onResizeStop) {
	        this.props.onResizeStop(event, direction, this.resizable, delta);
	      }
	      if (this.props.size) {
	        this.setState(this.props.size);
	      }
	      this.setState({ isResizing: false, resizeCursor: 'auto' });
	    }
	  }, {
	    key: 'updateSize',
	    value: function updateSize(size) {
	      this.setState({ width: size.width, height: size.height });
	    }
	  }, {
	    key: 'renderResizer',
	    value: function renderResizer() {
	      var _this2 = this;
	
	      var _props3 = this.props,
	          enable = _props3.enable,
	          handleStyles = _props3.handleStyles,
	          handleClasses = _props3.handleClasses,
	          handleWrapperStyle = _props3.handleWrapperStyle,
	          handleWrapperClass = _props3.handleWrapperClass,
	          handleComponent = _props3.handleComponent;
	
	      if (!enable) return null;
	      var resizers = Object.keys(enable).map(function (dir) {
	        if (enable[dir] !== false) {
	          return React.createElement(
	            Resizer,
	            {
	              key: dir,
	              direction: dir,
	              onResizeStart: _this2.onResizeStart,
	              replaceStyles: handleStyles && handleStyles[dir],
	              className: handleClasses && handleClasses[dir]
	            },
	            handleComponent && handleComponent[dir] ? React.createElement(handleComponent[dir]) : null
	          );
	        }
	        return null;
	      });
	      // #93 Wrap the resize box in span (will not break 100% width/height)
	      return React.createElement(
	        'span',
	        { className: handleWrapperClass, style: handleWrapperStyle },
	        resizers
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      var userSelect = this.state.isResizing ? userSelectNone : userSelectAuto;
	      return React.createElement(
	        'div',
	        _extends({
	          ref: function ref(c) {
	            if (c) {
	              _this3.resizable = c;
	            }
	          },
	          style: _extends({
	            position: 'relative'
	          }, userSelect, this.props.style, this.sizeStyle, {
	            maxWidth: this.props.maxWidth,
	            maxHeight: this.props.maxHeight,
	            minWidth: this.props.minWidth,
	            minHeight: this.props.minHeight,
	            boxSizing: 'border-box'
	          }),
	          className: this.props.className
	        }, this.extendsProps),
	        this.state.isResizing && React.createElement('div', {
	          style: {
	            height: '100%',
	            width: '100%',
	            backgroundColor: 'rgba(0,0,0,0)',
	            cursor: '' + (this.state.resizeCursor || 'auto'),
	            opacity: '0',
	            position: 'fixed',
	            zIndex: '9999',
	            top: '0',
	            left: '0',
	            bottom: '0',
	            right: '0'
	          }
	        }),
	        this.props.children,
	        this.renderResizer()
	      );
	    }
	  }, {
	    key: 'parentNode',
	    get: function get$$1() {
	      return this.resizable.parentNode;
	    }
	  }, {
	    key: 'propsSize',
	    get: function get$$1() {
	      return this.props.size || this.props.defaultSize;
	    }
	  }, {
	    key: 'base',
	    get: function get$$1() {
	      var parent = this.parentNode;
	      if (!parent) return undefined;
	      var children = [].slice.call(parent.children);
	      for (var i = 0; i < children.length; i += 1) {
	        var n = children[i];
	        if (n instanceof HTMLElement) {
	          if (n.classList.contains(baseClassName)) {
	            return n;
	          }
	        }
	      }
	      return undefined;
	    }
	  }, {
	    key: 'size',
	    get: function get$$1() {
	      var width = 0;
	      var height = 0;
	      if (typeof window !== 'undefined') {
	        var orgWidth = this.resizable.offsetWidth;
	        var orgHeight = this.resizable.offsetHeight;
	        // HACK: Set position `relative` to get parent size.
	        //       This is because when re-resizable set `absolute`, I can not get base width correctly.
	        var orgPosition = this.resizable.style.position;
	        if (orgPosition !== 'relative') {
	          this.resizable.style.position = 'relative';
	        }
	        // INFO: Use original width or height if set auto.
	        width = this.resizable.style.width !== 'auto' ? this.resizable.offsetWidth : orgWidth;
	        height = this.resizable.style.height !== 'auto' ? this.resizable.offsetHeight : orgHeight;
	        // Restore original position
	        this.resizable.style.position = orgPosition;
	      }
	      return { width: width, height: height };
	    }
	  }, {
	    key: 'sizeStyle',
	    get: function get$$1() {
	      var _this4 = this;
	
	      var size = this.props.size;
	
	      var getSize = function getSize(key) {
	        if (typeof _this4.state[key] === 'undefined' || _this4.state[key] === 'auto') return 'auto';
	        if (_this4.propsSize && _this4.propsSize[key] && endsWith(_this4.propsSize[key].toString(), '%')) {
	          if (endsWith(_this4.state[key].toString(), '%')) return _this4.state[key].toString();
	          var parentSize = _this4.getParentSize();
	          var value = Number(_this4.state[key].toString().replace('px', ''));
	          var percent = value / parentSize[key] * 100;
	          return percent + '%';
	        }
	        return getStringSize(_this4.state[key]);
	      };
	      var width = size && typeof size.width !== 'undefined' && !this.state.isResizing ? getStringSize(size.width) : getSize('width');
	      var height = size && typeof size.height !== 'undefined' && !this.state.isResizing ? getStringSize(size.height) : getSize('height');
	      return { width: width, height: height };
	    }
	  }]);
	  return Resizable;
	}(React.Component);
	
	Resizable.defaultProps = {
	  onResizeStart: function onResizeStart() {},
	  onResize: function onResize() {},
	  onResizeStop: function onResizeStop() {},
	  enable: {
	    top: true,
	    right: true,
	    bottom: true,
	    left: true,
	    topRight: true,
	    bottomRight: true,
	    bottomLeft: true,
	    topLeft: true
	  },
	  style: {},
	  grid: [1, 1],
	  lockAspectRatio: false,
	  lockAspectRatioExtraWidth: 0,
	  lockAspectRatioExtraHeight: 0,
	  scale: 1,
	  resizeRatio: 1
	};
	
	module.exports = Resizable;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  componentClass: _tinperBeeCore.elementType
	};
	
	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-modal-footer'
	};
	
	var ModalFooter = function (_React$Component) {
	  _inherits(ModalFooter, _React$Component);
	
	  function ModalFooter() {
	    _classCallCheck(this, ModalFooter);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  ModalFooter.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	
	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };
	
	  return ModalFooter;
	}(_react2["default"].Component);
	
	ModalFooter.propTypes = propTypes;
	ModalFooter.defaultProps = defaultProps;
	
	exports["default"] = ModalFooter;
	module.exports = exports['default'];

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	
	  /**
	   * 是否显示关闭按钮
	   */
	  closeButton: _propTypes2["default"].bool,
	
	  /**
	   * 关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func
	};
	
	var defaultProps = {
	  'aria-label': 'Close',
	  closeButton: false,
	  clsPrefix: 'u-modal-header'
	};
	
	var contextTypes = {
	  $u_modal: _propTypes2["default"].shape({
	    onHide: _propTypes2["default"].func
	  })
	};
	
	var ModalHeader = function (_React$Component) {
	  _inherits(ModalHeader, _React$Component);
	
	  function ModalHeader() {
	    _classCallCheck(this, ModalHeader);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  ModalHeader.prototype.render = function render() {
	    var _props = this.props,
	        label = _props['aria-label'],
	        closeButton = _props.closeButton,
	        onHide = _props.onHide,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['aria-label', 'closeButton', 'onHide', 'className', 'clsPrefix', 'children']);
	
	    var modal = this.context.$u_modal;
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes['dnd-handle'] = true;
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2["default"])(className, classes)
	      }),
	      closeButton && _react2["default"].createElement(
	        'button',
	        {
	          type: 'button',
	          className: 'u-close dnd-cancel',
	          'aria-label': label,
	          onClick: (0, _tinperBeeCore.createChainedFunction)(modal.onHide, onHide)
	        },
	        _react2["default"].createElement(
	          'span',
	          { 'aria-hidden': 'true' },
	          _react2["default"].createElement('i', { className: 'uf uf-close' })
	        )
	      ),
	      children
	    );
	  };
	
	  return ModalHeader;
	}(_react2["default"].Component);
	
	ModalHeader.propTypes = propTypes;
	ModalHeader.defaultProps = defaultProps;
	ModalHeader.contextTypes = contextTypes;
	
	exports["default"] = ModalHeader;
	module.exports = exports['default'];

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tinperBeeCore = __webpack_require__(26);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	  componentClass: _tinperBeeCore.elementType
	};
	
	var defaultProps = {
	  componentClass: 'h4',
	  clsPrefix: 'u-modal-title'
	};
	
	var ModalTitle = function (_React$Component) {
	  _inherits(ModalTitle, _React$Component);
	
	  function ModalTitle() {
	    _classCallCheck(this, ModalTitle);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  ModalTitle.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        props = _objectWithoutProperties(_props, ['componentClass', 'className', 'clsPrefix']);
	
	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes['clearfix'] = true;
	
	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };
	
	  return ModalTitle;
	}(_react2["default"].Component);
	
	ModalTitle.propTypes = propTypes;
	ModalTitle.defaultProps = defaultProps;
	
	exports["default"] = ModalTitle;
	module.exports = exports['default'];

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports["default"] = confirm;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Modal = __webpack_require__(133);
	
	var _Modal2 = _interopRequireDefault(_Modal);
	
	var _beeButton = __webpack_require__(260);
	
	var _beeButton2 = _interopRequireDefault(_beeButton);
	
	var _beeIcon = __webpack_require__(78);
	
	var _beeIcon2 = _interopRequireDefault(_beeIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var IS_REACT_16 = !!_reactDom2["default"].createPortal;
	
	var ConfirmDialog = function ConfirmDialog(props) {
	  var onCancel = props.onCancel,
	      onOk = props.onOk,
	      close = props.close,
	      onHide = props.onHide,
	      show = props.show,
	      keyboard = props.keyboard,
	      centered = props.centered,
	      getContainer = props.getContainer,
	      maskStyle = props.maskStyle,
	      okButtonProps = props.okButtonProps,
	      cancelButtonProps = props.cancelButtonProps,
	      _props$iconType = props.iconType,
	      iconType = _props$iconType === undefined ? 'uf-qm-c' : _props$iconType;
	
	  // 支持传入{ icon: null }来隐藏`Modal.confirm`默认的Icon
	
	  var icon = props.icon === undefined ? iconType : props.icon;
	  var okType = props.okType || 'primary';
	  var prefixCls = props.prefixCls || 'u-modal';
	  var contentPrefixCls = prefixCls + '-confirm';
	  // 默认为 true，保持向下兼容
	  var okCancel = 'okCancel' in props ? props.okCancel : true;
	  var width = props.width || 400;
	  var style = props.style || {};
	  var backdrop = props.backdrop === undefined ? true : props.backdrop;
	  // 默认为 false，保持旧版默认行为
	  var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
	  // const runtimeLocale = getConfirmLocale();
	  var okText = props.okText || (okCancel ? "确定" : "知道了");
	  var cancelText = props.cancelText || "取消";
	  var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
	  var transitionName = props.transitionName || 'zoom';
	  var maskTransitionName = props.maskTransitionName || 'fade';
	
	  var classString = (0, _classnames2["default"])(contentPrefixCls, contentPrefixCls + '-' + props.type, props.className);
	
	  var cancelButton = okCancel && _react2["default"].createElement(
	    _beeButton2["default"],
	    {
	      onClick: function onClick() {
	        close();onCancel ? onCancel() : function () {
	          return;
	        };
	      },
	      colors: 'secondary',
	      style: { marginRight: 8 }
	    },
	    cancelText
	  );
	  var iconNode = typeof icon === 'string' ? _react2["default"].createElement(_beeIcon2["default"], { type: icon }) : icon;
	
	  return _react2["default"].createElement(
	    _Modal2["default"],
	    {
	      width: width,
	      className: classString,
	      show: show,
	      onHide: onHide,
	      backdrop: backdrop },
	    _react2["default"].createElement(
	      _Modal2["default"].Header,
	      null,
	      _react2["default"].createElement(
	        _Modal2["default"].Title,
	        null,
	        iconNode,
	        _react2["default"].createElement(
	          'span',
	          { className: contentPrefixCls + '-title' },
	          props.title
	        )
	      )
	    ),
	    _react2["default"].createElement(
	      _Modal2["default"].Body,
	      null,
	      _react2["default"].createElement(
	        'div',
	        { className: contentPrefixCls + '-content' },
	        props.content
	      )
	    ),
	    _react2["default"].createElement(
	      _Modal2["default"].Footer,
	      null,
	      cancelButton,
	      _react2["default"].createElement(
	        _beeButton2["default"],
	        {
	          onClick: function onClick() {
	            close();onOk ? onOk() : function () {
	              return;
	            };
	          },
	          colors: okType
	        },
	        okText
	      )
	    )
	  );
	};
	
	function confirm(config) {
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	  var currentConfig = _extends({}, config, { close: close, show: true });
	
	  function close() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    currentConfig = _extends({}, currentConfig, {
	      show: false,
	      onHide: destroy.bind.apply(destroy, [this].concat(args))
	    });
	    if (IS_REACT_16) {
	      render(currentConfig);
	    } else {
	      destroy.apply(undefined, args);
	    }
	  }
	
	  function update(newConfig) {
	    currentConfig = _extends({}, currentConfig, newConfig);
	    render(currentConfig);
	  }
	
	  function destroy() {
	    var unmountResult = _reactDom2["default"].unmountComponentAtNode(div);
	    if (unmountResult && div.parentNode) {
	      div.parentNode.removeChild(div);
	    }
	
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    var triggerCancel = args.some(function (param) {
	      return param && param.triggerCancel;
	    });
	    if (config.onCancel && triggerCancel) {
	      config.onCancel.apply(config, args);
	    }
	    for (var i = 0; i < _Modal.destroyFns.length; i++) {
	      var fn = _Modal.destroyFns[i];
	      if (fn === close) {
	        _Modal.destroyFns.splice(i, 1);
	        break;
	      }
	    }
	  }
	
	  function render(props) {
	    _reactDom2["default"].render(_react2["default"].createElement(ConfirmDialog, props), div);
	  }
	
	  render(currentConfig);
	
	  _Modal.destroyFns.push(close);
	
	  return {
	    destroy: close,
	    update: update
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Button = __webpack_require__(261);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Button2["default"];
	module.exports = exports['default'];

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(2);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    /**
	     * @title 尺寸
	     */
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'xg', 'lg']),
	    /**
	     * @title 样式
	     */
	    style: _propTypes2["default"].object,
	    /**
	     * @title 形状
	     */
	    shape: _propTypes2["default"].oneOf(['block', 'round', 'border', 'squared', 'floating', 'pillRight', 'pillLeft', 'icon']),
	
	    bordered: _propTypes2["default"].bool,
	    /**
	    * @title 类型
	    */
	    colors: _propTypes2["default"].oneOf(['primary', 'secondary', 'accent', 'success', 'info', 'warning', 'danger', 'dark', 'light', 'default']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _propTypes2["default"].string,
	
	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _propTypes2["default"].oneOf(['submit', 'button', 'reset']),
	    isSubmit: _propTypes2["default"].bool //是否作为form的提交按钮
	};
	
	var defaultProps = {
	    disabled: false,
	    htmlType: 'button',
	    clsPrefix: 'u-button',
	    bordered: false,
	    isSubmit: false
	};
	
	var sizeMap = {
	    sm: 'sm',
	    md: 'md',
	    xg: 'xg',
	    lg: 'lg'
	},
	    colorsMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    accent: 'accent',
	    success: 'success',
	    info: 'info',
	    warning: 'warning',
	    danger: 'danger',
	    dark: 'dark',
	    light: 'light'
	},
	    shapeMap = {
	    block: 'block',
	    round: 'round',
	    border: 'border',
	    squared: 'squared',
	    floating: 'floating',
	    pillRight: 'pill-right',
	    pillLeft: 'pill-left',
	    icon: 'icon'
	};
	
	var Button = function (_Component) {
	    _inherits(Button, _Component);
	
	    function Button(props) {
	        _classCallCheck(this, Button);
	
	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }
	
	    Button.prototype.render = function render() {
	        var _props = this.props,
	            colors = _props.colors,
	            shape = _props.shape,
	            disabled = _props.disabled,
	            className = _props.className,
	            size = _props.size,
	            bordered = _props.bordered,
	            children = _props.children,
	            htmlType = _props.htmlType,
	            clsPrefix = _props.clsPrefix,
	            isSubmit = _props.isSubmit,
	            others = _objectWithoutProperties(_props, ['colors', 'shape', 'disabled', 'className', 'size', 'bordered', 'children', 'htmlType', 'clsPrefix', 'isSubmit']);
	
	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }
	
	        if (shapeMap[shape]) {
	            clsObj[clsPrefix + '-' + shapeMap[shape]] = true;
	        }
	        if (colorsMap[colors]) {
	            clsObj[clsPrefix + '-' + colorsMap[colors]] = true;
	        }
	        if (bordered) {
	            clsObj[clsPrefix + '-border'] = bordered;
	        }
	        var classes = (0, _classnames2["default"])(clsPrefix, clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classes,
	                disabled: disabled
	            }, others),
	            this.props.children
	        );
	    };
	
	    return Button;
	}(_react.Component);
	
	Button.propTypes = propTypes;
	Button.defaultProps = defaultProps;
	
	exports["default"] = Button;
	module.exports = exports['default'];

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _FormControl = __webpack_require__(263);
	
	var _FormControl2 = _interopRequireDefault(_FormControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _FormControl2["default"];
	module.exports = exports['default'];

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(5);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _beeIcon = __webpack_require__(78);
	
	var _beeIcon2 = _interopRequireDefault(_beeIcon);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    type: _propTypes2["default"].string,
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	    onSearch: _propTypes2["default"].func,
	    onChange: _propTypes2["default"].func,
	    onBlur: _propTypes2["default"].func,
	    showClose: _propTypes2["default"].bool,
	    focusSelect: _propTypes2["default"].bool
	};
	
	var defaultProps = {
	    componentClass: 'input',
	    clsPrefix: 'u-form-control',
	    type: 'text',
	    size: 'md'
	};
	
	var FormControl = function (_React$Component) {
	    _inherits(FormControl, _React$Component);
	
	    function FormControl(props) {
	        _classCallCheck(this, FormControl);
	
	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	        _this.handleSearchChange = function (e) {
	            var onChange = _this.props.onChange;
	
	            var value = _this.input.value;
	            _this.setState({
	                value: value,
	                showSearch: value == null || value === ""
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };
	
	        _this.handleChange = function (e) {
	            var onChange = _this.props.onChange;
	
	            var value = _this.input.value;
	            _this.setState({
	                showClose: true
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };
	
	        _this.clearValue = function () {
	            var onChange = _this.props.onChange;
	
	            _this.setState({
	                showSearch: true,
	                value: "",
	                showClose: false
	            });
	            if (onChange) {
	                onChange("");
	            }
	            _this.input.focus();
	        };
	
	        _this.handleKeyDown = function (e) {
	            var _this$props = _this.props,
	                onSearch = _this$props.onSearch,
	                type = _this$props.type,
	                onKeyDown = _this$props.onKeyDown;
	
	            if (e.keyCode === 13 && type === "search") {
	                if (onSearch) {
	                    onSearch(_this.input.value);
	                }
	            }
	            onKeyDown && onKeyDown(e);
	        };
	
	        _this.handleSearch = function (e) {
	            var onSearch = _this.props.onSearch;
	
	            if (onSearch) onSearch(_this.input.value);
	        };
	
	        _this.handleBlur = function (e) {
	            var value = _this.state.value;
	            var onBlur = _this.props.onBlur;
	
	
	            if (onBlur) {
	                onBlur(value, e);
	            }
	        };
	
	        _this.handleFocus = function (e) {
	            var value = _this.state.value;
	            var onFocus = _this.props.onFocus;
	
	            if (_this.props.focusSelect) {
	                _this.input.select();
	            }
	            if (onFocus) {
	                onFocus(value, e);
	            }
	        };
	
	        _this.renderInput = function () {
	            var _this$props2 = _this.props,
	                Component = _this$props2.componentClass,
	                type = _this$props2.type,
	                className = _this$props2.className,
	                size = _this$props2.size,
	                clsPrefix = _this$props2.clsPrefix,
	                value = _this$props2.value,
	                onChange = _this$props2.onChange,
	                onSearch = _this$props2.onSearch,
	                onBlur = _this$props2.onBlur,
	                showClose = _this$props2.showClose,
	                focusSelect = _this$props2.focusSelect,
	                others = _objectWithoutProperties(_this$props2, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur', 'showClose', 'focusSelect']);
	            // input[type="file"] 不应该有类名 .form-control.
	
	
	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	
	            var classNames = void 0;
	            if (type !== 'file') {
	                classNames = (0, _classnames2["default"])(clsPrefix, classes);
	            }
	
	            return showClose ? _react2["default"].createElement(
	                'div',
	                { className: (0, _classnames2["default"])(clsPrefix + '-close', clsPrefix + '-affix-wrapper', className) },
	                _react2["default"].createElement(Component, _extends({}, others, {
	                    type: type,
	                    ref: function ref(el) {
	                        return _this.input = el;
	                    },
	                    value: value,
	                    onChange: _this.handleChange,
	                    onBlur: _this.handleBlur,
	                    onFocus: _this.handleFocus,
	                    className: (0, _classnames2["default"])(className, classNames)
	                })),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-suffix' },
	                    _this.state.showClose ? _react2["default"].createElement(_beeIcon2["default"], { onClick: _this.clearValue, type: 'uf-close-c' }) : ''
	                )
	            ) : _react2["default"].createElement(Component, _extends({}, others, {
	                type: type,
	                ref: function ref(el) {
	                    return _this.input = el;
	                },
	                value: value,
	                onChange: _this.handleChange,
	                onBlur: _this.handleBlur,
	                onFocus: _this.handleFocus,
	                className: (0, _classnames2["default"])(className, classNames)
	            }));
	        };
	
	        _this.renderSearch = function () {
	            var _this$props3 = _this.props,
	                Component = _this$props3.componentClass,
	                type = _this$props3.type,
	                className = _this$props3.className,
	                size = _this$props3.size,
	                clsPrefix = _this$props3.clsPrefix,
	                value = _this$props3.value,
	                onChange = _this$props3.onChange,
	                onSearch = _this$props3.onSearch,
	                onBlur = _this$props3.onBlur,
	                others = _objectWithoutProperties(_this$props3, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur']);
	            // input[type="file"] 不应该有类名 .form-control.
	
	
	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	            classes[clsPrefix + '-search'] = true;
	
	            if (type === "search") {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: (0, _classnames2["default"])(clsPrefix + '-search', clsPrefix + '-affix-wrapper', className) },
	                    _react2["default"].createElement(Component, _extends({}, others, {
	                        type: type,
	                        ref: function ref(el) {
	                            return _this.input = el;
	                        },
	                        onChange: _this.handleSearchChange,
	                        value: value,
	                        onKeyDown: _this.handleKeyDown,
	                        onBlur: _this.handleBlur,
	                        onFocus: _this.handleFocus,
	                        className: (0, _classnames2["default"])(className, clsPrefix, classes)
	                    })),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + '-suffix' },
	                        _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-search', onClick: _this.handleSearch })
	                    )
	                );
	            }
	        };
	
	        _this.state = {
	            showSearch: !props.value,
	            value: props.value == null ? "" : props.value,
	            showClose: false
	        };
	        _this.input = {};
	        return _this;
	    }
	
	    FormControl.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProp) {
	        if (nextProp.value !== this.state.value) {
	            this.setState({ value: nextProp.value });
	        }
	    };
	
	    FormControl.prototype.render = function render() {
	
	        if (this.props.type === "search") {
	            return this.renderSearch();
	        }
	
	        return this.renderInput();
	    };
	
	    return FormControl;
	}(_react2["default"].Component);
	
	FormControl.propTypes = propTypes;
	FormControl.defaultProps = defaultProps;
	
	exports["default"] = FormControl;
	module.exports = exports['default'];

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _index = __webpack_require__(265);
	
	var _index2 = _interopRequireDefault(_index);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @title 基础电子表格
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 基础电子表格
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var Demo1 = function (_Component) {
	  _inherits(Demo1, _Component);
	
	  function Demo1(props) {
	    _classCallCheck(this, Demo1);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.data = [['张其', '2019', 11, '男', 90], ['王收', '2020', 11, '男', 100], ['孙武', '2018', 11, '男', 93], ['宋佳', '2021', 13, '女', 92], ['李琦', '2021', 15, '女', 99]];
	    return _this;
	  }
	
	  Demo1.prototype.render = function render() {
	    return _react2['default'].createElement(_index2['default'], { data: this.data, width: '600', height: '300' });
	  };
	
	  return Demo1;
	}(_react.Component);
	
	exports['default'] = Demo1;
	module.exports = exports['default'];

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Spreadsheet = __webpack_require__(266);
	
	var _Spreadsheet2 = _interopRequireDefault(_Spreadsheet);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = _Spreadsheet2['default'];
	module.exports = exports['default'];

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(6);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _handsontable = __webpack_require__(267);
	
	var _handsontable2 = _interopRequireDefault(_handsontable);
	
	var _setting = __webpack_require__(393);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// import './Spreadsheet.scss';
	
	var propTypes = {};
	
	var HotTable = function (_Component) {
	  _inherits(HotTable, _Component);
	
	  function HotTable(props) {
	    _classCallCheck(this, HotTable);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this._setHotElementRef = function (element) {
	      _this.hotElementRef = element;
	    };
	
	    return _this;
	  }
	
	  HotTable.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	    this.updateHot((0, _setting.getSettings)(nextProps));
	    return false;
	  };
	
	  HotTable.prototype.componentDidMount = function componentDidMount() {
	    var newSettings = (0, _setting.getSettings)(this.props);
	    this.hotInstance = new _handsontable2['default'](this.hotElementRef, newSettings);
	  };
	
	  HotTable.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.hotInstance.destroy();
	  };
	
	  HotTable.prototype.updateHot = function updateHot(newSettings) {
	    this.hotInstance.updateSettings(newSettings, false);
	  };
	
	  HotTable.prototype.render = function render() {
	    var props = this.props;
	    var randomId = 'hot-' + Math.random().toString(36).substring(5);
	    var _props$id = props.id,
	        id = _props$id === undefined ? randomId : _props$id,
	        _props$className = props.className,
	        className = _props$className === undefined ? '' : _props$className,
	        _props$style = props.style,
	        style = _props$style === undefined ? {} : _props$style;
	
	
	    return _react2['default'].createElement('div', { ref: this._setHotElementRef,
	      id: id,
	      className: className,
	      style: style });
	  };
	
	  return HotTable;
	}(_react.Component);
	
	exports['default'] = HotTable;
	module.exports = exports['default'];

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate, process) {/*!
	 * (The MIT License)
	 * 
	 * Copyright (c) 2012-2014 Marcin Warpechowski
	 * Copyright (c) 2015 Handsoncode sp. z o.o. <hello@handsoncode.net>
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 * 
	 * Version: 5.0.2
	 * Release date: 12/09/2018 (built at 11/09/2018 09:55:19)
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(270), __webpack_require__(391), __webpack_require__(392));
		else if(typeof define === 'function' && define.amd)
			define("Handsontable", ["moment", "numbro", "pikaday"], factory);
		else if(typeof exports === 'object')
			exports["Handsontable"] = factory(require("moment"), require("numbro"), require("pikaday"));
		else
			root["Handsontable"] = factory(root["moment"], root["numbro"], root["Pikaday"]);
	})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_57__, __WEBPACK_EXTERNAL_MODULE_248__, __WEBPACK_EXTERNAL_MODULE_237__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 207);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.HTML_CHARACTERS = undefined;
	exports.getParent = getParent;
	exports.closest = closest;
	exports.closestDown = closestDown;
	exports.isChildOf = isChildOf;
	exports.isChildOfWebComponentTable = isChildOfWebComponentTable;
	exports.polymerWrap = polymerWrap;
	exports.polymerUnwrap = polymerUnwrap;
	exports.index = index;
	exports.overlayContainsElement = overlayContainsElement;
	exports.hasClass = hasClass;
	exports.addClass = addClass;
	exports.removeClass = removeClass;
	exports.removeTextNodes = removeTextNodes;
	exports.empty = empty;
	exports.fastInnerHTML = fastInnerHTML;
	exports.fastInnerText = fastInnerText;
	exports.isVisible = isVisible;
	exports.offset = offset;
	exports.getWindowScrollTop = getWindowScrollTop;
	exports.getWindowScrollLeft = getWindowScrollLeft;
	exports.getScrollTop = getScrollTop;
	exports.getScrollLeft = getScrollLeft;
	exports.getScrollableElement = getScrollableElement;
	exports.getTrimmingContainer = getTrimmingContainer;
	exports.getStyle = getStyle;
	exports.getComputedStyle = getComputedStyle;
	exports.outerWidth = outerWidth;
	exports.outerHeight = outerHeight;
	exports.innerHeight = innerHeight;
	exports.innerWidth = innerWidth;
	exports.addEvent = addEvent;
	exports.removeEvent = removeEvent;
	exports.getCaretPosition = getCaretPosition;
	exports.getSelectionEndPosition = getSelectionEndPosition;
	exports.getSelectionText = getSelectionText;
	exports.setCaretPosition = setCaretPosition;
	exports.getScrollbarWidth = getScrollbarWidth;
	exports.hasVerticalScrollbar = hasVerticalScrollbar;
	exports.hasHorizontalScrollbar = hasHorizontalScrollbar;
	exports.setOverlayPosition = setOverlayPosition;
	exports.getCssTransform = getCssTransform;
	exports.resetCssTransform = resetCssTransform;
	exports.isInput = isInput;
	exports.isOutsideInput = isOutsideInput;
	
	var _browser = __webpack_require__(39);
	
	var _feature = __webpack_require__(40);
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	/**
	 * Get the parent of the specified node in the DOM tree.
	 *
	 * @param  {HTMLElement} element Element from which traversing is started.
	 * @param  {Number} [level=0] Traversing deep level.
	 * @return {HTMLElement|null}
	 */
	function getParent(element) {
	  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	  var iteration = -1;
	  var parent = null;
	  var elementToCheck = element;
	
	  while (elementToCheck !== null) {
	    if (iteration === level) {
	      parent = elementToCheck;
	      break;
	    }
	
	    if (elementToCheck.host && elementToCheck.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      elementToCheck = elementToCheck.host;
	    } else {
	      iteration += 1;
	      elementToCheck = elementToCheck.parentNode;
	    }
	  }
	
	  return parent;
	}
	
	/**
	 * Goes up the DOM tree (including given element) until it finds an element that matches the nodes or nodes name.
	 * This method goes up through web components.
	 *
	 * @param {HTMLElement} element Element from which traversing is started
	 * @param {Array} nodes Array of elements or Array of elements name
	 * @param {HTMLElement} [until]
	 * @returns {HTMLElement|null}
	 */
	function closest(element, nodes, until) {
	  var elementToCheck = element;
	
	  while (elementToCheck !== null && elementToCheck !== until) {
	    if (elementToCheck.nodeType === Node.ELEMENT_NODE && (nodes.indexOf(elementToCheck.nodeName) > -1 || nodes.indexOf(elementToCheck) > -1)) {
	      return elementToCheck;
	    }
	    if (elementToCheck.host && elementToCheck.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      elementToCheck = elementToCheck.host;
	    } else {
	      elementToCheck = elementToCheck.parentNode;
	    }
	  }
	
	  return null;
	}
	
	/**
	 * Goes "down" the DOM tree (including given element) until it finds an element that matches the nodes or nodes name.
	 *
	 * @param {HTMLElement} element Element from which traversing is started
	 * @param {Array} nodes Array of elements or Array of elements name
	 * @param {HTMLElement} [until]
	 * @returns {HTMLElement|null}
	 */
	function closestDown(element, nodes, until) {
	  var matched = [];
	  var elementToCheck = element;
	
	  while (elementToCheck) {
	    elementToCheck = closest(elementToCheck, nodes, until);
	
	    if (!elementToCheck || until && !until.contains(elementToCheck)) {
	      break;
	    }
	    matched.push(elementToCheck);
	
	    if (elementToCheck.host && elementToCheck.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      elementToCheck = elementToCheck.host;
	    } else {
	      elementToCheck = elementToCheck.parentNode;
	    }
	  }
	  var length = matched.length;
	
	  return length ? matched[length - 1] : null;
	}
	
	/**
	 * Goes up the DOM tree and checks if element is child of another element.
	 *
	 * @param child Child element
	 * @param {Object|String} parent Parent element OR selector of the parent element.
	 *                               If string provided, function returns `true` for the first occurrence of element with that class.
	 * @returns {Boolean}
	 */
	function isChildOf(child, parent) {
	  var node = child.parentNode;
	  var queriedParents = [];
	
	  if (typeof parent === 'string') {
	    queriedParents = Array.prototype.slice.call(document.querySelectorAll(parent), 0);
	  } else {
	    queriedParents.push(parent);
	  }
	
	  while (node !== null) {
	    if (queriedParents.indexOf(node) > -1) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	
	  return false;
	}
	
	/**
	 * Check if an element is part of `hot-table` web component.
	 *
	 * @param {Element} element
	 * @returns {Boolean}
	 */
	function isChildOfWebComponentTable(element) {
	  var hotTableName = 'hot-table';
	  var result = false;
	  var parentNode = polymerWrap(element);
	
	  function isHotTable(testElement) {
	    return testElement.nodeType === Node.ELEMENT_NODE && testElement.nodeName === hotTableName.toUpperCase();
	  }
	
	  while (parentNode !== null) {
	    if (isHotTable(parentNode)) {
	      result = true;
	      break;
	    } else if (parentNode.host && parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      result = isHotTable(parentNode.host);
	
	      if (result) {
	        break;
	      }
	      parentNode = parentNode.host;
	    }
	    parentNode = parentNode.parentNode;
	  }
	
	  return result;
	}
	
	/* global Polymer wrap unwrap */
	
	/**
	 * Wrap element into polymer/webcomponent container if exists
	 *
	 * @param element
	 * @returns {*}
	 */
	function polymerWrap(element) {
	  return typeof Polymer !== 'undefined' && typeof wrap === 'function' ? wrap(element) : element;
	}
	
	/**
	 * Unwrap element from polymer/webcomponent container if exists
	 *
	 * @param element
	 * @returns {*}
	 */
	function polymerUnwrap(element) {
	  return typeof Polymer !== 'undefined' && typeof unwrap === 'function' ? unwrap(element) : element;
	}
	
	/**
	 * Counts index of element within its parent
	 * WARNING: for performance reasons, assumes there are only element nodes (no text nodes). This is true for Walkotnable
	 * Otherwise would need to check for nodeType or use previousElementSibling
	 *
	 * @see http://jsperf.com/sibling-index/10
	 * @param {Element} element
	 * @return {Number}
	 */
	function index(element) {
	  var i = 0;
	  var elementToCheck = element;
	
	  if (elementToCheck.previousSibling) {
	    /* eslint-disable no-cond-assign */
	    while (elementToCheck = elementToCheck.previousSibling) {
	      i += 1;
	    }
	  }
	
	  return i;
	}
	
	/**
	 * Check if the provided overlay contains the provided element
	 *
	 * @param {String} overlay
	 * @param {HTMLElement} element
	 * @returns {boolean}
	 */
	function overlayContainsElement(overlayType, element) {
	  var overlayElement = document.querySelector('.ht_clone_' + overlayType);
	  return overlayElement ? overlayElement.contains(element) : null;
	}
	
	var classListSupport = !!document.documentElement.classList;
	var _hasClass = void 0;
	var _addClass = void 0;
	var _removeClass = void 0;
	
	function filterEmptyClassNames(classNames) {
	  var result = [];
	
	  if (!classNames || !classNames.length) {
	    return result;
	  }
	
	  var len = 0;
	
	  while (classNames[len]) {
	    result.push(classNames[len]);
	    len += 1;
	  }
	
	  return result;
	}
	
	if (classListSupport) {
	  var isSupportMultipleClassesArg = function () {
	    var element = document.createElement('div');
	
	    element.classList.add('test', 'test2');
	
	    return element.classList.contains('test2');
	  }();
	
	  _hasClass = function _hasClass(element, className) {
	    if (element.classList === void 0 || typeof className !== 'string' || className === '') {
	      return false;
	    }
	
	    return element.classList.contains(className);
	  };
	
	  _addClass = function _addClass(element, classes) {
	    var className = classes;
	
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	
	    className = filterEmptyClassNames(className);
	
	    if (className.length > 0) {
	      if (isSupportMultipleClassesArg) {
	        var _element$classList;
	
	        (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(className));
	      } else {
	        var len = 0;
	
	        while (className && className[len]) {
	          element.classList.add(className[len]);
	          len += 1;
	        }
	      }
	    }
	  };
	
	  _removeClass = function _removeClass(element, classes) {
	    var className = classes;
	
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	
	    className = filterEmptyClassNames(className);
	
	    if (className.length > 0) {
	      if (isSupportMultipleClassesArg) {
	        var _element$classList2;
	
	        (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(className));
	      } else {
	        var len = 0;
	
	        while (className && className[len]) {
	          element.classList.remove(className[len]);
	          len += 1;
	        }
	      }
	    }
	  };
	} else {
	  var createClassNameRegExp = function createClassNameRegExp(className) {
	    return new RegExp('(\\s|^)' + className + '(\\s|$)');
	  };
	
	  _hasClass = function _hasClass(element, className) {
	    // http://snipplr.com/view/3561/addclass-removeclass-hasclass/
	    return element.className !== void 0 && createClassNameRegExp(className).test(element.className);
	  };
	
	  _addClass = function _addClass(element, classes) {
	    var len = 0;
	    var _className = element.className;
	    var className = classes;
	
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    if (_className === '') {
	      _className = className.join(' ');
	    } else {
	      while (className && className[len]) {
	        if (!createClassNameRegExp(className[len]).test(_className)) {
	          _className += ' ' + className[len];
	        }
	        len += 1;
	      }
	    }
	    element.className = _className;
	  };
	
	  _removeClass = function _removeClass(element, classes) {
	    var len = 0;
	    var _className = element.className;
	    var className = classes;
	
	    if (typeof className === 'string') {
	      className = className.split(' ');
	    }
	    while (className && className[len]) {
	      // String.prototype.trim is defined in polyfill.js
	      _className = _className.replace(createClassNameRegExp(className[len]), ' ').trim();
	      len += 1;
	    }
	    if (element.className !== _className) {
	      element.className = _className;
	    }
	  };
	}
	
	/**
	 * Checks if element has class name
	 *
	 * @param {HTMLElement} element
	 * @param {String} className Class name to check
	 * @returns {Boolean}
	 */
	function hasClass(element, className) {
	  return _hasClass(element, className);
	}
	
	/**
	 * Add class name to an element
	 *
	 * @param {HTMLElement} element
	 * @param {String|Array} className Class name as string or array of strings
	 */
	function addClass(element, className) {
	  return _addClass(element, className);
	}
	
	/**
	 * Remove class name from an element
	 *
	 * @param {HTMLElement} element
	 * @param {String|Array} className Class name as string or array of strings
	 */
	function removeClass(element, className) {
	  return _removeClass(element, className);
	}
	
	function removeTextNodes(element, parent) {
	  if (element.nodeType === 3) {
	    parent.removeChild(element); // bye text nodes!
	  } else if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR'].indexOf(element.nodeName) > -1) {
	    var childs = element.childNodes;
	    for (var i = childs.length - 1; i >= 0; i--) {
	      removeTextNodes(childs[i], element);
	    }
	  }
	}
	
	/**
	 * Remove childs function
	 * WARNING - this doesn't unload events and data attached by jQuery
	 * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/9
	 * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/11 - no siginificant improvement with Chrome remove() method
	 *
	 * @param element
	 * @returns {void}
	 */
	//
	function empty(element) {
	  var child = void 0;
	  /* eslint-disable no-cond-assign */
	  while (child = element.lastChild) {
	    element.removeChild(child);
	  }
	}
	
	var HTML_CHARACTERS = exports.HTML_CHARACTERS = /(<(.*)>|&(.*);)/;
	
	/**
	 * Insert content into element trying avoid innerHTML method.
	 * @return {void}
	 */
	function fastInnerHTML(element, content) {
	  if (HTML_CHARACTERS.test(content)) {
	    element.innerHTML = content;
	  } else {
	    fastInnerText(element, content);
	  }
	}
	
	/**
	 * Insert text content into element
	 * @return {void}
	 */
	
	var textContextSupport = !!document.createTextNode('test').textContent;
	
	function fastInnerText(element, content) {
	  var child = element.firstChild;
	
	  if (child && child.nodeType === 3 && child.nextSibling === null) {
	    // fast lane - replace existing text node
	
	    if (textContextSupport) {
	      // http://jsperf.com/replace-text-vs-reuse
	      child.textContent = content;
	    } else {
	      // http://jsperf.com/replace-text-vs-reuse
	      child.data = content;
	    }
	  } else {
	    // slow lane - empty element and insert a text node
	    empty(element);
	    element.appendChild(document.createTextNode(content));
	  }
	}
	
	/**
	 * Returns true if element is attached to the DOM and visible, false otherwise
	 * @param elem
	 * @returns {boolean}
	 */
	function isVisible(elem) {
	  var next = elem;
	
	  while (polymerUnwrap(next) !== document.documentElement) {
	    // until <html> reached
	    if (next === null) {
	      // parent detached from DOM
	      return false;
	    } else if (next.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	      if (next.host) {
	        // this is Web Components Shadow DOM
	        // see: http://w3c.github.io/webcomponents/spec/shadow/#encapsulation
	        // according to spec, should be if (next.ownerDocument !== window.document), but that doesn't work yet
	        if (next.host.impl) {
	          // Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features disabled
	          return isVisible(next.host.impl);
	        } else if (next.host) {
	          // Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features enabled
	          return isVisible(next.host);
	        }
	        throw new Error('Lost in Web Components world');
	      } else {
	        return false; // this is a node detached from document in IE8
	      }
	    } else if (next.style.display === 'none') {
	      return false;
	    }
	    next = next.parentNode;
	  }
	
	  return true;
	}
	
	/**
	 * Returns elements top and left offset relative to the document. Function is not compatible with jQuery offset.
	 *
	 * @param {HTMLElement} elem
	 * @return {Object} Returns object with `top` and `left` props
	 */
	function offset(elem) {
	  var docElem = document.documentElement;
	  var elementToCheck = elem;
	  var offsetLeft = void 0;
	  var offsetTop = void 0;
	  var lastElem = void 0;
	  var box = void 0;
	
	  if ((0, _feature.hasCaptionProblem)() && elementToCheck.firstChild && elementToCheck.firstChild.nodeName === 'CAPTION') {
	    // fixes problem with Firefox ignoring <caption> in TABLE offset (see also export outerHeight)
	    // http://jsperf.com/offset-vs-getboundingclientrect/8
	    box = elementToCheck.getBoundingClientRect();
	
	    return {
	      top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
	    };
	  }
	  offsetLeft = elementToCheck.offsetLeft;
	  offsetTop = elementToCheck.offsetTop;
	  lastElem = elementToCheck;
	
	  /* eslint-disable no-cond-assign */
	  while (elementToCheck = elementToCheck.offsetParent) {
	    // from my observation, document.body always has scrollLeft/scrollTop == 0
	    if (elementToCheck === document.body) {
	      break;
	    }
	    offsetLeft += elementToCheck.offsetLeft;
	    offsetTop += elementToCheck.offsetTop;
	    lastElem = elementToCheck;
	  }
	
	  // slow - http://jsperf.com/offset-vs-getboundingclientrect/6
	  if (lastElem && lastElem.style.position === 'fixed') {
	    // if(lastElem !== document.body) { //faster but does gives false positive in Firefox
	    offsetLeft += window.pageXOffset || docElem.scrollLeft;
	    offsetTop += window.pageYOffset || docElem.scrollTop;
	  }
	
	  return {
	    left: offsetLeft,
	    top: offsetTop
	  };
	}
	
	/**
	 * Returns the document's scrollTop property.
	 *
	 * @returns {Number}
	 */
	function getWindowScrollTop() {
	  var res = window.scrollY;
	
	  if (res === void 0) {
	    // IE8-11
	    res = document.documentElement.scrollTop;
	  }
	
	  return res;
	}
	
	/**
	 * Returns the document's scrollLeft property.
	 *
	 * @returns {Number}
	 */
	function getWindowScrollLeft() {
	  var res = window.scrollX;
	
	  if (res === void 0) {
	    // IE8-11
	    res = document.documentElement.scrollLeft;
	  }
	
	  return res;
	}
	
	/**
	 * Returns the provided element's scrollTop property.
	 *
	 * @param element
	 * @returns {Number}
	 */
	function getScrollTop(element) {
	  if (element === window) {
	    return getWindowScrollTop();
	  }
	  return element.scrollTop;
	}
	
	/**
	 * Returns the provided element's scrollLeft property.
	 *
	 * @param element
	 * @returns {Number}
	 */
	function getScrollLeft(element) {
	  if (element === window) {
	    return getWindowScrollLeft();
	  }
	  return element.scrollLeft;
	}
	
	/**
	 * Returns a DOM element responsible for scrolling of the provided element.
	 *
	 * @param {HTMLElement} element
	 * @returns {HTMLElement} Element's scrollable parent
	 */
	function getScrollableElement(element) {
	  var props = ['auto', 'scroll'];
	  var el = element.parentNode;
	  var overflow = void 0;
	  var overflowX = void 0;
	  var overflowY = void 0;
	  var computedStyle = '';
	  var computedOverflow = '';
	  var computedOverflowY = '';
	  var computedOverflowX = '';
	
	  while (el && el.style && document.body !== el) {
	    overflow = el.style.overflow;
	    overflowX = el.style.overflowX;
	    overflowY = el.style.overflowY;
	
	    if (overflow === 'scroll' || overflowX === 'scroll' || overflowY === 'scroll') {
	      return el;
	    } else if (window.getComputedStyle) {
	      computedStyle = window.getComputedStyle(el);
	      computedOverflow = computedStyle.getPropertyValue('overflow');
	      computedOverflowY = computedStyle.getPropertyValue('overflow-y');
	      computedOverflowX = computedStyle.getPropertyValue('overflow-x');
	
	      if (computedOverflow === 'scroll' || computedOverflowX === 'scroll' || computedOverflowY === 'scroll') {
	        return el;
	      }
	    }
	
	    // The '+ 1' after the scrollHeight/scrollWidth is to prevent problems with zoomed out Chrome.
	    if (el.clientHeight <= el.scrollHeight + 1 && (props.indexOf(overflowY) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowY) !== -1)) {
	      return el;
	    }
	    if (el.clientWidth <= el.scrollWidth + 1 && (props.indexOf(overflowX) !== -1 || props.indexOf(overflow) !== -1 || props.indexOf(computedOverflow) !== -1 || props.indexOf(computedOverflowX) !== -1)) {
	      return el;
	    }
	    el = el.parentNode;
	  }
	
	  return window;
	}
	
	/**
	 * Returns a DOM element responsible for trimming the provided element.
	 *
	 * @param {HTMLElement} base Base element
	 * @returns {HTMLElement} Base element's trimming parent
	 */
	function getTrimmingContainer(base) {
	  var el = base.parentNode;
	
	  while (el && el.style && document.body !== el) {
	    if (el.style.overflow !== 'visible' && el.style.overflow !== '') {
	      return el;
	    } else if (window.getComputedStyle) {
	      var computedStyle = window.getComputedStyle(el);
	
	      if (computedStyle.getPropertyValue('overflow') !== 'visible' && computedStyle.getPropertyValue('overflow') !== '') {
	        return el;
	      }
	    }
	
	    el = el.parentNode;
	  }
	
	  return window;
	}
	
	/**
	 * Returns a style property for the provided element. (Be it an inline or external style).
	 *
	 * @param {HTMLElement} element
	 * @param {String} prop Wanted property
	 * @returns {String|undefined} Element's style property
	 */
	function getStyle(element, prop) {
	  /* eslint-disable */
	  if (!element) {
	    return;
	  } else if (element === window) {
	    if (prop === 'width') {
	      return window.innerWidth + 'px';
	    } else if (prop === 'height') {
	      return window.innerHeight + 'px';
	    }
	
	    return;
	  }
	
	  var styleProp = element.style[prop],
	      computedStyle;
	
	  if (styleProp !== '' && styleProp !== void 0) {
	    return styleProp;
	  } else {
	    computedStyle = getComputedStyle(element);
	
	    if (computedStyle[prop] !== '' && computedStyle[prop] !== void 0) {
	      return computedStyle[prop];
	    }
	  }
	}
	
	/**
	 * Returns a computed style object for the provided element. (Needed if style is declared in external stylesheet).
	 *
	 * @param element
	 * @returns {IEElementStyle|CssStyle} Elements computed style object
	 */
	function getComputedStyle(element) {
	  return element.currentStyle || document.defaultView.getComputedStyle(element);
	}
	
	/**
	 * Returns the element's outer width.
	 *
	 * @param element
	 * @returns {number} Element's outer width
	 */
	function outerWidth(element) {
	  return element.offsetWidth;
	}
	
	/**
	 * Returns the element's outer height
	 *
	 * @param elem
	 * @returns {number} Element's outer height
	 */
	function outerHeight(elem) {
	  if ((0, _feature.hasCaptionProblem)() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {
	    // fixes problem with Firefox ignoring <caption> in TABLE.offsetHeight
	    // jQuery (1.10.1) still has this unsolved
	    // may be better to just switch to getBoundingClientRect
	    // http://bililite.com/blog/2009/03/27/finding-the-size-of-a-table/
	    // http://lists.w3.org/Archives/Public/www-style/2009Oct/0089.html
	    // http://bugs.jquery.com/ticket/2196
	    // http://lists.w3.org/Archives/Public/www-style/2009Oct/0140.html#start140
	    return elem.offsetHeight + elem.firstChild.offsetHeight;
	  }
	
	  return elem.offsetHeight;
	}
	
	/**
	 * Returns the element's inner height.
	 *
	 * @param element
	 * @returns {number} Element's inner height
	 */
	function innerHeight(element) {
	  return element.clientHeight || element.innerHeight;
	}
	
	/**
	 * Returns the element's inner width.
	 *
	 * @param element
	 * @returns {number} Element's inner width
	 */
	function innerWidth(element) {
	  return element.clientWidth || element.innerWidth;
	}
	
	function addEvent(element, event, callback) {
	  if (window.addEventListener) {
	    element.addEventListener(event, callback, false);
	  } else {
	    element.attachEvent('on' + event, callback);
	  }
	}
	
	function removeEvent(element, event, callback) {
	  if (window.removeEventListener) {
	    element.removeEventListener(event, callback, false);
	  } else {
	    element.detachEvent('on' + event, callback);
	  }
	}
	
	/**
	 * Returns caret position in text input
	 *
	 * @author http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea
	 * @return {Number}
	 */
	function getCaretPosition(el) {
	  if (el.selectionStart) {
	    return el.selectionStart;
	  } else if (document.selection) {
	    // IE8
	    el.focus();
	
	    var r = document.selection.createRange();
	
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	    var rc = re.duplicate();
	
	    re.moveToBookmark(r.getBookmark());
	    rc.setEndPoint('EndToStart', re);
	
	    return rc.text.length;
	  }
	
	  return 0;
	}
	
	/**
	 * Returns end of the selection in text input
	 *
	 * @return {Number}
	 */
	function getSelectionEndPosition(el) {
	  if (el.selectionEnd) {
	    return el.selectionEnd;
	  } else if (document.selection) {
	    // IE8
	    var r = document.selection.createRange();
	
	    if (r == null) {
	      return 0;
	    }
	    var re = el.createTextRange();
	
	    return re.text.indexOf(r.text) + r.text.length;
	  }
	
	  return 0;
	}
	
	/**
	 * Returns text under selection.
	 *
	 * @returns {String}
	 */
	function getSelectionText() {
	  var text = '';
	
	  if (window.getSelection) {
	    text = window.getSelection().toString();
	  } else if (document.selection && document.selection.type !== 'Control') {
	    text = document.selection.createRange().text;
	  }
	
	  return text;
	}
	
	/**
	 * Sets caret position in text input.
	 *
	 * @author http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/
	 * @param {Element} element
	 * @param {Number} pos
	 * @param {Number} endPos
	 */
	function setCaretPosition(element, pos, endPos) {
	  if (endPos === void 0) {
	    endPos = pos;
	  }
	  if (element.setSelectionRange) {
	    element.focus();
	
	    try {
	      element.setSelectionRange(pos, endPos);
	    } catch (err) {
	      var elementParent = element.parentNode;
	      var parentDisplayValue = elementParent.style.display;
	      elementParent.style.display = 'block';
	      element.setSelectionRange(pos, endPos);
	      elementParent.style.display = parentDisplayValue;
	    }
	  } else if (element.createTextRange) {
	    // IE8
	    var range = element.createTextRange();
	    range.collapse(true);
	    range.moveEnd('character', endPos);
	    range.moveStart('character', pos);
	    range.select();
	  }
	}
	
	var cachedScrollbarWidth;
	
	// http://stackoverflow.com/questions/986937/how-can-i-get-the-browsers-scrollbar-sizes
	function walkontableCalculateScrollbarWidth() {
	  var inner = document.createElement('div');
	  inner.style.height = '200px';
	  inner.style.width = '100%';
	
	  var outer = document.createElement('div');
	  outer.style.boxSizing = 'content-box';
	  outer.style.height = '150px';
	  outer.style.left = '0px';
	  outer.style.overflow = 'hidden';
	  outer.style.position = 'absolute';
	  outer.style.top = '0px';
	  outer.style.width = '200px';
	  outer.style.visibility = 'hidden';
	  outer.appendChild(inner);
	
	  (document.body || document.documentElement).appendChild(outer);
	  var w1 = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var w2 = inner.offsetWidth;
	  if (w1 == w2) {
	    w2 = outer.clientWidth;
	  }
	
	  (document.body || document.documentElement).removeChild(outer);
	
	  return w1 - w2;
	}
	
	/**
	 * Returns the computed width of the native browser scroll bar.
	 *
	 * @return {Number} width
	 */
	function getScrollbarWidth() {
	  if (cachedScrollbarWidth === void 0) {
	    cachedScrollbarWidth = walkontableCalculateScrollbarWidth();
	  }
	
	  return cachedScrollbarWidth;
	}
	
	/**
	 * Checks if the provided element has a vertical scrollbar.
	 *
	 * @param {HTMLElement} element
	 * @returns {Boolean}
	 */
	function hasVerticalScrollbar(element) {
	  return element.offsetWidth !== element.clientWidth;
	}
	
	/**
	 * Checks if the provided element has a vertical scrollbar.
	 *
	 * @param {HTMLElement} element
	 * @returns {Boolean}
	 */
	function hasHorizontalScrollbar(element) {
	  return element.offsetHeight !== element.clientHeight;
	}
	
	/**
	 * Sets overlay position depending on it's type and used browser
	 */
	function setOverlayPosition(overlayElem, left, top) {
	  if ((0, _browser.isIE8)() || (0, _browser.isIE9)()) {
	    overlayElem.style.top = top;
	    overlayElem.style.left = left;
	  } else if ((0, _browser.isSafari)()) {
	    overlayElem.style['-webkit-transform'] = 'translate3d(' + left + ',' + top + ',0)';
	  } else {
	    overlayElem.style.transform = 'translate3d(' + left + ',' + top + ',0)';
	  }
	}
	
	function getCssTransform(element) {
	  var transform = void 0;
	
	  if (element.style.transform && (transform = element.style.transform) !== '') {
	    return ['transform', transform];
	  } else if (element.style['-webkit-transform'] && (transform = element.style['-webkit-transform']) !== '') {
	
	    return ['-webkit-transform', transform];
	  }
	
	  return -1;
	}
	
	function resetCssTransform(element) {
	  if (element.style.transform && element.style.transform !== '') {
	    element.style.transform = '';
	  } else if (element.style['-webkit-transform'] && element.style['-webkit-transform'] !== '') {
	    element.style['-webkit-transform'] = '';
	  }
	}
	
	/**
	 * Determines if the given DOM element is an input field.
	 * Notice: By 'input' we mean input, textarea and select nodes
	 *
	 * @param {HTMLElement} element - DOM element
	 * @returns {Boolean}
	 */
	function isInput(element) {
	  var inputs = ['INPUT', 'SELECT', 'TEXTAREA'];
	
	  return element && (inputs.indexOf(element.nodeName) > -1 || element.contentEditable === 'true');
	}
	
	/**
	 * Determines if the given DOM element is an input field placed OUTSIDE of HOT.
	 * Notice: By 'input' we mean input, textarea and select nodes
	 *
	 * @param {HTMLElement} element - DOM element
	 * @returns {Boolean}
	 */
	function isOutsideInput(element) {
	  return isInput(element) && element.className.indexOf('handsontableInput') == -1 && element.className.indexOf('copyPaste') == -1;
	}
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.duckSchema = duckSchema;
	exports.inherit = inherit;
	exports.extend = extend;
	exports.deepExtend = deepExtend;
	exports.deepClone = deepClone;
	exports.clone = clone;
	exports.mixin = mixin;
	exports.isObjectEqual = isObjectEqual;
	exports.isObject = isObject;
	exports.defineGetter = defineGetter;
	exports.objectEach = objectEach;
	exports.getProperty = getProperty;
	exports.deepObjectSize = deepObjectSize;
	exports.createObjectPropListener = createObjectPropListener;
	exports.hasOwnProperty = hasOwnProperty;
	
	var _array = __webpack_require__(2);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	/**
	 * Generate schema for passed object.
	 *
	 * @param {Array|Object} object
	 * @returns {Array|Object}
	 */
	function duckSchema(object) {
	  var schema = void 0;
	
	  if (Array.isArray(object)) {
	    schema = [];
	  } else {
	    schema = {};
	
	    objectEach(object, function (value, key) {
	      if (key === '__children') {
	        return;
	      }
	
	      if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
	        schema[key] = duckSchema(value);
	      } else if (Array.isArray(value)) {
	        if (value.length && _typeof(value[0]) === 'object' && !Array.isArray(value[0])) {
	          schema[key] = [duckSchema(value[0])];
	        } else {
	          schema[key] = [];
	        }
	      } else {
	        schema[key] = null;
	      }
	    });
	  }
	
	  return schema;
	}
	
	/**
	 * Inherit without without calling parent constructor, and setting `Child.prototype.constructor` to `Child` instead of `Parent`.
	 * Creates temporary dummy function to call it as constructor.
	 * Described in ticket: https://github.com/handsontable/handsontable/pull/516
	 *
	 * @param  {Object} Child  child class
	 * @param  {Object} Parent parent class
	 * @return {Object}        extended Child
	 */
	function inherit(Child, Parent) {
	  Parent.prototype.constructor = Parent;
	  Child.prototype = new Parent();
	  Child.prototype.constructor = Child;
	
	  return Child;
	}
	
	/**
	 * Perform shallow extend of a target object with extension's own properties.
	 *
	 * @param {Object} target An object that will receive the new properties.
	 * @param {Object} extension An object containing additional properties to merge into the target.
	 */
	function extend(target, extension) {
	  objectEach(extension, function (value, key) {
	    target[key] = value;
	  });
	
	  return target;
	}
	
	/**
	 * Perform deep extend of a target object with extension's own properties.
	 *
	 * @param {Object} target An object that will receive the new properties.
	 * @param {Object} extension An object containing additional properties to merge into the target.
	 */
	function deepExtend(target, extension) {
	  objectEach(extension, function (value, key) {
	    if (extension[key] && _typeof(extension[key]) === 'object') {
	      if (!target[key]) {
	        if (Array.isArray(extension[key])) {
	          target[key] = [];
	        } else if (Object.prototype.toString.call(extension[key]) === '[object Date]') {
	          target[key] = extension[key];
	        } else {
	          target[key] = {};
	        }
	      }
	      deepExtend(target[key], extension[key]);
	    } else {
	      target[key] = extension[key];
	    }
	  });
	}
	
	/**
	 * Perform deep clone of an object.
	 * WARNING! Only clones JSON properties. Will cause error when `obj` contains a function, Date, etc.
	 *
	 * @param {Object} obj An object that will be cloned
	 * @return {Object}
	 */
	function deepClone(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    return JSON.parse(JSON.stringify(obj));
	  }
	
	  return obj;
	}
	
	/**
	 * Shallow clone object.
	 *
	 * @param {Object} object
	 * @returns {Object}
	 */
	function clone(object) {
	  var result = {};
	
	  objectEach(object, function (value, key) {
	    result[key] = value;
	  });
	
	  return result;
	}
	
	/**
	 * Extend the Base object (usually prototype) of the functionality the `mixins` objects.
	 *
	 * @param {Object} Base Base object which will be extended.
	 * @param {Object} mixins The object of the functionality will be "copied".
	 * @returns {Object}
	 */
	function mixin(Base) {
	  if (!Base.MIXINS) {
	    Base.MIXINS = [];
	  }
	
	  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    mixins[_key - 1] = arguments[_key];
	  }
	
	  (0, _array.arrayEach)(mixins, function (mixinItem) {
	    Base.MIXINS.push(mixinItem.MIXIN_NAME);
	
	    objectEach(mixinItem, function (value, key) {
	      if (Base.prototype[key] !== void 0) {
	        throw new Error('Mixin conflict. Property \'' + key + '\' already exist and cannot be overwritten.');
	      }
	      if (typeof value === 'function') {
	        Base.prototype[key] = value;
	      } else {
	        var getter = function _getter(property, initialValue) {
	          var propertyName = '_' + property;
	
	          var initValue = function initValue(newValue) {
	            var result = newValue;
	
	            if (Array.isArray(result) || isObject(result)) {
	              result = deepClone(result);
	            }
	
	            return result;
	          };
	
	          return function () {
	            if (this[propertyName] === void 0) {
	              this[propertyName] = initValue(initialValue);
	            }
	
	            return this[propertyName];
	          };
	        };
	        var setter = function _setter(property) {
	          var propertyName = '_' + property;
	
	          return function (newValue) {
	            this[propertyName] = newValue;
	          };
	        };
	        Object.defineProperty(Base.prototype, key, {
	          get: getter(key, value),
	          set: setter(key),
	          configurable: true
	        });
	      }
	    });
	  });
	
	  return Base;
	}
	
	/**
	 * Checks if two objects or arrays are (deep) equal
	 *
	 * @param {Object|Array} object1
	 * @param {Object|Array} object2
	 * @returns {Boolean}
	 */
	function isObjectEqual(object1, object2) {
	  return JSON.stringify(object1) === JSON.stringify(object2);
	}
	
	/**
	 * Determines whether given object is a plain Object.
	 * Note: String and Array are not plain Objects
	 * @param {*} obj
	 * @returns {boolean}
	 */
	function isObject(obj) {
	  return Object.prototype.toString.call(obj) === '[object Object]';
	}
	
	function defineGetter(object, property, value, options) {
	  options.value = value;
	  options.writable = options.writable !== false;
	  options.enumerable = options.enumerable !== false;
	  options.configurable = options.configurable !== false;
	
	  Object.defineProperty(object, property, options);
	}
	
	/**
	 * A specialized version of `.forEach` for objects.
	 *
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function objectEach(object, iteratee) {
	  // eslint-disable-next-line no-restricted-syntax
	  for (var key in object) {
	    if (!object.hasOwnProperty || object.hasOwnProperty && Object.prototype.hasOwnProperty.call(object, key)) {
	      if (iteratee(object[key], key, object) === false) {
	        break;
	      }
	    }
	  }
	
	  return object;
	}
	
	/**
	 * Get object property by its name. Access to sub properties can be achieved by dot notation (e.q. `'foo.bar.baz'`).
	 *
	 * @param {Object} object Object which value will be exported.
	 * @param {String} name Object property name.
	 * @returns {*}
	 */
	function getProperty(object, name) {
	  var names = name.split('.');
	  var result = object;
	
	  objectEach(names, function (nameItem) {
	    result = result[nameItem];
	
	    if (result === void 0) {
	      result = void 0;
	
	      return false;
	    }
	  });
	
	  return result;
	}
	
	/**
	 * Return object length (recursively).
	 *
	 * @param {*} object Object for which we want get length.
	 * @returns {Number}
	 */
	function deepObjectSize(object) {
	  if (!isObject(object)) {
	    return 0;
	  }
	  var recursObjLen = function recursObjLen(obj) {
	    var result = 0;
	
	    if (isObject(obj)) {
	      objectEach(obj, function (key) {
	        result += recursObjLen(key);
	      });
	    } else {
	      result += 1;
	    }
	
	    return result;
	  };
	
	  return recursObjLen(object);
	}
	
	/**
	 * Create object with property where its value change will be observed.
	 *
	 * @param {*} [defaultValue=undefined] Default value.
	 * @param {String} [propertyToListen='value'] Property to listen.
	 * @returns {Object}
	 */
	function createObjectPropListener(defaultValue) {
	  var _holder;
	
	  var propertyToListen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';
	
	  var privateProperty = '_' + propertyToListen;
	  var holder = (_holder = {
	    _touched: false
	  }, _defineProperty(_holder, privateProperty, defaultValue), _defineProperty(_holder, 'isTouched', function isTouched() {
	    return this._touched;
	  }), _holder);
	
	  Object.defineProperty(holder, propertyToListen, {
	    get: function get() {
	      return this[privateProperty];
	    },
	    set: function set(value) {
	      this._touched = true;
	      this[privateProperty] = value;
	    },
	
	    enumerable: true,
	    configurable: true
	  });
	
	  return holder;
	}
	
	/**
	 * Check if at specified `key` there is any value for `object`.
	 *
	 * @param {Object} object Object to search value at specyfic key.
	 * @param {String} key String key to check.
	 */
	function hasOwnProperty(object, key) {
	  return Object.prototype.hasOwnProperty.call(object, key);
	}
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.to2dArray = to2dArray;
	exports.extendArray = extendArray;
	exports.pivot = pivot;
	exports.arrayReduce = arrayReduce;
	exports.arrayFilter = arrayFilter;
	exports.arrayMap = arrayMap;
	exports.arrayEach = arrayEach;
	exports.arraySum = arraySum;
	exports.arrayMax = arrayMax;
	exports.arrayMin = arrayMin;
	exports.arrayAvg = arrayAvg;
	exports.arrayFlatten = arrayFlatten;
	exports.arrayUnique = arrayUnique;
	function to2dArray(arr) {
	  var ilen = arr.length;
	  var i = 0;
	
	  while (i < ilen) {
	    arr[i] = [arr[i]];
	    i += 1;
	  }
	}
	
	function extendArray(arr, extension) {
	  var ilen = extension.length;
	  var i = 0;
	
	  while (i < ilen) {
	    arr.push(extension[i]);
	    i += 1;
	  }
	}
	
	function pivot(arr) {
	  var pivotedArr = [];
	
	  if (!arr || arr.length === 0 || !arr[0] || arr[0].length === 0) {
	    return pivotedArr;
	  }
	
	  var rowCount = arr.length;
	  var colCount = arr[0].length;
	
	  for (var i = 0; i < rowCount; i++) {
	    for (var j = 0; j < colCount; j++) {
	      if (!pivotedArr[j]) {
	        pivotedArr[j] = [];
	      }
	
	      pivotedArr[j][i] = arr[i][j];
	    }
	  }
	
	  return pivotedArr;
	}
	
	/**
	 * A specialized version of `.reduce` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * {@link https://github.com/lodash/lodash/blob/master/lodash.js}
	 *
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {Boolean} [initFromArray] Specify using the first element of `array` as the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initFromArray) {
	  var index = -1;
	  var iterable = array;
	  var result = accumulator;
	
	  if (!Array.isArray(array)) {
	    iterable = Array.from(array);
	  }
	  var length = iterable.length;
	
	  if (initFromArray && length) {
	    index += 1;
	    result = iterable[index];
	  }
	
	  index += 1;
	
	  while (index < length) {
	    result = iteratee(result, iterable[index], index, iterable);
	    index += 1;
	  }
	
	  return result;
	}
	
	/**
	 * A specialized version of `.filter` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * {@link https://github.com/lodash/lodash/blob/master/lodash.js}
	 *
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = 0;
	  var iterable = array;
	
	  if (!Array.isArray(array)) {
	    iterable = Array.from(array);
	  }
	
	  var length = iterable.length;
	  var result = [];
	  var resIndex = -1;
	
	  while (index < length) {
	    var value = iterable[index];
	
	    if (predicate(value, index, iterable)) {
	      resIndex += 1;
	      result[resIndex] = value;
	    }
	
	    index += 1;
	  }
	
	  return result;
	}
	
	/**
	 * A specialized version of `.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayMap(array, iteratee) {
	  var index = 0;
	  var iterable = array;
	
	  if (!Array.isArray(array)) {
	    iterable = Array.from(array);
	  }
	
	  var length = iterable.length;
	  var result = [];
	  var resIndex = -1;
	
	  while (index < length) {
	    var value = iterable[index];
	
	    resIndex += 1;
	    result[resIndex] = iteratee(value, index, iterable);
	    index += 1;
	  }
	
	  return result;
	}
	
	/**
	 * A specialized version of `.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * {@link https://github.com/lodash/lodash/blob/master/lodash.js}
	 *
	 * @param {Array|*} array The array to iterate over or an any element with implemented iterator protocol.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = 0;
	  var iterable = array;
	
	  if (!Array.isArray(array)) {
	    iterable = Array.from(array);
	  }
	
	  var length = iterable.length;
	
	  while (index < length) {
	    if (iteratee(iterable[index], index, iterable) === false) {
	      break;
	    }
	
	    index += 1;
	  }
	
	  return array;
	}
	
	/**
	 * Calculate sum value for each item of the array.
	 *
	 * @param {Array} array The array to process.
	 * @returns {Number} Returns calculated sum value.
	 */
	function arraySum(array) {
	  return arrayReduce(array, function (a, b) {
	    return a + b;
	  }, 0);
	}
	
	/**
	 * Returns the highest value from an array. Can be array of numbers or array of strings.
	 * NOTICE: Mixed values is not supported.
	 *
	 * @param {Array} array The array to process.
	 * @returns {Number} Returns the highest value from an array.
	 */
	function arrayMax(array) {
	  return arrayReduce(array, function (a, b) {
	    return a > b ? a : b;
	  }, Array.isArray(array) ? array[0] : void 0);
	}
	
	/**
	 * Returns the lowest value from an array. Can be array of numbers or array of strings.
	 * NOTICE: Mixed values is not supported.
	 *
	 * @param {Array} array The array to process.
	 * @returns {Number} Returns the lowest value from an array.
	 */
	function arrayMin(array) {
	  return arrayReduce(array, function (a, b) {
	    return a < b ? a : b;
	  }, Array.isArray(array) ? array[0] : void 0);
	}
	
	/**
	 * Calculate average value for each item of the array.
	 *
	 * @param {Array} array The array to process.
	 * @returns {Number} Returns calculated average value.
	 */
	function arrayAvg(array) {
	  if (!array.length) {
	    return 0;
	  }
	
	  return arraySum(array) / array.length;
	}
	
	/**
	 * Flatten multidimensional array.
	 *
	 * @param {Array} array Array of Arrays
	 * @returns {Array}
	 */
	function arrayFlatten(array) {
	  return arrayReduce(array, function (initial, value) {
	    return initial.concat(Array.isArray(value) ? arrayFlatten(value) : value);
	  }, []);
	}
	
	/**
	 * Unique values in the array.
	 *
	 * @param {Array} array The array to process.
	 * @returns {Array}
	 */
	function arrayUnique(array) {
	  var unique = [];
	
	  arrayEach(array, function (value) {
	    if (unique.indexOf(value) === -1) {
	      unique.push(value);
	    }
	  });
	
	  return unique;
	}
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(15);
	var core = __webpack_require__(37);
	var hide = __webpack_require__(29);
	var redefine = __webpack_require__(28);
	var ctx = __webpack_require__(30);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;
	
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.Viewport = exports.TableRenderer = exports.Table = exports.Settings = exports.Selection = exports.Scroll = exports.Overlays = exports.Event = exports.Core = exports.default = exports.Border = exports.TopLeftCornerOverlay = exports.TopOverlay = exports.LeftOverlay = exports.DebugOverlay = exports.RowFilter = exports.ColumnFilter = exports.CellRange = exports.CellCoords = exports.ViewportRowsCalculator = exports.ViewportColumnsCalculator = undefined;
	
	__webpack_require__(98);
	
	__webpack_require__(113);
	
	__webpack_require__(114);
	
	__webpack_require__(118);
	
	__webpack_require__(119);
	
	__webpack_require__(121);
	
	__webpack_require__(124);
	
	__webpack_require__(125);
	
	__webpack_require__(126);
	
	__webpack_require__(127);
	
	__webpack_require__(128);
	
	__webpack_require__(129);
	
	__webpack_require__(130);
	
	__webpack_require__(131);
	
	__webpack_require__(132);
	
	__webpack_require__(133);
	
	__webpack_require__(134);
	
	__webpack_require__(135);
	
	__webpack_require__(136);
	
	__webpack_require__(137);
	
	__webpack_require__(138);
	
	__webpack_require__(139);
	
	__webpack_require__(140);
	
	__webpack_require__(141);
	
	__webpack_require__(143);
	
	__webpack_require__(145);
	
	__webpack_require__(146);
	
	__webpack_require__(147);
	
	__webpack_require__(148);
	
	__webpack_require__(149);
	
	__webpack_require__(150);
	
	__webpack_require__(151);
	
	__webpack_require__(152);
	
	__webpack_require__(153);
	
	__webpack_require__(154);
	
	__webpack_require__(155);
	
	__webpack_require__(156);
	
	__webpack_require__(157);
	
	__webpack_require__(88);
	
	__webpack_require__(158);
	
	__webpack_require__(159);
	
	__webpack_require__(161);
	
	__webpack_require__(162);
	
	__webpack_require__(163);
	
	__webpack_require__(164);
	
	__webpack_require__(165);
	
	__webpack_require__(166);
	
	__webpack_require__(167);
	
	__webpack_require__(169);
	
	__webpack_require__(170);
	
	__webpack_require__(171);
	
	__webpack_require__(173);
	
	__webpack_require__(174);
	
	__webpack_require__(175);
	
	var _viewportColumns = __webpack_require__(176);
	
	var _viewportColumns2 = _interopRequireDefault(_viewportColumns);
	
	var _viewportRows = __webpack_require__(177);
	
	var _viewportRows2 = _interopRequireDefault(_viewportRows);
	
	var _coords = __webpack_require__(56);
	
	var _coords2 = _interopRequireDefault(_coords);
	
	var _range = __webpack_require__(178);
	
	var _range2 = _interopRequireDefault(_range);
	
	var _column = __webpack_require__(179);
	
	var _column2 = _interopRequireDefault(_column);
	
	var _row = __webpack_require__(180);
	
	var _row2 = _interopRequireDefault(_row);
	
	var _debug = __webpack_require__(229);
	
	var _debug2 = _interopRequireDefault(_debug);
	
	var _left = __webpack_require__(230);
	
	var _left2 = _interopRequireDefault(_left);
	
	var _top = __webpack_require__(231);
	
	var _top2 = _interopRequireDefault(_top);
	
	var _topLeftCorner = __webpack_require__(232);
	
	var _topLeftCorner2 = _interopRequireDefault(_topLeftCorner);
	
	var _border = __webpack_require__(189);
	
	var _border2 = _interopRequireDefault(_border);
	
	var _core = __webpack_require__(181);
	
	var _core2 = _interopRequireDefault(_core);
	
	var _event = __webpack_require__(182);
	
	var _event2 = _interopRequireDefault(_event);
	
	var _overlays = __webpack_require__(183);
	
	var _overlays2 = _interopRequireDefault(_overlays);
	
	var _scroll = __webpack_require__(184);
	
	var _scroll2 = _interopRequireDefault(_scroll);
	
	var _selection = __webpack_require__(233);
	
	var _selection2 = _interopRequireDefault(_selection);
	
	var _settings = __webpack_require__(185);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _table = __webpack_require__(186);
	
	var _table2 = _interopRequireDefault(_table);
	
	var _tableRenderer = __webpack_require__(187);
	
	var _tableRenderer2 = _interopRequireDefault(_tableRenderer);
	
	var _viewport = __webpack_require__(188);
	
	var _viewport2 = _interopRequireDefault(_viewport);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.ViewportColumnsCalculator = _viewportColumns2.default;
	exports.ViewportRowsCalculator = _viewportRows2.default;
	exports.CellCoords = _coords2.default;
	exports.CellRange = _range2.default;
	exports.ColumnFilter = _column2.default;
	exports.RowFilter = _row2.default;
	exports.DebugOverlay = _debug2.default;
	exports.LeftOverlay = _left2.default;
	exports.TopOverlay = _top2.default;
	exports.TopLeftCornerOverlay = _topLeftCorner2.default;
	exports.Border = _border2.default;
	exports.default = _core2.default;
	exports.Core = _core2.default;
	exports.Event = _event2.default;
	exports.Overlays = _overlays2.default;
	exports.Scroll = _scroll2.default;
	exports.Selection = _selection2.default;
	exports.Settings = _settings2.default;
	exports.Table = _table2.default;
	exports.TableRenderer = _tableRenderer2.default;
	exports.Viewport = _viewport2.default;
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.getListenersCounter = getListenersCounter;
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _feature = __webpack_require__(40);
	
	var _event = __webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Counter which tracks unregistered listeners (useful for detecting memory leaks).
	 *
	 * @type {Number}
	 */
	var listenersCounter = 0;
	
	/**
	 * Event DOM manager for internal use in Handsontable.
	 *
	 * @class EventManager
	 * @util
	 */
	
	var EventManager = function () {
	  /**
	   * @param {Object} [context=null]
	   * @private
	   */
	  function EventManager() {
	    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	    _classCallCheck(this, EventManager);
	
	    this.context = context || this;
	
	    if (!this.context.eventListeners) {
	      this.context.eventListeners = [];
	    }
	  }
	
	  /**
	   * Register specified listener (`eventName`) to the element.
	   *
	   * @param {Element} element Target element.
	   * @param {String} eventName Event name.
	   * @param {Function} callback Function which will be called after event occur.
	   * @returns {Function} Returns function which you can easily call to remove that event
	   */
	
	
	  _createClass(EventManager, [{
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, callback) {
	      var _this = this;
	
	      var context = this.context;
	
	      function callbackProxy(event) {
	        callback.call(this, extendEvent(context, event));
	      }
	
	      this.context.eventListeners.push({
	        element: element,
	        event: eventName,
	        callback: callback,
	        callbackProxy: callbackProxy
	      });
	
	      if (window.addEventListener) {
	        element.addEventListener(eventName, callbackProxy, false);
	      } else {
	        element.attachEvent('on' + eventName, callbackProxy);
	      }
	
	      listenersCounter += 1;
	
	      return function () {
	        _this.removeEventListener(element, eventName, callback);
	      };
	    }
	
	    /**
	     * Remove the event listener previously registered.
	     *
	     * @param {Element} element Target element.
	     * @param {String} eventName Event name.
	     * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.
	     */
	
	  }, {
	    key: 'removeEventListener',
	    value: function removeEventListener(element, eventName, callback) {
	      var len = this.context.eventListeners.length;
	      var tmpEvent = void 0;
	
	      while (len) {
	        len -= 1;
	        tmpEvent = this.context.eventListeners[len];
	
	        if (tmpEvent.event === eventName && tmpEvent.element === element) {
	          if (callback && callback !== tmpEvent.callback) {
	            /* eslint-disable no-continue */
	            continue;
	          }
	          this.context.eventListeners.splice(len, 1);
	
	          if (tmpEvent.element.removeEventListener) {
	            tmpEvent.element.removeEventListener(tmpEvent.event, tmpEvent.callbackProxy, false);
	          } else {
	            tmpEvent.element.detachEvent('on' + tmpEvent.event, tmpEvent.callbackProxy);
	          }
	          listenersCounter -= 1;
	        }
	      }
	    }
	
	    /**
	     * Clear all previously registered events.
	     *
	     * @private
	     * @since 0.15.0-beta3
	     */
	
	  }, {
	    key: 'clearEvents',
	    value: function clearEvents() {
	      if (!this.context) {
	        return;
	      }
	      var len = this.context.eventListeners.length;
	
	      while (len) {
	        len -= 1;
	        var event = this.context.eventListeners[len];
	
	        if (event) {
	          this.removeEventListener(event.element, event.event, event.callback);
	        }
	      }
	    }
	
	    /**
	     * Clear all previously registered events.
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.clearEvents();
	    }
	
	    /**
	     * Destroy instance of EventManager.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.clearEvents();
	      this.context = null;
	    }
	
	    /**
	     * Trigger event at the specified target element.
	     *
	     * @param {Element} element Target element.
	     * @param {String} eventName Event name.
	     */
	
	  }, {
	    key: 'fireEvent',
	    value: function fireEvent(element, eventName) {
	      var options = {
	        bubbles: true,
	        cancelable: eventName !== 'mousemove',
	        view: window,
	        detail: 0,
	        screenX: 0,
	        screenY: 0,
	        clientX: 1,
	        clientY: 1,
	        ctrlKey: false,
	        altKey: false,
	        shiftKey: false,
	        metaKey: false,
	        button: 0,
	        relatedTarget: undefined
	      };
	      var event = void 0;
	
	      if (document.createEvent) {
	        event = document.createEvent('MouseEvents');
	        event.initMouseEvent(eventName, options.bubbles, options.cancelable, options.view, options.detail, options.screenX, options.screenY, options.clientX, options.clientY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, options.relatedTarget || document.body.parentNode);
	      } else {
	        event = document.createEventObject();
	      }
	
	      if (element.dispatchEvent) {
	        element.dispatchEvent(event);
	      } else {
	        element.fireEvent('on' + eventName, event);
	      }
	    }
	  }]);
	
	  return EventManager;
	}();
	
	/**
	 * @param {Object} context
	 * @param {Event} event
	 * @private
	 * @returns {*}
	 */
	
	
	function extendEvent(context, event) {
	  var componentName = 'HOT-TABLE';
	  var isHotTableSpotted = void 0;
	  var fromElement = void 0;
	  var realTarget = void 0;
	  var target = void 0;
	  var len = void 0;
	
	  event.isTargetWebComponent = false;
	  event.realTarget = event.target;
	
	  var nativeStopImmediatePropagation = event.stopImmediatePropagation;
	
	  event.stopImmediatePropagation = function () {
	    nativeStopImmediatePropagation.apply(this);
	    (0, _event.stopImmediatePropagation)(this);
	  };
	
	  if (!EventManager.isHotTableEnv) {
	    return event;
	  }
	  // eslint-disable-next-line no-param-reassign
	  event = (0, _element.polymerWrap)(event);
	  len = event.path ? event.path.length : 0;
	
	  while (len) {
	    len -= 1;
	
	    if (event.path[len].nodeName === componentName) {
	      isHotTableSpotted = true;
	    } else if (isHotTableSpotted && event.path[len].shadowRoot) {
	      target = event.path[len];
	
	      break;
	    }
	    if (len === 0 && !target) {
	      target = event.path[len];
	    }
	  }
	  if (!target) {
	    target = event.target;
	  }
	  event.isTargetWebComponent = true;
	
	  if ((0, _feature.isWebComponentSupportedNatively)()) {
	    event.realTarget = event.srcElement || event.toElement;
	  } else if ((0, _object.hasOwnProperty)(context, 'hot') || context.isHotTableEnv || context.wtTable) {
	    // Polymer doesn't support `event.target` property properly we must emulate it ourselves
	    if ((0, _object.hasOwnProperty)(context, 'hot')) {
	      // Custom element
	      fromElement = context.hot ? context.hot.view.wt.wtTable.TABLE : null;
	    } else if (context.isHotTableEnv) {
	      // Handsontable.Core
	      fromElement = context.view.activeWt.wtTable.TABLE.parentNode.parentNode;
	    } else if (context.wtTable) {
	      // Walkontable
	      fromElement = context.wtTable.TABLE.parentNode.parentNode;
	    }
	    realTarget = (0, _element.closest)(event.target, [componentName], fromElement);
	
	    if (realTarget) {
	      event.realTarget = fromElement.querySelector(componentName) || event.target;
	    } else {
	      event.realTarget = event.target;
	    }
	  }
	
	  Object.defineProperty(event, 'target', {
	    get: function get() {
	      return (0, _element.polymerWrap)(target);
	    },
	
	    enumerable: true,
	    configurable: true
	  });
	
	  return event;
	}
	
	exports.default = EventManager;
	function getListenersCounter() {
	  return listenersCounter;
	}
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.isNumeric = isNumeric;
	exports.rangeEach = rangeEach;
	exports.rangeEachReverse = rangeEachReverse;
	exports.valueAccordingPercent = valueAccordingPercent;
	/**
	 * Checks if value of n is a numeric one
	 * http://jsperf.com/isnan-vs-isnumeric/4
	 * @param n
	 * @returns {boolean}
	 */
	function isNumeric(n) {
	  /* eslint-disable */
	  var t = typeof n === 'undefined' ? 'undefined' : _typeof(n);
	
	  return t == 'number' ? !isNaN(n) && isFinite(n) : t == 'string' ? !n.length ? false : n.length == 1 ? /\d/.test(n) : /^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(n) : t == 'object' ? !!n && typeof n.valueOf() == 'number' && !(n instanceof Date) : false;
	}
	
	/**
	 * A specialized version of `.forEach` defined by ranges.
	 *
	 * @param {Number} rangeFrom The number from start iterate.
	 * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 */
	function rangeEach(rangeFrom, rangeTo, iteratee) {
	  var index = -1;
	
	  if (typeof rangeTo === 'function') {
	    iteratee = rangeTo;
	    rangeTo = rangeFrom;
	  } else {
	    index = rangeFrom - 1;
	  }
	  while (++index <= rangeTo) {
	    if (iteratee(index) === false) {
	      break;
	    }
	  }
	}
	
	/**
	 * A specialized version of `.forEach` defined by ranges iterable in reverse order.
	 *
	 * @param {Number} rangeFrom The number from start iterate.
	 * @param {Number|Function} rangeTo The number where finish iterate or function as a iteratee.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 */
	function rangeEachReverse(rangeFrom, rangeTo, iteratee) {
	  var index = rangeFrom + 1;
	
	  if (typeof rangeTo === 'function') {
	    iteratee = rangeTo;
	    rangeTo = 0;
	  }
	  while (--index >= rangeTo) {
	    if (iteratee(index) === false) {
	      break;
	    }
	  }
	}
	
	/**
	 * Calculate value from percent.
	 *
	 * @param {Number} value Base value from percent will be calculated.
	 * @param {String|Number} percent Can be Number or String (eq. `'33%'`).
	 * @returns {Number}
	 */
	function valueAccordingPercent(value, percent) {
	  percent = parseInt(percent.toString().replace('%', ''), 10);
	  percent = parseInt(value * percent / 100, 10);
	
	  return percent;
	}
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	/**
	 * Constants for parts of translation.
	 */
	
	var CONTEXT_MENU_ITEMS_NAMESPACE = exports.CONTEXT_MENU_ITEMS_NAMESPACE = 'ContextMenu:items';
	var CONTEXTMENU_ITEMS_ROW_ABOVE = exports.CONTEXTMENU_ITEMS_ROW_ABOVE = CONTEXT_MENU_ITEMS_NAMESPACE + '.insertRowAbove';
	var CONTEXTMENU_ITEMS_ROW_BELOW = exports.CONTEXTMENU_ITEMS_ROW_BELOW = CONTEXT_MENU_ITEMS_NAMESPACE + '.insertRowBelow';
	var CONTEXTMENU_ITEMS_INSERT_LEFT = exports.CONTEXTMENU_ITEMS_INSERT_LEFT = CONTEXT_MENU_ITEMS_NAMESPACE + '.insertColumnOnTheLeft';
	var CONTEXTMENU_ITEMS_INSERT_RIGHT = exports.CONTEXTMENU_ITEMS_INSERT_RIGHT = CONTEXT_MENU_ITEMS_NAMESPACE + '.insertColumnOnTheRight';
	var CONTEXTMENU_ITEMS_REMOVE_ROW = exports.CONTEXTMENU_ITEMS_REMOVE_ROW = CONTEXT_MENU_ITEMS_NAMESPACE + '.removeRow';
	var CONTEXTMENU_ITEMS_REMOVE_COLUMN = exports.CONTEXTMENU_ITEMS_REMOVE_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.removeColumn';
	var CONTEXTMENU_ITEMS_UNDO = exports.CONTEXTMENU_ITEMS_UNDO = CONTEXT_MENU_ITEMS_NAMESPACE + '.undo';
	var CONTEXTMENU_ITEMS_REDO = exports.CONTEXTMENU_ITEMS_REDO = CONTEXT_MENU_ITEMS_NAMESPACE + '.redo';
	var CONTEXTMENU_ITEMS_READ_ONLY = exports.CONTEXTMENU_ITEMS_READ_ONLY = CONTEXT_MENU_ITEMS_NAMESPACE + '.readOnly';
	var CONTEXTMENU_ITEMS_CLEAR_COLUMN = exports.CONTEXTMENU_ITEMS_CLEAR_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.clearColumn';
	
	var CONTEXTMENU_ITEMS_COPY = exports.CONTEXTMENU_ITEMS_COPY = CONTEXT_MENU_ITEMS_NAMESPACE + '.copy';
	var CONTEXTMENU_ITEMS_CUT = exports.CONTEXTMENU_ITEMS_CUT = CONTEXT_MENU_ITEMS_NAMESPACE + '.cut';
	
	var CONTEXTMENU_ITEMS_FREEZE_COLUMN = exports.CONTEXTMENU_ITEMS_FREEZE_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.freezeColumn';
	var CONTEXTMENU_ITEMS_UNFREEZE_COLUMN = exports.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.unfreezeColumn';
	
	var CONTEXTMENU_ITEMS_MERGE_CELLS = exports.CONTEXTMENU_ITEMS_MERGE_CELLS = CONTEXT_MENU_ITEMS_NAMESPACE + '.mergeCells';
	var CONTEXTMENU_ITEMS_UNMERGE_CELLS = exports.CONTEXTMENU_ITEMS_UNMERGE_CELLS = CONTEXT_MENU_ITEMS_NAMESPACE + '.unmergeCells';
	
	var CONTEXTMENU_ITEMS_ADD_COMMENT = exports.CONTEXTMENU_ITEMS_ADD_COMMENT = CONTEXT_MENU_ITEMS_NAMESPACE + '.addComment';
	var CONTEXTMENU_ITEMS_EDIT_COMMENT = exports.CONTEXTMENU_ITEMS_EDIT_COMMENT = CONTEXT_MENU_ITEMS_NAMESPACE + '.editComment';
	var CONTEXTMENU_ITEMS_REMOVE_COMMENT = exports.CONTEXTMENU_ITEMS_REMOVE_COMMENT = CONTEXT_MENU_ITEMS_NAMESPACE + '.removeComment';
	var CONTEXTMENU_ITEMS_READ_ONLY_COMMENT = exports.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT = CONTEXT_MENU_ITEMS_NAMESPACE + '.readOnlyComment';
	
	var CONTEXTMENU_ITEMS_ALIGNMENT = exports.CONTEXTMENU_ITEMS_ALIGNMENT = CONTEXT_MENU_ITEMS_NAMESPACE + '.align';
	var CONTEXTMENU_ITEMS_ALIGNMENT_LEFT = exports.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.left';
	var CONTEXTMENU_ITEMS_ALIGNMENT_CENTER = exports.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.center';
	var CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT = exports.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.right';
	var CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY = exports.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.justify';
	var CONTEXTMENU_ITEMS_ALIGNMENT_TOP = exports.CONTEXTMENU_ITEMS_ALIGNMENT_TOP = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.top';
	var CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE = exports.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.middle';
	var CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM = exports.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM = CONTEXT_MENU_ITEMS_NAMESPACE + '.align.bottom';
	
	var CONTEXTMENU_ITEMS_BORDERS = exports.CONTEXTMENU_ITEMS_BORDERS = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders';
	var CONTEXTMENU_ITEMS_BORDERS_TOP = exports.CONTEXTMENU_ITEMS_BORDERS_TOP = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders.top';
	var CONTEXTMENU_ITEMS_BORDERS_RIGHT = exports.CONTEXTMENU_ITEMS_BORDERS_RIGHT = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders.right';
	var CONTEXTMENU_ITEMS_BORDERS_BOTTOM = exports.CONTEXTMENU_ITEMS_BORDERS_BOTTOM = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders.bottom';
	var CONTEXTMENU_ITEMS_BORDERS_LEFT = exports.CONTEXTMENU_ITEMS_BORDERS_LEFT = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders.left';
	var CONTEXTMENU_ITEMS_REMOVE_BORDERS = exports.CONTEXTMENU_ITEMS_REMOVE_BORDERS = CONTEXT_MENU_ITEMS_NAMESPACE + '.borders.remove';
	
	var CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD = exports.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD = CONTEXT_MENU_ITEMS_NAMESPACE + '.nestedHeaders.insertChildRow';
	var CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD = exports.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD = CONTEXT_MENU_ITEMS_NAMESPACE + '.nestedHeaders.detachFromParent';
	
	var CONTEXTMENU_ITEMS_HIDE_COLUMN = exports.CONTEXTMENU_ITEMS_HIDE_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.hideColumn';
	var CONTEXTMENU_ITEMS_SHOW_COLUMN = exports.CONTEXTMENU_ITEMS_SHOW_COLUMN = CONTEXT_MENU_ITEMS_NAMESPACE + '.showColumn';
	
	var CONTEXTMENU_ITEMS_HIDE_ROW = exports.CONTEXTMENU_ITEMS_HIDE_ROW = CONTEXT_MENU_ITEMS_NAMESPACE + '.hideRow';
	var CONTEXTMENU_ITEMS_SHOW_ROW = exports.CONTEXTMENU_ITEMS_SHOW_ROW = CONTEXT_MENU_ITEMS_NAMESPACE + '.showRow';
	
	var FILTERS_NAMESPACE = exports.FILTERS_NAMESPACE = 'Filters:';
	var FILTERS_CONDITIONS_NAMESPACE = exports.FILTERS_CONDITIONS_NAMESPACE = FILTERS_NAMESPACE + 'conditions';
	var FILTERS_CONDITIONS_NONE = exports.FILTERS_CONDITIONS_NONE = FILTERS_CONDITIONS_NAMESPACE + '.none';
	var FILTERS_CONDITIONS_EMPTY = exports.FILTERS_CONDITIONS_EMPTY = FILTERS_CONDITIONS_NAMESPACE + '.isEmpty';
	var FILTERS_CONDITIONS_NOT_EMPTY = exports.FILTERS_CONDITIONS_NOT_EMPTY = FILTERS_CONDITIONS_NAMESPACE + '.isNotEmpty';
	var FILTERS_CONDITIONS_EQUAL = exports.FILTERS_CONDITIONS_EQUAL = FILTERS_CONDITIONS_NAMESPACE + '.isEqualTo';
	var FILTERS_CONDITIONS_NOT_EQUAL = exports.FILTERS_CONDITIONS_NOT_EQUAL = FILTERS_CONDITIONS_NAMESPACE + '.isNotEqualTo';
	var FILTERS_CONDITIONS_BEGINS_WITH = exports.FILTERS_CONDITIONS_BEGINS_WITH = FILTERS_CONDITIONS_NAMESPACE + '.beginsWith';
	var FILTERS_CONDITIONS_ENDS_WITH = exports.FILTERS_CONDITIONS_ENDS_WITH = FILTERS_CONDITIONS_NAMESPACE + '.endsWith';
	var FILTERS_CONDITIONS_CONTAINS = exports.FILTERS_CONDITIONS_CONTAINS = FILTERS_CONDITIONS_NAMESPACE + '.contains';
	var FILTERS_CONDITIONS_NOT_CONTAIN = exports.FILTERS_CONDITIONS_NOT_CONTAIN = FILTERS_CONDITIONS_NAMESPACE + '.doesNotContain';
	var FILTERS_CONDITIONS_BY_VALUE = exports.FILTERS_CONDITIONS_BY_VALUE = FILTERS_CONDITIONS_NAMESPACE + '.byValue';
	var FILTERS_CONDITIONS_GREATER_THAN = exports.FILTERS_CONDITIONS_GREATER_THAN = FILTERS_CONDITIONS_NAMESPACE + '.greaterThan';
	var FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL = exports.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL = FILTERS_CONDITIONS_NAMESPACE + '.greaterThanOrEqualTo';
	var FILTERS_CONDITIONS_LESS_THAN = exports.FILTERS_CONDITIONS_LESS_THAN = FILTERS_CONDITIONS_NAMESPACE + '.lessThan';
	var FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL = exports.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL = FILTERS_CONDITIONS_NAMESPACE + '.lessThanOrEqualTo';
	var FILTERS_CONDITIONS_BETWEEN = exports.FILTERS_CONDITIONS_BETWEEN = FILTERS_CONDITIONS_NAMESPACE + '.isBetween';
	var FILTERS_CONDITIONS_NOT_BETWEEN = exports.FILTERS_CONDITIONS_NOT_BETWEEN = FILTERS_CONDITIONS_NAMESPACE + '.isNotBetween';
	var FILTERS_CONDITIONS_AFTER = exports.FILTERS_CONDITIONS_AFTER = FILTERS_CONDITIONS_NAMESPACE + '.after';
	var FILTERS_CONDITIONS_BEFORE = exports.FILTERS_CONDITIONS_BEFORE = FILTERS_CONDITIONS_NAMESPACE + '.before';
	var FILTERS_CONDITIONS_TODAY = exports.FILTERS_CONDITIONS_TODAY = FILTERS_CONDITIONS_NAMESPACE + '.today';
	var FILTERS_CONDITIONS_TOMORROW = exports.FILTERS_CONDITIONS_TOMORROW = FILTERS_CONDITIONS_NAMESPACE + '.tomorrow';
	var FILTERS_CONDITIONS_YESTERDAY = exports.FILTERS_CONDITIONS_YESTERDAY = FILTERS_CONDITIONS_NAMESPACE + '.yesterday';
	
	var FILTERS_DIVS_FILTER_BY_CONDITION = exports.FILTERS_DIVS_FILTER_BY_CONDITION = FILTERS_NAMESPACE + 'labels.filterByCondition';
	var FILTERS_DIVS_FILTER_BY_VALUE = exports.FILTERS_DIVS_FILTER_BY_VALUE = FILTERS_NAMESPACE + 'labels.filterByValue';
	
	var FILTERS_LABELS_CONJUNCTION = exports.FILTERS_LABELS_CONJUNCTION = FILTERS_NAMESPACE + 'labels.conjunction';
	var FILTERS_LABELS_DISJUNCTION = exports.FILTERS_LABELS_DISJUNCTION = FILTERS_NAMESPACE + 'labels.disjunction';
	
	var FILTERS_VALUES_BLANK_CELLS = exports.FILTERS_VALUES_BLANK_CELLS = FILTERS_NAMESPACE + 'values.blankCells';
	
	var FILTERS_BUTTONS_SELECT_ALL = exports.FILTERS_BUTTONS_SELECT_ALL = FILTERS_NAMESPACE + 'buttons.selectAll';
	var FILTERS_BUTTONS_CLEAR = exports.FILTERS_BUTTONS_CLEAR = FILTERS_NAMESPACE + 'buttons.clear';
	var FILTERS_BUTTONS_OK = exports.FILTERS_BUTTONS_OK = FILTERS_NAMESPACE + 'buttons.ok';
	var FILTERS_BUTTONS_CANCEL = exports.FILTERS_BUTTONS_CANCEL = FILTERS_NAMESPACE + 'buttons.cancel';
	
	var FILTERS_BUTTONS_PLACEHOLDER_SEARCH = exports.FILTERS_BUTTONS_PLACEHOLDER_SEARCH = FILTERS_NAMESPACE + 'buttons.placeholder.search';
	var FILTERS_BUTTONS_PLACEHOLDER_VALUE = exports.FILTERS_BUTTONS_PLACEHOLDER_VALUE = FILTERS_NAMESPACE + 'buttons.placeholder.value';
	var FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE = exports.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE = FILTERS_NAMESPACE + 'buttons.placeholder.secondValue';
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getPluginName = exports.getRegistredPluginNames = exports.getPlugin = exports.registerPlugin = undefined;
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _object = __webpack_require__(1);
	
	var _string = __webpack_require__(33);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var registeredPlugins = new WeakMap();
	
	/**
	 * Registers plugin under given name
	 *
	 * @param {String} pluginName
	 * @param {Function} PluginClass
	 */
	/**
	 * Utility to register plugins and common namespace for keeping reference to all plugins classes
	 */
	function registerPlugin(pluginName, PluginClass) {
	  var correctedPluginName = (0, _string.toUpperCaseFirst)(pluginName);
	
	  _pluginHooks2.default.getSingleton().add('construct', function () {
	    if (!registeredPlugins.has(this)) {
	      registeredPlugins.set(this, {});
	    }
	
	    var holder = registeredPlugins.get(this);
	
	    if (!holder[correctedPluginName]) {
	      holder[correctedPluginName] = new PluginClass(this);
	    }
	  });
	  _pluginHooks2.default.getSingleton().add('afterDestroy', function () {
	    if (registeredPlugins.has(this)) {
	      var pluginsHolder = registeredPlugins.get(this);
	
	      (0, _object.objectEach)(pluginsHolder, function (plugin) {
	        return plugin.destroy();
	      });
	      registeredPlugins.delete(this);
	    }
	  });
	}
	
	/**
	 * @param {Object} instance
	 * @param {String|Function} pluginName
	 * @returns {Function} pluginClass Returns plugin instance if exists or `undefined` if not exists.
	 */
	function getPlugin(instance, pluginName) {
	  if (typeof pluginName !== 'string') {
	    throw Error('Only strings can be passed as "plugin" parameter');
	  }
	  var _pluginName = (0, _string.toUpperCaseFirst)(pluginName);
	
	  if (!registeredPlugins.has(instance) || !registeredPlugins.get(instance)[_pluginName]) {
	    return void 0;
	  }
	
	  return registeredPlugins.get(instance)[_pluginName];
	}
	
	/**
	 * Get all registred plugins names for concrete Handsontable instance.
	 *
	 * @param {Object} hotInstance
	 * @returns {Array}
	 */
	function getRegistredPluginNames(hotInstance) {
	  return registeredPlugins.has(hotInstance) ? Object.keys(registeredPlugins.get(hotInstance)) : [];
	}
	
	/**
	 * Get plugin name.
	 *
	 * @param {Object} hotInstance
	 * @param {Object} plugin
	 * @returns {String|null}
	 */
	function getPluginName(hotInstance, plugin) {
	  var pluginName = null;
	
	  if (registeredPlugins.has(hotInstance)) {
	    (0, _object.objectEach)(registeredPlugins.get(hotInstance), function (pluginInstance, name) {
	      if (pluginInstance === plugin) {
	        pluginName = name;
	      }
	    });
	  }
	
	  return pluginName;
	}
	
	exports.registerPlugin = registerPlugin;
	exports.getPlugin = getPlugin;
	exports.getRegistredPluginNames = getRegistredPluginNames;
	exports.getPluginName = getPluginName;
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports) {
	
	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _recordTranslator = __webpack_require__(195);
	
	var _plugins = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var privatePool = new WeakMap();
	var initializedPlugins = null;
	
	/**
	 * @util
	 */
	
	var BasePlugin = function () {
	  /**
	   * @param {Object} hotInstance Handsontable instance.
	   */
	  function BasePlugin(hotInstance) {
	    var _this = this;
	
	    _classCallCheck(this, BasePlugin);
	
	    /**
	     * Handsontable instance.
	     *
	     * @type {Core}
	     */
	    (0, _object.defineGetter)(this, 'hot', hotInstance, {
	      writable: false
	    });
	    (0, _object.defineGetter)(this, 't', (0, _recordTranslator.getTranslator)(hotInstance), {
	      writable: false
	    });
	
	    privatePool.set(this, { hooks: {} });
	    initializedPlugins = null;
	
	    this.pluginName = null;
	    this.pluginsInitializedCallbacks = [];
	    this.isPluginsReady = false;
	    this.enabled = false;
	    this.initialized = false;
	
	    this.hot.addHook('afterPluginsInitialized', function () {
	      return _this.onAfterPluginsInitialized();
	    });
	    this.hot.addHook('afterUpdateSettings', function () {
	      return _this.onUpdateSettings();
	    });
	    this.hot.addHook('beforeInit', function () {
	      return _this.init();
	    });
	  }
	
	  _createClass(BasePlugin, [{
	    key: 'init',
	    value: function init() {
	      this.pluginName = (0, _plugins.getPluginName)(this.hot, this);
	
	      if (this.isEnabled && this.isEnabled()) {
	        this.enablePlugin();
	      }
	      if (!initializedPlugins) {
	        initializedPlugins = (0, _plugins.getRegistredPluginNames)(this.hot);
	      }
	      if (initializedPlugins.indexOf(this.pluginName) >= 0) {
	        initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);
	      }
	      if (!initializedPlugins.length) {
	        this.hot.runHooks('afterPluginsInitialized');
	      }
	      this.initialized = true;
	    }
	
	    /**
	     * Enable plugin for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      this.enabled = true;
	    }
	
	    /**
	     * Disable plugin for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      if (this.eventManager) {
	        this.eventManager.clear();
	      }
	      this.clearHooks();
	      this.enabled = false;
	    }
	
	    /**
	     * Add listener to plugin hooks system.
	     *
	     * @param {String} name
	     * @param {Function} callback
	     */
	
	  }, {
	    key: 'addHook',
	    value: function addHook(name, callback) {
	      privatePool.get(this).hooks[name] = privatePool.get(this).hooks[name] || [];
	
	      var hooks = privatePool.get(this).hooks[name];
	
	      this.hot.addHook(name, callback);
	      hooks.push(callback);
	      privatePool.get(this).hooks[name] = hooks;
	    }
	
	    /**
	     * Remove all hooks listeners by hook name.
	     *
	     * @param {String} name
	     */
	
	  }, {
	    key: 'removeHooks',
	    value: function removeHooks(name) {
	      var _this2 = this;
	
	      (0, _array.arrayEach)(privatePool.get(this).hooks[name] || [], function (callback) {
	        _this2.hot.removeHook(name, callback);
	      });
	    }
	
	    /**
	     * Clear all hooks.
	     */
	
	  }, {
	    key: 'clearHooks',
	    value: function clearHooks() {
	      var _this3 = this;
	
	      var hooks = privatePool.get(this).hooks;
	
	      (0, _object.objectEach)(hooks, function (callbacks, name) {
	        return _this3.removeHooks(name);
	      });
	      hooks.length = 0;
	    }
	
	    /**
	     * Register function which will be immediately called after all plugins initialized.
	     *
	     * @param {Function} callback
	     */
	
	  }, {
	    key: 'callOnPluginsReady',
	    value: function callOnPluginsReady(callback) {
	      if (this.isPluginsReady) {
	        callback();
	      } else {
	        this.pluginsInitializedCallbacks.push(callback);
	      }
	    }
	
	    /**
	     * On after plugins initialized listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterPluginsInitialized',
	    value: function onAfterPluginsInitialized() {
	      (0, _array.arrayEach)(this.pluginsInitializedCallbacks, function (callback) {
	        return callback();
	      });
	      this.pluginsInitializedCallbacks.length = 0;
	      this.isPluginsReady = true;
	    }
	
	    /**
	     * On update settings listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onUpdateSettings',
	    value: function onUpdateSettings() {
	      if (this.isEnabled) {
	        if (this.enabled && !this.isEnabled()) {
	          this.disablePlugin();
	        }
	        if (!this.enabled && this.isEnabled()) {
	          this.enablePlugin();
	        }
	        if (this.enabled && this.isEnabled()) {
	          this.updatePlugin();
	        }
	      }
	    }
	
	    /**
	     * Updates the plugin to use the latest options you have specified.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {}
	
	    /**
	     * Destroy plugin.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      var _this4 = this;
	
	      if (this.eventManager) {
	        this.eventManager.destroy();
	      }
	      this.clearHooks();
	
	      (0, _object.objectEach)(this, function (value, property) {
	        if (property !== 'hot' && property !== 't') {
	          _this4[property] = null;
	        }
	      });
	      delete this.t;
	      delete this.hot;
	    }
	  }]);
	
	  return BasePlugin;
	}();
	
	exports.default = BasePlugin;
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _templateObject = _taggedTemplateLiteral(['\n          Your license key of Handsontable Pro has expired.\u200C\u200C\u200C\u200C \n          Renew your maintenance plan at https://handsontable.com or downgrade to the previous version of the software.\n          '], ['\n          Your license key of Handsontable Pro has expired.\u200C\u200C\u200C\u200C \n          Renew your maintenance plan at https://handsontable.com or downgrade to the previous version of the software.\n          ']);
	
	exports.stringify = stringify;
	exports.isDefined = isDefined;
	exports.isUndefined = isUndefined;
	exports.isEmpty = isEmpty;
	exports.isRegExp = isRegExp;
	exports._injectProductInfo = _injectProductInfo;
	
	var _moment = __webpack_require__(57);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	/**
	 * Converts any value to string.
	 *
	 * @param {*} value
	 * @returns {String}
	 */
	function stringify(value) {
	  var result = void 0;
	
	  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
	    case 'string':
	    case 'number':
	      result = '' + value;
	      break;
	
	    case 'object':
	      result = value === null ? '' : value.toString();
	      break;
	    case 'undefined':
	      result = '';
	      break;
	    default:
	      result = value.toString();
	      break;
	  }
	
	  return result;
	}
	
	/**
	 * Checks if given variable is defined.
	 *
	 * @param {*} variable Variable to check.
	 * @returns {Boolean}
	 */
	function isDefined(variable) {
	  return typeof variable !== 'undefined';
	}
	
	/**
	 * Checks if given variable is undefined.
	 *
	 * @param {*} variable Variable to check.
	 * @returns {Boolean}
	 */
	function isUndefined(variable) {
	  return typeof variable === 'undefined';
	}
	
	/**
	 * Check if given variable is null, empty string or undefined.
	 *
	 * @param {*} variable Variable to check.
	 * @returns {Boolean}
	 */
	function isEmpty(variable) {
	  return variable === null || variable === '' || isUndefined(variable);
	}
	
	/**
	 * Check if given variable is a regular expression.
	 *
	 * @param {*} variable Variable to check.
	 * @returns {Boolean}
	 */
	function isRegExp(variable) {
	  return Object.prototype.toString.call(variable) === '[object RegExp]';
	}
	
	/* eslint-disable */
	var _m = '\x6C\x65\x6E\x67\x74\x68';
	var _hd = function _hd(v) {
	  return parseInt(v, 16);
	};
	var _pi = function _pi(v) {
	  return parseInt(v, 10);
	};
	var _ss = function _ss(v, s, l) {
	  return v['\x73\x75\x62\x73\x74\x72'](s, l);
	};
	var _cp = function _cp(v) {
	  return v['\x63\x6F\x64\x65\x50\x6F\x69\x6E\x74\x41\x74'](0) - 65;
	};
	var _norm = function _norm(v) {
	  return ('' + v).replace(/\-/g, '');
	};
	var _extractTime = function _extractTime(v) {
	  return _hd(_ss(_norm(v), _hd('12'), _cp('\x46'))) / (_hd(_ss(_norm(v), _cp('\x42'), ~~![][_m])) || 9);
	};
	var _ignored = function _ignored() {
	  return typeof location !== 'undefined' && /^([a-z0-9\-]+\.)?\x68\x61\x6E\x64\x73\x6F\x6E\x74\x61\x62\x6C\x65\x2E\x63\x6F\x6D$/i.test(location.host);
	};
	var _notified = false;
	
	function _injectProductInfo(key, element) {
	  key = _norm(key || '');
	
	  var warningMessage = '';
	  var showDomMessage = true;
	  var schemaValidity = _checkKeySchema(key);
	  var ignored = _ignored();
	  var trial = isEmpty(key) || key === 'trial';
	
	  if (trial || schemaValidity) {
	    if (schemaValidity) {
	      var releaseTime = Math.floor((0, _moment2.default)('12/09/2018', 'DD/MM/YYYY').toDate().getTime() / 8.64e7);
	      var keyGenTime = _extractTime(key);
	
	      if (keyGenTime > 45000 || keyGenTime !== parseInt(keyGenTime, 10)) {
	        warningMessage = 'The license key provided to Handsontable Pro is invalid. Make sure you pass it correctly.';
	      }
	
	      if (!warningMessage) {
	        if (releaseTime > keyGenTime + 1) {
	          warningMessage = (0, _templateLiteralTag.toSingleLine)(_templateObject);
	        }
	        showDomMessage = releaseTime > keyGenTime + 15;
	      }
	    } else {
	      warningMessage = 'Evaluation version of Handsontable Pro. Not licensed for use in a production environment.';
	    }
	  } else {
	    warningMessage = 'The license key provided to Handsontable Pro is invalid. Make sure you pass it correctly.';
	  }
	  if (ignored) {
	    warningMessage = false;
	    showDomMessage = false;
	  }
	
	  if (warningMessage && !_notified) {
	    console[trial ? 'info' : 'warn'](warningMessage);
	    _notified = true;
	  }
	  if (showDomMessage && element.parentNode) {
	    var message = document.createElement('div');
	
	    message.id = 'hot-display-license-info';
	    message.appendChild(document.createTextNode('Evaluation version of Handsontable Pro.'));
	    message.appendChild(document.createElement('br'));
	    message.appendChild(document.createTextNode('Not licensed for production use.'));
	
	    element.parentNode.insertBefore(message, element.nextSibling);
	  }
	}
	
	function _checkKeySchema(v) {
	  var z = [][_m];
	  var p = z;
	
	  if (v[_m] !== _cp('\x5A')) {
	    return false;
	  }
	
	  for (var c = '', i = '\x42\x3C\x48\x34\x50\x2B'.split(''), j = _cp(i.shift()); j; j = _cp(i.shift() || 'A')) {
	    --j < ''[_m] ? p = p | (_pi('' + _pi(_hd(c) + (_hd(_ss(v, Math.abs(j), 2)) + []).padStart(2, '0'))) % 97 || 2) >> 1 : c = _ss(v, j, !j ? 6 : i[_m] === 1 ? 9 : 8);
	  }
	
	  return p === z;
	}
	/* eslint-enable */
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store = __webpack_require__(79)('wks');
	var uid = __webpack_require__(50);
	var Symbol = __webpack_require__(15).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.stopImmediatePropagation = stopImmediatePropagation;
	exports.isImmediatePropagationStopped = isImmediatePropagationStopped;
	exports.stopPropagation = stopPropagation;
	exports.pageX = pageX;
	exports.pageY = pageY;
	exports.isRightClick = isRightClick;
	exports.isLeftClick = isLeftClick;
	
	var _element = __webpack_require__(0);
	
	/**
	 * Prevent other listeners of the same event from being called.
	 *
	 * @param {Event} event
	 */
	function stopImmediatePropagation(event) {
	  event.isImmediatePropagationEnabled = false;
	  event.cancelBubble = true;
	}
	
	/**
	 * Check if event was stopped by `stopImmediatePropagation`.
	 *
	 * @param event {Event}
	 * @returns {Boolean}
	 */
	function isImmediatePropagationStopped(event) {
	  return event.isImmediatePropagationEnabled === false;
	}
	
	/**
	 * Prevent further propagation of the current event (prevent bubbling).
	 *
	 * @param event {Event}
	 */
	function stopPropagation(event) {
	  // ie8
	  // http://msdn.microsoft.com/en-us/library/ie/ff975462(v=vs.85).aspx
	  if (typeof event.stopPropagation === 'function') {
	    event.stopPropagation();
	  } else {
	    event.cancelBubble = true;
	  }
	}
	
	/**
	 * Get horizontal coordinate of the event object relative to the whole document.
	 *
	 * @param {Event} event
	 * @returns {Number}
	 */
	function pageX(event) {
	  if (event.pageX) {
	    return event.pageX;
	  }
	
	  return event.clientX + (0, _element.getWindowScrollLeft)();
	}
	
	/**
	 * Get vertical coordinate of the event object relative to the whole document.
	 *
	 * @param {Event} event
	 * @returns {Number}
	 */
	function pageY(event) {
	  if (event.pageY) {
	    return event.pageY;
	  }
	
	  return event.clientY + (0, _element.getWindowScrollTop)();
	}
	
	/**
	 * Check if provided event was triggered by clicking the right mouse button.
	 *
	 * @param {Event} event DOM Event.
	 * @returns {Boolean}
	 */
	function isRightClick(event) {
	  return event.button === 2;
	}
	
	/**
	 * Check if provided event was triggered by clicking the left mouse button.
	 *
	 * @param {Event} event DOM Event.
	 * @returns {Boolean}
	 */
	function isLeftClick(event) {
	  return event.button === 0;
	}
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getRegisteredRenderers = exports.getRegisteredRendererNames = exports.hasRenderer = exports.getRenderer = exports.registerRenderer = undefined;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _cellDecorator = __webpack_require__(243);
	
	var _cellDecorator2 = _interopRequireDefault(_cellDecorator);
	
	var _autocompleteRenderer = __webpack_require__(244);
	
	var _autocompleteRenderer2 = _interopRequireDefault(_autocompleteRenderer);
	
	var _checkboxRenderer = __webpack_require__(245);
	
	var _checkboxRenderer2 = _interopRequireDefault(_checkboxRenderer);
	
	var _htmlRenderer = __webpack_require__(246);
	
	var _htmlRenderer2 = _interopRequireDefault(_htmlRenderer);
	
	var _numericRenderer = __webpack_require__(247);
	
	var _numericRenderer2 = _interopRequireDefault(_numericRenderer);
	
	var _passwordRenderer = __webpack_require__(249);
	
	var _passwordRenderer2 = _interopRequireDefault(_passwordRenderer);
	
	var _textRenderer = __webpack_require__(250);
	
	var _textRenderer2 = _interopRequireDefault(_textRenderer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _staticRegister = (0, _staticRegister3.default)('renderers'),
	    register = _staticRegister.register,
	    getItem = _staticRegister.getItem,
	    hasItem = _staticRegister.hasItem,
	    getNames = _staticRegister.getNames,
	    getValues = _staticRegister.getValues;
	
	register('base', _cellDecorator2.default);
	register('autocomplete', _autocompleteRenderer2.default);
	register('checkbox', _checkboxRenderer2.default);
	register('html', _htmlRenderer2.default);
	register('numeric', _numericRenderer2.default);
	register('password', _passwordRenderer2.default);
	register('text', _textRenderer2.default);
	
	/**
	 * Retrieve renderer function.
	 *
	 * @param {String} name Renderer identification.
	 * @returns {Function} Returns renderer function.
	 */
	function _getItem(name) {
	  if (typeof name === 'function') {
	    return name;
	  }
	  if (!hasItem(name)) {
	    throw Error('No registered renderer found under "' + name + '" name');
	  }
	
	  return getItem(name);
	}
	
	exports.registerRenderer = register;
	exports.getRenderer = _getItem;
	exports.hasRenderer = hasItem;
	exports.getRegisteredRendererNames = getNames;
	exports.getRegisteredRenderers = getValues;
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @description
	 * Handsontable events are the common interface that function in 2 ways: as __callbacks__ and as __hooks__.
	 *
	 * @example
	 *
	 * ```js
	 * // Using events as callbacks:
	 * ...
	 * const hot1 = new Handsontable(document.getElementById('example1'), {
	 *   afterChange: function(changes, source) {
	 *     $.ajax({
	 *       url: "save.php',
	 *       data: change
	 *     });
	 *   }
	 * });
	 * ...
	 * ```
	 *
	 * ```js
	 * // Using events as plugin hooks:
	 * ...
	 * const hot1 = new Handsontable(document.getElementById('example1'), {
	 *   myPlugin: true
	 * });
	 *
	 * const hot2 = new Handsontable(document.getElementById('example2'), {
	 *   myPlugin: false
	 * });
	 *
	 * // global hook
	 * Handsontable.hooks.add('afterChange', function() {
	 *   // Fired twice - for hot1 and hot2
	 *   if (this.getSettings().myPlugin) {
	 *     // function body - will only run for hot1
	 *   }
	 * });
	 *
	 * // local hook (has same effect as a callback)
	 * hot2.addHook('afterChange', function() {
	 *   // function body - will only run in #example2
	 * });
	 * ```
	 * ...
	 */
	
	// @TODO: Move plugin description hooks to plugin?
	var REGISTERED_HOOKS = [
	/**
	 * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.
	 *
	 * @event Hooks#afterCellMetaReset
	 */
	'afterCellMetaReset',
	
	/**
	 * Fired after one or more cells has been changed. The changes are triggered in any situation when the
	 * value is entered using an editor or changed using API (e.q setDataAtCell)
	 *
	 * __Note:__ For performance reasons, the `changes` array is null for `"loadData"` source.
	 *
	 * @event Hooks#afterChange
	 * @param {Array} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`.
	 * @param {String} [source] String that identifies source of hook call ([list of all available sources]{@link https://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 * @example
	 * ```js
	 * new Handsontable(element, {
	 *   afterChange: (changes) => {
	 *     changes.forEach(([row, prop, oldValue, newValue]) => {
	 *       // Some logic...
	 *     });
	 *   }
	 * })
	 * ```
	 */
	'afterChange',
	
	/**
	 * Fired by {@link ObserveChanges} plugin after detecting changes in the data source. This hook is fired when
	 * {@link Options#observeChanges} option is enabled.
	 *
	 * @event Hooks#afterChangesObserved
	 */
	'afterChangesObserved',
	
	/**
	 * Fired by {@link ContextMenu} after setting up the Context Menu's default options. These options are a collection
	 * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.
	 *
	 * @event Hooks#afterContextMenuDefaultOptions
	 * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
	 */
	'afterContextMenuDefaultOptions',
	
	/**
	 * Fired by {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by
	 * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up
	 * one of the menu item to by always visible.
	 *
	 * @event Hooks#beforeContextMenuSetItems
	 * @param {Object[]} menuItems An array of objects containing information about to generated Context Menu items.
	 */
	'beforeContextMenuSetItems',
	
	/**
	 * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a
	 * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}
	 * option.
	 *
	 * @pro
	 * @event Hooks#afterDropdownMenuDefaultOptions
	 * @param {Object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
	 */
	'afterDropdownMenuDefaultOptions',
	
	/**
	 * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options
	 * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set
	 * up one of the menu item to by always visible.
	 *
	 * @pro
	 * @event Hooks#beforeDropdownMenuSetItems
	 * @param {Object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.
	 */
	'beforeDropdownMenuSetItems',
	
	/**
	 * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}
	 * option is enabled.
	 *
	 * @event Hooks#afterContextMenuHide
	 * @param {Object} context The Context Menu plugin instance.
	 */
	'afterContextMenuHide',
	
	/**
	 * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}
	 * option is enabled.
	 *
	 * @event Hooks#beforeContextMenuShow
	 * @param {Object} context The Context Menu instance.
	 */
	'beforeContextMenuShow',
	
	/**
	 * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}
	 * option is enabled.
	 *
	 * @event Hooks#afterContextMenuShow
	 * @param {Object} context The Context Menu plugin instance.
	 */
	'afterContextMenuShow',
	
	/**
	 * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when
	 * {@link Options#copyPaste} option is enabled.
	 *
	 * @event Hooks#afterCopyLimit
	 * @param {Number} selectedRows Count of selected copyable rows.
	 * @param {Number} selectedColumns Count of selected copyable columns.
	 * @param {Number} copyRowsLimit Current copy rows limit.
	 * @param {Number} copyColumnsLimit Current copy columns limit.
	 */
	'afterCopyLimit',
	
	/**
	 * Fired before created a new column.
	 *
	 * @event Hooks#beforeCreateCol
	 * @param {Number} index Represents the visual index of first newly created column in the data source array.
	 * @param {Number} amount Number of newly created columns in the data source array.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeCreateCol',
	
	/**
	 * Fired after created a new column.
	 *
	 * @event Hooks#afterCreateCol
	 * @param {Number} index Represents the visual index of first newly created column in the data source.
	 * @param {Number} amount Number of newly created columns in the data source.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterCreateCol',
	
	/**
	 * Fired before created a new row.
	 *
	 * @event Hooks#beforeCreateRow
	 * @param {Number} index Represents the visual index of first newly created row in the data source array.
	 * @param {Number} amount Number of newly created rows in the data source array.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeCreateRow',
	
	/**
	 * Fired after created a new row.
	 *
	 * @event Hooks#afterCreateRow
	 * @param {Number} index Represents the visual index of first newly created row in the data source array.
	 * @param {Number} amount Number of newly created rows in the data source array.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterCreateRow',
	
	/**
	 * Fired after the current cell is deselected.
	 *
	 * @event Hooks#afterDeselect
	 */
	'afterDeselect',
	
	/**
	 * Fired after destroying the Handsontable instance.
	 *
	 * @event Hooks#afterDestroy
	 */
	'afterDestroy',
	
	/**
	 * General hook which captures `keydown` events attached to the document body. These events are delegated to the
	 * hooks system and consumed by Core and internal modules (e.g plugins, editors).
	 *
	 * @event Hooks#afterDocumentKeyDown
	 * @param {Event} event A native `keydown` event object.
	 */
	'afterDocumentKeyDown',
	
	/**
	 * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.
	 *
	 * @event Hooks#afterDrawSelection
	 * @param {Number} currentRow Row index of the currently processed cell.
	 * @param {Number} currentColumn Column index of the currently cell.
	 * @param {Number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
	 * @param {Number|undefined} layerLevel Number indicating which layer of selection is currently processed.
	 * @since 0.38.1
	 * @returns {String|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.
	 */
	'afterDrawSelection',
	
	/**
	 * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.
	 *
	 * @event Hooks#beforeRemoveCellClassNames
	 * @since 0.38.1
	 * @returns {String[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
	 */
	'beforeRemoveCellClassNames',
	
	/**
	 * Fired after getting the cell settings.
	 *
	 * @event Hooks#afterGetCellMeta
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {Object} cellProperties Object containing the cell properties.
	 */
	'afterGetCellMeta',
	
	/**
	 * Fired after retrieving information about a column header and appending it to the table header.
	 *
	 * @event Hooks#afterGetColHeader
	 * @param {Number} column Visual column index.
	 * @param {HTMLTableCellElement} TH Header's TH element.
	 */
	'afterGetColHeader',
	
	/**
	 * Fired after retrieving information about a row header and appending it to the table header.
	 *
	 * @event Hooks#afterGetRowHeader
	 * @param {Number} row Visual row index.
	 * @param {HTMLTableCellElement} TH Header's TH element.
	 */
	'afterGetRowHeader',
	
	/**
	 * Fired after the Handsontable instance is initiated.
	 *
	 * @event Hooks#afterInit
	 */
	'afterInit',
	
	/**
	 * Fired after new data is loaded (by `loadData` or `updateSettings` method) into the data source array.
	 *
	 * @event Hooks#afterLoadData
	 * @param {Boolean} initialLoad flag that determines whether the data has been loaded during the initialization.
	 */
	'afterLoadData',
	
	/**
	 * Fired after a scroll event, which is identified as a momentum scroll (e.g. on an iPad).
	 *
	 * @event Hooks#afterMomentumScroll
	 */
	'afterMomentumScroll',
	
	/**
	 * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).
	 *
	 * @event Hooks#afterOnCellCornerMouseDown
	 * @param {Event} event `mousedown` event object.
	 */
	'afterOnCellCornerMouseDown',
	
	/**
	 * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).
	 *
	 * @event Hooks#afterOnCellCornerDblClick
	 * @param {Event} event `dblclick` event object.
	 */
	'afterOnCellCornerDblClick',
	
	/**
	 * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
	 * indexes are negative.
	 *
	 * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called
	 * with coordinates `{row: 0, col: -1}`.
	 *
	 * @event Hooks#afterOnCellMouseDown
	 * @param {Event} event `mousedown` event object.
	 * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
	 * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
	 */
	'afterOnCellMouseDown',
	
	/**
	 * Fired after clicking right mouse button on a cell or row/column header.
	 *
	 * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called
	 * with coordinates `{row: 0, col: -1}`.
	 *
	 * @event Hooks#afterOnCellContextMenu
	 * @since 4.1.0
	 * @param {Event} event `contextmenu` event object.
	 * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
	 * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
	 */
	'afterOnCellContextMenu',
	
	/**
	 * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was
	 * hovered, the index is negative.
	 *
	 * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called
	 * with coords `{row: 0, col: -1}`.
	 *
	 * @event Hooks#afterOnCellMouseOver
	 * @param {Event} event `mouseover` event object.
	 * @param {CellCoords} coords Hovered cell's visual coordinate object.
	 * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
	 */
	'afterOnCellMouseOver',
	
	/**
	 * Fired after leaving a cell or row/column header with the mouse cursor.
	 *
	 * @event Hooks#afterOnCellMouseOut
	 * @param {Event} event `mouseout` event object.
	 * @param {CellCoords} coords Leaved cell's visual coordinate object.
	 * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
	 */
	'afterOnCellMouseOut',
	
	/**
	 * Fired after one or more columns are removed.
	 *
	 * @event Hooks#afterRemoveCol
	 * @param {Number} index Visual index of starter column.
	 * @param {Number} amount An amount of removed columns.
	 * @param {Number[]} physicalColumns An array of physical columns removed from the data source.
	 * @param {String} [source] String that identifies source of hook call ([list of all available sources]{@link https://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterRemoveCol',
	
	/**
	 * Fired after one or more rows are removed.
	 *
	 * @event Hooks#afterRemoveRow
	 * @param {Number} index Visual index of starter row.
	 * @param {Number} amount An amount of removed rows.
	 * @param {Number[]} physicalRows An array of physical rows removed from the data source.
	 * @param {String} [source] String that identifies source of hook call ([list of all available sources]{@link https://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterRemoveRow',
	
	/**
	 * Fired after the Handsontable table is rendered.
	 *
	 * @event Hooks#afterRender
	 * @param {Boolean} isForced Is `true` if rendering was triggered by a change of settings or data; or `false` if
	 *                           rendering was triggered by scrolling or moving selection.
	 */
	'afterRender',
	
	/**
	 * Fired before starting rendering the cell.
	 *
	 * @event Hooks#beforeRenderer
	 * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {String|Number} prop Column property name or a column index, if datasource is an array of arrays.
	 * @param {*} value Value of the rendered cell.
	 * @param {Object} cellProperties Object containing the cell's properties.
	 */
	'beforeRenderer',
	
	/**
	 * Fired after finishing rendering the cell (after the renderer finishes).
	 *
	 * @event Hooks#afterRenderer
	 * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {String|Number} prop Column property name or a column index, if datasource is an array of arrays.
	 * @param {*} value Value of the rendered cell.
	 * @param {Object} cellProperties Object containing the cell's properties.
	 */
	'afterRenderer',
	
	/**
	 * Fired after the horizontal scroll event.
	 *
	 * @event Hooks#afterScrollHorizontally
	 */
	'afterScrollHorizontally',
	
	/**
	 * Fired after the vertical scroll event.
	 *
	 * @event Hooks#afterScrollVertically
	 */
	'afterScrollVertically',
	
	/**
	 * Fired after one or more cells are selected (e.g. during mouse move).
	 *
	 * @event Hooks#afterSelection
	 * @param {Number} row Selection start visual row index.
	 * @param {Number} column Selection start visual column index.
	 * @param {Number} row2 Selection end visual row index.
	 * @param {Number} column2 Selection end visual column index.
	 * @param {Object} preventScrolling Object with `value` property where its value change will be observed.
	 * @param {Number} selectionLayerLevel The number which indicates what selection layer is currently modified.
	 * @example
	 * ```js
	 * new Handsontable(element, {
	 *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
	 *     // setting if prevent scrolling after selection
	 *     preventScrolling.value = true;
	 *   }
	 * })
	 * ```
	 */
	'afterSelection',
	
	/**
	 * Fired after one or more cells are selected.
	 *
	 * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
	 *
	 * @event Hooks#afterSelectionByProp
	 * @param {Number} row Selection start visual row index.
	 * @param {String} prop Selection start data source object property name.
	 * @param {Number} row2 Selection end visual row index.
	 * @param {String} prop2 Selection end data source object property name.
	 * @param {Object} preventScrolling Object with `value` property where its value change will be observed.
	 * @param {Number} selectionLayerLevel The number which indicates what selection layer is currently modified.
	 * @example
	 * ```js
	 * new Handsontable(element, {
	 *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
	 *     // setting if prevent scrolling after selection
	 *     preventScrolling.value = true;
	 *   }
	 * })
	 * ```
	 */
	'afterSelectionByProp',
	
	/**
	 * Fired after one or more cells are selected (e.g. on mouse up).
	 *
	 * @event Hooks#afterSelectionEnd
	 * @param {Number} row Selection start visual row index.
	 * @param {Number} column Selection start visual column index.
	 * @param {Number} row2 Selection end visual row index.
	 * @param {Number} column2 Selection end visual column index.
	 * @param {Number} selectionLayerLevel The number which indicates what selection layer is currently modified.
	 */
	'afterSelectionEnd',
	
	/**
	 * Fired after one or more cells are selected (e.g. on mouse up).
	 *
	 * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
	 *
	 * @event Hooks#afterSelectionEndByProp
	 * @param {Number} row Selection start visual row index.
	 * @param {String} prop Selection start data source object property index.
	 * @param {Number} row2 Selection end visual row index.
	 * @param {String} prop2 Selection end data source object property index.
	 * @param {Number} selectionLayerLevel The number which indicates what selection layer is currently modified.
	 */
	'afterSelectionEndByProp',
	
	/**
	 * Fired after cell meta is changed.
	 *
	 * @event Hooks#afterSetCellMeta
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {String} key The updated meta key.
	 * @param {*} value The updated meta value.
	 */
	'afterSetCellMeta',
	
	/**
	 * Fired after cell meta is removed.
	 *
	 * @event Hooks#afterRemoveCellMeta
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {String} key The removed meta key.
	 * @param {*} value Value which was under removed key of cell meta.
	 */
	'afterRemoveCellMeta',
	
	/**
	 * Fired after cell data was changed.
	 *
	 * @event Hooks#afterSetDataAtCell
	 * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterSetDataAtCell',
	
	/**
	 * Fired after cell data was changed.
	 *
	 * @event Hooks#afterSetDataAtRowProp
	 * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterSetDataAtRowProp',
	
	/**
	 * Fired after calling the `updateSettings` method.
	 *
	 * @event Hooks#afterUpdateSettings
	 * @param {Object} settings New settings object.
	 */
	'afterUpdateSettings',
	
	/**
	 * @description
	 * A plugin hook executed after validator function, only if validator function is defined.
	 * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.
	 *
	 * __Returning false from the callback will mark the cell as invalid.__
	 *
	 * @event Hooks#afterValidate
	 * @param {Boolean} isValid `true` if valid, `false` if not.
	 * @param {*} value The value in question.
	 * @param {Number} row Visual row index.
	 * @param {String|Number} prop Property name / visual column index.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'afterValidate',
	
	/**
	 * Fired before successful change of language (when proper language code was set)
	 *
	 * @event Hooks#beforeLanguageChange
	 * @since 0.35.0
	 * @param {String} languageCode New language code.
	 */
	'beforeLanguageChange',
	
	/**
	 * Fired after successful change of language (when proper language code was set).
	 *
	 * @event Hooks#afterLanguageChange
	 * @since 0.35.0
	 * @param {String} languageCode New language code.
	 */
	'afterLanguageChange',
	
	/**
	 * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when
	 * {@link Options#fillHandle} option is enabled.
	 *
	 * @event Hooks#beforeAutofill
	 * @param {CellCoords} start Object containing information about first filled cell: `{row: 2, col: 0}`.
	 * @param {CellCoords} end Object containing information about last filled cell: `{row: 4, col: 1}`.
	 * @param {Array[]} data 2D array containing information about fill pattern: `[["1", "Ted"], ["1", "John"]]`.
	 */
	'beforeAutofill',
	
	/**
	 * Fired before aligning the cell contents.
	 *
	 * @event Hooks#beforeCellAlignment
	 * @param {Object} stateBefore An object with class names defining the cell alignment.
	 * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.
	 * @param {String} type Type of the alignment - either `horizontal` or `vertical`.
	 * @param {String} alignmentClass String defining the alignment class added to the cell.
	 * Possible values:
	 * * `htLeft`
	 * * `htCenter`
	 * * `htRight`
	 * * `htJustify`
	 * * `htTop`
	 * * `htMiddle`
	 * * `htBottom`
	 */
	'beforeCellAlignment',
	
	/**
	 * Fired before one or more cells is changed. Its main purpose is to alter changes silently after input and before
	 * table rendering.
	 *
	 * @event Hooks#beforeChange
	 * @param {Array[]} changes 2D array containing information about each of the edited cells.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 * @example
	 * ```js
	 * // To disregard a single change, set changes[i] to null or remove it from array using changes.splice(i, 1).
	 * new Handsontable(element, {
	 *   beforeChange: (changes, source) => {
	 *     // [[row, prop, oldVal, newVal], ...]
	 *     changes[0] = null;
	 *   }
	 * });
	 * // To alter a single change, overwrite the desired value to changes[i][3].
	 * new Handsontable(element, {
	 *   beforeChange: (changes, source) => {
	 *     // [[row, prop, oldVal, newVal], ...]
	 *     changes[0][3] = 10;
	 *   }
	 * });
	 * // To cancel all edit, return false from the callback or set array length to 0 (changes.length = 0).
	 * new Handsontable(element, {
	 *   beforeChange: (changes, source) => {
	 *     // [[row, prop, oldVal, newVal], ...]
	 *     return false;
	 *   }
	 * });
	 * ```
	 */
	'beforeChange',
	
	/**
	 * Fired right before rendering the changes.
	 *
	 * @event Hooks#beforeChangeRender
	 * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeChangeRender',
	
	/**
	 * Fired before drawing the borders.
	 *
	 * @event Hooks#beforeDrawBorders
	 * @param {Array} corners Array specifying the current selection borders.
	 * @param {String} borderClassName Specifies the border class name.
	 */
	'beforeDrawBorders',
	
	/**
	 * Fired before getting cell settings.
	 *
	 * @event Hooks#beforeGetCellMeta
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {Object} cellProperties Object containing the cell's properties.
	 */
	'beforeGetCellMeta',
	
	/**
	 * Fired before cell meta is removed.
	 *
	 * @event Hooks#beforeRemoveCellMeta
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {String} key The removed meta key.
	 * @param {*} value Value which is under removed key of cell meta.
	 */
	'beforeRemoveCellMeta',
	
	/**
	 * Fired before the Handsontable instance is initiated.
	 *
	 * @event Hooks#beforeInit
	 */
	'beforeInit',
	
	/**
	 * Fired before the Walkontable instance is initiated.
	 *
	 * @event Hooks#beforeInitWalkontable
	 * @param {Object} walkontableConfig Walkontable configuration object.
	 */
	'beforeInitWalkontable',
	
	/**
	 * Fired before keydown event is handled. It can be used to overwrite default key bindings.
	 *
	 * __Note__: To prevent default behavior you need to call `event.stopImmediatePropagation()` in your `beforeKeyDown`
	 * handler.
	 *
	 * @event Hooks#beforeKeyDown
	 * @param {Event} event Original DOM event.
	 */
	'beforeKeyDown',
	
	/**
	 * Fired after the user clicked a cell, but before all the calculations related with it.
	 *
	 * @event Hooks#beforeOnCellMouseDown
	 * @param {Event} event The `mousedown` event object.
	 * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
	 * @param {HTMLTableCellElement} TD TD element.
	 * @param {Object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This
	 *                            object allows or disallows changing the selection for the particular axies.
	 */
	'beforeOnCellMouseDown',
	
	/**
	 * Fired after the user clicked a cell, but before all the calculations related with it.
	 *
	 * @event Hooks#beforeOnCellContextMenu
	 * @since 4.1.0
	 * @param {Event} event The `contextmenu` event object.
	 * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
	 * @param {HTMLTableCellElement} TD TD element.
	 */
	'beforeOnCellContextMenu',
	
	/**
	 * Fired after the user moved cursor over a cell, but before all the calculations related with it.
	 *
	 * @event Hooks#beforeOnCellMouseOver
	 * @param {Event} event The `mouseover` event object.
	 * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.
	 * @param {HTMLTableCellElement} TD TD element.
	 * @param {Object} controller An object with keys `row`, `column` and `cells` which contains boolean values. This
	 *                            object allows or disallows changing the selection for the particular axies.
	 */
	'beforeOnCellMouseOver',
	
	/**
	 * Fired after the user moved cursor out from a cell, but before all the calculations related with it.
	 *
	 * @event Hooks#beforeOnCellMouseOut
	 * @param {Event} event The `mouseout` event object.
	 * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.
	 * @param {HTMLTableCellElement} TD TD element.
	 */
	'beforeOnCellMouseOut',
	
	/**
	 * Fired before one or more columns are about to be removed.
	 *
	 * @event Hooks#beforeRemoveCol
	 * @param {Number} index Visual index of starter column.
	 * @param {Number} amount Amount of columns to be removed.
	 * @param {Number[]} physicalColumns An array of physical columns removed from the data source.
	 * @param {String} [source] String that identifies source of hook call ([list of all available sources]{@link https://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeRemoveCol',
	
	/**
	 * Fired when one or more rows are about to be removed.
	 *
	 * @event Hooks#beforeRemoveRow
	 * @param {Number} index Visual index of starter column.
	 * @param {Number} amount Amount of columns to be removed.
	 * @param {Number[]} physicalRows An array of physical rows removed from the data source.
	 * @param {String} [source] String that identifies source of hook call ([list of all available sources]{@link https://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeRemoveRow',
	
	/**
	 * Fired before the Handsontable table is rendered.
	 *
	 * @event Hooks#beforeRender
	 * @param {Boolean} isForced If `true` rendering was triggered by a change of settings or data; or `false` if
	 *                           rendering was triggered by scrolling or moving selection.
	 */
	'beforeRender',
	
	/**
	 * Fired before setting range is started but not finished yet.
	 *
	 * @event Hooks#beforeSetRangeStartOnly
	 * @param {CellCoords} coords CellCoords instance.
	 */
	'beforeSetRangeStartOnly',
	
	/**
	 * Fired before setting range is started.
	 *
	 * @event Hooks#beforeSetRangeStart
	 * @param {CellCoords} coords CellCoords instance.
	 */
	'beforeSetRangeStart',
	
	/**
	 * Fired before setting range is ended.
	 *
	 * @event Hooks#beforeSetRangeEnd
	 * @param {CellCoords} coords CellCoords instance.
	 */
	'beforeSetRangeEnd',
	
	/**
	 * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.
	 *
	 * @event Hooks#beforeTouchScroll
	 */
	'beforeTouchScroll',
	
	/**
	 * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value
	 * of changed cell before it is applied to the validator function.
	 *
	 * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation
	 *
	 * @event Hooks#beforeValidate
	 * @param {*} value Value of the cell.
	 * @param {Number} row Visual row index.
	 * @param {String|Number} prop Property name / column index.
	 * @param {String} [source] String that identifies source of hook call
	 *                          ([list of all available sources]{@link http://docs.handsontable.com/tutorial-using-callbacks.html#page-source-definition}).
	 */
	'beforeValidate',
	
	/**
	 * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the
	 * value which is passed to the renderer without modifying the renderer itself.
	 *
	 * @event Hooks#beforeValueRender
	 * @param {*} value Cell value to render.
	 * @param {Object} cellProperties An object containing the cell properties.
	 */
	'beforeValueRender',
	
	/**
	 * Fired after Handsontable instance is constructed (using `new` operator).
	 *
	 * @event Hooks#construct
	 */
	'construct',
	
	/**
	 * Fired after Handsontable instance is initiated but before table is rendered.
	 *
	 * @event Hooks#init
	 */
	'init',
	
	/**
	 * Fired when a column index is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyCol
	 * @param {Number} column Visual column index.
	 */
	'modifyCol',
	
	/**
	 * Fired when a column index is about to be de-modified by a callback function.
	 *
	 * @event Hooks#unmodifyCol
	 * @param {Number} column Physical column index.
	 */
	'unmodifyCol',
	
	/**
	 * Fired when a physical row index is about to be de-modified by a callback function.
	 *
	 * @event Hooks#unmodifyRow
	 * @param {Number} row Physical row index.
	 */
	'unmodifyRow',
	
	/**
	 * Fired when a column header index is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyColHeader
	 * @param {Number} column Visual column header index.
	 */
	'modifyColHeader',
	
	/**
	 * Fired when a column width is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyColWidth
	 * @param {Number} width Current column width.
	 * @param {Number} column Visual column index.
	 */
	'modifyColWidth',
	
	/**
	 * Fired when a row index is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyRow
	 * @param {Number} row Visual row index.
	 */
	'modifyRow',
	
	/**
	 * Fired when a row header index is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyRowHeader
	 * @param {Number} row Visual row header index.
	 */
	'modifyRowHeader',
	
	/**
	 * Fired when a row height is about to be modified by a callback function.
	 *
	 * @event Hooks#modifyRowHeight
	 * @param {Number} height Row height.
	 * @param {Number} row Visual row index.
	 */
	'modifyRowHeight',
	
	/**
	 * Fired when a data was retrieved or modified.
	 *
	 * @event Hooks#modifyData
	 * @param {Number} row Row height.
	 * @param {Number} column Column index.
	 * @param {Object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
	 * @param {String} ioMode String which indicates for what operation hook is fired (`get` or `set`).
	 */
	'modifyData',
	
	/**
	 * Fired when a data was retrieved or modified.
	 *
	 * @event Hooks#modifyRowData
	 * @param {Number} row Physical row index.
	 */
	'modifyRowData',
	
	/**
	 * Used to modify the cell coordinates when using the `getCell` method.
	 *
	 * @event Hooks#modifyGetCellCoords
	 * @since 0.36.0
	 * @param {Number} row Visual row index.
	 * @param {Number} column Visual column index.
	 * @param {Boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,
	 *                          if the wanted cell is in the range of fixed rows, it will return a TD element
	 *                          from the `top` overlay.
	 */
	'modifyGetCellCoords',
	
	/**
	 * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage. This hook is fired when
	 * {@link Options#persistentState} option is enabled.
	 *
	 * @event Hooks#persistentStateLoad
	 * @param {String} key Key.
	 * @param {Object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).
	 */
	'persistentStateLoad',
	
	/**
	 * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.
	 * This hook is fired when {@link Options#persistentState} option is enabled.
	 *
	 * @event Hooks#persistentStateReset
	 * @param {String} [key] Key.
	 */
	'persistentStateReset',
	
	/**
	 * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage. This hook is fired when
	 * {@link Options#persistentState} option is enabled.
	 *
	 * @event Hooks#persistentStateSave
	 * @param {String} key Key.
	 * @param {Mixed} value Value to save.
	 */
	'persistentStateSave',
	
	/**
	 * Fired by {@link ColumnSorting} plugin before sorting the column. If you return `false` value then sorting
	 * will be not applied by the Handsontable (useful for server-side sorting).
	 *
	 * This hook is fired when {@link Options#columnSorting} option is enabled.
	 *
	 * @event Hooks#beforeColumnSort
	 * @param {Number} column Sorted visual column index.
	 * @param {Boolean} order Soring order where:
	 *  * `asc` means ascending order
	 *  * `desc` means descending order
	 *  * `none` means original order
	 */
	'beforeColumnSort',
	
	/**
	 * Fired by {@link ColumnSorting} plugin after sorting the column. This hook is fired when {@link Options#columnSorting}
	 * option is enabled.
	 *
	 * @event Hooks#afterColumnSort
	 * @param {Number} column Sorted visual column index.
	 * @param {String} order Soring order where:
	 *  * `'asc'` means ascending order
	 *  * `'desc'` means descending order
	 *  * `'none'` means original order
	 */
	'afterColumnSort',
	
	/**
	 * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}
	 * option is enabled.
	 *
	 * @event Hooks#modifyAutofillRange
	 * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
	 * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
	 */
	'modifyAutofillRange',
	
	/**
	 * Fired to allow modifying the copyable range with a callback function.
	 *
	 * @event Hooks#modifyCopyableRange
	 * @param {Array[]} copyableRanges Array of objects defining copyable cells.
	 */
	'modifyCopyableRange',
	
	/**
	 * Fired by {@link CopyPaste} plugin before copying the values into clipboard and before clearing values of
	 * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.
	 *
	 * @event Hooks#beforeCut
	 * @param {Array[]} data An array of arrays which contains data to cut.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                       which will be cut out.
	 * @returns {*} If returns `false` then operation of the cutting out is canceled.
	 * @example
	 * ```js
	 * // To disregard a single row, remove it from the array using data.splice(i, 1).
	 * new Handsontable(element, {
	 *   beforeCut: function(data, coords) {
	 *     // data -> [[1, 2, 3], [4, 5, 6]]
	 *     data.splice(0, 1);
	 *     // data -> [[4, 5, 6]]
	 *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
	 *   }
	 * });
	 * // To cancel a cutting action, just return `false`.
	 * new Handsontable(element, {
	 *   beforeCut: function(data, coords) {
	 *     return false;
	 *   }
	 * });
	 * ```
	 */
	'beforeCut',
	
	/**
	 * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when
	 * {@link Options#copyPaste} option is enabled.
	 *
	 * @event Hooks#afterCut
	 * @param {Array[]} data An array of arrays which contains the cutted out data.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                       which was cut out.
	 */
	'afterCut',
	
	/**
	 * Fired before values are copied into clipboard.
	 *
	 * @event Hooks#beforeCopy
	 * @param {Array[]} data An array of arrays which contains data to copied.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                         which will copied.
	 * @returns {*} If returns `false` then copying is canceled.
	 *
	 * @example
	 * ```js
	 * // To disregard a single row, remove it from array using data.splice(i, 1).
	 * ...
	 * new Handsontable(document.getElementById('example'), {
	 *   beforeCopy: (data, coords) => {
	 *     // data -> [[1, 2, 3], [4, 5, 6]]
	 *     data.splice(0, 1);
	 *     // data -> [[4, 5, 6]]
	 *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
	 *   }
	 * });
	 * ...
	 *
	 * // To cancel copying, return false from the callback.
	 * ...
	 * new Handsontable(document.getElementById('example'), {
	 *   beforeCopy: (data, coords) => {
	 *     return false;
	 *   }
	 * });
	 * ...
	 * ```
	 */
	'beforeCopy',
	
	/**
	 * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}
	 * option is enabled.
	 *
	 * @event Hooks#afterCopy
	 * @param {Array[]} data An array of arrays which contains the copied data.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                         which was copied.
	 */
	'afterCopy',
	
	/**
	 * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when
	 * {@link Options#copyPaste} option is enabled.
	 *
	 * @event Hooks#beforePaste
	 * @param {Array[]} data An array of arrays which contains data to paste.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                       that correspond to the previously selected area.
	 * @returns {*} If returns `false` then pasting is canceled.
	 * @example
	 * ```js
	 * // To disregard a single row, remove it from array using data.splice(i, 1).
	 * new Handsontable(example, {
	 *   beforePaste: (data, coords) => {
	 *     // data -> [[1, 2, 3], [4, 5, 6]]
	 *     data.splice(0, 1);
	 *     // data -> [[4, 5, 6]]
	 *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
	 *   }
	 * });
	 * // To cancel pasting, return false from the callback.
	 * new Handsontable(example, {
	 *   beforePaste: (data, coords) => {
	 *     return false;
	 *   }
	 * });
	 * ```
	 */
	'beforePaste',
	
	/**
	 * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when
	 * {@link Options#copyPaste} option is enabled.
	 *
	 * @event Hooks#afterPaste
	 * @param {Array[]} data An array of arrays which contains the pasted data.
	 * @param {Object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
	 *                       that correspond to the previously selected area.
	 */
	'afterPaste',
	
	/**
	 * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when
	 * {@link Options#manualColumnMove} option is enabled.
	 *
	 * @event Hooks#beforeColumnMove
	 * @param {Number[]} columns Array of visual column indexes to be moved.
	 * @param {Number} target Visual column index being a target for moved columns.
	 */
	'beforeColumnMove',
	
	/**
	 * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes. This hook is fired when
	 * {@link Options#manualColumnMove} option is enabled.
	 *
	 * @event Hooks#afterColumnMove
	 * @param {Number[]} columns Array of visual column indexes that were moved.
	 * @param {Number} target Visual column index being a target for moved columns.
	 */
	'afterColumnMove',
	
	/**
	 * Fired by {@link ManualRowMove} plugin before change order of the visual indexes. This hook is fired when
	 * {@link Options#manualRowMove} option is enabled.
	 *
	 * @event Hooks#beforeRowMove
	 * @param {Number[]} rows An array of visual row indexes to be moved.
	 * @param {Number} target Visual row index being a target for moved rows.
	 */
	'beforeRowMove',
	
	/**
	 * Fired by {@link ManualRowMove} plugin after change order of the visual indexes. This hook is fired when
	 * {@link Options#manualRowMove} option is enabled.
	 *
	 * @event Hooks#afterRowMove
	 * @param {Number[]} rows An array of visual row indexes that were moved.
	 * @param {Number} target Visual row index being a target for moved rows.
	 */
	'afterRowMove',
	
	/**
	 * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is
	 * fired when {@link Options#manualColumnResize} option is enabled.
	 *
	 * @event Hooks#beforeColumnResize
	 * @param {Number} currentColumn Visual index of the resized column.
	 * @param {Number} newSize Calculated new column width.
	 * @param {Boolean} isDoubleClick Flag that determines whether there was a double-click.
	 * @returns {Number} Returns a new column size or `undefined`, if column size should be calculated automatically.
	 */
	'beforeColumnResize',
	
	/**
	 * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is
	 * fired when {@link Options#manualColumnResize} option is enabled.
	 *
	 * @event Hooks#afterColumnResize
	 * @param {Number} currentColumn Visual index of the resized column.
	 * @param {Number} newSize Calculated new column width.
	 * @param {Boolean} isDoubleClick Flag that determines whether there was a double-click.
	 */
	'afterColumnResize',
	
	/**
	 * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is
	 * fired when {@link Options#manualRowResize} option is enabled.
	 *
	 * @event Hooks#beforeRowResize
	 * @param {Number} currentRow Visual index of the resized row.
	 * @param {Number} newSize Calculated new row height.
	 * @param {Boolean} isDoubleClick Flag that determines whether there was a double-click.
	 * @returns {Number} Returns the new row size or `undefined` if row size should be calculated automatically.
	 */
	'beforeRowResize',
	
	/**
	 * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is
	 * fired when {@link Options#manualRowResize} option is enabled.
	 *
	 * @event Hooks#afterRowResize
	 * @param {Number} currentRow Visual index of the resized row.
	 * @param {Number} newSize Calculated new row height.
	 * @param {Boolean} isDoubleClick Flag that determines whether there was a double-click.
	 */
	'afterRowResize',
	
	/**
	 * Fired after getting the column header renderers.
	 *
	 * @event Hooks#afterGetColumnHeaderRenderers
	 * @param {Function[]} renderers An array of the column header renderers.
	 */
	'afterGetColumnHeaderRenderers',
	
	/**
	 * Fired after getting the row header renderers.
	 *
	 * @event Hooks#afterGetRowHeaderRenderers
	 * @param {Function[]} renderers An array of the row header renderers.
	 */
	'afterGetRowHeaderRenderers',
	
	/**
	 * Fired before applying stretched column width to column.
	 *
	 * @event Hooks#beforeStretchingColumnWidth
	 * @param {Number} stretchedWidth Calculated width.
	 * @param {Number} column Visual column index.
	 * @returns {Number} Returns new width which will be applied to the column element.
	 */
	'beforeStretchingColumnWidth',
	
	/**
	 * Fired by {@link Filters} plugin before applying [filtering]{@link http://docs.handsontable.com/pro/demo-filtering.html}. This hook is fired when
	 * {@link Options#filters} option is enabled.
	 *
	 * @pro
	 * @event Hooks#beforeFilter
	 * @param {Object[]} conditionsStack An array of objects with added formulas.
	 * ```js
	 * // Example format of the conditionsStack argument:
	 * [
	 *   {
	 *     column: 2,
	 *     conditions: [
	 *       {name: 'begins_with', args: [['S']]}
	 *     ],
	 *     operation: 'conjunction'
	 *   },
	 *   {
	 *     column: 4,
	 *     conditions: [
	 *       {name: 'not_empty', args: []}
	 *     ],
	 *     operation: 'conjunction'
	 *   },
	 * ]
	 * ```
	 * @returns {Boolean} If hook returns `false` value then filtering won't be applied on the UI side (server-side filtering).
	 */
	'beforeFilter',
	
	/**
	 * Fired by {@link Filters} plugin after applying [filtering]{@link http://docs.handsontable.com/pro/demo-filtering.html}. This hook is fired when
	 * {@link Options#filters} option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterFilter
	 * @param {Object[]} conditionsStack An array of objects with added conditions.
	 * ```js
	 * // Example format of the conditionsStack argument:
	 * [
	 *   {
	 *     column: 2,
	 *     conditions: [
	 *       {name: 'begins_with', args: [['S']]}
	 *     ],
	 *     operation: 'conjunction'
	 *   },
	 *   {
	 *     column: 4,
	 *     conditions: [
	 *       {name: 'not_empty', args: []}
	 *     ],
	 *     operation: 'conjunction'
	 *   },
	 * ]
	 * ```
	 */
	'afterFilter',
	
	/**
	 * Fired while retrieving the column header height.
	 *
	 * @event Hooks#modifyColumnHeaderHeight
	 */
	'modifyColumnHeaderHeight',
	
	/**
	 * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.
	 * This hook is fired when {@link Options#undo} option is enabled.
	 *
	 * @event Hooks#beforeUndo
	 * @param {Object} action The action object. Contains information about the action being undone. The `actionType`
	 *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
	 */
	'beforeUndo',
	
	/**
	 * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.
	 * This hook is fired when {@link Options#undo} option is enabled.
	 *
	 * @event Hooks#afterUndo
	 * @param {Object} action The action object. Contains information about the action being undone. The `actionType`
	 *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
	 */
	'afterUndo',
	
	/**
	 * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.
	 * This hook is fired when {@link Options#undo} option is enabled.
	 *
	 * @event Hooks#beforeRedo
	 * @param {Object} action The action object. Contains information about the action being redone. The `actionType`
	 *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
	 */
	'beforeRedo',
	
	/**
	 * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.
	 * This hook is fired when {@link Options#undo} option is enabled.
	 *
	 * @event Hooks#afterRedo
	 * @param {Object} action The action object. Contains information about the action being redone. The `actionType`
	 *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
	 */
	'afterRedo',
	
	/**
	 * Fired while retrieving the row header width.
	 *
	 * @event Hooks#modifyRowHeaderWidth
	 * @param {Number} rowHeaderWidth Row header width.
	 */
	'modifyRowHeaderWidth',
	
	/**
	 * Fired from the `populateFromArray` method during the `autofill` process. Fired for each "autofilled" cell individually.
	 *
	 * @event Hooks#beforeAutofillInsidePopulate
	 * @param {Object} index Object containing `row` and `col` properties, defining the number of rows/columns from the initial cell of the autofill.
	 * @param {String} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
	 * @param {Array[]} input Contains an array of rows with data being used in the autofill.
	 * @param {Array} deltas The deltas array passed to the `populateFromArray` method.
	 */
	'beforeAutofillInsidePopulate',
	
	/**
	 * Fired when the start of the selection is being modified (e.g. moving the selection with the arrow keys).
	 *
	 * @event Hooks#modifyTransformStart
	 * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
	 */
	'modifyTransformStart',
	
	/**
	 * Fired when the end of the selection is being modified (e.g. moving the selection with the arrow keys).
	 *
	 * @event Hooks#modifyTransformEnd
	 * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
	 */
	'modifyTransformEnd',
	
	/**
	 * Fired after the start of the selection is being modified (e.g. moving the selection with the arrow keys).
	 *
	 * @event Hooks#afterModifyTransformStart
	 * @param {CellCoords} coords Coords of the freshly selected cell.
	 * @param {Number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
	 * @param {Number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
	 */
	'afterModifyTransformStart',
	
	/**
	 * Fired after the end of the selection is being modified (e.g. moving the selection with the arrow keys).
	 *
	 * @event Hooks#afterModifyTransformEnd
	 * @param {CellCoords} coords Visual coords of the freshly selected cell.
	 * @param {Number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
	 * @param {Number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
	 */
	'afterModifyTransformEnd',
	
	/**
	 * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.
	 *
	 * @event Hooks#afterViewportRowCalculatorOverride
	 * @param {Object} calc The row calculator.
	 */
	'afterViewportRowCalculatorOverride',
	
	/**
	 * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.
	 *
	 * @event Hooks#afterViewportColumnCalculatorOverride
	 * @param {Object} calc The row calculator.
	 */
	'afterViewportColumnCalculatorOverride',
	
	/**
	 * Fired after initializing all the plugins.
	 *
	 * @event Hooks#afterPluginsInitialized
	 */
	'afterPluginsInitialized',
	
	/**
	 * Used to skip the length cache calculation for a defined period of time.
	 *
	 * @event Hooks#skipLengthCache
	 * @param {Number} delay The delay in milliseconds.
	 */
	'skipLengthCache',
	
	/**
	 * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterTrimRow
	 * @param {Number[]} rows Physical indexes of trimmed rows.
	 */
	'afterTrimRow',
	
	/**
	 * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterUntrimRow
	 * @param {Number[]} rows Physical indexes of untrimmed rows.
	 */
	'afterUntrimRow',
	
	/**
	 * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}
	 * option is enabled.
	 *
	 * @pro
	 * @event Hooks#beforeDropdownMenuShow
	 * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
	 */
	'beforeDropdownMenuShow',
	
	/**
	 * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
	 * option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterDropdownMenuShow
	 * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
	 */
	'afterDropdownMenuShow',
	
	/**
	 * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
	 * option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterDropdownMenuHide
	 * @param {DropdownMenu} instance The DropdownMenu instance.
	 */
	'afterDropdownMenuHide',
	
	/**
	 * Fired by {@link HiddenRows} plugin to check whether the provided row index is hidden. This hook is fired when
	 * {@link Options#hiddenRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#hiddenRow
	 * @param {Number} row The visual row index in question.
	 */
	'hiddenRow',
	
	/**
	 * Fired by {@link HiddenColumns} plugin to check whether the provided column index is hidden. This hook is fired when
	 * {@link Options#hiddenColumns} option is enabled.
	 *
	 * @pro
	 * @event Hooks#hiddenColumn
	 * @param {Number} column The visual column index in question.
	 */
	'hiddenColumn',
	
	/**
	 * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when
	 * {@link Options#nestedRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#beforeAddChild
	 * @param {Object} parent The parent object.
	 * @param {Object|undefined} element The element added as a child. If `undefined`, a blank child was added.
	 * @param {Number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
	 */
	'beforeAddChild',
	
	/**
	 * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when
	 * {@link Options#nestedRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterAddChild
	 * @param {Object} parent The parent object.
	 * @param {Object|undefined} element The element added as a child. If `undefined`, a blank child was added.
	 * @param {Number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
	 */
	'afterAddChild',
	
	/**
	 * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when
	 * {@link Options#nestedRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#beforeDetachChild
	 * @param {Object} parent An object representing the parent from which the element is to be detached.
	 * @param {Object} element The detached element.
	 */
	'beforeDetachChild',
	
	/**
	 * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when
	 * {@link Options#nestedRows} option is enabled.
	 *
	 * @pro
	 * @event Hooks#afterDetachChild
	 * @param {Object} parent An object representing the parent from which the element was detached.
	 * @param {Object} element The detached element.
	 */
	'afterDetachChild',
	
	/**
	 * Fired after the editor is opened and rendered.
	 *
	 * @event Hooks#afterBeginEditing
	 * @param {Number} row Visual row index of the edited cell.
	 * @param {Number} column Visual column index of the edited cell.
	 */
	'afterBeginEditing',
	
	/**
	 * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}
	 * option is enabled.
	 *
	 * @event Hooks#beforeMergeCells
	 * @param {CellRange} cellRange Selection cell range.
	 * @param {Boolean} [auto=false] `true` if called automatically by the plugin.
	 */
	'beforeMergeCells',
	
	/**
	 * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}
	 * option is enabled.
	 *
	 * @event Hooks#afterMergeCells
	 * @param {CellRange} cellRange Selection cell range.
	 * @param {Object} mergeParent The parent collection of the provided cell range.
	 * @param {Boolean} [auto=false] `true` if called automatically by the plugin.
	 */
	'afterMergeCells',
	
	/**
	 * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}
	 * option is enabled.
	 *
	 * @event Hooks#beforeUnmergeCells
	 * @param {CellRange} cellRange Selection cell range.
	 * @param {Boolean} [auto=false] `true` if called automatically by the plugin.
	 */
	'beforeUnmergeCells',
	
	/**
	 * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}
	 * option is enabled.
	 *
	 * @event Hooks#afterUnmergeCells
	 * @param {CellRange} cellRange Selection cell range.
	 * @param {Boolean} [auto=false] `true` if called automatically by the plugin.
	 */
	'afterUnmergeCells',
	
	/**
	 * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and
	 * respond in the right way.
	 *
	 * @event Hooks#afterListen
	 */
	'afterListen',
	
	/**
	 * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any
	 * keyboard events.
	 *
	 * @event Hooks#afterUnlisten
	 */
	'afterUnlisten'];
	
	var Hooks = function () {
	  _createClass(Hooks, null, [{
	    key: 'getSingleton',
	    value: function getSingleton() {
	      return getGlobalSingleton();
	    }
	
	    /**
	     *
	     */
	
	  }]);
	
	  function Hooks() {
	    _classCallCheck(this, Hooks);
	
	    this.globalBucket = this.createEmptyBucket();
	  }
	
	  /**
	   * Returns a new object with empty handlers related to every registered hook name.
	   *
	   * @returns {Object} The empty bucket object.
	   *
	   * @example
	   * ```js
	   * Handsontable.hooks.createEmptyBucket();
	   * // Results:
	   * {
	   * ...
	   * afterCreateCol: [],
	   * afterCreateRow: [],
	   * beforeInit: [],
	   * ...
	   * }
	   * ```
	   */
	
	
	  _createClass(Hooks, [{
	    key: 'createEmptyBucket',
	    value: function createEmptyBucket() {
	      var bucket = Object.create(null);
	
	      // eslint-disable-next-line no-return-assign
	      (0, _array.arrayEach)(REGISTERED_HOOKS, function (hook) {
	        return bucket[hook] = [];
	      });
	
	      return bucket;
	    }
	
	    /**
	     * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.
	     *
	     * @param {Object} [context=null] A Handsontable instance.
	     * @returns {Object} Returns a global or Handsontable instance bucket.
	     */
	
	  }, {
	    key: 'getBucket',
	    value: function getBucket() {
	      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      if (context) {
	        if (!context.pluginHookBucket) {
	          context.pluginHookBucket = this.createEmptyBucket();
	        }
	
	        return context.pluginHookBucket;
	      }
	
	      return this.globalBucket;
	    }
	
	    /**
	     * Adds a listener (globally or locally) to a specified hook name.
	     * If the `context` parameter is provided, the hook will be added only to the instance it references.
	     * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.
	     * You can provide an array of callback functions as the `callback` argument, this way they will all be fired
	     * once the hook is triggered.
	     *
	     * @see Core#addHook
	     * @param {String} key Hook name.
	     * @param {Function|Array} callback Callback function or an array of functions.
	     * @param {Object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.
	     * @returns {Hooks} Instance of Hooks.
	     *
	     * @example
	     * ```js
	     * // single callback, added locally
	     * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);
	     *
	     * // single callback, added globally
	     * Handsontable.hooks.add('beforeInit', myCallback);
	     *
	     * // multiple callbacks, added locally
	     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);
	     *
	     * // multiple callbacks, added globally
	     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);
	     * ```
	     */
	
	  }, {
	    key: 'add',
	    value: function add(key, callback) {
	      var _this = this;
	
	      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	      if (Array.isArray(callback)) {
	        (0, _array.arrayEach)(callback, function (c) {
	          return _this.add(key, c, context);
	        });
	      } else {
	        var bucket = this.getBucket(context);
	
	        if (typeof bucket[key] === 'undefined') {
	          this.register(key);
	          bucket[key] = [];
	        }
	        callback.skip = false;
	
	        if (bucket[key].indexOf(callback) === -1) {
	          // only add a hook if it has not already been added (adding the same hook twice is now silently ignored)
	          var foundInitialHook = false;
	
	          if (callback.initialHook) {
	            (0, _array.arrayEach)(bucket[key], function (cb, i) {
	              if (cb.initialHook) {
	                bucket[key][i] = callback;
	                foundInitialHook = true;
	
	                return false;
	              }
	            });
	          }
	
	          if (!foundInitialHook) {
	            bucket[key].push(callback);
	          }
	        }
	      }
	
	      return this;
	    }
	
	    /**
	     * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
	     *
	     * @see Core#addHookOnce
	     * @param {String} key Hook/Event name.
	     * @param {Function|Array} callback Callback function.
	     * @param {Object} [context=null] A Handsontable instance.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);
	     * ```
	     */
	
	  }, {
	    key: 'once',
	    value: function once(key, callback) {
	      var _this2 = this;
	
	      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	      if (Array.isArray(callback)) {
	        (0, _array.arrayEach)(callback, function (c) {
	          return _this2.once(key, c, context);
	        });
	      } else {
	        callback.runOnce = true;
	        this.add(key, callback, context);
	      }
	    }
	
	    /**
	     * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.
	     *
	     * @see Core#removeHook
	     * @param {String} key Hook/Event name.
	     * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).
	     * @param {Object} [context=null] Handsontable instance.
	     * @return {Boolean} Returns `true` if hook was removed, `false` otherwise.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.remove('beforeInit', myCallback);
	     * ```
	     */
	
	  }, {
	    key: 'remove',
	    value: function remove(key, callback) {
	      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	      var bucket = this.getBucket(context);
	
	      if (typeof bucket[key] !== 'undefined') {
	        if (bucket[key].indexOf(callback) >= 0) {
	          callback.skip = true;
	
	          return true;
	        }
	      }
	
	      return false;
	    }
	
	    /**
	     * Checks whether there are any registered listeners for the provided hook name.
	     * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.
	     *
	     * @param {String} key Hook name.
	     * @param {Object} [context=null] A Handsontable instance.
	     * @returns {Boolean} `true` for success, `false` otherwise.
	     */
	
	  }, {
	    key: 'has',
	    value: function has(key) {
	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      var bucket = this.getBucket(context);
	
	      return !!(bucket[key] !== void 0 && bucket[key].length);
	    }
	
	    /**
	     * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.
	     * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.
	     *
	     * @see Core#runHooks
	     * @param {Object} context Handsontable instance.
	     * @param {String} key Hook/Event name.
	     * @param {*} [p1] Parameter to be passed as an argument to the callback function.
	     * @param {*} [p2] Parameter to be passed as an argument to the callback function.
	     * @param {*} [p3] Parameter to be passed as an argument to the callback function.
	     * @param {*} [p4] Parameter to be passed as an argument to the callback function.
	     * @param {*} [p5] Parameter to be passed as an argument to the callback function.
	     * @param {*} [p6] Parameter to be passed as an argument to the callback function.
	     * @returns {*} Either a return value from the last called callback or `p1`.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.run(hot, 'beforeInit');
	     * ```
	     */
	
	  }, {
	    key: 'run',
	    value: function run(context, key, p1, p2, p3, p4, p5, p6) {
	      {
	        var globalHandlers = this.globalBucket[key];
	        var length = globalHandlers ? globalHandlers.length : 0;
	        var index = 0;
	
	        if (length) {
	          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.
	          while (index < length) {
	            if (!globalHandlers[index] || globalHandlers[index].skip) {
	              index += 1;
	              /* eslint-disable no-continue */
	              continue;
	            }
	            // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture
	            var res = globalHandlers[index].call(context, p1, p2, p3, p4, p5, p6);
	
	            if (res !== void 0) {
	              // eslint-disable-next-line no-param-reassign
	              p1 = res;
	            }
	            if (globalHandlers[index] && globalHandlers[index].runOnce) {
	              this.remove(key, globalHandlers[index]);
	            }
	
	            index += 1;
	          }
	        }
	      }
	      {
	        var localHandlers = this.getBucket(context)[key];
	        var _length = localHandlers ? localHandlers.length : 0;
	        var _index = 0;
	
	        if (_length) {
	          // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.
	          while (_index < _length) {
	            if (!localHandlers[_index] || localHandlers[_index].skip) {
	              _index += 1;
	              /* eslint-disable no-continue */
	              continue;
	            }
	            // performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture
	            var _res = localHandlers[_index].call(context, p1, p2, p3, p4, p5, p6);
	
	            if (_res !== void 0) {
	              // eslint-disable-next-line no-param-reassign
	              p1 = _res;
	            }
	            if (localHandlers[_index] && localHandlers[_index].runOnce) {
	              this.remove(key, localHandlers[_index], context);
	            }
	
	            _index += 1;
	          }
	        }
	      }
	
	      return p1;
	    }
	
	    /**
	     * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
	     *
	     * @param {Object} [context=null] A Handsontable instance.
	     * @example
	     * ```js
	     * // destroy the global listeners
	     * Handsontable.hooks.destroy();
	     *
	     * // destroy the local listeners
	     * Handsontable.hooks.destroy(hotInstance);
	     * ```
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      // eslint-disable-next-line no-return-assign
	      (0, _object.objectEach)(this.getBucket(context), function (value, key, bucket) {
	        return bucket[key].length = 0;
	      });
	    }
	
	    /**
	     * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
	     * It is not necessary to call register, but if you use it, your plugin hook will be used returned by
	     * the `getRegistered` method. (which itself is used in the demo http://docs.handsontable.com/tutorial-callbacks.html).
	     *
	     * @param key {String} The hook name.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.register('myHook');
	     * ```
	     */
	
	  }, {
	    key: 'register',
	    value: function register(key) {
	      if (!this.isRegistered(key)) {
	        REGISTERED_HOOKS.push(key);
	      }
	    }
	
	    /**
	     * Deregisters a hook name (removes it from the list of known hook names).
	     *
	     * @param key {String} Hook name.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.deregister('myHook');
	     * ```
	     */
	
	  }, {
	    key: 'deregister',
	    value: function deregister(key) {
	      if (this.isRegistered(key)) {
	        REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);
	      }
	    }
	
	    /**
	     * Returns a boolean depending on if a hook by such name has been registered.
	     *
	     * @param key {String} Hook name.
	     * @returns {Boolean} `true` for success, `false` otherwise.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.isRegistered('beforeInit');
	     *
	     * // Results:
	     * true
	     * ```
	     */
	
	  }, {
	    key: 'isRegistered',
	    value: function isRegistered(key) {
	      return REGISTERED_HOOKS.indexOf(key) >= 0;
	    }
	
	    /**
	     * Returns an array of registered hooks.
	     *
	     * @returns {Array} An array of registered hooks.
	     *
	     * @example
	     * ```js
	     * Handsontable.hooks.getRegistered();
	     *
	     * // Results:
	     * [
	     * ...
	     *   'beforeInit',
	     *   'beforeRender',
	     *   'beforeSetRangeEnd',
	     *   'beforeDrawBorders',
	     *   'beforeChange',
	     * ...
	     * ]
	     * ```
	     */
	
	  }, {
	    key: 'getRegistered',
	    value: function getRegistered() {
	      return REGISTERED_HOOKS;
	    }
	  }]);
	
	  return Hooks;
	}();
	
	var globalSingleton = new Hooks();
	
	function getGlobalSingleton() {
	  return globalSingleton;
	}
	
	exports.default = Hooks;
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getRegisteredEditors = exports.getRegisteredEditorNames = exports.hasEditor = exports.getEditorInstance = exports.getEditor = exports.registerEditor = undefined;
	exports.RegisteredEditor = RegisteredEditor;
	exports._getEditorInstance = _getEditorInstance;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _baseEditor = __webpack_require__(55);
	
	var _baseEditor2 = _interopRequireDefault(_baseEditor);
	
	var _autocompleteEditor = __webpack_require__(190);
	
	var _autocompleteEditor2 = _interopRequireDefault(_autocompleteEditor);
	
	var _checkboxEditor = __webpack_require__(235);
	
	var _checkboxEditor2 = _interopRequireDefault(_checkboxEditor);
	
	var _dateEditor = __webpack_require__(236);
	
	var _dateEditor2 = _interopRequireDefault(_dateEditor);
	
	var _dropdownEditor = __webpack_require__(239);
	
	var _dropdownEditor2 = _interopRequireDefault(_dropdownEditor);
	
	var _handsontableEditor = __webpack_require__(191);
	
	var _handsontableEditor2 = _interopRequireDefault(_handsontableEditor);
	
	var _numericEditor = __webpack_require__(240);
	
	var _numericEditor2 = _interopRequireDefault(_numericEditor);
	
	var _passwordEditor = __webpack_require__(241);
	
	var _passwordEditor2 = _interopRequireDefault(_passwordEditor);
	
	var _selectEditor = __webpack_require__(242);
	
	var _selectEditor2 = _interopRequireDefault(_selectEditor);
	
	var _textEditor = __webpack_require__(59);
	
	var _textEditor2 = _interopRequireDefault(_textEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Utility to register editors and common namespace for keeping reference to all editor classes
	 */
	var registeredEditorClasses = new WeakMap();
	
	var _staticRegister = (0, _staticRegister3.default)('editors'),
	    register = _staticRegister.register,
	    getItem = _staticRegister.getItem,
	    hasItem = _staticRegister.hasItem,
	    getNames = _staticRegister.getNames,
	    getValues = _staticRegister.getValues;
	
	_register('base', _baseEditor2.default);
	_register('autocomplete', _autocompleteEditor2.default);
	_register('checkbox', _checkboxEditor2.default);
	_register('date', _dateEditor2.default);
	_register('dropdown', _dropdownEditor2.default);
	_register('handsontable', _handsontableEditor2.default);
	_register('numeric', _numericEditor2.default);
	_register('password', _passwordEditor2.default);
	_register('select', _selectEditor2.default);
	_register('text', _textEditor2.default);
	
	function RegisteredEditor(editorClass) {
	  var instances = {};
	  var Clazz = editorClass;
	
	  this.getConstructor = function () {
	    return editorClass;
	  };
	
	  this.getInstance = function (hotInstance) {
	    if (!(hotInstance.guid in instances)) {
	      instances[hotInstance.guid] = new Clazz(hotInstance);
	    }
	
	    return instances[hotInstance.guid];
	  };
	
	  _pluginHooks2.default.getSingleton().add('afterDestroy', function () {
	    instances[this.guid] = null;
	  });
	}
	
	/**
	 * Returns instance (singleton) of editor class.
	 *
	 * @param {String} name Name of an editor under which it has been stored.
	 * @param {Object} hotInstance Instance of Handsontable.
	 * @returns {Function} Returns instance of editor.
	 */
	function _getEditorInstance(name, hotInstance) {
	  var editor = void 0;
	
	  if (typeof name === 'function') {
	    if (!registeredEditorClasses.get(name)) {
	      _register(null, name);
	    }
	    editor = registeredEditorClasses.get(name);
	  } else if (typeof name === 'string') {
	    editor = getItem(name);
	  } else {
	    throw Error('Only strings and functions can be passed as "editor" parameter');
	  }
	
	  if (!editor) {
	    throw Error('No editor registered under name "' + name + '"');
	  }
	
	  return editor.getInstance(hotInstance);
	}
	
	/**
	 * Retrieve editor class.
	 *
	 * @param {String} name Editor identification.
	 * @returns {Function} Returns editor class.
	 */
	function _getItem(name) {
	  if (!hasItem(name)) {
	    throw Error('No registered editor found under "' + name + '" name');
	  }
	
	  return getItem(name).getConstructor();
	}
	
	/**
	 * Register editor class under specified name.
	 *
	 * @param {String} name Editor identification.
	 * @param {Function} editorClass Editor class.
	 */
	function _register(name, editorClass) {
	  var editorWrapper = new RegisteredEditor(editorClass);
	
	  if (typeof name === 'string') {
	    register(name, editorWrapper);
	  }
	  registeredEditorClasses.set(editorClass, editorWrapper);
	}
	
	exports.registerEditor = _register;
	exports.getEditor = _getItem;
	exports.getEditorInstance = _getEditorInstance;
	exports.hasEditor = hasItem;
	exports.getRegisteredEditorNames = getNames;
	exports.getRegisteredEditors = getValues;
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(9);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.normalizeSelection = normalizeSelection;
	exports.isSeparator = isSeparator;
	exports.hasSubMenu = hasSubMenu;
	exports.isDisabled = isDisabled;
	exports.isSelectionDisabled = isSelectionDisabled;
	exports.getValidSelection = getValidSelection;
	exports.prepareVerticalAlignClass = prepareVerticalAlignClass;
	exports.prepareHorizontalAlignClass = prepareHorizontalAlignClass;
	exports.getAlignmentClasses = getAlignmentClasses;
	exports.align = align;
	exports.checkSelectionConsistency = checkSelectionConsistency;
	exports.markLabelAsSelected = markLabelAsSelected;
	exports.isItemHidden = isItemHidden;
	exports.filterSeparators = filterSeparators;
	
	var _array = __webpack_require__(2);
	
	var _element = __webpack_require__(0);
	
	var _separator = __webpack_require__(95);
	
	function normalizeSelection(selRanges) {
	  return (0, _array.arrayMap)(selRanges, function (range) {
	    return {
	      start: range.getTopLeftCorner(),
	      end: range.getBottomRightCorner()
	    };
	  });
	}
	
	function isSeparator(cell) {
	  return (0, _element.hasClass)(cell, 'htSeparator');
	}
	
	function hasSubMenu(cell) {
	  return (0, _element.hasClass)(cell, 'htSubmenu');
	}
	
	function isDisabled(cell) {
	  return (0, _element.hasClass)(cell, 'htDisabled');
	}
	
	function isSelectionDisabled(cell) {
	  return (0, _element.hasClass)(cell, 'htSelectionDisabled');
	}
	
	function getValidSelection(hot) {
	  var selected = hot.getSelected();
	
	  if (!selected) {
	    return null;
	  }
	  if (selected[0] < 0) {
	    return null;
	  }
	
	  return selected;
	}
	
	function prepareVerticalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) !== -1) {
	    return className;
	  }
	
	  var replacedClassName = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');
	
	  return replacedClassName + ' ' + alignment;
	}
	
	function prepareHorizontalAlignClass(className, alignment) {
	  if (className.indexOf(alignment) !== -1) {
	    return className;
	  }
	  var replacedClassName = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');
	
	  return replacedClassName + ' ' + alignment;
	}
	
	function getAlignmentClasses(ranges, callback) {
	  var classes = {};
	
	  (0, _array.arrayEach)(ranges, function (_ref) {
	    var from = _ref.from,
	        to = _ref.to;
	
	    for (var row = from.row; row <= to.row; row++) {
	      for (var col = from.col; col <= to.col; col++) {
	        if (!classes[row]) {
	          classes[row] = [];
	        }
	        classes[row][col] = callback(row, col);
	      }
	    }
	  });
	
	  return classes;
	}
	
	function align(ranges, type, alignment, cellDescriptor, propertySetter) {
	  (0, _array.arrayEach)(ranges, function (_ref2) {
	    var from = _ref2.from,
	        to = _ref2.to;
	
	    if (from.row === to.row && from.col === to.col) {
	      applyAlignClassName(from.row, from.col, type, alignment, cellDescriptor, propertySetter);
	    } else {
	      for (var row = from.row; row <= to.row; row++) {
	        for (var col = from.col; col <= to.col; col++) {
	          applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);
	        }
	      }
	    }
	  });
	}
	
	function applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {
	  var cellMeta = cellDescriptor(row, col);
	  var className = alignment;
	
	  if (cellMeta.className) {
	    if (type === 'vertical') {
	      className = prepareVerticalAlignClass(cellMeta.className, alignment);
	    } else {
	      className = prepareHorizontalAlignClass(cellMeta.className, alignment);
	    }
	  }
	
	  propertySetter(row, col, 'className', className);
	}
	
	function checkSelectionConsistency(ranges, comparator) {
	  var result = false;
	
	  if (Array.isArray(ranges)) {
	    (0, _array.arrayEach)(ranges, function (range) {
	      range.forAll(function (row, col) {
	        if (comparator(row, col)) {
	          result = true;
	
	          return false;
	        }
	      });
	
	      return result;
	    });
	  }
	
	  return result;
	}
	
	function markLabelAsSelected(label) {
	  // workaround for https://github.com/handsontable/handsontable/issues/1946
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label;
	}
	
	function isItemHidden(item, instance) {
	  return !item.hidden || !(typeof item.hidden === 'function' && item.hidden.call(instance));
	}
	
	function shiftSeparators(items, separator) {
	  var result = items.slice(0);
	
	  for (var i = 0; i < result.length;) {
	    if (result[i].name === separator) {
	      result.shift();
	    } else {
	      break;
	    }
	  }
	  return result;
	}
	
	function popSeparators(items, separator) {
	  var result = items.slice(0);
	
	  result.reverse();
	  result = shiftSeparators(result, separator);
	  result.reverse();
	
	  return result;
	}
	
	function removeDuplicatedSeparators(items) {
	  var result = [];
	
	  (0, _array.arrayEach)(items, function (value, index) {
	    if (index > 0) {
	      if (result[result.length - 1].name !== value.name) {
	        result.push(value);
	      }
	    } else {
	      result.push(value);
	    }
	  });
	
	  return result;
	}
	
	function filterSeparators(items) {
	  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _separator.KEY;
	
	  var result = items.slice(0);
	
	  result = shiftSeparators(result, separator);
	  result = popSeparators(result, separator);
	  result = removeDuplicatedSeparators(result);
	
	  return result;
	}
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject = __webpack_require__(18);
	var IE8_DOM_DEFINE = __webpack_require__(100);
	var toPrimitive = __webpack_require__(75);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(22) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};
	
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY_CODES = undefined;
	exports.isPrintableChar = isPrintableChar;
	exports.isMetaKey = isMetaKey;
	exports.isCtrlKey = isCtrlKey;
	exports.isCtrlMetaKey = isCtrlMetaKey;
	exports.isKey = isKey;
	
	var _array = __webpack_require__(2);
	
	var KEY_CODES = exports.KEY_CODES = {
	  MOUSE_LEFT: 1,
	  MOUSE_RIGHT: 3,
	  MOUSE_MIDDLE: 2,
	  BACKSPACE: 8,
	  COMMA: 188,
	  INSERT: 45,
	  DELETE: 46,
	  END: 35,
	  ENTER: 13,
	  ESCAPE: 27,
	  CONTROL: 17,
	  COMMAND_LEFT: 91,
	  COMMAND_RIGHT: 93,
	  COMMAND_FIREFOX: 224,
	  ALT: 18,
	  HOME: 36,
	  PAGE_DOWN: 34,
	  PAGE_UP: 33,
	  PERIOD: 190,
	  SPACE: 32,
	  SHIFT: 16,
	  CAPS_LOCK: 20,
	  TAB: 9,
	  ARROW_RIGHT: 39,
	  ARROW_LEFT: 37,
	  ARROW_UP: 38,
	  ARROW_DOWN: 40,
	  F1: 112,
	  F2: 113,
	  F3: 114,
	  F4: 115,
	  F5: 116,
	  F6: 117,
	  F7: 118,
	  F8: 119,
	  F9: 120,
	  F10: 121,
	  F11: 122,
	  F12: 123,
	  A: 65,
	  X: 88,
	  C: 67,
	  V: 86
	};
	
	/**
	 * Returns true if keyCode represents a printable character.
	 *
	 * @param {Number} keyCode
	 * @returns {Boolean}
	 */
	function isPrintableChar(keyCode) {
	  return keyCode === 32 || // space
	  keyCode >= 48 && keyCode <= 57 || // 0-9
	  keyCode >= 96 && keyCode <= 111 || // numpad
	  keyCode >= 186 && keyCode <= 192 || // ;=,-./`
	  keyCode >= 219 && keyCode <= 222 || // []{}\|"'
	  keyCode >= 226 || // special chars (229 for Asian chars)
	  keyCode >= 65 && keyCode <= 90; // a-z
	}
	
	/**
	 * @param {Number} keyCode
	 * @returns {Boolean}
	 */
	function isMetaKey(keyCode) {
	  var metaKeys = [KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_UP, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.HOME, KEY_CODES.END, KEY_CODES.DELETE, KEY_CODES.BACKSPACE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.TAB, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.SHIFT, KEY_CODES.CAPS_LOCK, KEY_CODES.ALT];
	
	  return metaKeys.indexOf(keyCode) !== -1;
	}
	
	/**
	 * Checks if passed key code is ctrl or cmd key. Depends on what OS the code runs it check key code based on
	 * different meta key codes.
	 *
	 * @param {Number} keyCode Key code to check.
	 * @returns {Boolean}
	 */
	function isCtrlKey(keyCode) {
	  var keys = [];
	
	  if (window.navigator.platform.includes('Mac')) {
	    keys.push(KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX);
	  } else {
	    keys.push(KEY_CODES.CONTROL);
	  }
	
	  return keys.includes(keyCode);
	}
	
	/**
	 * Checks if passed key code is ctrl or cmd key. This helper checks if the key code matches to meta keys
	 * regardless of the OS on which it is running.
	 *
	 * @param {Number} keyCode Key code to check.
	 * @returns {Boolean}
	 */
	function isCtrlMetaKey(keyCode) {
	  return [KEY_CODES.CONTROL, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX].includes(keyCode);
	}
	
	/**
	 * @param {Number} keyCode
	 * @param {String} baseCode
	 * @returns {Boolean}
	 */
	function isKey(keyCode, baseCode) {
	  var keys = baseCode.split('|');
	  var result = false;
	
	  (0, _array.arrayEach)(keys, function (key) {
	    if (keyCode === KEY_CODES[key]) {
	      result = true;
	
	      return false;
	    }
	  });
	
	  return result;
	}
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(23)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});
	
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {
	
	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};
	
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(77);
	var defined = __webpack_require__(36);
	module.exports = function (it) {
	  return IObject(defined(it));
	};
	
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(60);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(3);
	var core = __webpack_require__(37);
	var fails = __webpack_require__(23);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};
	
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};
	
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(15);
	var hide = __webpack_require__(29);
	var has = __webpack_require__(27);
	var SRC = __webpack_require__(50)('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(37).inspectSource = function (it) {
	  return $toString.call(it);
	};
	
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});
	
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP = __webpack_require__(20);
	var createDesc = __webpack_require__(51);
	module.exports = __webpack_require__(22) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};
	
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(63);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};
	
	
	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(36);
	module.exports = function (it) {
	  return Object(defined(it));
	};
	
	
	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var META = __webpack_require__(50)('meta');
	var isObject = __webpack_require__(9);
	var has = __webpack_require__(27);
	var setDesc = __webpack_require__(20).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(23)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.toUpperCaseFirst = toUpperCaseFirst;
	exports.equalsIgnoreCase = equalsIgnoreCase;
	exports.randomString = randomString;
	exports.isPercentValue = isPercentValue;
	exports.substitute = substitute;
	exports.stripTags = stripTags;
	
	var _mixed = __webpack_require__(11);
	
	/**
	 * Convert string to upper case first letter.
	 *
	 * @param {String} string String to convert.
	 * @returns {String}
	 */
	function toUpperCaseFirst(string) {
	  return string[0].toUpperCase() + string.substr(1);
	}
	
	/**
	 * Compare strings case insensitively.
	 *
	 * @param {...String} strings Strings to compare.
	 * @returns {Boolean}
	 */
	function equalsIgnoreCase() {
	  var unique = [];
	
	  for (var _len = arguments.length, strings = Array(_len), _key = 0; _key < _len; _key++) {
	    strings[_key] = arguments[_key];
	  }
	
	  var length = strings.length;
	
	  while (length) {
	    length -= 1;
	    var string = (0, _mixed.stringify)(strings[length]).toLowerCase();
	
	    if (unique.indexOf(string) === -1) {
	      unique.push(string);
	    }
	  }
	
	  return unique.length === 1;
	}
	
	/**
	 * Generates a random hex string. Used as namespace for Handsontable instance events.
	 *
	 * @return {String} Returns 16-long character random string (eq. `'92b1bfc74ec4'`).
	 */
	function randomString() {
	  function s4() {
	    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	  }
	
	  return s4() + s4() + s4() + s4();
	}
	
	/**
	 * Checks if value is valid percent.
	 *
	 * @param {String} value
	 * @returns {Boolean}
	 */
	function isPercentValue(value) {
	  return (/^([0-9][0-9]?%$)|(^100%$)/.test(value)
	  );
	}
	
	/**
	 * Substitute strings placed beetwen square brackets into value defined in `variables` object. String names defined in
	 * square brackets must be the same as property name of `variables` object.
	 *
	 * @param {String} template Template string.
	 * @param {Object} variables Object which contains all available values which can be injected into template.
	 * @returns {String}
	 */
	function substitute(template) {
	  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  return ('' + template).replace(/(?:\\)?\[([^[\]]+)]/g, function (match, name) {
	    if (match.charAt(0) === '\\') {
	      return match.substr(1, match.length - 1);
	    }
	
	    return variables[name] === void 0 ? '' : variables[name];
	  });
	}
	
	var STRIP_TAGS_REGEX = /<\/?\w+\/?>|<\w+[\s|/][^>]*>/gi;
	
	/**
	 * Strip any HTML tag from the string.
	 *
	 * @param  {String} string String to cut HTML from.
	 * @return {String}
	 */
	function stripTags(string) {
	  return ('' + string).replace(STRIP_TAGS_REGEX, '');
	}
	
	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getRegisteredValidators = exports.getRegisteredValidatorNames = exports.hasValidator = exports.getValidator = exports.registerValidator = undefined;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _autocompleteValidator = __webpack_require__(251);
	
	var _autocompleteValidator2 = _interopRequireDefault(_autocompleteValidator);
	
	var _dateValidator = __webpack_require__(252);
	
	var _dateValidator2 = _interopRequireDefault(_dateValidator);
	
	var _numericValidator = __webpack_require__(253);
	
	var _numericValidator2 = _interopRequireDefault(_numericValidator);
	
	var _timeValidator = __webpack_require__(254);
	
	var _timeValidator2 = _interopRequireDefault(_timeValidator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _staticRegister = (0, _staticRegister3.default)('validators'),
	    register = _staticRegister.register,
	    getItem = _staticRegister.getItem,
	    hasItem = _staticRegister.hasItem,
	    getNames = _staticRegister.getNames,
	    getValues = _staticRegister.getValues;
	
	register('autocomplete', _autocompleteValidator2.default);
	register('date', _dateValidator2.default);
	register('numeric', _numericValidator2.default);
	register('time', _timeValidator2.default);
	
	/**
	 * Retrieve validator function.
	 *
	 * @param {String} name Validator identification.
	 * @returns {Function} Returns validator function.
	 */
	function _getItem(name) {
	  if (typeof name === 'function') {
	    return name;
	  }
	  if (!hasItem(name)) {
	    throw Error('No registered validator found under "' + name + '" name');
	  }
	
	  return getItem(name);
	}
	
	exports.registerValidator = register;
	exports.getValidator = _getItem;
	exports.hasValidator = hasItem;
	exports.getRegisteredValidatorNames = getNames;
	exports.getRegisteredValidators = getValues;
	
	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(101);
	var enumBugKeys = __webpack_require__(80);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};
	
	
	/***/ }),
	/* 36 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports) {
	
	var core = module.exports = { version: '2.5.7' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = staticRegister;
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var collection = exports.collection = new Map();
	
	function staticRegister() {
	  var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';
	
	  if (!collection.has(namespace)) {
	    collection.set(namespace, new Map());
	  }
	  var subCollection = collection.get(namespace);
	
	  /**
	   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.
	   *
	   * @param {String} name Identification of the item.
	   * @param {*} item Item to save in the collection.
	   */
	  function register(name, item) {
	    subCollection.set(name, item);
	  }
	
	  /**
	   * Retrieve the item from the collection.
	   *
	   * @param {String} name Identification of the item.
	   * @returns {*} Returns item which was saved in the collection.
	   */
	  function getItem(name) {
	    return subCollection.get(name);
	  }
	
	  /**
	   * Check if item under specyfied name is exists.
	   *
	   * @param {String} name Identification of the item.
	   * @returns {Boolean} Returns `true` or `false` depends on if element exists in the collection.
	   */
	  function hasItem(name) {
	    return subCollection.has(name);
	  }
	
	  /**
	   * Retrieve list of names registered from the collection.
	   *
	   * @returns {Array} Returns an array of strings with all names under which objects are stored.
	   */
	  function getNames() {
	    return [].concat(_toConsumableArray(subCollection.keys()));
	  }
	
	  /**
	   * Retrieve all registered values from the collection.
	   *
	   * @returns {Array} Returns an array with all values stored in the collection.
	   */
	  function getValues() {
	    return [].concat(_toConsumableArray(subCollection.values()));
	  }
	
	  return {
	    register: register,
	    getItem: getItem,
	    hasItem: hasItem,
	    getNames: getNames,
	    getValues: getValues
	  };
	}
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.setBrowserMeta = setBrowserMeta;
	exports.isChrome = isChrome;
	exports.isEdge = isEdge;
	exports.isIE = isIE;
	exports.isIE8 = isIE8;
	exports.isIE9 = isIE9;
	exports.isMSBrowser = isMSBrowser;
	exports.isMobileBrowser = isMobileBrowser;
	exports.isSafari = isSafari;
	
	var _object = __webpack_require__(1);
	
	var tester = function tester(testerFunc) {
	  var result = {
	    value: false
	  };
	  result.test = function (ua, vendor) {
	    result.value = testerFunc(ua, vendor);
	  };
	
	  return result;
	};
	
	var browsers = {
	  chrome: tester(function (ua, vendor) {
	    return (/Chrome/.test(ua) && /Google/.test(vendor)
	    );
	  }),
	  edge: tester(function (ua) {
	    return (/Edge/.test(ua)
	    );
	  }),
	  ie: tester(function (ua) {
	    return (/Trident/.test(ua)
	    );
	  }),
	  ie8: tester(function () {
	    return !document.createTextNode('test').textContent;
	  }),
	  ie9: tester(function () {
	    return !!document.documentMode;
	  }),
	  mobile: tester(function (ua) {
	    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)
	    );
	  }),
	  safari: tester(function (ua, vendor) {
	    return (/Safari/.test(ua) && /Apple Computer/.test(vendor)
	    );
	  })
	};
	
	function setBrowserMeta() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$userAgent = _ref.userAgent,
	      userAgent = _ref$userAgent === undefined ? navigator.userAgent : _ref$userAgent,
	      _ref$vendor = _ref.vendor,
	      vendor = _ref$vendor === undefined ? navigator.vendor : _ref$vendor;
	
	  (0, _object.objectEach)(browsers, function (_ref2) {
	    var test = _ref2.test;
	    return void test(userAgent, vendor);
	  });
	}
	
	setBrowserMeta();
	
	function isChrome() {
	  return browsers.chrome.value;
	}
	
	function isEdge() {
	  return browsers.edge.value;
	}
	
	function isIE() {
	  return browsers.ie.value;
	}
	
	function isIE8() {
	  return browsers.ie8.value;
	}
	
	function isIE9() {
	  return browsers.ie9.value;
	}
	
	function isMSBrowser() {
	  return browsers.ie.value || browsers.edge.value;
	}
	
	function isMobileBrowser() {
	  return browsers.mobile.value;
	}
	
	function isSafari() {
	  return browsers.safari.value;
	}
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.requestAnimationFrame = requestAnimationFrame;
	exports.cancelAnimationFrame = cancelAnimationFrame;
	exports.isTouchSupported = isTouchSupported;
	exports.isWebComponentSupportedNatively = isWebComponentSupportedNatively;
	exports.hasCaptionProblem = hasCaptionProblem;
	exports.getComparisonFunction = getComparisonFunction;
	// https://gist.github.com/paulirish/1579671
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	var _requestAnimationFrame = window.requestAnimationFrame;
	var _cancelAnimationFrame = window.cancelAnimationFrame;
	
	for (var x = 0; x < vendors.length && !_requestAnimationFrame; ++x) {
	  _requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	  _cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	}
	
	if (!_requestAnimationFrame) {
	  _requestAnimationFrame = function _requestAnimationFrame(callback) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	    var id = window.setTimeout(function () {
	      callback(currTime + timeToCall);
	    }, timeToCall);
	    lastTime = currTime + timeToCall;
	
	    return id;
	  };
	}
	
	if (!_cancelAnimationFrame) {
	  _cancelAnimationFrame = function _cancelAnimationFrame(id) {
	    clearTimeout(id);
	  };
	}
	
	/**
	 * Polyfill for requestAnimationFrame
	 *
	 * @param {Function} callback
	 * @returns {Number}
	 */
	function requestAnimationFrame(callback) {
	  return _requestAnimationFrame.call(window, callback);
	}
	
	/**
	 * Polyfill for cancelAnimationFrame
	 *
	 * @param {Number} id
	 */
	function cancelAnimationFrame(id) {
	  _cancelAnimationFrame.call(window, id);
	}
	
	function isTouchSupported() {
	  return 'ontouchstart' in window;
	}
	
	/**
	 * Checks if browser is support web components natively
	 *
	 * @returns {Boolean}
	 */
	function isWebComponentSupportedNatively() {
	  var test = document.createElement('div');
	
	  return !!(test.createShadowRoot && test.createShadowRoot.toString().match(/\[native code\]/));
	}
	
	var _hasCaptionProblem = void 0;
	
	function detectCaptionProblem() {
	  var TABLE = document.createElement('TABLE');
	  TABLE.style.borderSpacing = 0;
	  TABLE.style.borderWidth = 0;
	  TABLE.style.padding = 0;
	  var TBODY = document.createElement('TBODY');
	  TABLE.appendChild(TBODY);
	  TBODY.appendChild(document.createElement('TR'));
	  TBODY.firstChild.appendChild(document.createElement('TD'));
	  TBODY.firstChild.firstChild.innerHTML = '<tr><td>t<br>t</td></tr>';
	
	  var CAPTION = document.createElement('CAPTION');
	  CAPTION.innerHTML = 'c<br>c<br>c<br>c';
	  CAPTION.style.padding = 0;
	  CAPTION.style.margin = 0;
	  TABLE.insertBefore(CAPTION, TBODY);
	
	  document.body.appendChild(TABLE);
	  _hasCaptionProblem = TABLE.offsetHeight < 2 * TABLE.lastChild.offsetHeight; // boolean
	  document.body.removeChild(TABLE);
	}
	
	function hasCaptionProblem() {
	  if (_hasCaptionProblem === void 0) {
	    detectCaptionProblem();
	  }
	
	  return _hasCaptionProblem;
	}
	
	var comparisonFunction = void 0;
	
	/**
	 * Get string comparison function for sorting purposes. It supports multilingual string comparison base on Internationalization API.
	 *
	 * @param {String} [language]
	 * @param {Object} [options]
	 * @returns {*}
	 */
	function getComparisonFunction(language) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  if (comparisonFunction) {
	    return comparisonFunction;
	  }
	
	  if ((typeof Intl === 'undefined' ? 'undefined' : _typeof(Intl)) === 'object') {
	    comparisonFunction = new Intl.Collator(language, options).compare;
	  } else if (typeof String.prototype.localeCompare === 'function') {
	    comparisonFunction = function comparisonFunction(a, b) {
	      return ('' + a).localeCompare(b);
	    };
	  } else {
	    comparisonFunction = function comparisonFunction(a, b) {
	      if (a === b) {
	        return 0;
	      }
	
	      return a > b ? -1 : 1;
	    };
	  }
	
	  return comparisonFunction;
	}
	
	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _core = __webpack_require__(181);
	
	var _core2 = _interopRequireDefault(_core);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var registeredOverlays = {};
	
	/**
	 * Creates an overlay over the original Walkontable instance. The overlay renders the clone of the original Walkontable
	 * and (optionally) implements behavior needed for native horizontal and vertical scrolling.
	 *
	 * @class Overlay
	 */
	
	var Overlay = function () {
	  _createClass(Overlay, null, [{
	    key: 'registerOverlay',
	
	
	    /**
	     * Register overlay class.
	     *
	     * @param {String} type Overlay type, one of the CLONE_TYPES value
	     * @param {Overlay} overlayClass Overlay class extended from base overlay class {@link Overlay}
	     */
	    value: function registerOverlay(type, overlayClass) {
	      if (Overlay.CLONE_TYPES.indexOf(type) === -1) {
	        throw new Error('Unsupported overlay (' + type + ').');
	      }
	      registeredOverlays[type] = overlayClass;
	    }
	
	    /**
	     * Create new instance of overlay type.
	     *
	     * @param {String} type Overlay type, one of the CLONE_TYPES value
	     * @param {Walkontable} wot Walkontable instance
	     */
	
	  }, {
	    key: 'createOverlay',
	    value: function createOverlay(type, wot) {
	      return new registeredOverlays[type](wot);
	    }
	
	    /**
	     * Check if specified overlay was registered.
	     *
	     * @param {String} type Overlay type, one of the CLONE_TYPES value
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'hasOverlay',
	    value: function hasOverlay(type) {
	      return registeredOverlays[type] !== void 0;
	    }
	
	    /**
	     * Checks if overlay object (`overlay`) is instance of overlay type (`type`).
	     *
	     * @param {Overlay} overlay Overlay object
	     * @param {String} type Overlay type, one of the CLONE_TYPES value
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isOverlayTypeOf',
	    value: function isOverlayTypeOf(overlay, type) {
	      if (!overlay || !registeredOverlays[type]) {
	        return false;
	      }
	
	      return overlay instanceof registeredOverlays[type];
	    }
	
	    /**
	     * @param {Walkontable} wotInstance
	     */
	
	  }, {
	    key: 'CLONE_TOP',
	
	    /**
	     * @type {String}
	     */
	    get: function get() {
	      return 'top';
	    }
	
	    /**
	     * @type {String}
	     */
	
	  }, {
	    key: 'CLONE_BOTTOM',
	    get: function get() {
	      return 'bottom';
	    }
	
	    /**
	     * @type {String}
	     */
	
	  }, {
	    key: 'CLONE_LEFT',
	    get: function get() {
	      return 'left';
	    }
	
	    /**
	     * @type {String}
	     */
	
	  }, {
	    key: 'CLONE_TOP_LEFT_CORNER',
	    get: function get() {
	      return 'top_left_corner';
	    }
	
	    /**
	     * @type {String}
	     */
	
	  }, {
	    key: 'CLONE_BOTTOM_LEFT_CORNER',
	    get: function get() {
	      return 'bottom_left_corner';
	    }
	
	    /**
	     * @type {String}
	     */
	
	  }, {
	    key: 'CLONE_DEBUG',
	    get: function get() {
	      return 'debug';
	    }
	
	    /**
	     * List of all availables clone types
	     *
	     * @type {Array}
	     */
	
	  }, {
	    key: 'CLONE_TYPES',
	    get: function get() {
	      return [Overlay.CLONE_TOP, Overlay.CLONE_BOTTOM, Overlay.CLONE_LEFT, Overlay.CLONE_TOP_LEFT_CORNER, Overlay.CLONE_BOTTOM_LEFT_CORNER, Overlay.CLONE_DEBUG];
	    }
	  }]);
	
	  function Overlay(wotInstance) {
	    _classCallCheck(this, Overlay);
	
	    (0, _object.defineGetter)(this, 'wot', wotInstance, {
	      writable: false
	    });
	
	    // legacy support, deprecated in the future
	    this.instance = this.wot;
	
	    this.type = '';
	    this.mainTableScrollableElement = null;
	    this.TABLE = this.wot.wtTable.TABLE;
	    this.hider = this.wot.wtTable.hider;
	    this.spreader = this.wot.wtTable.spreader;
	    this.holder = this.wot.wtTable.holder;
	    this.wtRootElement = this.wot.wtTable.wtRootElement;
	    this.trimmingContainer = (0, _element.getTrimmingContainer)(this.hider.parentNode.parentNode);
	    this.areElementSizesAdjusted = false;
	    this.updateStateOfRendering();
	  }
	
	  /**
	   * Update internal state of object with an information about the need of full rendering of the overlay.
	   *
	   * @returns {Boolean} Returns `true` if the state has changed since the last check.
	   */
	
	
	  _createClass(Overlay, [{
	    key: 'updateStateOfRendering',
	    value: function updateStateOfRendering() {
	      var previousState = this.needFullRender;
	
	      this.needFullRender = this.shouldBeRendered();
	
	      var changed = previousState !== this.needFullRender;
	
	      if (changed && !this.needFullRender) {
	        this.reset();
	      }
	
	      return changed;
	    }
	
	    /**
	     * Checks if overlay should be fully rendered
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'shouldBeRendered',
	    value: function shouldBeRendered() {
	      return true;
	    }
	
	    /**
	     * Update the trimming container.
	     */
	
	  }, {
	    key: 'updateTrimmingContainer',
	    value: function updateTrimmingContainer() {
	      this.trimmingContainer = (0, _element.getTrimmingContainer)(this.hider.parentNode.parentNode);
	    }
	
	    /**
	     * Update the main scrollable element.
	     */
	
	  }, {
	    key: 'updateMainScrollableElement',
	    value: function updateMainScrollableElement() {
	      this.mainTableScrollableElement = (0, _element.getScrollableElement)(this.wot.wtTable.TABLE);
	    }
	
	    /**
	     * Make a clone of table for overlay
	     *
	     * @param {String} direction Can be `Overlay.CLONE_TOP`, `Overlay.CLONE_LEFT`,
	     *                           `Overlay.CLONE_TOP_LEFT_CORNER`, `Overlay.CLONE_DEBUG`
	     * @returns {Walkontable}
	     */
	
	  }, {
	    key: 'makeClone',
	    value: function makeClone(direction) {
	      if (Overlay.CLONE_TYPES.indexOf(direction) === -1) {
	        throw new Error('Clone type "' + direction + '" is not supported.');
	      }
	      var clone = document.createElement('DIV');
	      var clonedTable = document.createElement('TABLE');
	
	      clone.className = 'ht_clone_' + direction + ' handsontable';
	      clone.style.position = 'absolute';
	      clone.style.top = 0;
	      clone.style.left = 0;
	      clone.style.overflow = 'hidden';
	
	      clonedTable.className = this.wot.wtTable.TABLE.className;
	      clone.appendChild(clonedTable);
	
	      this.type = direction;
	      this.wot.wtTable.wtRootElement.parentNode.appendChild(clone);
	
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (preventOverflow === true || preventOverflow === 'horizontal' && this.type === Overlay.CLONE_TOP || preventOverflow === 'vertical' && this.type === Overlay.CLONE_LEFT) {
	        this.mainTableScrollableElement = window;
	      } else {
	        this.mainTableScrollableElement = (0, _element.getScrollableElement)(this.wot.wtTable.TABLE);
	      }
	
	      return new _core2.default({
	        cloneSource: this.wot,
	        cloneOverlay: this,
	        table: clonedTable
	      });
	    }
	
	    /**
	     * Refresh/Redraw overlay
	     *
	     * @param {Boolean} [fastDraw=false]
	     */
	
	  }, {
	    key: 'refresh',
	    value: function refresh() {
	      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      // When hot settings are changed we allow to refresh overlay once before blocking
	      var nextCycleRenderFlag = this.shouldBeRendered();
	
	      if (this.clone && (this.needFullRender || nextCycleRenderFlag)) {
	        this.clone.draw(fastDraw);
	      }
	      this.needFullRender = nextCycleRenderFlag;
	    }
	
	    /**
	     * Reset overlay styles to initial values.
	     */
	
	  }, {
	    key: 'reset',
	    value: function reset() {
	      if (!this.clone) {
	        return;
	      }
	      var holder = this.clone.wtTable.holder;
	      var hider = this.clone.wtTable.hider;
	      var holderStyle = holder.style;
	      var hidderStyle = hider.style;
	      var rootStyle = holder.parentNode.style;
	
	      (0, _array.arrayEach)([holderStyle, hidderStyle, rootStyle], function (style) {
	        style.width = '';
	        style.height = '';
	      });
	    }
	
	    /**
	     * Destroy overlay instance
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      new _eventManager2.default(this.clone).destroy();
	    }
	  }]);
	
	  return Overlay;
	}();
	
	exports.default = Overlay;
	
	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.toSingleLine = toSingleLine;
	
	var _array = __webpack_require__(2);
	
	/**
	 * Tags a multiline string and return new one without line break characters and following spaces.
	 *
	 * @param {Array} strings Parts of the entire string without expressions.
	 * @param {...String} expressions Expressions converted to strings, which are added to the entire string.
	 * @returns {String}
	 */
	function toSingleLine(strings) {
	  for (var _len = arguments.length, expressions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    expressions[_key - 1] = arguments[_key];
	  }
	
	  var result = (0, _array.arrayReduce)(strings, function (previousValue, currentValue, index) {
	
	    var valueWithoutWhiteSpaces = currentValue.replace(/(?:\r?\n\s+)/g, '');
	    var expressionForIndex = expressions[index] ? expressions[index] : '';
	
	    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;
	  }, '');
	
	  return result.trim();
	} /* eslint-disable import/prefer-default-export */
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.isFunction = isFunction;
	exports.throttle = throttle;
	exports.throttleAfterHits = throttleAfterHits;
	exports.debounce = debounce;
	exports.pipe = pipe;
	exports.partial = partial;
	exports.curry = curry;
	exports.curryRight = curryRight;
	
	var _array = __webpack_require__(2);
	
	/**
	 * Checks if given variable is function.
	 *
	 * @param {*} func Variable to check.
	 * @returns {Boolean}
	 */
	function isFunction(func) {
	  return typeof func === 'function';
	}
	
	/**
	 * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).
	 *
	 * @param {Function} func Function to invoke.
	 * @param {Number} wait Delay in miliseconds.
	 * @returns {Function}
	 */
	function throttle(func) {
	  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
	
	  var lastCalled = 0;
	  var result = {
	    lastCallThrottled: true
	  };
	  var lastTimer = null;
	
	  function _throttle() {
	    var _this = this;
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var stamp = Date.now();
	    var needCall = false;
	
	    result.lastCallThrottled = true;
	
	    if (!lastCalled) {
	      lastCalled = stamp;
	      needCall = true;
	    }
	    var remaining = wait - (stamp - lastCalled);
	
	    if (needCall) {
	      result.lastCallThrottled = false;
	      func.apply(this, args);
	    } else {
	      if (lastTimer) {
	        clearTimeout(lastTimer);
	      }
	      lastTimer = setTimeout(function () {
	        result.lastCallThrottled = false;
	        func.apply(_this, args);
	        lastCalled = 0;
	        lastTimer = void 0;
	      }, remaining);
	    }
	
	    return result;
	  }
	
	  return _throttle;
	}
	
	/**
	 * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over
	 * time (`wait`) after specified hits.
	 *
	 * @param {Function} func Function to invoke.
	 * @param {Number} wait Delay in miliseconds.
	 * @param {Number} hits Number of hits after throttling will be applied.
	 * @returns {Function}
	 */
	function throttleAfterHits(func) {
	  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
	  var hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
	
	  var funcThrottle = throttle(func, wait);
	  var remainHits = hits;
	
	  function _clearHits() {
	    remainHits = hits;
	  }
	  function _throttleAfterHits() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    if (remainHits) {
	      remainHits -= 1;
	
	      return func.apply(this, args);
	    }
	
	    return funcThrottle.apply(this, args);
	  }
	  _throttleAfterHits.clearHits = _clearHits;
	
	  return _throttleAfterHits;
	}
	
	/**
	 * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)
	 * has passed without it being called.
	 *
	 * @param {Function} func Function to invoke.
	 * @param {Number} wait Delay in milliseconds.
	 * @returns {Function}
	 */
	function debounce(func) {
	  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
	
	  var lastTimer = null;
	  var result = void 0;
	
	  function _debounce() {
	    var _this2 = this;
	
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }
	
	    if (lastTimer) {
	      clearTimeout(lastTimer);
	    }
	    lastTimer = setTimeout(function () {
	      result = func.apply(_this2, args);
	    }, wait);
	
	    return result;
	  }
	
	  return _debounce;
	}
	
	/**
	 * Creates the function that returns the result of calling the given functions. Result of the first function is passed to
	 * the second as an argument and so on. Only first function in the chain can handle multiple arguments.
	 *
	 * @param {Function} functions Functions to compose.
	 * @returns {Function}
	 */
	function pipe() {
	  for (var _len4 = arguments.length, functions = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    functions[_key4] = arguments[_key4];
	  }
	
	  var firstFunc = functions[0],
	      restFunc = functions.slice(1);
	
	
	  return function _pipe() {
	    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	      args[_key5] = arguments[_key5];
	    }
	
	    return (0, _array.arrayReduce)(restFunc, function (acc, fn) {
	      return fn(acc);
	    }, firstFunc.apply(this, args));
	  };
	}
	
	/**
	 * Creates the function that returns the function with cached arguments.
	 *
	 * @param {Function} func Function to partialization.
	 * @param {Array} params Function arguments to cache.
	 * @returns {Function}
	 */
	function partial(func) {
	  for (var _len6 = arguments.length, params = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
	    params[_key6 - 1] = arguments[_key6];
	  }
	
	  return function _partial() {
	    for (var _len7 = arguments.length, restParams = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	      restParams[_key7] = arguments[_key7];
	    }
	
	    return func.apply(this, params.concat(restParams));
	  };
	}
	
	/**
	 * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched
	 * to the arguments defined in `func` then function will be invoked.
	 * Arguments are added to the stack in direction from the left to the right.
	 *
	 * @example
	 * ```
	 * var replace = curry(function(find, replace, string) {
	 *   return string.replace(find, replace);
	 * });
	 *
	 * // returns function with bounded first argument
	 * var replace = replace('foo')
	 *
	 * // returns replaced string - all arguments was passed so function was invoked
	 * replace('bar', 'Some test with foo...');
	 *
	 * ```
	 *
	 * @param {Function} func Function to currying.
	 * @returns {Function}
	 */
	function curry(func) {
	  var argsLength = func.length;
	
	  function given(argsSoFar) {
	    return function _curry() {
	      for (var _len8 = arguments.length, params = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
	        params[_key8] = arguments[_key8];
	      }
	
	      var passedArgsSoFar = argsSoFar.concat(params);
	      var result = void 0;
	
	      if (passedArgsSoFar.length >= argsLength) {
	        result = func.apply(this, passedArgsSoFar);
	      } else {
	        result = given(passedArgsSoFar);
	      }
	
	      return result;
	    };
	  }
	
	  return given([]);
	}
	
	/**
	 * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched
	 * to the arguments defined in `func` then function will be invoked.
	 * Arguments are added to the stack in direction from the right to the left.
	 *
	 * @example
	 * ```
	 * var replace = curry(function(find, replace, string) {
	 *   return string.replace(find, replace);
	 * });
	 *
	 * // returns function with bounded first argument
	 * var replace = replace('Some test with foo...')
	 *
	 * // returns replaced string - all arguments was passed so function was invoked
	 * replace('bar', 'foo');
	 *
	 * ```
	 *
	 * @param {Function} func Function to currying.
	 * @returns {Function}
	 */
	function curryRight(func) {
	  var argsLength = func.length;
	
	  function given(argsSoFar) {
	    return function _curry() {
	      for (var _len9 = arguments.length, params = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
	        params[_key9] = arguments[_key9];
	      }
	
	      var passedArgsSoFar = argsSoFar.concat(params.reverse());
	      var result = void 0;
	
	      if (passedArgsSoFar.length >= argsLength) {
	        result = func.apply(this, passedArgsSoFar);
	      } else {
	        result = given(passedArgsSoFar);
	      }
	
	      return result;
	    };
	  }
	
	  return given([]);
	}
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};
	
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(9);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};
	
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(12)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(29)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};
	
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	var MIXIN_NAME = 'localHooks';
	
	/**
	 * Mixin object to extend objects functionality for local hooks.
	 *
	 * @type {Object}
	 */
	var localHooks = {
	  /**
	   * Internal hooks storage.
	   */
	  _localHooks: Object.create(null),
	
	  /**
	   * Add hook to the collection.
	   *
	   * @param {String} key Hook name.
	   * @param {Function} callback Hook callback
	   * @returns {Object}
	   */
	  addLocalHook: function addLocalHook(key, callback) {
	    if (!this._localHooks[key]) {
	      this._localHooks[key] = [];
	    }
	    this._localHooks[key].push(callback);
	
	    return this;
	  },
	
	
	  /**
	   * Run hooks.
	   *
	   * @param {String} key Hook name.
	   * @param {*} params
	   */
	  runLocalHooks: function runLocalHooks(key) {
	    var _this = this;
	
	    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      params[_key - 1] = arguments[_key];
	    }
	
	    if (this._localHooks[key]) {
	      (0, _array.arrayEach)(this._localHooks[key], function (callback) {
	        return callback.apply(_this, params);
	      });
	    }
	  },
	
	
	  /**
	   * Clear all added hooks.
	   *
	   * @returns {Object}
	   */
	  clearLocalHooks: function clearLocalHooks() {
	    this._localHooks = {};
	
	    return this;
	  }
	};
	
	(0, _object.defineGetter)(localHooks, 'MIXIN_NAME', MIXIN_NAME, {
	  writable: false,
	  enumerable: false
	});
	
	exports.default = localHooks;
	
	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.createId = createId;
	exports.createDefaultCustomBorder = createDefaultCustomBorder;
	exports.createSingleEmptyBorder = createSingleEmptyBorder;
	exports.createDefaultHtBorder = createDefaultHtBorder;
	exports.createEmptyBorders = createEmptyBorders;
	exports.extendDefaultBorder = extendDefaultBorder;
	exports.checkSelectionBorders = checkSelectionBorders;
	exports.markSelected = markSelected;
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	/**
	 * Create separated id for borders for each cell.
	 *
	 * @param {Number} row Visual row index.
	 * @param {Number} col Visual column index.
	 * @returns {String}
	 */
	function createId(row, col) {
	  return 'border_row' + row + 'col' + col;
	}
	
	/**
	 * Create default single border for each position (top/right/bottom/left).
	 *
	 * @returns {Object} `{{width: number, color: string}}`
	 */
	function createDefaultCustomBorder() {
	  return {
	    width: 1,
	    color: '#000'
	  };
	}
	
	/**
	 * Create default object for empty border.
	 *
	 * @returns {Object} `{{hide: boolean}}`
	 */
	function createSingleEmptyBorder() {
	  return { hide: true };
	}
	
	/**
	 * Create default Handsontable border object.
	 *
	 * @returns {Object} `{{width: number, color: string, cornerVisible: boolean}}`
	 */
	function createDefaultHtBorder() {
	  return {
	    width: 1,
	    color: '#000',
	    cornerVisible: false
	  };
	}
	
	/**
	 * Prepare empty border for each cell with all custom borders hidden.
	 *
	 * @param {Number} row Visual row index.
	 * @param {Number} col Visual column index.
	 * @returns {Object} `{{id: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}`
	 */
	function createEmptyBorders(row, col) {
	  return {
	    id: createId(row, col),
	    border: createDefaultHtBorder(),
	    row: row,
	    col: col,
	    top: createSingleEmptyBorder(),
	    right: createSingleEmptyBorder(),
	    bottom: createSingleEmptyBorder(),
	    left: createSingleEmptyBorder()
	  };
	}
	
	function extendDefaultBorder(defaultBorder, customBorder) {
	  if ((0, _object.hasOwnProperty)(customBorder, 'border')) {
	    defaultBorder.border = customBorder.border;
	  }
	
	  if ((0, _object.hasOwnProperty)(customBorder, 'top')) {
	    if (customBorder.top) {
	      if (!(0, _object.isObject)(customBorder.top)) {
	        customBorder.top = createDefaultCustomBorder();
	      }
	
	      defaultBorder.top = customBorder.top;
	    } else {
	      customBorder.top = createSingleEmptyBorder();
	      defaultBorder.top = customBorder.top;
	    }
	  }
	
	  if ((0, _object.hasOwnProperty)(customBorder, 'right')) {
	    if (customBorder.right) {
	      if (!(0, _object.isObject)(customBorder.right)) {
	        customBorder.right = createDefaultCustomBorder();
	      }
	
	      defaultBorder.right = customBorder.right;
	    } else {
	      customBorder.right = createSingleEmptyBorder();
	      defaultBorder.right = customBorder.right;
	    }
	  }
	
	  if ((0, _object.hasOwnProperty)(customBorder, 'bottom')) {
	    if (customBorder.bottom) {
	      if (!(0, _object.isObject)(customBorder.bottom)) {
	        customBorder.bottom = createDefaultCustomBorder();
	      }
	
	      defaultBorder.bottom = customBorder.bottom;
	    } else {
	      customBorder.bottom = createSingleEmptyBorder();
	      defaultBorder.bottom = customBorder.bottom;
	    }
	  }
	
	  if ((0, _object.hasOwnProperty)(customBorder, 'left')) {
	    if (customBorder.left) {
	      if (!(0, _object.isObject)(customBorder.left)) {
	        customBorder.left = createDefaultCustomBorder();
	      }
	
	      defaultBorder.left = customBorder.left;
	    } else {
	      customBorder.left = createSingleEmptyBorder();
	      defaultBorder.left = customBorder.left;
	    }
	  }
	
	  return defaultBorder;
	}
	
	/**
	 * Check if selection has border.
	 *
	 * @param hot
	 * @param direction
	 */
	function checkSelectionBorders(hot, direction) {
	  var atLeastOneHasBorder = false;
	
	  (0, _array.arrayEach)(hot.getSelectedRange(), function (range) {
	    range.forAll(function (r, c) {
	      var metaBorders = hot.getCellMeta(r, c).borders;
	
	      if (metaBorders) {
	        if (direction) {
	          if (!(0, _object.hasOwnProperty)(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {
	            atLeastOneHasBorder = true;
	            return false; // breaks forAll
	          }
	        } else {
	          atLeastOneHasBorder = true;
	          return false; // breaks forAll
	        }
	      }
	    });
	  });
	
	  return atLeastOneHasBorder;
	}
	
	/**
	 * Mark label in contextMenu as selected.
	 *
	 * @param label
	 * @returns {string}
	 */
	function markSelected(label) {
	  return '<span class="selected">' + String.fromCharCode(10003) + '</span>' + label; // workaround for https://github.com/handsontable/handsontable/issues/1946
	}
	
	/***/ }),
	/* 49 */
	/***/ (function(module, exports) {
	
	module.exports = false;
	
	
	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {
	
	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports) {
	
	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};
	
	
	/***/ }),
	/* 52 */
	/***/ (function(module, exports) {
	
	module.exports = {};
	
	
	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var def = __webpack_require__(20).f;
	var has = __webpack_require__(27);
	var TAG = __webpack_require__(12)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};
	
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {
	
	exports.f = {}.propertyIsEnumerable;
	
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.EditorState = undefined;
	
	var _src = __webpack_require__(4);
	
	var _mixed = __webpack_require__(11);
	
	var EditorState = exports.EditorState = {
	  VIRGIN: 'STATE_VIRGIN', // before editing
	  EDITING: 'STATE_EDITING',
	  WAITING: 'STATE_WAITING', // waiting for async validation
	  FINISHED: 'STATE_FINISHED'
	};
	
	/**
	 * @util
	 * @class BaseEditor
	 */
	function BaseEditor(instance) {
	  this.instance = instance;
	  this.state = EditorState.VIRGIN;
	
	  this._opened = false;
	  this._fullEditMode = false;
	  this._closeCallback = null;
	
	  this.init();
	}
	
	BaseEditor.prototype._fireCallbacks = function (result) {
	  if (this._closeCallback) {
	    this._closeCallback(result);
	    this._closeCallback = null;
	  }
	};
	
	BaseEditor.prototype.init = function () {};
	
	BaseEditor.prototype.getValue = function () {
	  throw Error('Editor getValue() method unimplemented');
	};
	
	BaseEditor.prototype.setValue = function () {
	  throw Error('Editor setValue() method unimplemented');
	};
	
	BaseEditor.prototype.open = function () {
	  throw Error('Editor open() method unimplemented');
	};
	
	BaseEditor.prototype.close = function () {
	  throw Error('Editor close() method unimplemented');
	};
	
	BaseEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {
	  this.TD = td;
	  this.row = row;
	  this.col = col;
	  this.prop = prop;
	  this.originalValue = originalValue;
	  this.cellProperties = cellProperties;
	  this.state = EditorState.VIRGIN;
	};
	
	BaseEditor.prototype.extend = function () {
	  var baseClass = this.constructor;
	
	  function Editor() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    baseClass.apply(this, args);
	  }
	
	  function inherit(Child, Parent) {
	    function Bridge() {}
	    Bridge.prototype = Parent.prototype;
	    Child.prototype = new Bridge();
	    Child.prototype.constructor = Child;
	
	    return Child;
	  }
	
	  return inherit(Editor, baseClass);
	};
	
	BaseEditor.prototype.saveValue = function (value, ctrlDown) {
	  var selection = void 0;
	  var tmp = void 0;
	
	  // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)
	  if (ctrlDown) {
	    selection = this.instance.getSelectedLast();
	
	    if (selection[0] > selection[2]) {
	      tmp = selection[0];
	      selection[0] = selection[2];
	      selection[2] = tmp;
	    }
	    if (selection[1] > selection[3]) {
	      tmp = selection[1];
	      selection[1] = selection[3];
	      selection[3] = tmp;
	    }
	  } else {
	    selection = [this.row, this.col, null, null];
	  }
	
	  this.instance.populateFromArray(selection[0], selection[1], value, selection[2], selection[3], 'edit');
	};
	
	BaseEditor.prototype.beginEditing = function (newInitialValue, event) {
	  if (this.state !== EditorState.VIRGIN) {
	    return;
	  }
	  this.instance.view.scrollViewport(new _src.CellCoords(this.row, this.col));
	  this.state = EditorState.EDITING;
	
	  // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,
	  // otherwise IME (editor for Asia users) doesn't work.
	  if (this.isInFullEditMode()) {
	    var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : (0, _mixed.stringify)(this.originalValue);
	
	    this.setValue(stringifiedInitialValue);
	  }
	
	  this.open(event);
	  this._opened = true;
	  this.focus();
	
	  // only rerender the selections (FillHandle should disappear when beginediting is triggered)
	  this.instance.view.render();
	
	  this.instance.runHooks('afterBeginEditing', this.row, this.col);
	};
	
	BaseEditor.prototype.finishEditing = function (restoreOriginalValue, ctrlDown, callback) {
	  var _this = this;
	  var val = void 0;
	
	  if (callback) {
	    var previousCloseCallback = this._closeCallback;
	
	    this._closeCallback = function (result) {
	      if (previousCloseCallback) {
	        previousCloseCallback(result);
	      }
	
	      callback(result);
	      _this.instance.view.render();
	    };
	  }
	
	  if (this.isWaiting()) {
	    return;
	  }
	
	  if (this.state === EditorState.VIRGIN) {
	    this.instance._registerTimeout(function () {
	      _this._fireCallbacks(true);
	    });
	
	    return;
	  }
	
	  if (this.state === EditorState.EDITING) {
	    if (restoreOriginalValue) {
	      this.cancelChanges();
	      this.instance.view.render();
	
	      return;
	    }
	
	    var value = this.getValue();
	
	    if (this.instance.getSettings().trimWhitespace) {
	      // We trim only string values
	      val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];
	    } else {
	      val = [[value]];
	    }
	
	    this.state = EditorState.WAITING;
	    this.saveValue(val, ctrlDown);
	
	    if (this.instance.getCellValidator(this.cellProperties)) {
	      this.instance.addHookOnce('postAfterValidate', function (result) {
	        _this.state = EditorState.FINISHED;
	        _this.discardEditor(result);
	      });
	    } else {
	      this.state = EditorState.FINISHED;
	      this.discardEditor(true);
	    }
	  }
	};
	
	BaseEditor.prototype.cancelChanges = function () {
	  this.state = EditorState.FINISHED;
	  this.discardEditor();
	};
	
	BaseEditor.prototype.discardEditor = function (result) {
	  if (this.state !== EditorState.FINISHED) {
	    return;
	  }
	
	  // validator was defined and failed
	  if (result === false && this.cellProperties.allowInvalid !== true) {
	    this.instance.selectCell(this.row, this.col);
	    this.focus();
	    this.state = EditorState.EDITING;
	    this._fireCallbacks(false);
	  } else {
	    this.close();
	    this._opened = false;
	    this._fullEditMode = false;
	    this.state = EditorState.VIRGIN;
	    this._fireCallbacks(true);
	  }
	};
	
	/**
	 * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated
	 * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.
	 */
	BaseEditor.prototype.enableFullEditMode = function () {
	  this._fullEditMode = true;
	};
	
	/**
	 * Checks if editor is in full edit mode.
	 *
	 * @returns {Boolean}
	 */
	BaseEditor.prototype.isInFullEditMode = function () {
	  return this._fullEditMode;
	};
	
	BaseEditor.prototype.isOpened = function () {
	  return this._opened;
	};
	
	BaseEditor.prototype.isWaiting = function () {
	  return this.state === EditorState.WAITING;
	};
	
	BaseEditor.prototype.checkEditorSection = function () {
	  var totalRows = this.instance.countRows();
	  var section = '';
	
	  if (this.row < this.instance.getSettings().fixedRowsTop) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'top-left-corner';
	    } else {
	      section = 'top';
	    }
	  } else if (this.instance.getSettings().fixedRowsBottom && this.row >= totalRows - this.instance.getSettings().fixedRowsBottom) {
	    if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	      section = 'bottom-left-corner';
	    } else {
	      section = 'bottom';
	    }
	  } else if (this.col < this.instance.getSettings().fixedColumnsLeft) {
	    section = 'left';
	  }
	
	  return section;
	};
	
	exports.default = BaseEditor;
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * CellCoords holds cell coordinates (row, column) and few method to validate them and retrieve as an array or an object.
	 *
	 * @util
	 */
	var CellCoords = function () {
	  function CellCoords(row, column) {
	    _classCallCheck(this, CellCoords);
	
	    /**
	     * Row index.
	     *
	     * @type {Number}
	     */
	    this.row = null;
	    /**
	     * Column index.
	     *
	     * @type {Number}
	     */
	    this.col = null;
	
	    if (typeof row !== 'undefined' && typeof column !== 'undefined') {
	      this.row = row;
	      this.col = column;
	    }
	  }
	
	  /**
	   * Checks if given set of coordinates is valid in context of a given Walkontable instance.
	   *
	   * @param {Walkontable} wot A Walkontable instance.
	   * @returns {Boolean}
	   */
	
	
	  _createClass(CellCoords, [{
	    key: 'isValid',
	    value: function isValid(wot) {
	      // is it a valid cell index (0 or higher)
	      if (this.row < 0 || this.col < 0) {
	        return false;
	      }
	      // is selection within total rows and columns
	      if (this.row >= wot.getSetting('totalRows') || this.col >= wot.getSetting('totalColumns')) {
	        return false;
	      }
	
	      return true;
	    }
	
	    /**
	     * Checks if this cell coordinates are the same as cell coordinates given as an argument.
	     *
	     * @param {CellCoords} cellCoords Cell coordinates to equal.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isEqual',
	    value: function isEqual(cellCoords) {
	      if (cellCoords === this) {
	        return true;
	      }
	
	      return this.row === cellCoords.row && this.col === cellCoords.col;
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in south-east from this cell coordinates.
	     *
	     * @param {Object} testedCoords Cell coordinates to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSouthEastOf',
	    value: function isSouthEastOf(testedCoords) {
	      return this.row >= testedCoords.row && this.col >= testedCoords.col;
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in north-east from this cell coordinates.
	     *
	     * @param {Object} testedCoords Cell coordinates to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isNorthWestOf',
	    value: function isNorthWestOf(testedCoords) {
	      return this.row <= testedCoords.row && this.col <= testedCoords.col;
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in south-west from this cell coordinates.
	     *
	     * @param {Object} testedCoords Cell coordinates to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSouthWestOf',
	    value: function isSouthWestOf(testedCoords) {
	      return this.row >= testedCoords.row && this.col <= testedCoords.col;
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in north-east from this cell coordinates.
	     *
	     * @param {Object} testedCoords Cell coordinates to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isNorthEastOf',
	    value: function isNorthEastOf(testedCoords) {
	      return this.row <= testedCoords.row && this.col >= testedCoords.col;
	    }
	
	    /**
	     * Converts CellCoords to literal object with `row` and `col` properties.
	     *
	     * @return {Object} Returns a literal object with `row` and `col` properties.
	     */
	
	  }, {
	    key: 'toObject',
	    value: function toObject() {
	      return {
	        row: this.row,
	        col: this.col
	      };
	    }
	  }]);
	
	  return CellCoords;
	}();
	
	exports.default = CellCoords;
	
	/***/ }),
	/* 57 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_57__;
	
	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.log = log;
	exports.warn = warn;
	exports.info = info;
	exports.error = error;
	
	var _mixed = __webpack_require__(11);
	
	/**
	 * Logs message to the console if the `console` object is exposed.
	 *
	 * @param {...*} args Values which will be logged.
	 */
	function log() {
	  if ((0, _mixed.isDefined)(console)) {
	    var _console;
	
	    (_console = console).log.apply(_console, arguments);
	  }
	}
	
	/**
	 * Logs warn to the console if the `console` object is exposed.
	 *
	 * @param {...*} args Values which will be logged.
	 */
	/* eslint-disable no-console */
	/* eslint-disable no-restricted-globals */
	
	/**
	 * "In Internet Explorer 9 (and 8), the console object is only exposed when the developer tools are opened
	 * for a particular tab."
	 *
	 * Source: https://stackoverflow.com/a/5473193
	 */
	
	function warn() {
	  if ((0, _mixed.isDefined)(console)) {
	    var _console2;
	
	    (_console2 = console).warn.apply(_console2, arguments);
	  }
	}
	
	/**
	 * Logs info to the console if the `console` object is exposed.
	 *
	 * @param {...*} args Values which will be logged.
	 */
	function info() {
	  if ((0, _mixed.isDefined)(console)) {
	    var _console3;
	
	    (_console3 = console).info.apply(_console3, arguments);
	  }
	}
	
	/**
	 * Logs error to the console if the `console` object is exposed.
	 *
	 * @param {...*} args Values which will be logged.
	 */
	function error() {
	  if ((0, _mixed.isDefined)(console)) {
	    var _console4;
	
	    (_console4 = console).error.apply(_console4, arguments);
	  }
	}
	
	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _autoResize = __webpack_require__(234);
	
	var _autoResize2 = _interopRequireDefault(_autoResize);
	
	var _baseEditor = __webpack_require__(55);
	
	var _baseEditor2 = _interopRequireDefault(_baseEditor);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _unicode = __webpack_require__(21);
	
	var _event = __webpack_require__(13);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TextEditor = _baseEditor2.default.prototype.extend();
	
	/**
	 * @private
	 * @editor TextEditor
	 * @class TextEditor
	 * @dependencies autoResize
	 */
	TextEditor.prototype.init = function () {
	  var that = this;
	  this.createElements();
	  this.eventManager = new _eventManager2.default(this);
	  this.bindEvents();
	  this.autoResize = (0, _autoResize2.default)();
	  this.holderZIndex = -1;
	
	  this.instance.addHook('afterDestroy', function () {
	    that.destroy();
	  });
	};
	
	TextEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {
	  var _this = this;
	
	  var previousState = this.state;
	
	  for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
	    args[_key - 6] = arguments[_key];
	  }
	
	  _baseEditor2.default.prototype.prepare.apply(this, [row, col, prop, td, originalValue, cellProperties].concat(args));
	
	  if (!cellProperties.readOnly) {
	    this.refreshDimensions(true);
	
	    var allowInvalid = cellProperties.allowInvalid,
	        fragmentSelection = cellProperties.fragmentSelection;
	
	
	    if (allowInvalid) {
	      this.TEXTAREA.value = ''; // Remove an empty space from texarea (added by copyPaste plugin to make copy/paste functionality work with IME)
	    }
	
	    if (previousState !== _baseEditor.EditorState.FINISHED) {
	      this.hideEditableElement();
	    }
	
	    // @TODO: The fragmentSelection functionality is conflicted with IME. For this feature refocus has to
	    // be disabled (to make IME working).
	    var restoreFocus = !fragmentSelection;
	
	    if (restoreFocus) {
	      this.instance._registerImmediate(function () {
	        return _this.focus();
	      });
	    }
	  }
	};
	
	TextEditor.prototype.hideEditableElement = function () {
	  this.textareaParentStyle.top = '-9999px';
	  this.textareaParentStyle.left = '-9999px';
	  this.textareaParentStyle.zIndex = '-1';
	  this.textareaParentStyle.position = 'fixed';
	};
	
	TextEditor.prototype.showEditableElement = function () {
	  this.textareaParentStyle.zIndex = this.holderZIndex >= 0 ? this.holderZIndex : '';
	  this.textareaParentStyle.position = '';
	};
	
	TextEditor.prototype.getValue = function () {
	  return this.TEXTAREA.value;
	};
	
	TextEditor.prototype.setValue = function (newValue) {
	  this.TEXTAREA.value = newValue;
	};
	
	TextEditor.prototype.beginEditing = function () {
	  if (this.state !== _baseEditor.EditorState.VIRGIN) {
	    return;
	  }
	
	  this.TEXTAREA.value = ''; // Remove an empty space from texarea (added by copyPaste plugin to make copy/paste functionality work with IME).
	
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	
	  _baseEditor2.default.prototype.beginEditing.apply(this, args);
	};
	
	var onBeforeKeyDown = function onBeforeKeyDown(event) {
	  var instance = this;
	  var that = instance.getActiveEditor();
	
	  // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	
	  // Process only events that have been fired in the editor
	  if (event.target !== that.TEXTAREA || (0, _event.isImmediatePropagationStopped)(event)) {
	    return;
	  }
	
	  if (event.keyCode === 17 || event.keyCode === 224 || event.keyCode === 91 || event.keyCode === 93) {
	    // when CTRL or its equivalent is pressed and cell is edited, don't prepare selectable text in textarea
	    (0, _event.stopImmediatePropagation)(event);
	    return;
	  }
	
	  switch (event.keyCode) {
	    case _unicode.KEY_CODES.ARROW_RIGHT:
	      if (that.isInFullEditMode()) {
	        if (!that.isWaiting() && !that.allowKeyEventPropagation || !that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode)) {
	          (0, _event.stopImmediatePropagation)(event);
	        }
	      }
	      break;
	    case _unicode.KEY_CODES.ARROW_LEFT:
	      if (that.isInFullEditMode()) {
	        if (!that.isWaiting() && !that.allowKeyEventPropagation || !that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode)) {
	          (0, _event.stopImmediatePropagation)(event);
	        }
	      }
	      break;
	    case _unicode.KEY_CODES.ARROW_UP:
	    case _unicode.KEY_CODES.ARROW_DOWN:
	      if (that.isInFullEditMode()) {
	        if (!that.isWaiting() && !that.allowKeyEventPropagation || !that.isWaiting() && that.allowKeyEventPropagation && !that.allowKeyEventPropagation(event.keyCode)) {
	          (0, _event.stopImmediatePropagation)(event);
	        }
	      }
	      break;
	
	    case _unicode.KEY_CODES.ENTER:
	      {
	        var isMultipleSelection = this.selection.isMultiple();
	
	        if (ctrlDown && !isMultipleSelection || event.altKey) {
	          // if ctrl+enter or alt+enter, add new line
	          if (that.isOpened()) {
	            var caretPosition = (0, _element.getCaretPosition)(that.TEXTAREA);
	            var value = that.getValue();
	            var newValue = value.slice(0, caretPosition) + '\n' + value.slice(caretPosition);
	
	            that.setValue(newValue);
	
	            (0, _element.setCaretPosition)(that.TEXTAREA, caretPosition + 1);
	          } else {
	            that.beginEditing(that.originalValue + '\n');
	          }
	          (0, _event.stopImmediatePropagation)(event);
	        }
	        event.preventDefault(); // don't add newline to field
	        break;
	      }
	    case _unicode.KEY_CODES.A:
	    case _unicode.KEY_CODES.X:
	    case _unicode.KEY_CODES.C:
	    case _unicode.KEY_CODES.V:
	      if (ctrlDown) {
	        (0, _event.stopImmediatePropagation)(event); // CTRL+A, CTRL+C, CTRL+V, CTRL+X should only work locally when cell is edited (not in table context)
	      }
	      break;
	
	    case _unicode.KEY_CODES.BACKSPACE:
	    case _unicode.KEY_CODES.DELETE:
	    case _unicode.KEY_CODES.HOME:
	    case _unicode.KEY_CODES.END:
	      (0, _event.stopImmediatePropagation)(event); // backspace, delete, home, end should only work locally when cell is edited (not in table context)
	      break;
	    default:
	      break;
	  }
	
	  if ([_unicode.KEY_CODES.ARROW_UP, _unicode.KEY_CODES.ARROW_RIGHT, _unicode.KEY_CODES.ARROW_DOWN, _unicode.KEY_CODES.ARROW_LEFT].indexOf(event.keyCode) === -1) {
	    that.autoResize.resize(String.fromCharCode(event.keyCode));
	  }
	};
	
	TextEditor.prototype.open = function () {
	  this.refreshDimensions(); // need it instantly, to prevent https://github.com/handsontable/handsontable/issues/348
	  this.showEditableElement();
	
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	
	TextEditor.prototype.close = function () {
	  this.autoResize.unObserve();
	
	  if (document.activeElement === this.TEXTAREA) {
	    this.instance.listen(); // don't refocus the table if user focused some cell outside of HT on purpose
	  }
	
	  this.hideEditableElement();
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	
	TextEditor.prototype.focus = function () {
	  // For IME editor textarea element must be focused using ".select" method. Using ".focus" browser automatically scroll into
	  // the focused element which is undesire effect.
	  this.TEXTAREA.select();
	  (0, _element.setCaretPosition)(this.TEXTAREA, this.TEXTAREA.value.length);
	};
	
	TextEditor.prototype.createElements = function () {
	  this.TEXTAREA = document.createElement('TEXTAREA');
	  this.TEXTAREA.tabIndex = -1;
	
	  (0, _element.addClass)(this.TEXTAREA, 'handsontableInput');
	
	  this.textareaStyle = this.TEXTAREA.style;
	  this.textareaStyle.width = 0;
	  this.textareaStyle.height = 0;
	
	  this.TEXTAREA_PARENT = document.createElement('DIV');
	  (0, _element.addClass)(this.TEXTAREA_PARENT, 'handsontableInputHolder');
	
	  this.textareaParentStyle = this.TEXTAREA_PARENT.style;
	  this.textareaParentStyle.zIndex = '-1';
	
	  this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	
	  this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);
	};
	
	TextEditor.prototype.getEditedCell = function () {
	  var editorSection = this.checkEditorSection();
	  var editedCell = void 0;
	
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.holderZIndex = 101;
	      break;
	    case 'top-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.holderZIndex = 103;
	      break;
	    case 'bottom-left-corner':
	      editedCell = this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.holderZIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.holderZIndex = 102;
	      break;
	    case 'bottom':
	      editedCell = this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.holderZIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.holderZIndex = -1;
	      break;
	  }
	
	  return editedCell !== -1 && editedCell !== -2 ? editedCell : void 0;
	};
	
	TextEditor.prototype.refreshValue = function () {
	  var physicalRow = this.instance.toPhysicalRow(this.row);
	  var sourceData = this.instance.getSourceDataAtCell(physicalRow, this.col);
	  this.originalValue = sourceData;
	
	  this.setValue(sourceData);
	  this.refreshDimensions();
	};
	
	TextEditor.prototype.refreshDimensions = function () {
	  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	  if (this.state !== _baseEditor.EditorState.EDITING && !force) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	
	  // TD is outside of the viewport.
	  if (!this.TD) {
	    if (!force) {
	      this.close(true);
	    }
	
	    return;
	  }
	
	  var currentOffset = (0, _element.offset)(this.TD);
	  var containerOffset = (0, _element.offset)(this.instance.rootElement);
	  var scrollableContainer = this.instance.view.wt.wtOverlays.topOverlay.mainTableScrollableElement;
	  var totalRowsCount = this.instance.countRows();
	  var containerScrollTop = scrollableContainer !== window ? scrollableContainer.scrollTop : 0;
	  var containerScrollLeft = scrollableContainer !== window ? scrollableContainer.scrollLeft : 0;
	
	  var editorSection = this.checkEditorSection();
	
	  var scrollTop = ['', 'left'].includes(editorSection) ? containerScrollTop : 0;
	  var scrollLeft = ['', 'top', 'bottom'].includes(editorSection) ? containerScrollLeft : 0;
	
	  // If colHeaders is disabled, cells in the first row have border-top
	  var editTopModifier = currentOffset.top === containerOffset.top ? 0 : 1;
	
	  var settings = this.instance.getSettings();
	  var colHeadersCount = this.instance.hasColHeaders();
	  var backgroundColor = this.TD.style.backgroundColor;
	
	  var editTop = currentOffset.top - containerOffset.top - editTopModifier - scrollTop;
	  var editLeft = currentOffset.left - containerOffset.left - 1 - scrollLeft;
	  var cssTransformOffset = void 0;
	
	  // TODO: Refactor this to the new instance.getCell method (from #ply-59), after 0.12.1 is released
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	    default:
	      break;
	  }
	
	  if (colHeadersCount && this.instance.getSelectedLast()[0] === 0 || settings.fixedRowsBottom && this.instance.getSelectedLast()[0] === totalRowsCount - settings.fixedRowsBottom) {
	    editTop += 1;
	  }
	
	  if (this.instance.getSelectedLast()[1] === 0) {
	    editLeft += 1;
	  }
	
	  if (cssTransformOffset && cssTransformOffset !== -1) {
	    this.textareaParentStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    (0, _element.resetCssTransform)(this.TEXTAREA_PARENT);
	  }
	
	  this.textareaParentStyle.top = editTop + 'px';
	  this.textareaParentStyle.left = editLeft + 'px';
	  this.showEditableElement();
	
	  var firstRowOffset = this.instance.view.wt.wtViewport.rowsRenderCalculator.startPosition;
	  var firstColumnOffset = this.instance.view.wt.wtViewport.columnsRenderCalculator.startPosition;
	  var horizontalScrollPosition = this.instance.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	  var verticalScrollPosition = this.instance.view.wt.wtOverlays.topOverlay.getScrollPosition();
	  var scrollbarWidth = (0, _element.getScrollbarWidth)();
	
	  var cellTopOffset = this.TD.offsetTop + firstRowOffset - verticalScrollPosition;
	  var cellLeftOffset = this.TD.offsetLeft + firstColumnOffset - horizontalScrollPosition;
	
	  var width = (0, _element.innerWidth)(this.TD) - 8;
	  var actualVerticalScrollbarWidth = (0, _element.hasVerticalScrollbar)(scrollableContainer) ? scrollbarWidth : 0;
	  var actualHorizontalScrollbarWidth = (0, _element.hasHorizontalScrollbar)(scrollableContainer) ? scrollbarWidth : 0;
	  var maxWidth = this.instance.view.maximumVisibleElementWidth(cellLeftOffset) - 9 - actualVerticalScrollbarWidth;
	  var height = this.TD.scrollHeight + 1;
	  var maxHeight = Math.max(this.instance.view.maximumVisibleElementHeight(cellTopOffset) - actualHorizontalScrollbarWidth, 23);
	
	  var cellComputedStyle = (0, _element.getComputedStyle)(this.TD);
	
	  this.TEXTAREA.style.fontSize = cellComputedStyle.fontSize;
	  this.TEXTAREA.style.fontFamily = cellComputedStyle.fontFamily;
	  this.TEXTAREA.style.backgroundColor = backgroundColor || (0, _element.getComputedStyle)(this.TEXTAREA).backgroundColor;
	
	  this.autoResize.init(this.TEXTAREA, {
	    minHeight: Math.min(height, maxHeight),
	    maxHeight: maxHeight, // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
	    minWidth: Math.min(width, maxWidth),
	    maxWidth: maxWidth // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
	  }, true);
	};
	
	TextEditor.prototype.bindEvents = function () {
	  var editor = this;
	
	  this.eventManager.addEventListener(this.TEXTAREA, 'cut', function (event) {
	    (0, _event.stopPropagation)(event);
	  });
	  this.eventManager.addEventListener(this.TEXTAREA, 'paste', function (event) {
	    (0, _event.stopPropagation)(event);
	  });
	
	  this.instance.addHook('afterScrollHorizontally', function () {
	    editor.refreshDimensions();
	  });
	
	  this.instance.addHook('afterScrollVertically', function () {
	    editor.refreshDimensions();
	  });
	
	  this.instance.addHook('afterColumnResize', function () {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	
	  this.instance.addHook('afterRowResize', function () {
	    editor.refreshDimensions();
	    editor.focus();
	  });
	
	  this.instance.addHook('afterDestroy', function () {
	    editor.eventManager.destroy();
	  });
	};
	
	TextEditor.prototype.destroy = function () {
	  this.eventManager.destroy();
	};
	
	exports.default = TextEditor;
	
	/***/ }),
	/* 60 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(60);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var redefine = __webpack_require__(28);
	module.exports = function (target, src, safe) {
	  for (var key in src) redefine(target, key, src[key], safe);
	  return target;
	};
	
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {
	
	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports) {
	
	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};
	
	
	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx = __webpack_require__(30);
	var call = __webpack_require__(104);
	var isArrayIter = __webpack_require__(105);
	var anObject = __webpack_require__(18);
	var toLength = __webpack_require__(25);
	var getIterFn = __webpack_require__(106);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	
	
	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var global = __webpack_require__(15);
	var $export = __webpack_require__(3);
	var redefine = __webpack_require__(28);
	var redefineAll = __webpack_require__(62);
	var meta = __webpack_require__(32);
	var forOf = __webpack_require__(65);
	var anInstance = __webpack_require__(64);
	var isObject = __webpack_require__(9);
	var fails = __webpack_require__(23);
	var $iterDetect = __webpack_require__(81);
	var setToStringTag = __webpack_require__(53);
	var inheritIfRequired = __webpack_require__(210);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};
	
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var pIE = __webpack_require__(54);
	var createDesc = __webpack_require__(51);
	var toIObject = __webpack_require__(24);
	var toPrimitive = __webpack_require__(75);
	var has = __webpack_require__(27);
	var IE8_DOM_DEFINE = __webpack_require__(100);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(22) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};
	
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(30);
	var IObject = __webpack_require__(77);
	var toObject = __webpack_require__(31);
	var toLength = __webpack_require__(25);
	var asc = __webpack_require__(211);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};
	
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports) {
	
	exports.f = Object.getOwnPropertySymbols;
	
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var hide = __webpack_require__(29);
	var redefine = __webpack_require__(28);
	var fails = __webpack_require__(23);
	var defined = __webpack_require__(36);
	var wks = __webpack_require__(12);
	
	module.exports = function (KEY, length, exec) {
	  var SYMBOL = wks(KEY);
	  var fns = exec(defined, SYMBOL, ''[KEY]);
	  var strfn = fns[0];
	  var rxfn = fns[1];
	  if (fails(function () {
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  })) {
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return rxfn.call(string, this); }
	    );
	  }
	};
	
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.DEFAULT_LANGUAGE_CODE = exports.getLanguagesDictionaries = exports.getDefaultLanguageDictionary = exports.hasLanguageDictionary = exports.getLanguageDictionary = exports.registerLanguageDictionary = undefined;
	
	var _object = __webpack_require__(1);
	
	var _utils = __webpack_require__(199);
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _enUS = __webpack_require__(270);
	
	var _enUS2 = _interopRequireDefault(_enUS);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DEFAULT_LANGUAGE_CODE = _enUS2.default.languageCode;
	
	var _staticRegister = (0, _staticRegister3.default)('languagesDictionaries'),
	    registerGloballyLanguageDictionary = _staticRegister.register,
	    getGlobalLanguageDictionary = _staticRegister.getItem,
	    hasGlobalLanguageDictionary = _staticRegister.hasItem,
	    getGlobalLanguagesDictionaries = _staticRegister.getValues;
	
	/**
	 * Register language dictionary for specific language code.
	 *
	 * @param {String|Object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.
	 * @param {Object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).
	 */
	
	
	function registerLanguage(languageCodeOrDictionary, dictionary) {
	  var languageCode = languageCodeOrDictionary;
	  var dictionaryObject = dictionary;
	
	  // Dictionary passed as first argument.
	  if ((0, _object.isObject)(languageCodeOrDictionary)) {
	    dictionaryObject = languageCodeOrDictionary;
	    languageCode = dictionaryObject.languageCode;
	  }
	
	  extendLanguageDictionary(languageCode, dictionaryObject);
	  registerGloballyLanguageDictionary(languageCode, (0, _object.deepClone)(dictionaryObject));
	
	  // We do not allow user to work with dictionary by reference, it can cause lot of bugs.
	  return (0, _object.deepClone)(dictionaryObject);
	}
	
	/**
	 * Get language dictionary for specific language code.
	 *
	 * @param {String} languageCode Language code.
	 * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).
	 */
	function getLanguage(languageCode) {
	  if (!hasLanguage(languageCode)) {
	    return null;
	  }
	
	  return (0, _object.deepClone)(getGlobalLanguageDictionary(languageCode));
	}
	
	/**
	 *
	 * Get if language with specified language code was registered.
	 *
	 * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.
	 * @returns {Boolean}
	 */
	function hasLanguage(languageCode) {
	  return hasGlobalLanguageDictionary(languageCode);
	}
	
	/**
	 * Get default language dictionary.
	 *
	 * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).
	 */
	function getDefaultLanguage() {
	  return _enUS2.default;
	}
	
	/**
	 * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value ("dictionary gaps" are supplemented).
	 *
	 * @private
	 * @param {String} languageCode Language code.
	 * @param {Object} dictionary Dictionary which is extended.
	 */
	function extendLanguageDictionary(languageCode, dictionary) {
	  if (languageCode !== DEFAULT_LANGUAGE_CODE) {
	    (0, _utils.extendNotExistingKeys)(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));
	  }
	}
	
	/**
	 * Get registered language dictionaries.
	 *
	 * @returns {Array}
	 */
	function getLanguages() {
	  return getGlobalLanguagesDictionaries();
	}
	
	exports.registerLanguageDictionary = registerLanguage;
	exports.getLanguageDictionary = getLanguage;
	exports.hasLanguageDictionary = hasLanguage;
	exports.getDefaultLanguageDictionary = getDefaultLanguage;
	exports.getLanguagesDictionaries = getLanguages;
	exports.DEFAULT_LANGUAGE_CODE = DEFAULT_LANGUAGE_CODE;
	
	/**
	 * Automatically registers default dictionary.
	 */
	
	registerLanguage(_enUS2.default);
	
	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.SELECTION_TYPES = exports.SELECTION_TYPE_OBJECT = exports.SELECTION_TYPE_ARRAY = exports.SELECTION_TYPE_EMPTY = exports.SELECTION_TYPE_UNRECOGNIZED = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.detectSelectionType = detectSelectionType;
	exports.normalizeSelectionFactory = normalizeSelectionFactory;
	exports.transformSelectionToColumnDistance = transformSelectionToColumnDistance;
	exports.transformSelectionToRowDistance = transformSelectionToRowDistance;
	exports.isValidCoord = isValidCoord;
	
	var _src = __webpack_require__(4);
	
	var _array = __webpack_require__(2);
	
	var _mixed = __webpack_require__(11);
	
	var SELECTION_TYPE_UNRECOGNIZED = exports.SELECTION_TYPE_UNRECOGNIZED = 0;
	var SELECTION_TYPE_EMPTY = exports.SELECTION_TYPE_EMPTY = 1;
	var SELECTION_TYPE_ARRAY = exports.SELECTION_TYPE_ARRAY = 2;
	var SELECTION_TYPE_OBJECT = exports.SELECTION_TYPE_OBJECT = 3;
	var SELECTION_TYPES = exports.SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];
	var ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];
	var rootCall = Symbol('root');
	var childCall = Symbol('child');
	
	/**
	 * Detect selection schema structure.
	 *
	 * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by
	 *                            `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`
	 *                            and `hot.getSelectedRangeLast()` methods.
	 * @returns {Number} Returns a number that specifies the type of detected selection schema. If selection schema type
	 *                   is unrecognized than it returns `0`.
	 */
	function detectSelectionType(selectionRanges) {
	  var _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;
	
	  if (_callSymbol !== rootCall && _callSymbol !== childCall) {
	    throw new Error('The second argument is used internally only and cannot be overwritten.');
	  }
	
	  var isArray = Array.isArray(selectionRanges);
	  var isRootCall = _callSymbol === rootCall;
	  var result = SELECTION_TYPE_UNRECOGNIZED;
	
	  if (isArray) {
	    var firstItem = selectionRanges[0];
	
	    if (selectionRanges.length === 0) {
	      result = SELECTION_TYPE_EMPTY;
	    } else if (isRootCall && firstItem instanceof _src.CellRange) {
	      result = SELECTION_TYPE_OBJECT;
	    } else if (isRootCall && Array.isArray(firstItem)) {
	      result = detectSelectionType(firstItem, childCall);
	    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {
	      var isArrayType = !selectionRanges.some(function (value, index) {
	        return !ARRAY_TYPE_PATTERN[index].includes(typeof value === 'undefined' ? 'undefined' : _typeof(value));
	      });
	
	      if (isArrayType) {
	        result = SELECTION_TYPE_ARRAY;
	      }
	    }
	  }
	
	  return result;
	}
	
	/**
	 * Factory function designed for normalization data schema from different data structures of the selection ranges.
	 *
	 * @param {String} type Selection type which will be processed.
	 * @param {Object} [options]
	 * @param {Boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the
	 *                                                selected cells won't be changed. Otherwise, the selection will be
	 *                                                normalized to values starting from top-left to bottom-right.
	 * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column
	 *                                       defined as props should be normalized to the numeric values.
	 * @returns {Number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).
	 */
	function normalizeSelectionFactory(type) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$keepDirection = _ref.keepDirection,
	      keepDirection = _ref$keepDirection === undefined ? false : _ref$keepDirection,
	      propToCol = _ref.propToCol;
	
	  if (!SELECTION_TYPES.includes(type)) {
	    throw new Error('Unsupported selection ranges schema type was provided.');
	  }
	
	  return function (selection) {
	    var isObjectType = type === SELECTION_TYPE_OBJECT;
	    var rowStart = isObjectType ? selection.from.row : selection[0];
	    var columnStart = isObjectType ? selection.from.col : selection[1];
	    var rowEnd = isObjectType ? selection.to.row : selection[2];
	    var columnEnd = isObjectType ? selection.to.col : selection[3];
	
	    if (typeof propToCol === 'function') {
	      if (typeof columnStart === 'string') {
	        columnStart = propToCol(columnStart);
	      }
	      if (typeof columnEnd === 'string') {
	        columnEnd = propToCol(columnEnd);
	      }
	    }
	
	    if ((0, _mixed.isUndefined)(rowEnd)) {
	      rowEnd = rowStart;
	    }
	    if ((0, _mixed.isUndefined)(columnEnd)) {
	      columnEnd = columnStart;
	    }
	
	    if (!keepDirection) {
	      var origRowStart = rowStart;
	      var origColumnStart = columnStart;
	      var origRowEnd = rowEnd;
	      var origColumnEnd = columnEnd;
	
	      rowStart = Math.min(origRowStart, origRowEnd);
	      columnStart = Math.min(origColumnStart, origColumnEnd);
	      rowEnd = Math.max(origRowStart, origRowEnd);
	      columnEnd = Math.max(origColumnStart, origColumnEnd);
	    }
	
	    return [rowStart, columnStart, rowEnd, columnEnd];
	  };
	}
	
	/**
	 * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized
	 * data structure. It merges repeated ranges into consecutive coordinates. The returned structure
	 * contains an array of arrays. The single item contains at index 0 visual column index from the selection was
	 * started and at index 1 distance as a count of selected columns.
	 *
	 * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.
	 * @return {Array[]} Returns an array of arrays with ranges defines in that schema:
	 *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.
	 *                   The column distances are always created starting from the left (zero index) to the
	 *                   right (the latest column index).
	 */
	function transformSelectionToColumnDistance(selectionRanges) {
	  var selectionType = detectSelectionType(selectionRanges);
	
	  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {
	    return [];
	  }
	
	  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);
	  var unorderedIndexes = new Set();
	
	  // Iterate through all ranges and collect all column indexes which are not saved yet.
	  (0, _array.arrayEach)(selectionRanges, function (selection) {
	    var _selectionSchemaNorma = selectionSchemaNormalizer(selection),
	        _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),
	        columnStart = _selectionSchemaNorma2[1],
	        columnEnd = _selectionSchemaNorma2[3];
	
	    var amount = columnEnd - columnStart + 1;
	
	    (0, _array.arrayEach)(Array.from(new Array(amount), function (_, i) {
	      return columnStart + i;
	    }), function (index) {
	      if (!unorderedIndexes.has(index)) {
	        unorderedIndexes.add(index);
	      }
	    });
	  });
	
	  // Sort indexes in ascending order to easily detecting non-consecutive columns.
	  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {
	    return a - b;
	  });
	  var normalizedColumnRanges = (0, _array.arrayReduce)(orderedIndexes, function (acc, visualColumnIndex, index, array) {
	    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {
	      acc[acc.length - 1][1] += 1;
	    } else {
	      acc.push([visualColumnIndex, 1]);
	    }
	
	    return acc;
	  }, []);
	
	  return normalizedColumnRanges;
	}
	
	/**
	 * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized
	 * data structure. It merges repeated ranges into consecutive coordinates. The returned structure
	 * contains an array of arrays. The single item contains at index 0 visual column index from the selection was
	 * started and at index 1 distance as a count of selected columns.
	 *
	 * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.
	 * @return {Array[]} Returns an array of arrays with ranges defines in that schema:
	 *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.
	 *                   The column distances are always created starting from the left (zero index) to the
	 *                   right (the latest column index).
	 */
	function transformSelectionToRowDistance(selectionRanges) {
	  var selectionType = detectSelectionType(selectionRanges);
	
	  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {
	    return [];
	  }
	
	  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);
	  var unorderedIndexes = new Set();
	
	  // Iterate through all ranges and collect all column indexes which are not saved yet.
	  (0, _array.arrayEach)(selectionRanges, function (selection) {
	    var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),
	        _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 3),
	        rowStart = _selectionSchemaNorma4[0],
	        rowEnd = _selectionSchemaNorma4[2];
	
	    var amount = rowEnd - rowStart + 1;
	
	    (0, _array.arrayEach)(Array.from(new Array(amount), function (_, i) {
	      return rowStart + i;
	    }), function (index) {
	      if (!unorderedIndexes.has(index)) {
	        unorderedIndexes.add(index);
	      }
	    });
	  });
	
	  // Sort indexes in ascending order to easily detecting non-consecutive columns.
	  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {
	    return a - b;
	  });
	  var normalizedRowRanges = (0, _array.arrayReduce)(orderedIndexes, function (acc, rowIndex, index, array) {
	    if (index !== 0 && rowIndex === array[index - 1] + 1) {
	      acc[acc.length - 1][1] += 1;
	    } else {
	      acc.push([rowIndex, 1]);
	    }
	
	    return acc;
	  }, []);
	
	  return normalizedRowRanges;
	}
	
	/**
	 * Check if passed value can be treated as valid cell coordinate. The second argument is
	 * used to check if the value doesn't exceed the defined max table rows/columns count.
	 *
	 * @param {*} coord
	 * @param {Number} maxTableItemsCount The value that declares the maximum coordinate that is still validatable.
	 * @return {Boolean}
	 */
	function isValidCoord(coord) {
	  var maxTableItemsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
	
	  return typeof coord === 'number' && coord >= 0 && coord < maxTableItemsCount;
	}
	
	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.FIRST_AFTER_SECOND = exports.FIRST_BEFORE_SECOND = exports.DO_NOT_SWAP = undefined;
	exports.getSortFunctionForColumn = getSortFunctionForColumn;
	
	var _date = __webpack_require__(292);
	
	var _date2 = _interopRequireDefault(_date);
	
	var _default = __webpack_require__(293);
	
	var _default2 = _interopRequireDefault(_default);
	
	var _numeric = __webpack_require__(294);
	
	var _numeric2 = _interopRequireDefault(_numeric);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DO_NOT_SWAP = exports.DO_NOT_SWAP = 0;
	var FIRST_BEFORE_SECOND = exports.FIRST_BEFORE_SECOND = -1;
	var FIRST_AFTER_SECOND = exports.FIRST_AFTER_SECOND = 1;
	
	/**
	 * Gets sort function for the particular column basing on its column meta.
	 *
	 * @private
	 * @param {Object} columnMeta
	 * @returns {Function}
	 */
	function getSortFunctionForColumn(columnMeta) {
	  if (columnMeta.sortFunction) {
	    return columnMeta.sortFunction;
	  } else if (columnMeta.type === 'date') {
	    return _date2.default;
	  } else if (columnMeta.type === 'numeric') {
	    return _numeric2.default;
	  }
	
	  return _default2.default;
	}
	
	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(9);
	var document = __webpack_require__(15).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};
	
	
	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(9);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	
	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(18);
	var dPs = __webpack_require__(208);
	var enumBugKeys = __webpack_require__(80);
	var IE_PROTO = __webpack_require__(78)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(74)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(103).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	
	
	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(44);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	
	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var shared = __webpack_require__(79)('keys');
	var uid = __webpack_require__(50);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};
	
	
	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var core = __webpack_require__(37);
	var global = __webpack_require__(15);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(49) ? 'pure' : 'global',
	  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
	});
	
	
	/***/ }),
	/* 80 */
	/***/ (function(module, exports) {
	
	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');
	
	
	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ITERATOR = __webpack_require__(12)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};
	
	
	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx = __webpack_require__(30);
	var invoke = __webpack_require__(214);
	var html = __webpack_require__(103);
	var cel = __webpack_require__(74);
	var global = __webpack_require__(15);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(44)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};
	
	
	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(15);
	var navigator = global.navigator;
	
	module.exports = navigator && navigator.userAgent || '';
	
	
	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(101);
	var hiddenKeys = __webpack_require__(80).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};
	
	
	/***/ }),
	/* 85 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(144);
	var defined = __webpack_require__(36);
	
	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};
	
	
	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var MATCH = __webpack_require__(12)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};
	
	
	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $defineProperty = __webpack_require__(20);
	var createDesc = __webpack_require__(51);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};
	
	
	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var addToUnscopables = __webpack_require__(46);
	var step = __webpack_require__(110);
	var Iterators = __webpack_require__(52);
	var toIObject = __webpack_require__(24);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(108)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	
	
	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getRegisteredCellTypes = exports.getRegisteredCellTypeNames = exports.hasCellType = exports.getCellType = exports.registerCellType = undefined;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var _autocompleteType = __webpack_require__(255);
	
	var _autocompleteType2 = _interopRequireDefault(_autocompleteType);
	
	var _checkboxType = __webpack_require__(256);
	
	var _checkboxType2 = _interopRequireDefault(_checkboxType);
	
	var _dateType = __webpack_require__(257);
	
	var _dateType2 = _interopRequireDefault(_dateType);
	
	var _dropdownType = __webpack_require__(258);
	
	var _dropdownType2 = _interopRequireDefault(_dropdownType);
	
	var _handsontableType = __webpack_require__(259);
	
	var _handsontableType2 = _interopRequireDefault(_handsontableType);
	
	var _numericType = __webpack_require__(260);
	
	var _numericType2 = _interopRequireDefault(_numericType);
	
	var _passwordType = __webpack_require__(261);
	
	var _passwordType2 = _interopRequireDefault(_passwordType);
	
	var _textType = __webpack_require__(262);
	
	var _textType2 = _interopRequireDefault(_textType);
	
	var _timeType = __webpack_require__(263);
	
	var _timeType2 = _interopRequireDefault(_timeType);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _staticRegister = (0, _staticRegister3.default)('cellTypes'),
	    register = _staticRegister.register,
	    getItem = _staticRegister.getItem,
	    hasItem = _staticRegister.hasItem,
	    getNames = _staticRegister.getNames,
	    getValues = _staticRegister.getValues;
	
	_register('autocomplete', _autocompleteType2.default);
	_register('checkbox', _checkboxType2.default);
	_register('date', _dateType2.default);
	_register('dropdown', _dropdownType2.default);
	_register('handsontable', _handsontableType2.default);
	_register('numeric', _numericType2.default);
	_register('password', _passwordType2.default);
	_register('text', _textType2.default);
	_register('time', _timeType2.default);
	
	/**
	 * Retrieve cell type object.
	 *
	 * @param {String} name Cell type identification.
	 * @returns {Object} Returns cell type object.
	 */
	function _getItem(name) {
	  if (!hasItem(name)) {
	    throw Error('You declared cell type "' + name + '" as a string that is not mapped to a known object.\n                 Cell type must be an object or a string mapped to an object registered by "Handsontable.cellTypes.registerCellType" method');
	  }
	
	  return getItem(name);
	}
	
	/**
	 * Register cell type under specified name.
	 *
	 * @param {String} name Cell type identification.
	 * @param {Object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.
	 */
	function _register(name, type) {
	  var editor = type.editor,
	      renderer = type.renderer,
	      validator = type.validator;
	
	
	  if (editor) {
	    (0, _editors.registerEditor)(name, editor);
	  }
	  if (renderer) {
	    (0, _renderers.registerRenderer)(name, renderer);
	  }
	  if (validator) {
	    (0, _validators.registerValidator)(name, validator);
	  }
	
	  register(name, type);
	}
	
	exports.registerCellType = _register;
	exports.getCellType = _getItem;
	exports.hasCellType = hasItem;
	exports.getRegisteredCellTypeNames = getNames;
	exports.getRegisteredCellTypes = getValues;
	
	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _templateObject = _taggedTemplateLiteral(['Deprecation warning: This method is going to be removed in the next release.\n      If you want to select a cell using props, please use the `selectCell` method.'], ['Deprecation warning: This method is going to be removed in the next release.\n      If you want to select a cell using props, please use the \\`selectCell\\` method.']);
	
	exports.default = Core;
	
	var _element = __webpack_require__(0);
	
	var _setting = __webpack_require__(91);
	
	var _function = __webpack_require__(43);
	
	var _console = __webpack_require__(58);
	
	var _mixed = __webpack_require__(11);
	
	var _browser = __webpack_require__(39);
	
	var _dataMap = __webpack_require__(264);
	
	var _dataMap2 = _interopRequireDefault(_dataMap);
	
	var _editorManager = __webpack_require__(267);
	
	var _editorManager2 = _interopRequireDefault(_editorManager);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	var _plugins = __webpack_require__(8);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var _string = __webpack_require__(33);
	
	var _number = __webpack_require__(6);
	
	var _tableView = __webpack_require__(268);
	
	var _tableView2 = _interopRequireDefault(_tableView);
	
	var _dataSource = __webpack_require__(269);
	
	var _dataSource2 = _interopRequireDefault(_dataSource);
	
	var _data = __webpack_require__(92);
	
	var _recordTranslator = __webpack_require__(195);
	
	var _rootInstance = __webpack_require__(196);
	
	var _src = __webpack_require__(4);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _defaultSettings = __webpack_require__(197);
	
	var _defaultSettings2 = _interopRequireDefault(_defaultSettings);
	
	var _cellTypes = __webpack_require__(89);
	
	var _i18n = __webpack_require__(198);
	
	var _dictionariesManager = __webpack_require__(71);
	
	var _utils = __webpack_require__(199);
	
	var _keyStateObserver = __webpack_require__(200);
	
	var _selection = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var activeGuid = null;
	
	/**
	 * Handsontable constructor
	 *
	 * @core
	 * @constructor Core
	 * @description
	 *
	 * After Handsontable is constructed, you can modify the grid behavior using the available public methods.
	 *
	 * ---
	 * ## How to call methods
	 *
	 * These are 2 equal ways to call a Handsontable method:
	 *
	 * ```js
	 * // all following examples assume that you constructed Handsontable like this
	 * const hot = new Handsontable(document.getElementById('example1'), options);
	 *
	 * // now, to use setDataAtCell method, you can either:
	 * ht.setDataAtCell(0, 0, 'new value');
	 * ```
	 *
	 * Alternatively, you can call the method using jQuery wrapper (__obsolete__, requires initialization using our jQuery guide
	 * ```js
	 *   $('#example1').handsontable('setDataAtCell', 0, 0, 'new value');
	 * ```
	 * ---
	 */
	function Core(rootElement, userSettings) {
	  var _this = this;
	
	  var rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var preventScrollingToCell = false;
	  var instance = this;
	  var GridSettings = function GridSettings() {};
	  var eventManager = new _eventManager2.default(instance);
	  var priv = void 0;
	  var datamap = void 0;
	  var dataSource = void 0;
	  var grid = void 0;
	  var editorManager = void 0;
	
	  (0, _object.extend)(GridSettings.prototype, _defaultSettings2.default.prototype); // create grid settings as a copy of default settings
	  (0, _object.extend)(GridSettings.prototype, userSettings); // overwrite defaults with user settings
	  (0, _object.extend)(GridSettings.prototype, expandType(userSettings));
	
	  (0, _utils.applyLanguageSetting)(GridSettings.prototype, userSettings.language);
	
	  if ((0, _rootInstance.hasValidParameter)(rootInstanceSymbol)) {
	    (0, _rootInstance.registerAsRootInstance)(this);
	  }
	
	  (0, _keyStateObserver.startObserving)();
	
	  this.isDestroyed = false;
	  this.rootElement = rootElement;
	  this.isHotTableEnv = (0, _element.isChildOfWebComponentTable)(this.rootElement);
	  _eventManager2.default.isHotTableEnv = this.isHotTableEnv;
	
	  this.container = document.createElement('div');
	  this.renderCall = false;
	
	  rootElement.insertBefore(this.container, rootElement.firstChild);
	
	  if (false) {
	    (0, _mixed._injectProductInfo)(userSettings.licenseKey, rootElement);
	  }
	
	  this.guid = 'ht_' + (0, _string.randomString)(); // this is the namespace for global events
	
	  var recordTranslator = (0, _recordTranslator.getTranslator)(instance);
	
	  dataSource = new _dataSource2.default(instance);
	
	  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {
	    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id
	  }
	  priv = {
	    cellSettings: [],
	    columnSettings: [],
	    columnsSettingConflicts: ['data', 'width', 'language'],
	    settings: new GridSettings(), // current settings instance
	    selRange: null, // exposed by public method `getSelectedRange`
	    isPopulated: null,
	    scrollable: null,
	    firstRun: true
	  };
	
	  var selection = new _selection.Selection(priv.settings, {
	    countCols: function countCols() {
	      return instance.countCols();
	    },
	    countRows: function countRows() {
	      return instance.countRows();
	    },
	    propToCol: function propToCol(prop) {
	      return datamap.propToCol(prop);
	    },
	    isEditorOpened: function isEditorOpened() {
	      return instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false;
	    }
	  });
	
	  this.selection = selection;
	
	  this.selection.addLocalHook('beforeSetRangeStart', function (cellCoords) {
	    _this.runHooks('beforeSetRangeStart', cellCoords);
	  });
	
	  this.selection.addLocalHook('beforeSetRangeStartOnly', function (cellCoords) {
	    _this.runHooks('beforeSetRangeStartOnly', cellCoords);
	  });
	
	  this.selection.addLocalHook('beforeSetRangeEnd', function (cellCoords) {
	    _this.runHooks('beforeSetRangeEnd', cellCoords);
	
	    if (cellCoords.row < 0) {
	      cellCoords.row = _this.view.wt.wtTable.getFirstVisibleRow();
	    }
	    if (cellCoords.col < 0) {
	      cellCoords.col = _this.view.wt.wtTable.getFirstVisibleColumn();
	    }
	  });
	
	  this.selection.addLocalHook('afterSetRangeEnd', function (cellCoords) {
	    var preventScrolling = (0, _object.createObjectPropListener)(false);
	    var selectionRange = _this.selection.getSelectedRange();
	
	    var _selectionRange$curre = selectionRange.current(),
	        from = _selectionRange$curre.from,
	        to = _selectionRange$curre.to;
	
	    var selectionLayerLevel = selectionRange.size() - 1;
	
	    _this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);
	    _this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel);
	
	    var isSelectedByAnyHeader = _this.selection.isSelectedByAnyHeader();
	    var currentSelectedRange = _this.selection.selectedRange.current();
	
	    var scrollToCell = true;
	
	    if (preventScrollingToCell) {
	      scrollToCell = false;
	    }
	
	    if (preventScrolling.isTouched()) {
	      scrollToCell = !preventScrolling.value;
	    }
	
	    var isSelectedByRowHeader = _this.selection.isSelectedByRowHeader();
	    var isSelectedByColumnHeader = _this.selection.isSelectedByColumnHeader();
	
	    if (scrollToCell !== false) {
	      if (!isSelectedByAnyHeader) {
	        if (currentSelectedRange && !_this.selection.isMultiple()) {
	          _this.view.scrollViewport(currentSelectedRange.from);
	        } else {
	          _this.view.scrollViewport(cellCoords);
	        }
	      } else if (isSelectedByRowHeader) {
	        _this.view.scrollViewportVertically(cellCoords.row);
	      } else if (isSelectedByColumnHeader) {
	        _this.view.scrollViewportHorizontally(cellCoords.col);
	      }
	    }
	
	    // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected
	    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing
	    // the Border class this should be removed.
	    if (isSelectedByRowHeader && isSelectedByColumnHeader) {
	      (0, _element.addClass)(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);
	    } else if (isSelectedByRowHeader) {
	      (0, _element.removeClass)(_this.rootElement, 'ht__selection--columns');
	      (0, _element.addClass)(_this.rootElement, 'ht__selection--rows');
	    } else if (isSelectedByColumnHeader) {
	      (0, _element.removeClass)(_this.rootElement, 'ht__selection--rows');
	      (0, _element.addClass)(_this.rootElement, 'ht__selection--columns');
	    } else {
	      (0, _element.removeClass)(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);
	    }
	
	    _this._refreshBorders(null);
	  });
	
	  this.selection.addLocalHook('afterSelectionFinished', function (cellRanges) {
	    var selectionLayerLevel = cellRanges.length - 1;
	    var _cellRanges$selection = cellRanges[selectionLayerLevel],
	        from = _cellRanges$selection.from,
	        to = _cellRanges$selection.to;
	
	
	    _this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);
	    _this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);
	  });
	
	  this.selection.addLocalHook('afterIsMultipleSelection', function (isMultiple) {
	    var changedIsMultiple = _this.runHooks('afterIsMultipleSelection', isMultiple.value);
	
	    if (isMultiple.value) {
	      isMultiple.value = changedIsMultiple;
	    }
	  });
	
	  this.selection.addLocalHook('beforeModifyTransformStart', function (cellCoordsDelta) {
	    _this.runHooks('modifyTransformStart', cellCoordsDelta);
	  });
	  this.selection.addLocalHook('afterModifyTransformStart', function (coords, rowTransformDir, colTransformDir) {
	    _this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);
	  });
	  this.selection.addLocalHook('beforeModifyTransformEnd', function (cellCoordsDelta) {
	    _this.runHooks('modifyTransformEnd', cellCoordsDelta);
	  });
	  this.selection.addLocalHook('afterModifyTransformEnd', function (coords, rowTransformDir, colTransformDir) {
	    _this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);
	  });
	  this.selection.addLocalHook('afterDeselect', function () {
	    editorManager.destroyEditor();
	
	    _this._refreshBorders();
	    (0, _element.removeClass)(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);
	
	    _this.runHooks('afterDeselect');
	  });
	  this.selection.addLocalHook('insertRowRequire', function (totalRows) {
	    _this.alter('insert_row', totalRows, 1, 'auto');
	  });
	  this.selection.addLocalHook('insertColRequire', function (totalCols) {
	    _this.alter('insert_col', totalCols, 1, 'auto');
	  });
	
	  grid = {
	    /**
	     * Inserts or removes rows and columns.
	     *
	     * @memberof Core#
	     * @function alter
	     * @private
	     * @param {String} action Possible values: "insert_row", "insert_col", "remove_row", "remove_col".
	     * @param {Number|Array} index Row or column visual index which from the alter action will be triggered.
	     *                             Alter actions such as "remove_row" and "remove_col" support array indexes in the
	     *                             format `[[index, amount], [index, amount]...]` this can be used to remove
	     *                             non-consecutive columns or rows in one call.
	     * @param {Number} [amount=1] Ammount rows or columns to remove.
	     * @param {String} [source] Optional. Source of hook runner.
	     * @param {Boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.
	     */
	    alter: function alter(action, index) {
	      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      var source = arguments[3];
	      var keepEmptyRows = arguments[4];
	
	      var delta = void 0;
	
	      function spliceWith(data, startIndex, count, toInject) {
	        var valueFactory = function valueFactory() {
	          var result = void 0;
	
	          if (toInject === 'array') {
	            result = [];
	          } else if (toInject === 'object') {
	            result = {};
	          }
	
	          return result;
	        };
	        var spliceArgs = (0, _array.arrayMap)(new Array(count), function () {
	          return valueFactory();
	        });
	
	        spliceArgs.unshift(startIndex, 0);
	        data.splice.apply(data, _toConsumableArray(spliceArgs));
	      }
	
	      var normalizeIndexesGroup = function normalizeIndexesGroup(indexes) {
	        if (indexes.length === 0) {
	          return [];
	        }
	
	        var sortedIndexes = [].concat(_toConsumableArray(indexes));
	
	        // Sort the indexes in ascending order.
	        sortedIndexes.sort(function (_ref, _ref2) {
	          var _ref4 = _slicedToArray(_ref, 1),
	              indexA = _ref4[0];
	
	          var _ref3 = _slicedToArray(_ref2, 1),
	              indexB = _ref3[0];
	
	          if (indexA === indexB) {
	            return 0;
	          }
	
	          return indexA > indexB ? 1 : -1;
	        });
	
	        // Normalize the {index, amount} groups into bigger groups.
	        var normalizedIndexes = (0, _array.arrayReduce)(sortedIndexes, function (acc, _ref5) {
	          var _ref6 = _slicedToArray(_ref5, 2),
	              groupIndex = _ref6[0],
	              groupAmount = _ref6[1];
	
	          var previousItem = acc[acc.length - 1];
	
	          var _previousItem = _slicedToArray(previousItem, 2),
	              prevIndex = _previousItem[0],
	              prevAmount = _previousItem[1];
	
	          var prevLastIndex = prevIndex + prevAmount;
	
	          if (groupIndex <= prevLastIndex) {
	            var amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);
	
	            previousItem[1] += amountToAdd;
	          } else {
	            acc.push([groupIndex, groupAmount]);
	          }
	
	          return acc;
	        }, [sortedIndexes[0]]);
	
	        return normalizedIndexes;
	      };
	
	      /* eslint-disable no-case-declarations */
	      switch (action) {
	        case 'insert_row':
	
	          var numberOfSourceRows = instance.countSourceRows();
	
	          if (instance.getSettings().maxRows === numberOfSourceRows) {
	            return;
	          }
	          // eslint-disable-next-line no-param-reassign
	          index = (0, _mixed.isDefined)(index) ? index : numberOfSourceRows;
	
	          delta = datamap.createRow(index, amount, source);
	          spliceWith(priv.cellSettings, index, amount, 'array');
	
	          if (delta) {
	            if (selection.isSelected() && selection.selectedRange.current().from.row >= index) {
	              selection.selectedRange.current().from.row += delta;
	              selection.transformEnd(delta, 0); // will call render() internally
	            } else {
	              instance._refreshBorders(); // it will call render and prepare methods
	            }
	          }
	          break;
	
	        case 'insert_col':
	          delta = datamap.createCol(index, amount, source);
	
	          for (var row = 0, len = instance.countSourceRows(); row < len; row++) {
	            if (priv.cellSettings[row]) {
	              spliceWith(priv.cellSettings[row], index, amount);
	            }
	          }
	
	          if (delta) {
	            if (Array.isArray(instance.getSettings().colHeaders)) {
	              var spliceArray = [index, 0];
	              spliceArray.length += delta; // inserts empty (undefined) elements at the end of an array
	              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array
	            }
	
	            if (selection.isSelected() && selection.selectedRange.current().from.col >= index) {
	              selection.selectedRange.current().from.col += delta;
	              selection.transformEnd(0, delta); // will call render() internally
	            } else {
	              instance._refreshBorders(); // it will call render and prepare methods
	            }
	          }
	          break;
	
	        case 'remove_row':
	
	          var removeRow = function removeRow(indexes) {
	            var offset = 0;
	
	            // Normalize the {index, amount} groups into bigger groups.
	            (0, _array.arrayEach)(indexes, function (_ref7) {
	              var _ref8 = _slicedToArray(_ref7, 2),
	                  groupIndex = _ref8[0],
	                  groupAmount = _ref8[1];
	
	              var calcIndex = (0, _mixed.isEmpty)(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0);
	
	              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value
	              // compatible with datamap.removeCol method.
	              if (Number.isInteger(groupIndex)) {
	                // eslint-disable-next-line no-param-reassign
	                groupIndex = Math.max(groupIndex - offset, 0);
	              }
	
	              // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic
	              // inside the datamap.removeRow breaks the removing functionality.
	              datamap.removeRow(groupIndex, groupAmount, source);
	              priv.cellSettings.splice(calcIndex, amount);
	
	              var totalRows = instance.countRows();
	              var fixedRowsTop = instance.getSettings().fixedRowsTop;
	
	              if (fixedRowsTop >= calcIndex + 1) {
	                instance.getSettings().fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);
	              }
	
	              var fixedRowsBottom = instance.getSettings().fixedRowsBottom;
	
	              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {
	                instance.getSettings().fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);
	              }
	
	              offset += groupAmount;
	            });
	          };
	
	          if (Array.isArray(index)) {
	            removeRow(normalizeIndexesGroup(index));
	          } else {
	            removeRow([[index, amount]]);
	          }
	
	          grid.adjustRowsAndCols();
	          instance._refreshBorders(); // it will call render and prepare methods
	          break;
	
	        case 'remove_col':
	
	          var removeCol = function removeCol(indexes) {
	            var offset = 0;
	
	            // Normalize the {index, amount} groups into bigger groups.
	            (0, _array.arrayEach)(indexes, function (_ref9) {
	              var _ref10 = _slicedToArray(_ref9, 2),
	                  groupIndex = _ref10[0],
	                  groupAmount = _ref10[1];
	
	              var calcIndex = (0, _mixed.isEmpty)(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);
	
	              var visualColumnIndex = recordTranslator.toPhysicalColumn(calcIndex);
	
	              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value
	              // compatible with datamap.removeCol method.
	              if (Number.isInteger(groupIndex)) {
	                // eslint-disable-next-line no-param-reassign
	                groupIndex = Math.max(groupIndex - offset, 0);
	              }
	
	              // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic
	              // inside the datamap.removeCol breaks the removing functionality.
	              datamap.removeCol(groupIndex, groupAmount, source);
	
	              for (var _row = 0, _len = instance.countSourceRows(); _row < _len; _row++) {
	                if (priv.cellSettings[_row]) {
	                  // if row hasn't been rendered it wouldn't have cellSettings
	                  priv.cellSettings[_row].splice(visualColumnIndex, groupAmount);
	                }
	              }
	              var fixedColumnsLeft = instance.getSettings().fixedColumnsLeft;
	
	              if (fixedColumnsLeft >= calcIndex + 1) {
	                instance.getSettings().fixedColumnsLeft -= Math.min(groupAmount, fixedColumnsLeft - calcIndex);
	              }
	
	              if (Array.isArray(instance.getSettings().colHeaders)) {
	                if (typeof visualColumnIndex === 'undefined') {
	                  visualColumnIndex = -1;
	                }
	                instance.getSettings().colHeaders.splice(visualColumnIndex, groupAmount);
	              }
	
	              offset += groupAmount;
	            });
	          };
	
	          if (Array.isArray(index)) {
	            removeCol(normalizeIndexesGroup(index));
	          } else {
	            removeCol([[index, amount]]);
	          }
	
	          grid.adjustRowsAndCols();
	          instance._refreshBorders(); // it will call render and prepare methods
	
	          break;
	        default:
	          throw new Error('There is no such action "' + action + '"');
	      }
	
	      if (!keepEmptyRows) {
	        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh
	      }
	    },
	
	
	    /**
	     * Makes sure there are empty rows at the bottom of the table
	     */
	    adjustRowsAndCols: function adjustRowsAndCols() {
	      if (priv.settings.minRows) {
	        // should I add empty rows to data source to meet minRows?
	        var rows = instance.countRows();
	
	        if (rows < priv.settings.minRows) {
	          for (var r = 0, minRows = priv.settings.minRows; r < minRows - rows; r++) {
	            datamap.createRow(instance.countRows(), 1, 'auto');
	          }
	        }
	      }
	      if (priv.settings.minSpareRows) {
	        var emptyRows = instance.countEmptyRows(true);
	
	        // should I add empty rows to meet minSpareRows?
	        if (emptyRows < priv.settings.minSpareRows) {
	          for (; emptyRows < priv.settings.minSpareRows && instance.countSourceRows() < priv.settings.maxRows; emptyRows++) {
	            datamap.createRow(instance.countRows(), 1, 'auto');
	          }
	        }
	      }
	      {
	        var emptyCols = void 0;
	
	        // count currently empty cols
	        if (priv.settings.minCols || priv.settings.minSpareCols) {
	          emptyCols = instance.countEmptyCols(true);
	        }
	
	        // should I add empty cols to meet minCols?
	        if (priv.settings.minCols && !priv.settings.columns && instance.countCols() < priv.settings.minCols) {
	          for (; instance.countCols() < priv.settings.minCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, 'auto');
	          }
	        }
	        // should I add empty cols to meet minSpareCols?
	        if (priv.settings.minSpareCols && !priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {
	          for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {
	            datamap.createCol(instance.countCols(), 1, 'auto');
	          }
	        }
	      }
	      var rowCount = instance.countRows();
	      var colCount = instance.countCols();
	
	      if (rowCount === 0 || colCount === 0) {
	        selection.deselect();
	      }
	
	      if (selection.isSelected()) {
	        (0, _array.arrayEach)(selection.selectedRange, function (range) {
	          var selectionChanged = false;
	          var fromRow = range.from.row;
	          var fromCol = range.from.col;
	          var toRow = range.to.row;
	          var toCol = range.to.col;
	
	          // if selection is outside, move selection to last row
	          if (fromRow > rowCount - 1) {
	            fromRow = rowCount - 1;
	            selectionChanged = true;
	
	            if (toRow > fromRow) {
	              toRow = fromRow;
	            }
	          } else if (toRow > rowCount - 1) {
	            toRow = rowCount - 1;
	            selectionChanged = true;
	
	            if (fromRow > toRow) {
	              fromRow = toRow;
	            }
	          }
	          // if selection is outside, move selection to last row
	          if (fromCol > colCount - 1) {
	            fromCol = colCount - 1;
	            selectionChanged = true;
	
	            if (toCol > fromCol) {
	              toCol = fromCol;
	            }
	          } else if (toCol > colCount - 1) {
	            toCol = colCount - 1;
	            selectionChanged = true;
	
	            if (fromCol > toCol) {
	              fromCol = toCol;
	            }
	          }
	
	          if (selectionChanged) {
	            instance.selectCell(fromRow, fromCol, toRow, toCol);
	          }
	        });
	      }
	      if (instance.view) {
	        instance.view.wt.wtOverlays.adjustElementsSize();
	      }
	    },
	
	
	    /**
	     * Populate the data from the provided 2d array from the given cell coordinates.
	     *
	     * @private
	     * @param {Object} start Start selection position. Visual indexes.
	     * @param {Array} input 2d data array.
	     * @param {Object} [end] End selection position (only for drag-down mode). Visual indexes.
	     * @param {String} [source="populateFromArray"] Source information string.
	     * @param {String} [method="overwrite"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.
	     * @param {String} direction (left|right|up|down) String specifying the direction.
	     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.
	     *                       Useful **only** when the type of handled cells is `numeric`.
	     * @returns {Object|undefined} ending td in pasted area (only if any cell was changed).
	     */
	    populateFromArray: function populateFromArray(start, input, end, source, method, direction, deltas) {
	      // TODO: either remove or implement the `direction` argument. Currently it's not working at all.
	      var r = void 0;
	      var rlen = void 0;
	      var c = void 0;
	      var clen = void 0;
	      var setData = [];
	      var current = {};
	
	      rlen = input.length;
	
	      if (rlen === 0) {
	        return false;
	      }
	
	      var repeatCol = void 0;
	      var repeatRow = void 0;
	      var cmax = void 0;
	      var rmax = void 0;
	
	      /* eslint-disable no-case-declarations */
	      // insert data with specified pasteMode method
	      switch (method) {
	        case 'shift_down':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          // eslint-disable-next-line no-param-reassign
	          input = (0, _data.translateRowsToColumns)(input);
	          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {
	            if (c < clen) {
	              var _instance;
	
	              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {
	                input[c].push(input[c][r % rlen]);
	              }
	              input[c].unshift(start.col + c, start.row, 0);
	              (_instance = instance).spliceCol.apply(_instance, _toConsumableArray(input[c]));
	            } else {
	              var _instance2;
	
	              input[c % clen][0] = start.col + c;
	              (_instance2 = instance).spliceCol.apply(_instance2, _toConsumableArray(input[c % clen]));
	            }
	          }
	          break;
	
	        case 'shift_right':
	          repeatCol = end ? end.col - start.col + 1 : 0;
	          repeatRow = end ? end.row - start.row + 1 : 0;
	          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {
	            if (r < rlen) {
	              var _instance3;
	
	              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {
	                input[r].push(input[r][c % clen]);
	              }
	              input[r].unshift(start.row + r, start.col, 0);
	              (_instance3 = instance).spliceRow.apply(_instance3, _toConsumableArray(input[r]));
	            } else {
	              var _instance4;
	
	              input[r % rlen][0] = start.row + r;
	              (_instance4 = instance).spliceRow.apply(_instance4, _toConsumableArray(input[r % rlen]));
	            }
	          }
	          break;
	
	        case 'overwrite':
	        default:
	          // overwrite and other not specified options
	          current.row = start.row;
	          current.col = start.col;
	
	          var selected = { // selected range
	            row: end && start ? end.row - start.row + 1 : 1,
	            col: end && start ? end.col - start.col + 1 : 1
	          };
	          var skippedRow = 0;
	          var skippedColumn = 0;
	          var pushData = true;
	          var cellMeta = void 0;
	
	          var getInputValue = function getInputValue(row) {
	            var col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            var rowValue = input[row % input.length];
	
	            if (col !== null) {
	              return rowValue[col % rowValue.length];
	            }
	
	            return rowValue;
	          };
	          var rowInputLength = input.length;
	          var rowSelectionLength = end ? end.row - start.row + 1 : 0;
	
	          if (end) {
	            rlen = rowSelectionLength;
	          } else {
	            rlen = Math.max(rowInputLength, rowSelectionLength);
	          }
	          for (r = 0; r < rlen; r++) {
	            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !priv.settings.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= priv.settings.maxRows) {
	              break;
	            }
	            var visualRow = r - skippedRow;
	            var colInputLength = getInputValue(visualRow).length;
	            var colSelectionLength = end ? end.col - start.col + 1 : 0;
	
	            if (end) {
	              clen = colSelectionLength;
	            } else {
	              clen = Math.max(colInputLength, colSelectionLength);
	            }
	            current.col = start.col;
	            cellMeta = instance.getCellMeta(current.row, current.col);
	
	            if ((source === 'CopyPaste.paste' || source === 'Autofill.autofill') && cellMeta.skipRowOnPaste) {
	              skippedRow += 1;
	              current.row += 1;
	              rlen += 1;
	              /* eslint-disable no-continue */
	              continue;
	            }
	            skippedColumn = 0;
	
	            for (c = 0; c < clen; c++) {
	              if (end && current.col > end.col && colSelectionLength > colInputLength || !priv.settings.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= priv.settings.maxCols) {
	                break;
	              }
	              cellMeta = instance.getCellMeta(current.row, current.col);
	
	              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {
	                skippedColumn += 1;
	                current.col += 1;
	                clen += 1;
	                continue;
	              }
	              if (cellMeta.readOnly) {
	                current.col += 1;
	                /* eslint-disable no-continue */
	                continue;
	              }
	              var visualColumn = c - skippedColumn;
	              var value = getInputValue(visualRow, visualColumn);
	              var orgValue = instance.getDataAtCell(current.row, current.col);
	              var index = {
	                row: visualRow,
	                col: visualColumn
	              };
	
	              if (source === 'Autofill.fill') {
	                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);
	
	                if (result) {
	                  value = (0, _mixed.isUndefined)(result.value) ? value : result.value;
	                }
	              }
	              if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	                if (orgValue === null || (typeof orgValue === 'undefined' ? 'undefined' : _typeof(orgValue)) !== 'object') {
	                  pushData = false;
	                } else {
	                  var orgValueSchema = (0, _object.duckSchema)(orgValue[0] || orgValue);
	                  var valueSchema = (0, _object.duckSchema)(value[0] || value);
	
	                  /* eslint-disable max-depth */
	                  if ((0, _object.isObjectEqual)(orgValueSchema, valueSchema)) {
	                    value = (0, _object.deepClone)(value);
	                  } else {
	                    pushData = false;
	                  }
	                }
	              } else if (orgValue !== null && (typeof orgValue === 'undefined' ? 'undefined' : _typeof(orgValue)) === 'object') {
	                pushData = false;
	              }
	              if (pushData) {
	                setData.push([current.row, current.col, value]);
	              }
	              pushData = true;
	              current.col += 1;
	            }
	            current.row += 1;
	          }
	          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');
	          break;
	      }
	    }
	  };
	
	  /**
	   * Internal function to set `language` key of settings.
	   *
	   * @private
	   * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'
	   * @fires Hooks#afterLanguageChange
	   */
	  function setLanguage(languageCode) {
	    var normalizedLanguageCode = (0, _utils.normalizeLanguageCode)(languageCode);
	
	    if ((0, _dictionariesManager.hasLanguageDictionary)(normalizedLanguageCode)) {
	      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);
	
	      GridSettings.prototype.language = normalizedLanguageCode;
	
	      instance.runHooks('afterLanguageChange', normalizedLanguageCode);
	    } else {
	      (0, _utils.warnUserAboutLanguageRegistration)(languageCode);
	    }
	  }
	
	  this.init = function () {
	    dataSource.setData(priv.settings.data);
	    instance.runHooks('beforeInit');
	
	    if ((0, _browser.isMobileBrowser)()) {
	      (0, _element.addClass)(instance.rootElement, 'mobile');
	    }
	
	    this.updateSettings(priv.settings, true);
	
	    this.view = new _tableView2.default(this);
	    editorManager = _editorManager2.default.getInstance(instance, priv, selection, datamap);
	
	    this.forceFullRender = true; // used when data was changed
	
	    instance.runHooks('init');
	    this.view.render();
	
	    if (_typeof(priv.firstRun) === 'object') {
	      instance.runHooks('afterChange', priv.firstRun[0], priv.firstRun[1]);
	      priv.firstRun = false;
	    }
	    instance.runHooks('afterInit');
	  };
	
	  function ValidatorsQueue() {
	    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file
	    var resolved = false;
	
	    return {
	      validatorsInQueue: 0,
	      valid: true,
	      addValidatorToQueue: function addValidatorToQueue() {
	        this.validatorsInQueue += 1;
	        resolved = false;
	      },
	      removeValidatorFormQueue: function removeValidatorFormQueue() {
	        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;
	        this.checkIfQueueIsEmpty();
	      },
	      onQueueEmpty: function onQueueEmpty() {},
	      checkIfQueueIsEmpty: function checkIfQueueIsEmpty() {
	        if (this.validatorsInQueue === 0 && resolved === false) {
	          resolved = true;
	          this.onQueueEmpty(this.valid);
	        }
	      }
	    };
	  }
	
	  /**
	   * Get parsed number from numeric string.
	   *
	   * @private
	   * @param {String} numericData Float (separated by a dot or a comma) or integer.
	   * @returns {Number} Number if we get data in parsable format, not changed value otherwise.
	   */
	  function getParsedNumber(numericData) {
	    // Unifying "float like" string. Change from value with comma determiner to value with dot determiner,
	    // for example from `450,65` to `450.65`.
	    var unifiedNumericData = numericData.replace(',', '.');
	
	    if (isNaN(parseFloat(unifiedNumericData)) === false) {
	      return parseFloat(unifiedNumericData);
	    }
	
	    return numericData;
	  }
	
	  function validateChanges(changes, source, callback) {
	    var waitingForValidator = new ValidatorsQueue();
	    var isNumericData = function isNumericData(value) {
	      return value.length > 0 && /^-?[\d\s]*(\.|,)?\d*$/.test(value);
	    };
	
	    waitingForValidator.onQueueEmpty = resolve;
	
	    for (var i = changes.length - 1; i >= 0; i--) {
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	      } else {
	        var _changes$i = _slicedToArray(changes[i], 4),
	            row = _changes$i[0],
	            prop = _changes$i[1],
	            newValue = _changes$i[3];
	
	        var col = datamap.propToCol(prop);
	        var cellProperties = instance.getCellMeta(row, col);
	
	        if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericData(newValue)) {
	          changes[i][3] = getParsedNumber(newValue);
	        }
	
	        /* eslint-disable no-loop-func */
	        if (instance.getCellValidator(cellProperties)) {
	          waitingForValidator.addValidatorToQueue();
	          instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {
	            return function (result) {
	              if (typeof result !== 'boolean') {
	                throw new Error('Validation error: result is not boolean');
	              }
	              if (result === false && cellPropertiesReference.allowInvalid === false) {
	                changes.splice(index, 1); // cancel the change
	                cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid
	                var cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);
	                (0, _element.removeClass)(cell, instance.getSettings().invalidCellClassName);
	                // index -= 1;
	              }
	              waitingForValidator.removeValidatorFormQueue();
	            };
	          }(i, cellProperties), source);
	        }
	      }
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	
	    function resolve() {
	      var beforeChangeResult = void 0;
	
	      if (changes.length) {
	        beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');
	        if ((0, _function.isFunction)(beforeChangeResult)) {
	          (0, _console.warn)('Your beforeChange callback returns a function. It\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');
	        } else if (beforeChangeResult === false) {
	          changes.splice(0, changes.length); // invalidate all changes (remove everything from array)
	        }
	      }
	      callback(); // called when async validators are resolved and beforeChange was not async
	    }
	  }
	
	  /**
	   * Internal function to apply changes. Called after validateChanges
	   *
	   * @private
	   * @param {Array} changes Array in form of [row, prop, oldValue, newValue]
	   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)
	   * @fires Hooks#beforeChangeRender
	   * @fires Hooks#afterChange
	   */
	  function applyChanges(changes, source) {
	    var i = changes.length - 1;
	
	    if (i < 0) {
	      return;
	    }
	
	    for (; i >= 0; i--) {
	      var skipThisChange = false;
	
	      if (changes[i] === null) {
	        changes.splice(i, 1);
	        /* eslint-disable no-continue */
	        continue;
	      }
	
	      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {
	        /* eslint-disable no-continue */
	        continue;
	      }
	
	      if (priv.settings.allowInsertRow) {
	        while (changes[i][0] > instance.countRows() - 1) {
	          var numberOfCreatedRows = datamap.createRow(void 0, void 0, source);
	
	          if (numberOfCreatedRows === 0) {
	            skipThisChange = true;
	            break;
	          }
	        }
	      }
	
	      if (skipThisChange) {
	        /* eslint-disable no-continue */
	        continue;
	      }
	
	      if (instance.dataType === 'array' && (!priv.settings.columns || priv.settings.columns.length === 0) && priv.settings.allowInsertColumn) {
	        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {
	          datamap.createCol(void 0, void 0, source);
	        }
	      }
	
	      datamap.set(changes[i][0], changes[i][1], changes[i][3]);
	    }
	
	    instance.forceFullRender = true; // used when data was changed
	    grid.adjustRowsAndCols();
	    instance.runHooks('beforeChangeRender', changes, source);
	    editorManager.lockEditor();
	    instance._refreshBorders(null);
	    editorManager.unlockEditor();
	    instance.view.wt.wtOverlays.adjustElementsSize();
	    instance.runHooks('afterChange', changes, source || 'edit');
	
	    var activeEditor = instance.getActiveEditor();
	
	    if (activeEditor && (0, _mixed.isDefined)(activeEditor.refreshValue)) {
	      activeEditor.refreshValue();
	    }
	  }
	
	  /**
	   * Validate a single cell.
	   *
	   * @param {String|Number} value
	   * @param cellProperties
	   * @param callback
	   * @param source
	   */
	  this.validateCell = function (value, cellProperties, callback, source) {
	    var validator = instance.getCellValidator(cellProperties);
	
	    // the `canBeValidated = false` argument suggests, that the cell passes validation by default.
	    function done(valid) {
	      var canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	      // Fixes GH#3903
	      if (!canBeValidated || cellProperties.hidden === true) {
	        callback(valid);
	        return;
	      }
	
	      var col = cellProperties.visualCol;
	      var row = cellProperties.visualRow;
	      var td = instance.getCell(row, col, true);
	
	      if (td && td.nodeName !== 'TH') {
	        instance.view.wt.wtSettings.settings.cellRenderer(row, col, td);
	      }
	      callback(valid);
	    }
	
	    if ((0, _mixed.isRegExp)(validator)) {
	      validator = function (expression) {
	        return function (cellValue, validatorCallback) {
	          validatorCallback(expression.test(cellValue));
	        };
	      }(validator);
	    }
	
	    if ((0, _function.isFunction)(validator)) {
	      // eslint-disable-next-line no-param-reassign
	      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source);
	
	      // To provide consistent behaviour, validation should be always asynchronous
	      instance._registerTimeout(setTimeout(function () {
	        validator.call(cellProperties, value, function (valid) {
	          // eslint-disable-next-line no-param-reassign
	          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);
	          cellProperties.valid = valid;
	
	          done(valid);
	          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);
	        });
	      }, 0));
	    } else {
	      // resolve callback even if validator function was not found
	      instance._registerTimeout(setTimeout(function () {
	        cellProperties.valid = true;
	        done(cellProperties.valid, false);
	      }, 0));
	    }
	  };
	
	  function setDataInputToArray(row, propOrCol, value) {
	    if ((typeof row === 'undefined' ? 'undefined' : _typeof(row)) === 'object') {
	      // is it an array of changes
	      return row;
	    }
	    return [[row, propOrCol, value]];
	  }
	
	  /**
	   * @description
	   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format
	   * `[[row, col, value],...]` as the first argument.
	   *
	   * @memberof Core#
	   * @function setDataAtCell
	   * @param {Number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.
	   * @param {Number} [column] Visual column index.
	   * @param {String} [value] New value.
	   * @param {String} [source] String that identifies how this change will be described in the changes array (useful in onAfterChange or onBeforeChange callback).
	   */
	  this.setDataAtCell = function (row, column, value, source) {
	    var input = setDataInputToArray(row, column, value);
	    var changes = [];
	    var changeSource = source;
	    var i = void 0;
	    var ilen = void 0;
	    var prop = void 0;
	
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      if (_typeof(input[i]) !== 'object') {
	        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');
	      }
	      if (typeof input[i][1] !== 'number') {
	        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');
	      }
	      prop = datamap.colToProp(input[i][1]);
	      changes.push([input[i][0], prop, dataSource.getAtCell(recordTranslator.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);
	    }
	
	    if (!changeSource && (typeof row === 'undefined' ? 'undefined' : _typeof(row)) === 'object') {
	      changeSource = column;
	    }
	
	    instance.runHooks('afterSetDataAtCell', changes, changeSource);
	
	    validateChanges(changes, changeSource, function () {
	      applyChanges(changes, changeSource);
	    });
	  };
	
	  /**
	   * @description
	   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format
	   * `[[row, prop, value],...]` as the first argument.
	   *
	   * @memberof Core#
	   * @function setDataAtRowProp
	   * @param {Number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.
	   * @param {String} prop Property name or the source string (e.g. `'first.name'` or `'0'`).
	   * @param {String} value Value to be set.
	   * @param {String} [source] String that identifies how this change will be described in changes array (useful in onChange callback).
	   */
	  this.setDataAtRowProp = function (row, prop, value, source) {
	    var input = setDataInputToArray(row, prop, value);
	    var changes = [];
	    var changeSource = source;
	    var i = void 0;
	    var ilen = void 0;
	
	    for (i = 0, ilen = input.length; i < ilen; i++) {
	      changes.push([input[i][0], input[i][1], dataSource.getAtCell(recordTranslator.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);
	    }
	
	    if (!changeSource && (typeof row === 'undefined' ? 'undefined' : _typeof(row)) === 'object') {
	      changeSource = prop;
	    }
	
	    instance.runHooks('afterSetDataAtRowProp', changes, changeSource);
	
	    validateChanges(changes, changeSource, function () {
	      applyChanges(changes, changeSource);
	    });
	  };
	
	  /**
	   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond
	   * in the right way.
	   *
	   * @memberof Core#
	   * @function listen
	   * @param {Boolean} [modifyDocumentFocus=true] If `true`, currently focused element will be blured (which returns focus
	   *                                             to the document.body). Otherwise the active element does not lose its focus.
	   * @fires Hooks#afterListen
	   */
	  this.listen = function () {
	    var modifyDocumentFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	    if (modifyDocumentFocus) {
	      var invalidActiveElement = !document.activeElement || document.activeElement && document.activeElement.nodeName === void 0;
	
	      if (document.activeElement && document.activeElement !== document.body && !invalidActiveElement) {
	        document.activeElement.blur();
	      } else if (invalidActiveElement) {
	        // IE
	        document.body.focus();
	      }
	    }
	
	    if (instance && !instance.isListening()) {
	      activeGuid = instance.guid;
	      instance.runHooks('afterListen');
	    }
	  };
	
	  /**
	   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for
	   * any keyboard events.
	   *
	   * @memberof Core#
	   * @function unlisten
	   */
	  this.unlisten = function () {
	    if (this.isListening()) {
	      activeGuid = null;
	      instance.runHooks('afterUnlisten');
	    }
	  };
	
	  /**
	   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.
	   *
	   * @memberof Core#
	   * @function isListening
	   * @returns {Boolean} `true` if the instance is listening, `false` otherwise.
	   */
	  this.isListening = function () {
	    return activeGuid === instance.guid;
	  };
	
	  /**
	   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.
	   *
	   * @memberof Core#
	   * @function destroyEditor
	   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.
	   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.
	   */
	  this.destroyEditor = function () {
	    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);
	  };
	
	  /**
	   * Populate cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you
	   * want to cut input when a certain row is reached.
	   *
	   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).
	   *
	   * @memberof Core#
	   * @function populateFromArray
	   * @param {Number} row Start visual row index.
	   * @param {Number} column Start visual column index.
	   * @param {Array} input 2d array
	   * @param {Number} [endRow] End visual row index (use when you want to cut input when certain row is reached).
	   * @param {Number} [endCol] End visual column index (use when you want to cut input when certain column is reached).
	   * @param {String} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).
	   * @param {String} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.
	   * @param {String} direction Populate direction, possible values: `'left'`, `'right'`, `'up'`, `'down'`.
	   * @param {Array} deltas The deltas array. A difference between values of adjacent cells.
	   *                       Useful **only** when the type of handled cells is `numeric`.
	   */
	  this.populateFromArray = function (row, column, input, endRow, endCol, source, method, direction, deltas) {
	    if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && _typeof(input[0]) === 'object')) {
	      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly
	    }
	
	    var c = typeof endRow === 'number' ? new _src.CellCoords(endRow, endCol) : null;
	
	    return grid.populateFromArray(new _src.CellCoords(row, column), input, c, source, method, direction, deltas);
	  };
	
	  /**
	   * Adds/removes data from the column. This method works the same as Array.splice for arrays (see {@link DataMap#spliceCol}).
	   *
	   * @memberof Core#
	   * @function spliceCol
	   * @param {Number} column Index of the column in which do you want to do splice.
	   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
	   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
	   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.
	   */
	  this.spliceCol = function (column, index, amount) {
	    var _datamap;
	
	    for (var _len2 = arguments.length, elements = Array(_len2 > 3 ? _len2 - 3 : 0), _key = 3; _key < _len2; _key++) {
	      elements[_key - 3] = arguments[_key];
	    }
	
	    return (_datamap = datamap).spliceCol.apply(_datamap, [column, index, amount].concat(elements));
	  };
	
	  /**
	   * Adds/removes data from the row. This method works the same as Array.splice for arrays (see {@link DataMap#spliceRow}).
	   *
	   * @memberof Core#
	   * @function spliceRow
	   * @param {Number} row Index of column in which do you want to do splice.
	   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
	   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
	   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.
	   */
	  this.spliceRow = function (row, index, amount) {
	    var _datamap2;
	
	    for (var _len3 = arguments.length, elements = Array(_len3 > 3 ? _len3 - 3 : 0), _key2 = 3; _key2 < _len3; _key2++) {
	      elements[_key2 - 3] = arguments[_key2];
	    }
	
	    return (_datamap2 = datamap).spliceRow.apply(_datamap2, [row, index, amount].concat(elements));
	  };
	
	  /**
	   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.
	   *
	   * Start row and start column are the coordinates of the active cell (where the selection was started).
	   *
	   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.
	   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)
	   * you need to use `getSelectedLast` method.
	   *
	   * @memberof Core#
	   * @function getSelected
	   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.
	   */
	  this.getSelected = function () {
	    // https://github.com/handsontable/handsontable/issues/44  //cjl
	    if (selection.isSelected()) {
	      return (0, _array.arrayMap)(selection.getSelectedRange(), function (_ref11) {
	        var from = _ref11.from,
	            to = _ref11.to;
	        return [from.row, from.col, to.row, to.col];
	      });
	    }
	  };
	
	  /**
	   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.
	   *
	   * @since 0.36.0
	   * @memberof Core#
	   * @function getSelectedLast
	   * @returns {Array|undefined} An array of the selection's coordinates.
	   */
	  this.getSelectedLast = function () {
	    var selected = this.getSelected();
	    var result = void 0;
	
	    if (selected && selected.length > 0) {
	      result = selected[selected.length - 1];
	    }
	
	    return result;
	  };
	
	  /**
	   * Returns the current selection as an array of CellRange objects.
	   *
	   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.
	   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)
	   * you need to use `getSelectedRangeLast` method.
	   *
	   * @memberof Core#
	   * @function getSelectedRange
	   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.
	   */
	  this.getSelectedRange = function () {
	    // https://github.com/handsontable/handsontable/issues/44  //cjl
	    if (selection.isSelected()) {
	      return Array.from(selection.getSelectedRange());
	    }
	  };
	
	  /**
	  * Returns the last coordinates applied to the table as a CellRange object.
	  *
	  * @memberof Core#
	  * @function getSelectedRangeLast
	  * @since 0.36.0
	  * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.
	   */
	  this.getSelectedRangeLast = function () {
	    var selectedRange = this.getSelectedRange();
	    var result = void 0;
	
	    if (selectedRange && selectedRange.length > 0) {
	      result = selectedRange[selectedRange.length - 1];
	    }
	
	    return result;
	  };
	
	  /**
	   * Erases content from cells that have been selected in the table.
	   *
	   * @memberof Core#
	   * @function emptySelectedCells
	   * @since 0.36.0
	   */
	  this.emptySelectedCells = function () {
	    var _this2 = this;
	
	    if (!selection.isSelected()) {
	      return;
	    }
	    var changes = [];
	
	    (0, _array.arrayEach)(selection.getSelectedRange(), function (cellRange) {
	      var topLeft = cellRange.getTopLeftCorner();
	      var bottomRight = cellRange.getBottomRightCorner();
	
	      (0, _number.rangeEach)(topLeft.row, bottomRight.row, function (row) {
	        (0, _number.rangeEach)(topLeft.col, bottomRight.col, function (column) {
	          if (!_this2.getCellMeta(row, column).readOnly) {
	            changes.push([row, column, '']);
	          }
	        });
	      });
	    });
	
	    if (changes.length > 0) {
	      this.setDataAtCell(changes);
	    }
	  };
	
	  /**
	   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes
	   * to the DOM. While rendering the table all cell renderers are recalled.
	   *
	   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most
	   * optimal moments in its lifecycle.
	   *
	   * @memberof Core#
	   * @function render
	   */
	  this.render = function () {
	    if (instance.view) {
	      instance.renderCall = true;
	      instance.forceFullRender = true; // used when data was changed
	      editorManager.lockEditor();
	      instance._refreshBorders(null);
	      editorManager.unlockEditor();
	    }
	  };
	
	  /**
	   * Loads new data to Handsontable. Loading new data resets the cell meta.
	   *
	   * @memberof Core#
	   * @function loadData
	   * @param {Array} data Array of arrays or array of objects containing data.
	   * @fires Hooks#afterLoadData
	   * @fires Hooks#afterChange
	   */
	  this.loadData = function (data) {
	    if (Array.isArray(priv.settings.dataSchema)) {
	      instance.dataType = 'array';
	    } else if ((0, _function.isFunction)(priv.settings.dataSchema)) {
	      instance.dataType = 'function';
	    } else {
	      instance.dataType = 'object';
	    }
	
	    if (datamap) {
	      datamap.destroy();
	    }
	    datamap = new _dataMap2.default(instance, priv, GridSettings);
	
	    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data !== null) {
	      if (!(data.push && data.splice)) {
	        // check if data is array. Must use duck-type check so Backbone Collections also pass it
	        // when data is not an array, attempt to make a single-row array of it
	        // eslint-disable-next-line no-param-reassign
	        data = [data];
	      }
	    } else if (data === null) {
	      var dataSchema = datamap.getSchema();
	      // eslint-disable-next-line no-param-reassign
	      data = [];
	      var row = void 0;
	      var r = 0;
	      var rlen = 0;
	
	      for (r = 0, rlen = priv.settings.startRows; r < rlen; r++) {
	        if ((instance.dataType === 'object' || instance.dataType === 'function') && priv.settings.dataSchema) {
	          row = (0, _object.deepClone)(dataSchema);
	          data.push(row);
	        } else if (instance.dataType === 'array') {
	          row = (0, _object.deepClone)(dataSchema[0]);
	          data.push(row);
	        } else {
	          row = [];
	
	          for (var c = 0, clen = priv.settings.startCols; c < clen; c++) {
	            row.push(null);
	          }
	
	          data.push(row);
	        }
	      }
	    } else {
	      throw new Error('loadData only accepts array of objects or array of arrays (' + (typeof data === 'undefined' ? 'undefined' : _typeof(data)) + ' given)');
	    }
	
	    priv.isPopulated = false;
	    GridSettings.prototype.data = data;
	
	    if (Array.isArray(data[0])) {
	      instance.dataType = 'array';
	    }
	
	    datamap.dataSource = data;
	    dataSource.data = data;
	    dataSource.dataType = instance.dataType;
	    dataSource.colToProp = datamap.colToProp.bind(datamap);
	    dataSource.propToCol = datamap.propToCol.bind(datamap);
	
	    clearCellSettingCache();
	
	    grid.adjustRowsAndCols();
	    instance.runHooks('afterLoadData', priv.firstRun);
	
	    if (priv.firstRun) {
	      priv.firstRun = [null, 'loadData'];
	    } else {
	      instance.runHooks('afterChange', null, 'loadData');
	      instance.render();
	    }
	    priv.isPopulated = true;
	
	    function clearCellSettingCache() {
	      priv.cellSettings.length = 0;
	    }
	  };
	
	  /**
	   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,
	   * unless the `modifyRow` hook was used to trim some of the rows. If that's the case - use the {@link Core#getSourceData} method.).
	   *
	   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.
	   *
	   * @memberof Core#
	   * @function getData
	   * @param {Number} [row] From visual row index.
	   * @param {Number} [column] From visual column index.
	   * @param {Number} [row2] To visual row index.
	   * @param {Number} [column2] To visual column index.
	   * @returns {Array[]} Array with the data.
	   * @example
	   * ```js
	   * // Get all data (in order how it is rendered in the table).
	   * hot.getData();
	   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).
	   * hot.getData(3, 3);
	   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).
	   * hot.getData(2, 1, 3, 3);
	   * ```
	   */
	  this.getData = function (row, column, row2, column2) {
	    if ((0, _mixed.isUndefined)(row)) {
	      return datamap.getAll();
	    }
	
	    return datamap.getRange(new _src.CellCoords(row, column), new _src.CellCoords(row2, column2), datamap.DESTINATION_RENDERER);
	  };
	
	  /**
	   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new
	   * line character (see {@link DataMap#getCopyableText}).
	   *
	   * @memberof Core#
	   * @function getCopyableText
	   * @param {Number} startRow From visual row index.
	   * @param {Number} startCol From visual column index.
	   * @param {Number} endRow To visual row index.
	   * @param {Number} endCol To visual column index.
	   * @returns {String}
	   */
	  this.getCopyableText = function (startRow, startCol, endRow, endCol) {
	    return datamap.getCopyableText(new _src.CellCoords(startRow, startCol), new _src.CellCoords(endRow, endCol));
	  };
	
	  /**
	   * Returns the data's copyable value at specified `row` and `column` index (see {@link DataMap#getCopyable}).
	   *
	   * @memberof Core#
	   * @function getCopyableData
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @returns {String}
	   */
	  this.getCopyableData = function (row, column) {
	    return datamap.getCopyable(row, datamap.colToProp(column));
	  };
	
	  /**
	   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data
	   * structure in the first row.
	   *
	   * @memberof Core#
	   * @function getSchema
	   * @returns {Object} Schema object.
	   */
	  this.getSchema = function () {
	    return datamap.getSchema();
	  };
	
	  /**
	   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the new
	   * settings, declared the same way as in the initial settings object.
	   *
	   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset
	   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).
	   *
	   * @memberof Core#
	   * @function updateSettings
	   * @param {Object} settings New settings object (see {@link Options}).
	   * @param {Boolean} [init=false] Internally used for in initialization mode.
	   * @example
	   * ```js
	   * hot.updateSettings({
	   *    contextMenu: true,
	   *    colHeaders: true,
	   *    fixedRowsTop: 2
	   * });
	   * ```
	   * @fires Hooks#afterCellMetaReset
	   * @fires Hooks#afterUpdateSettings
	   */
	  this.updateSettings = function (settings) {
	    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    var columnsAsFunc = false;
	    var i = void 0;
	    var j = void 0;
	    var clen = void 0;
	
	    if ((0, _mixed.isDefined)(settings.rows)) {
	      throw new Error('"rows" setting is no longer supported. do you mean startRows, minRows or maxRows?');
	    }
	    if ((0, _mixed.isDefined)(settings.cols)) {
	      throw new Error('"cols" setting is no longer supported. do you mean startCols, minCols or maxCols?');
	    }
	
	    // eslint-disable-next-line no-restricted-syntax
	    for (i in settings) {
	      if (i === 'data') {
	        /* eslint-disable-next-line no-continue */
	        continue; // loadData will be triggered later
	      } else if (i === 'language') {
	        setLanguage(settings.language);
	
	        /* eslint-disable-next-line no-continue */
	        continue;
	      } else if (_pluginHooks2.default.getSingleton().getRegistered().indexOf(i) > -1) {
	        if ((0, _function.isFunction)(settings[i]) || Array.isArray(settings[i])) {
	          settings[i].initialHook = true;
	          instance.addHook(i, settings[i]);
	        }
	      } else if (!init && (0, _object.hasOwnProperty)(settings, i)) {
	        // Update settings
	        GridSettings.prototype[i] = settings[i];
	      }
	    }
	
	    // Load data or create data map
	    if (settings.data === void 0 && priv.settings.data === void 0) {
	      instance.loadData(null); // data source created just now
	    } else if (settings.data !== void 0) {
	      instance.loadData(settings.data); // data source given as option
	    } else if (settings.columns !== void 0) {
	      datamap.createMap();
	    }
	
	    clen = instance.countCols();
	
	    var columnSetting = settings.columns || GridSettings.prototype.columns;
	
	    // Init columns constructors configuration
	    if (columnSetting && (0, _function.isFunction)(columnSetting)) {
	      clen = instance.countSourceCols();
	      columnsAsFunc = true;
	    }
	
	    // Clear cellSettings cache
	    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {
	      priv.cellSettings.length = 0;
	    }
	
	    if (clen > 0) {
	      var proto = void 0;
	      var column = void 0;
	
	      for (i = 0, j = 0; i < clen; i++) {
	        if (columnsAsFunc && !columnSetting(i)) {
	          /* eslint-disable no-continue */
	          continue;
	        }
	        priv.columnSettings[j] = (0, _setting.columnFactory)(GridSettings, priv.columnsSettingConflicts);
	
	        // shortcut for prototype
	        proto = priv.columnSettings[j].prototype;
	
	        // Use settings provided by user
	        if (columnSetting) {
	          if (columnsAsFunc) {
	            column = columnSetting(i);
	          } else {
	            column = columnSetting[j];
	          }
	
	          if (column) {
	            (0, _object.extend)(proto, column);
	            (0, _object.extend)(proto, expandType(column));
	          }
	        }
	
	        j += 1;
	      }
	    }
	
	    if ((0, _mixed.isDefined)(settings.cell)) {
	      (0, _object.objectEach)(settings.cell, function (cell) {
	        instance.setCellMetaObject(cell.row, cell.col, cell);
	      });
	    }
	
	    instance.runHooks('afterCellMetaReset');
	
	    if ((0, _mixed.isDefined)(settings.className)) {
	      if (GridSettings.prototype.className) {
	        (0, _element.removeClass)(instance.rootElement, GridSettings.prototype.className);
	      }
	      if (settings.className) {
	        (0, _element.addClass)(instance.rootElement, settings.className);
	      }
	    }
	
	    var currentHeight = instance.rootElement.style.height;
	    if (currentHeight !== '') {
	      currentHeight = parseInt(instance.rootElement.style.height, 10);
	    }
	
	    var height = settings.height;
	    if ((0, _function.isFunction)(height)) {
	      height = height();
	    }
	
	    if (init) {
	      var initialStyle = instance.rootElement.getAttribute('style');
	
	      if (initialStyle) {
	        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));
	      }
	    }
	
	    if (height === null) {
	      var _initialStyle = instance.rootElement.getAttribute('data-initialstyle');
	
	      if (_initialStyle && (_initialStyle.indexOf('height') > -1 || _initialStyle.indexOf('overflow') > -1)) {
	        instance.rootElement.setAttribute('style', _initialStyle);
	      } else {
	        instance.rootElement.style.height = '';
	        instance.rootElement.style.overflow = '';
	      }
	    } else if (height !== void 0) {
	      instance.rootElement.style.height = height + 'px';
	      instance.rootElement.style.overflow = 'hidden';
	    }
	
	    if (typeof settings.width !== 'undefined') {
	      var width = settings.width;
	
	      if ((0, _function.isFunction)(width)) {
	        width = width();
	      }
	
	      instance.rootElement.style.width = width + 'px';
	    }
	
	    if (!init) {
	      datamap.clearLengthCache(); // force clear cache length on updateSettings() #3416
	
	      if (instance.view) {
	        instance.view.wt.wtViewport.resetHasOversizedColumnHeadersMarked();
	      }
	
	      instance.runHooks('afterUpdateSettings', settings);
	    }
	
	    grid.adjustRowsAndCols();
	    if (instance.view && !priv.firstRun) {
	      instance.forceFullRender = true; // used when data was changed
	      editorManager.lockEditor();
	      instance._refreshBorders(null);
	      editorManager.unlockEditor();
	    }
	
	    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {
	      instance.view.wt.wtOverlays.updateMainScrollableElements();
	    }
	  };
	
	  /**
	   * Get value from the selected cell.
	   *
	   * @memberof Core#
	   * @function getValue
	   * @returns {*} Value of selected cell.
	   */
	  this.getValue = function () {
	    var sel = instance.getSelectedLast();
	
	    if (GridSettings.prototype.getValue) {
	      if ((0, _function.isFunction)(GridSettings.prototype.getValue)) {
	        return GridSettings.prototype.getValue.call(instance);
	      } else if (sel) {
	        return instance.getData()[sel[0][0]][GridSettings.prototype.getValue];
	      }
	    } else if (sel) {
	      return instance.getDataAtCell(sel[0], sel[1]);
	    }
	  };
	
	  function expandType(obj) {
	    if (!(0, _object.hasOwnProperty)(obj, 'type')) {
	      // ignore obj.prototype.type
	      return;
	    }
	
	    var expandedType = {};
	    var type = void 0;
	
	    if (_typeof(obj.type) === 'object') {
	      type = obj.type;
	    } else if (typeof obj.type === 'string') {
	      type = (0, _cellTypes.getCellType)(obj.type);
	    }
	
	    // eslint-disable-next-line no-restricted-syntax
	    for (var i in type) {
	      if ((0, _object.hasOwnProperty)(type, i) && !(0, _object.hasOwnProperty)(obj, i)) {
	        expandedType[i] = type[i];
	      }
	    }
	
	    return expandedType;
	  }
	
	  /**
	   * Returns the object settings.
	   *
	   * @memberof Core#
	   * @function getSettings
	   * @returns {Object} Object containing the current table settings.
	   */
	  this.getSettings = function () {
	    return priv.settings;
	  };
	
	  /**
	   * Clears the data from the table (the table settings remain intact).
	   *
	   * @memberof Core#
	   * @function clear
	   */
	  this.clear = function () {
	    this.selectAll();
	    this.emptySelectedCells();
	  };
	
	  /**
	   * Allows altering the table structure by either inserting/removing rows or columns.
	   *
	   * @memberof Core#
	   * @function alter
	   * @param {String} action Possible alter operations:
	   *  * `'insert_row'`
	   *  * `'insert_col'`
	   *  * `'remove_row'`
	   *  * `'remove_col'`
	   * @param {Number|Number[]} index Visual index of the row/column before which the new row/column will be
	   *                                inserted/removed or an array of arrays in format `[[index, amount],...]`.
	   * @param {Number} [amount=1] Amount of rows/columns to be inserted or removed.
	   * @param {String} [source] Source indicator.
	   * @param {Boolean} [keepEmptyRows] Flag for preventing deletion of empty rows.
	   * @example
	   * ```js
	   * // Insert new row above the row at given visual index.
	   * hot.alter('insert_row', 10);
	   * // Insert 3 new columns before 10th column.
	   * hot.alter('insert_col', 10, 3);
	   * // Remove 2 rows starting from 10th row.
	   * hot.alter('remove_row', 10, 2);
	   * // Remove 5 non-contiquous rows (it removes 3 rows from visual index 1 and 2 rows from visual index 5).
	   * hot.alter('remove_row', [[1, 3], [5, 2]]);
	   * ```
	   */
	  this.alter = function (action, index, amount, source, keepEmptyRows) {
	    grid.alter(action, index, amount, source, keepEmptyRows);
	  };
	
	  /**
	   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.
	   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).
	   *
	   * @memberof Core#
	   * @function getCell
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @param {Boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,
	   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.
	   * @returns {HTMLTableCellElement|null} The cell's TD element.
	   */
	  this.getCell = function (row, column) {
	    var topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	    return instance.view.getCellAtCoords(new _src.CellCoords(row, column), topmost);
	  };
	
	  /**
	   * Returns the coordinates of the cell, provided as a HTML table cell element.
	   *
	   * @memberof Core#
	   * @function getCoords
	   * @param {HTMLTableCellElement} element The HTML Element representing the cell.
	   * @returns {CellCoords} Visual coordinates object.
	   * @example
	   * ```js
	   * hot.getCoords(hot.getCell(1, 1));
	   * // it returns CellCoords object instance with props row: 1 and col: 1.
	   * ```
	   */
	  this.getCoords = function (element) {
	    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, element);
	  };
	
	  /**
	   * Returns the property name that corresponds with the given column index (see {@link DataMap#colToProp}).
	   * If the data source is an array of arrays, it returns the columns index.
	   *
	   * @memberof Core#
	   * @function colToProp
	   * @param {Number} column Visual column index.
	   * @returns {String|Number} Column property or physical column index.
	   */
	  this.colToProp = function (column) {
	    return datamap.colToProp(column);
	  };
	
	  /**
	   * Returns column index that corresponds with the given property (see {@link DataMap#propToCol}).
	   *
	   * @memberof Core#
	   * @function propToCol
	   * @param {String|Number} prop Property name or physical column index.
	   * @returns {Number} Visual column index.
	   */
	  this.propToCol = function (prop) {
	    return datamap.propToCol(prop);
	  };
	
	  /**
	   * Translate physical row index into visual.
	   *
	   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed
	   * based on a physical index
	   *
	   * @memberof Core#
	   * @function toVisualRow
	   * @param {Number} row Physical row index.
	   * @returns {Number} Returns visual row index.
	   */
	  this.toVisualRow = function (row) {
	    return recordTranslator.toVisualRow(row);
	  };
	
	  /**
	   * Translate physical column index into visual.
	   *
	   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed
	   * based on a physical index
	   *
	   * @memberof Core#
	   * @function toVisualColumn
	   * @param {Number} column Physical column index.
	   * @returns {Number} Returns visual column index.
	   */
	  this.toVisualColumn = function (column) {
	    return recordTranslator.toVisualColumn(column);
	  };
	
	  /**
	   * Translate visual row index into physical.
	   *
	   * This method is useful when you want to retrieve physical row index based on a visual index which can be
	   * reordered, moved or trimmed.
	   *
	   * @memberof Core#
	   * @function toPhysicalRow
	   * @param {Number} row Visual row index.
	   * @returns {Number} Returns physical row index.
	   */
	  this.toPhysicalRow = function (row) {
	    return recordTranslator.toPhysicalRow(row);
	  };
	
	  /**
	   * Translate visual column index into physical.
	   *
	   * This method is useful when you want to retrieve physical column index based on a visual index which can be
	   * reordered, moved or trimmed.
	   *
	   * @memberof Core#
	   * @function toPhysicalColumn
	   * @param {Number} column Visual column index.
	   * @returns {Number} Returns physical column index.
	   */
	  this.toPhysicalColumn = function (column) {
	    return recordTranslator.toPhysicalColumn(column);
	  };
	
	  /**
	   * @description
	   * Returns the cell value at `row`, `column`.
	   *
	   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.
	   *
	   * @memberof Core#
	   * @function getDataAtCell
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @returns {*} Data at cell.
	   */
	  this.getDataAtCell = function (row, column) {
	    return datamap.get(row, datamap.colToProp(column));
	  };
	
	  /**
	   * Returns value at visual `row` and `prop` indexes (see {@link DataMap#get}).
	   *
	   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.
	   *
	   * @memberof Core#
	   * @function getDataAtRowProp
	   * @param {Number} row Visual row index.
	   * @param {String} prop Property name.
	   * @returns {*} Cell value.
	   */
	  this.getDataAtRowProp = function (row, prop) {
	    return datamap.get(row, prop);
	  };
	
	  /**
	   * @description
	   * Returns array of column values from the data source.
	   *
	   * __Note__: If columns were reordered or sorted, the currently visible order will be used.
	   *
	   * @memberof Core#
	   * @function getDataAtCol
	   * @param {Number} column Visual column index.
	   * @returns {Array} Array of cell values.
	   */
	  this.getDataAtCol = function (column) {
	    var _ref12;
	
	    return (_ref12 = []).concat.apply(_ref12, _toConsumableArray(datamap.getRange(new _src.CellCoords(0, column), new _src.CellCoords(priv.settings.data.length - 1, column), datamap.DESTINATION_RENDERER)));
	  };
	
	  /**
	   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.
	   * You can also provide a column index as the first argument.
	   *
	   * @memberof Core#
	   * @function getDataAtProp
	   * @param {String|Number} prop Property name or physical column index.
	   * @returns {Array} Array of cell values.
	   */
	  // TODO: Getting data from `datamap` should work on visual indexes.
	  this.getDataAtProp = function (prop) {
	    var _ref13;
	
	    var range = datamap.getRange(new _src.CellCoords(0, datamap.propToCol(prop)), new _src.CellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);
	
	    return (_ref13 = []).concat.apply(_ref13, _toConsumableArray(range));
	  };
	
	  /**
	   * Returns the source data object (the same that was passed by `data` configuration option or `loadData` method).
	   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a
	   * fragment of the table data.
	   *
	   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,
	   * sorted or trimmed only physical indexes are correct.
	   *
	   * @memberof Core#
	   * @function getSourceData
	   * @param {Number} [row] From physical row index.
	   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).
	   * @param {Number} [row2] To physical row index.
	   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).
	   * @returns {Array[]|Object[]} The table data.
	   */
	  this.getSourceData = function (row, column, row2, column2) {
	    var data = void 0;
	
	    if (row === void 0) {
	      data = dataSource.getData();
	    } else {
	      data = dataSource.getByRange(new _src.CellCoords(row, column), new _src.CellCoords(row2, column2));
	    }
	
	    return data;
	  };
	
	  /**
	   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.
	   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a
	   * fragment of the table data.
	   *
	   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,
	   * sorted or trimmed only physical indexes are correct.
	   *
	   * @memberof Core#
	   * @function getSourceDataArray
	   * @param {Number} [row] From physical row index.
	   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).
	   * @param {Number} [row2] To physical row index.
	   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).
	   * @returns {Array} An array of arrays.
	   */
	  this.getSourceDataArray = function (row, column, row2, column2) {
	    var data = void 0;
	
	    if (row === void 0) {
	      data = dataSource.getData(true);
	    } else {
	      data = dataSource.getByRange(new _src.CellCoords(row, column), new _src.CellCoords(row2, column2), true);
	    }
	
	    return data;
	  };
	
	  /**
	   * Returns an array of column values from the data source.
	   *
	   * @memberof Core#
	   * @function getSourceDataAtCol
	   * @param {Number} column Visual column index.
	   * @returns {Array} Array of the column's cell values.
	   */
	  // TODO: Getting data from `sourceData` should work always on physical indexes.
	  this.getSourceDataAtCol = function (column) {
	    return dataSource.getAtColumn(column);
	  };
	
	  /**
	   * Returns a single row of the data (array or object, depending on what data format you use).
	   *
	   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,
	   * sorted or trimmed only physical indexes are correct.
	   *
	   * @memberof Core#
	   * @function getSourceDataAtRow
	   * @param {Number} row Physical row index.
	   * @returns {Array|Object} Single row of data.
	   */
	  this.getSourceDataAtRow = function (row) {
	    return dataSource.getAtRow(row);
	  };
	
	  /**
	   * Returns a single value from the data source.
	   *
	   * @memberof Core#
	   * @function getSourceDataAtCell
	   * @param {Number} row Physical row index.
	   * @param {Number} column Visual column index.
	   * @returns {*} Cell data.
	   */
	  // TODO: Getting data from `sourceData` should work always on physical indexes.
	  this.getSourceDataAtCell = function (row, column) {
	    return dataSource.getAtCell(row, column);
	  };
	
	  /**
	   * @description
	   * Returns a single row of the data.
	   *
	   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.
	   *
	   * @memberof Core#
	   * @function getDataAtRow
	   * @param {Number} row Visual row index.
	   * @returns {Array} Array of row's cell data.
	   */
	  this.getDataAtRow = function (row) {
	    var data = datamap.getRange(new _src.CellCoords(row, 0), new _src.CellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);
	
	    return data[0] || [];
	  };
	
	  /**
	   * @description
	   * Returns a data type defined in the Handsontable settings under the `type` key ([Options#type](http://docs.handsontable.com/Options.html#type)).
	   * If there are cells with different types in the selected range, it returns `'mixed'`.
	   *
	   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.
	   *
	   * @memberof Core#
	   * @function getDataType
	   * @param {Number} rowFrom From visual row index.
	   * @param {Number} columnFrom From visual column index.
	   * @param {Number} rowTo To visual row index.
	   * @param {Number} columnTo To visual column index.
	   * @returns {String} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).
	   */
	  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {
	    var _this3 = this;
	
	    var coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];
	    var rowStart = coords[0],
	        columnStart = coords[1];
	    var rowEnd = coords[2],
	        columnEnd = coords[3];
	
	    var previousType = null;
	    var currentType = null;
	
	    if (rowEnd === void 0) {
	      rowEnd = rowStart;
	    }
	    if (columnEnd === void 0) {
	      columnEnd = columnStart;
	    }
	    var type = 'mixed';
	
	    (0, _number.rangeEach)(Math.min(rowStart, rowEnd), Math.max(rowStart, rowEnd), function (row) {
	      var isTypeEqual = true;
	
	      (0, _number.rangeEach)(Math.min(columnStart, columnEnd), Math.max(columnStart, columnEnd), function (column) {
	        var cellType = _this3.getCellMeta(row, column);
	
	        currentType = cellType.type;
	
	        if (previousType) {
	          isTypeEqual = previousType === currentType;
	        } else {
	          previousType = currentType;
	        }
	
	        return isTypeEqual;
	      });
	      type = isTypeEqual ? currentType : 'mixed';
	
	      return isTypeEqual;
	    });
	
	    return type;
	  };
	
	  /**
	   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.
	   *
	   * @memberof Core#
	   * @function removeCellMeta
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @param {String} key Property name.
	   * @fires Hooks#beforeRemoveCellMeta
	   * @fires Hooks#afterRemoveCellMeta
	   */
	  this.removeCellMeta = function (row, column, key) {
	    var _recordTranslator$toP = recordTranslator.toPhysical(row, column),
	        _recordTranslator$toP2 = _slicedToArray(_recordTranslator$toP, 2),
	        physicalRow = _recordTranslator$toP2[0],
	        physicalColumn = _recordTranslator$toP2[1];
	
	    var cachedValue = priv.cellSettings[physicalRow][physicalColumn][key];
	
	    var hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);
	
	    if (hookResult !== false) {
	      delete priv.cellSettings[physicalRow][physicalColumn][key];
	
	      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);
	    }
	
	    cachedValue = null;
	  };
	
	  /**
	   * Remove one or more rows from the cell meta object.
	   *
	   * @since 0.30.0
	   * @param {Number} index An integer that specifies at what position to add/remove items, Use negative values to specify the position from the end of the array.
	   * @param {Number} deleteAmount The number of items to be removed. If set to 0, no items will be removed.
	   * @param {Array} items The new items to be added to the array.
	   */
	  this.spliceCellsMeta = function (index, deleteAmount) {
	    var _priv$cellSettings;
	
	    for (var _len4 = arguments.length, items = Array(_len4 > 2 ? _len4 - 2 : 0), _key3 = 2; _key3 < _len4; _key3++) {
	      items[_key3 - 2] = arguments[_key3];
	    }
	
	    (_priv$cellSettings = priv.cellSettings).splice.apply(_priv$cellSettings, [index, deleteAmount].concat(items));
	  };
	
	  /**
	   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.
	   *
	   * @memberof Core#
	   * @function setCellMetaObject
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @param {Object} prop Meta object.
	   */
	  this.setCellMetaObject = function (row, column, prop) {
	    var _this4 = this;
	
	    if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
	      (0, _object.objectEach)(prop, function (value, key) {
	        _this4.setCellMeta(row, column, key, value);
	      });
	    }
	  };
	
	  /**
	   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.
	   *
	   * @memberof Core#
	   * @function setCellMeta
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @param {String} key Property name.
	   * @param {String} value Property value.
	   * @fires Hooks#afterSetCellMeta
	   */
	  this.setCellMeta = function (row, column, key, value) {
	    var _recordTranslator$toP3 = recordTranslator.toPhysical(row, column),
	        _recordTranslator$toP4 = _slicedToArray(_recordTranslator$toP3, 2),
	        physicalRow = _recordTranslator$toP4[0],
	        physicalColumn = _recordTranslator$toP4[1];
	
	    if (!priv.columnSettings[physicalColumn]) {
	      priv.columnSettings[physicalColumn] = (0, _setting.columnFactory)(GridSettings, priv.columnsSettingConflicts);
	    }
	
	    if (!priv.cellSettings[physicalRow]) {
	      priv.cellSettings[physicalRow] = [];
	    }
	    if (!priv.cellSettings[physicalRow][physicalColumn]) {
	      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();
	    }
	    priv.cellSettings[physicalRow][physicalColumn][key] = value;
	    instance.runHooks('afterSetCellMeta', row, column, key, value);
	  };
	
	  /**
	   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).
	   *
	   * @memberof Core#
	   * @function getCellsMeta
	   * @returns {Array} Returns an array of ColumnSettings object instances.
	   */
	  this.getCellsMeta = function () {
	    return (0, _array.arrayFlatten)(priv.cellSettings);
	  };
	
	  /**
	   * Returns the cell properties object for the given `row` and `column` coordinates.
	   *
	   * @memberof Core#
	   * @function getCellMeta
	   * @param {Number} row Visual row index.
	   * @param {Number} column Visual column index.
	   * @returns {Object} The cell properties object.
	   * @fires Hooks#beforeGetCellMeta
	   * @fires Hooks#afterGetCellMeta
	   */
	  this.getCellMeta = function (row, column) {
	    var prop = datamap.colToProp(column);
	
	    var _recordTranslator$toP5 = recordTranslator.toPhysical(row, column),
	        _recordTranslator$toP6 = _slicedToArray(_recordTranslator$toP5, 2),
	        potentialPhysicalRow = _recordTranslator$toP6[0],
	        physicalColumn = _recordTranslator$toP6[1];
	
	    var physicalRow = potentialPhysicalRow;
	
	    // Workaround for #11. Connected also with #3849. It should be fixed within #4497.
	    if (physicalRow === null) {
	      physicalRow = row;
	    }
	
	    if (!priv.columnSettings[physicalColumn]) {
	      priv.columnSettings[physicalColumn] = (0, _setting.columnFactory)(GridSettings, priv.columnsSettingConflicts);
	    }
	
	    if (!priv.cellSettings[physicalRow]) {
	      priv.cellSettings[physicalRow] = [];
	    }
	    if (!priv.cellSettings[physicalRow][physicalColumn]) {
	      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();
	    }
	
	    var cellProperties = priv.cellSettings[physicalRow][physicalColumn]; // retrieve cellProperties from cache
	
	    cellProperties.row = physicalRow;
	    cellProperties.col = physicalColumn;
	    cellProperties.visualRow = row;
	    cellProperties.visualCol = column;
	    cellProperties.prop = prop;
	    cellProperties.instance = instance;
	
	    instance.runHooks('beforeGetCellMeta', row, column, cellProperties);
	    (0, _object.extend)(cellProperties, expandType(cellProperties)); // for `type` added in beforeGetCellMeta
	
	    if (cellProperties.cells) {
	      var settings = cellProperties.cells.call(cellProperties, physicalRow, physicalColumn, prop);
	
	      if (settings) {
	        (0, _object.extend)(cellProperties, settings);
	        (0, _object.extend)(cellProperties, expandType(settings)); // for `type` added in cells
	      }
	    }
	
	    instance.runHooks('afterGetCellMeta', row, column, cellProperties);
	
	    return cellProperties;
	  };
	
	  /**
	   * Returns an array of cell meta objects for specyfied physical row index.
	   *
	   * @memberof Core#
	   * @function getCellMetaAtRow
	   * @param {Number} row Physical row index.
	   * @returns {Array}
	   */
	  this.getCellMetaAtRow = function (row) {
	    return priv.cellSettings[row];
	  };
	
	  /**
	   * Checks if the data format and config allows user to modify the column structure.
	   *
	   * @memberof Core#
	   * @function isColumnModificationAllowed
	   * @returns {Boolean}
	   */
	  this.isColumnModificationAllowed = function () {
	    return !(instance.dataType === 'object' || instance.getSettings().columns);
	  };
	
	  var rendererLookup = (0, _data.cellMethodLookupFactory)('renderer');
	
	  /**
	   * Returns the cell renderer function by given `row` and `column` arguments.
	   *
	   * @memberof Core#
	   * @function getCellRenderer
	   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).
	   * @param {Number} column Visual column index.
	   * @returns {Function} The renderer function.
	   * @example
	   * ```js
	   * // Get cell renderer using `row` and `column` coordinates.
	   * hot.getCellRenderer(1, 1);
	   * // Get cell renderer using cell meta object.
	   * hot.getCellRenderer(hot.getCellMeta(1, 1));
	   * ```
	   */
	  this.getCellRenderer = function (row, column) {
	    return (0, _renderers.getRenderer)(rendererLookup.call(this, row, column));
	  };
	
	  /**
	   * Returns the cell editor class by the provided `row` and `column` arguments.
	   *
	   * @memberof Core#
	   * @function getCellEditor
	   * @param {Number} row Visual row index or cell meta object (see {@link Core#getCellMeta}).
	   * @param {Number} column Visual column index.
	   * @returns {Function} The editor class.
	   * @example
	   * ```js
	   * // Get cell editor class using `row` and `column` coordinates.
	   * hot.getCellEditor(1, 1);
	   * // Get cell editor class using cell meta object.
	   * hot.getCellEditor(hot.getCellMeta(1, 1));
	   * ```
	   */
	  this.getCellEditor = (0, _data.cellMethodLookupFactory)('editor');
	
	  var validatorLookup = (0, _data.cellMethodLookupFactory)('validator');
	
	  /**
	   * Returns the cell validator by `row` and `column`.
	   *
	   * @memberof Core#
	   * @function getCellValidator
	   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).
	   * @param {Number} column Visual column index.
	   * @returns {Function|RegExp|undefined} The validator function.
	   * @example
	   * ```js
	   * // Get cell valiator using `row` and `column` coordinates.
	   * hot.getCellValidator(1, 1);
	   * // Get cell valiator using cell meta object.
	   * hot.getCellValidator(hot.getCellMeta(1, 1));
	   * ```
	   */
	  this.getCellValidator = function (row, column) {
	    var validator = validatorLookup.call(this, row, column);
	
	    if (typeof validator === 'string') {
	      validator = (0, _validators.getValidator)(validator);
	    }
	
	    return validator;
	  };
	
	  /**
	   * Validates all cells using their validator functions and calls callback when finished.
	   *
	   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it
	   * would equal `true`.
	   *
	   * @memberof Core#
	   * @function validateCells
	   * @param {Function} [callback] The callback function.
	   * @example
	   * ```js
	   * hot.validateCells((valid) => {
	   *   if (valid) {
	   *     // ... code for validated cells
	   *   }
	   * })
	   * ```
	   */
	  this.validateCells = function (callback) {
	    this._validateCells(callback);
	  };
	
	  /**
	   * Validates rows using their validator functions and calls callback when finished.
	   *
	   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it
	   *  would equal `true`.
	   *
	   * @memberof Core#
	   * @function validateRows
	   * @param {Array} [rows] Array of validation target visual row indexes.
	   * @param {Function} [callback] The callback function.
	   * @example
	   * ```js
	   * hot.validateRows([3, 4, 5], (valid) => {
	   *   if (valid) {
	   *     // ... code for validated rows
	   *   }
	   * })
	   * ```
	   */
	  this.validateRows = function (rows, callback) {
	    if (!Array.isArray(rows)) {
	      throw new Error('validateRows parameter `rows` must be an array');
	    }
	    this._validateCells(callback, rows);
	  };
	
	  /**
	   * Validates columns using their validator functions and calls callback when finished.
	   *
	   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it
	   *  would equal `true`.
	   *
	   * @memberof Core#
	   * @function validateColumns
	   * @param {Array} [columns] Array of validation target visual columns indexes.
	   * @param {Function} [callback] The callback function.
	   * @example
	   * ```js
	   * hot.validateColumns([3, 4, 5], (valid) => {
	   *   if (valid) {
	   *     // ... code for validated columns
	   *   }
	   * })
	   * ```
	   */
	  this.validateColumns = function (columns, callback) {
	    if (!Array.isArray(columns)) {
	      throw new Error('validateColumns parameter `columns` must be an array');
	    }
	    this._validateCells(callback, undefined, columns);
	  };
	
	  /**
	   * Validates all cells using their validator functions and calls callback when finished.
	   *
	   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.
	   *
	   * Private use intended.
	   *
	   * @private
	   * @memberof Core#
	   * @function _validateCells
	   * @param {Function} [callback] The callback function.
	   * @param {Array} [rows] An array of validation target visual row indexes.
	   * @param {Array} [columns] An array of validation target visual column indexes.
	   */
	  this._validateCells = function (callback, rows, columns) {
	    var waitingForValidator = new ValidatorsQueue();
	
	    if (callback) {
	      waitingForValidator.onQueueEmpty = callback;
	    }
	
	    var i = instance.countRows() - 1;
	
	    while (i >= 0) {
	      if (rows !== undefined && rows.indexOf(i) === -1) {
	        i -= 1;
	        continue;
	      }
	      var j = instance.countCols() - 1;
	
	      while (j >= 0) {
	        if (columns !== undefined && columns.indexOf(j) === -1) {
	          j -= 1;
	          continue;
	        }
	        waitingForValidator.addValidatorToQueue();
	
	        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function (result) {
	          if (typeof result !== 'boolean') {
	            throw new Error('Validation error: result is not boolean');
	          }
	          if (result === false) {
	            waitingForValidator.valid = false;
	          }
	          waitingForValidator.removeValidatorFormQueue();
	        }, 'validateCells');
	        j -= 1;
	      }
	      i -= 1;
	    }
	    waitingForValidator.checkIfQueueIsEmpty();
	  };
	
	  /**
	   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.
	   *
	   * @memberof Core#
	   * @function getRowHeader
	   * @param {Number} [row] Visual row index.
	   * @fires Hooks#modifyRowHeader
	   * @returns {Array|String|Number} Array of header values / single header value.
	   */
	  this.getRowHeader = function (row) {
	    var rowHeader = priv.settings.rowHeaders;
	    var physicalRow = row;
	
	    if (physicalRow !== void 0) {
	      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);
	    }
	    if (physicalRow === void 0) {
	      rowHeader = [];
	      (0, _number.rangeEach)(instance.countRows() - 1, function (i) {
	        rowHeader.push(instance.getRowHeader(i));
	      });
	    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {
	      rowHeader = rowHeader[physicalRow];
	    } else if ((0, _function.isFunction)(rowHeader)) {
	      rowHeader = rowHeader(physicalRow);
	    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {
	      rowHeader = physicalRow + 1;
	    }
	
	    return rowHeader;
	  };
	
	  /**
	   * Returns information about if this table is configured to display row headers.
	   *
	   * @memberof Core#
	   * @function hasRowHeaders
	   * @returns {Boolean} `true` if the instance has the row headers enabled, `false` otherwise.
	   */
	  this.hasRowHeaders = function () {
	    return !!priv.settings.rowHeaders;
	  };
	
	  /**
	   * Returns information about if this table is configured to display column headers.
	   *
	   * @memberof Core#
	   * @function hasColHeaders
	   * @returns {Boolean} `true` if the instance has the column headers enabled, `false` otherwise.
	   */
	  this.hasColHeaders = function () {
	    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) {
	      // Polymer has empty value = null
	      return !!priv.settings.colHeaders;
	    }
	    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {
	      if (instance.getColHeader(i)) {
	        return true;
	      }
	    }
	
	    return false;
	  };
	
	  /**
	   * Returns an array of column headers (in string format, if they are enabled). If param `column` is given, it
	   * returns the header at the given column.
	   *
	   * @memberof Core#
	   * @function getColHeader
	   * @param {Number} [column] Visual column index.
	   * @fires Hooks#modifyColHeader
	   * @returns {Array|String|Number} The column header(s).
	   */
	  this.getColHeader = function (column) {
	    var columnsAsFunc = priv.settings.columns && (0, _function.isFunction)(priv.settings.columns);
	    var columnIndex = instance.runHooks('modifyColHeader', column);
	    var result = priv.settings.colHeaders;
	
	    if (columnIndex === void 0) {
	      var out = [];
	      var ilen = columnsAsFunc ? instance.countSourceCols() : instance.countCols();
	
	      for (var i = 0; i < ilen; i++) {
	        out.push(instance.getColHeader(i));
	      }
	
	      result = out;
	    } else {
	      var translateVisualIndexToColumns = function translateVisualIndexToColumns(visualColumnIndex) {
	        var arr = [];
	        var columnsLen = instance.countSourceCols();
	        var index = 0;
	
	        for (; index < columnsLen; index++) {
	          if ((0, _function.isFunction)(instance.getSettings().columns) && instance.getSettings().columns(index)) {
	            arr.push(index);
	          }
	        }
	
	        return arr[visualColumnIndex];
	      };
	      var baseCol = columnIndex;
	      var physicalColumn = instance.runHooks('modifyCol', baseCol);
	
	      var prop = translateVisualIndexToColumns(physicalColumn);
	
	      if (priv.settings.columns && (0, _function.isFunction)(priv.settings.columns) && priv.settings.columns(prop) && priv.settings.columns(prop).title) {
	        result = priv.settings.columns(prop).title;
	      } else if (priv.settings.columns && priv.settings.columns[physicalColumn] && priv.settings.columns[physicalColumn].title) {
	        result = priv.settings.columns[physicalColumn].title;
	      } else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[physicalColumn] !== void 0) {
	        result = priv.settings.colHeaders[physicalColumn];
	      } else if ((0, _function.isFunction)(priv.settings.colHeaders)) {
	        result = priv.settings.colHeaders(physicalColumn);
	      } else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {
	        result = (0, _data.spreadsheetColumnLabel)(baseCol); // see #1458
	      }
	    }
	
	    return result;
	  };
	
	  /**
	   * Return column width from settings (no guessing). Private use intended.
	   *
	   * @private
	   * @memberof Core#
	   * @function _getColWidthFromSettings
	   * @param {Number} col Visual col index.
	   * @returns {Number}
	   */
	  this._getColWidthFromSettings = function (col) {
	    var cellProperties = instance.getCellMeta(0, col);
	    var width = cellProperties.width;
	
	    if (width === void 0 || width === priv.settings.width) {
	      width = cellProperties.colWidths;
	    }
	    if (width !== void 0 && width !== null) {
	      switch (typeof width === 'undefined' ? 'undefined' : _typeof(width)) {
	        case 'object':
	          // array
	          width = width[col];
	          break;
	
	        case 'function':
	          width = width(col);
	          break;
	        default:
	          break;
	      }
	      if (typeof width === 'string') {
	        width = parseInt(width, 10);
	      }
	    }
	
	    return width;
	  };
	
	  /**
	   * Returns the width of the requested column.
	   *
	   * @memberof Core#
	   * @function getColWidth
	   * @param {Number} column Visual column index.
	   * @returns {Number} Column width.
	   * @fires Hooks#modifyColWidth
	   */
	  this.getColWidth = function (column) {
	    var width = instance._getColWidthFromSettings(column);
	
	    width = instance.runHooks('modifyColWidth', width, column);
	
	    if (width === void 0) {
	      width = _src.ViewportColumnsCalculator.DEFAULT_WIDTH;
	    }
	
	    return width;
	  };
	
	  /**
	   * Return row height from settings (no guessing). Private use intended.
	   *
	   * @private
	   * @memberof Core#
	   * @function _getRowHeightFromSettings
	   * @param {Number} row Visual row index.
	   * @returns {Number}
	   */
	  this._getRowHeightFromSettings = function (row) {
	    // let cellProperties = instance.getCellMeta(row, 0);
	    // let height = cellProperties.height;
	    //
	    // if (height === void 0 || height === priv.settings.height) {
	    //  height = cellProperties.rowHeights;
	    // }
	    var height = priv.settings.rowHeights;
	
	    if (height !== void 0 && height !== null) {
	      switch (typeof height === 'undefined' ? 'undefined' : _typeof(height)) {
	        case 'object':
	          // array
	          height = height[row];
	          break;
	
	        case 'function':
	          height = height(row);
	          break;
	        default:
	          break;
	      }
	      if (typeof height === 'string') {
	        height = parseInt(height, 10);
	      }
	    }
	
	    return height;
	  };
	
	  /**
	   * Returns the row height.
	   *
	   * @memberof Core#
	   * @function getRowHeight
	   * @param {Number} row Visual row index.
	   * @returns {Number} The given row's height.
	   * @fires Hooks#modifyRowHeight
	   */
	  this.getRowHeight = function (row) {
	    var height = instance._getRowHeightFromSettings(row);
	
	    height = instance.runHooks('modifyRowHeight', height, row);
	
	    return height;
	  };
	
	  /**
	   * Returns the total number of rows in the data source.
	   *
	   * @memberof Core#
	   * @function countSourceRows
	   * @returns {Number} Total number of rows.
	   */
	  this.countSourceRows = function () {
	    var sourceLength = instance.runHooks('modifySourceLength');
	    return sourceLength || (instance.getSourceData() ? instance.getSourceData().length : 0);
	  };
	
	  /**
	   * Returns the total number of columns in the data source.
	   *
	   * @memberof Core#
	   * @function countSourceCols
	   * @returns {Number} Total number of columns.
	   */
	  this.countSourceCols = function () {
	    var len = 0;
	    var obj = instance.getSourceData() && instance.getSourceData()[0] ? instance.getSourceData()[0] : [];
	
	    if ((0, _object.isObject)(obj)) {
	      len = (0, _object.deepObjectSize)(obj);
	    } else {
	      len = obj.length || 0;
	    }
	
	    return len;
	  };
	
	  /**
	   * Returns the total number of visual rows in the table.
	   *
	   * @memberof Core#
	   * @function countRows
	   * @returns {Number} Total number of rows.
	   */
	  this.countRows = function () {
	    return datamap.getLength();
	  };
	
	  /**
	   * Returns the total number of visible columns in the table.
	   *
	   * @memberof Core#
	   * @function countCols
	   * @returns {Number} Total number of columns.
	   */
	  this.countCols = function () {
	    var maxCols = this.getSettings().maxCols;
	    var dataHasLength = false;
	    var dataLen = 0;
	
	    if (instance.dataType === 'array') {
	      dataHasLength = priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length;
	    }
	
	    if (dataHasLength) {
	      dataLen = priv.settings.data[0].length;
	    }
	
	    if (priv.settings.columns) {
	      var columnsIsFunction = (0, _function.isFunction)(priv.settings.columns);
	
	      if (columnsIsFunction) {
	        if (instance.dataType === 'array') {
	          var columnLen = 0;
	
	          for (var i = 0; i < dataLen; i++) {
	            if (priv.settings.columns(i)) {
	              columnLen += 1;
	            }
	          }
	
	          dataLen = columnLen;
	        } else if (instance.dataType === 'object' || instance.dataType === 'function') {
	          dataLen = datamap.colToPropCache.length;
	        }
	      } else {
	        dataLen = priv.settings.columns.length;
	      }
	    } else if (instance.dataType === 'object' || instance.dataType === 'function') {
	      dataLen = datamap.colToPropCache.length;
	    }
	
	    return Math.min(maxCols, dataLen);
	  };
	
	  /**
	   * Returns an visual index of the first rendered row.
	   *
	   * @memberof Core#
	   * @function rowOffset
	   * @returns {Number} Visual index of first rendered row.
	   */
	  this.rowOffset = function () {
	    return instance.view.wt.wtTable.getFirstRenderedRow();
	  };
	
	  /**
	   * Returns the visual index of the first rendered column.
	   *
	   * @memberof Core#
	   * @function colOffset
	   * @returns {Number} Visual index of the first visible column.
	   */
	  this.colOffset = function () {
	    return instance.view.wt.wtTable.getFirstRenderedColumn();
	  };
	
	  /**
	   * Returns the number of rendered rows (including rows partially or fully rendered outside viewport).
	   *
	   * @memberof Core#
	   * @function countRenderedRows
	   * @returns {Number} Returns -1 if table is not visible.
	   */
	  this.countRenderedRows = function () {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;
	  };
	
	  /**
	   * Returns the number of visible rows (rendered rows that fully fit inside viewport).
	   *
	   * @memberof Core#
	   * @function countVisibleRows
	   * @returns {Number} Number of visible rows or -1.
	   */
	  this.countVisibleRows = function () {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;
	  };
	
	  /**
	   * Returns the number of rendered columns (including columns partially or fully rendered outside viewport).
	   *
	   * @memberof Core#
	   * @function countRenderedCols
	   * @returns {Number} Returns -1 if table is not visible.
	   */
	  this.countRenderedCols = function () {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;
	  };
	
	  /**
	   * Returns the number of visible columns. Returns -1 if table is not visible
	   *
	   * @memberof Core#
	   * @function countVisibleCols
	   * @return {Number} Number of visible columns or -1.
	   */
	  this.countVisibleCols = function () {
	    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : -1;
	  };
	
	  /**
	   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the
	   * number of empty rows at the bottom of the table.
	   *
	   * @memberof Core#
	   * @function countEmptyRows
	   * @param {Boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.
	   * @returns {Number} Count empty rows.
	   */
	  this.countEmptyRows = function () {
	    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var emptyRows = 0;
	
	    (0, _number.rangeEachReverse)(instance.countRows() - 1, function (visualIndex) {
	      if (instance.isEmptyRow(visualIndex)) {
	        emptyRows += 1;
	      } else if (ending === true) {
	        return false;
	      }
	    });
	
	    return emptyRows;
	  };
	
	  /**
	   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty
	   * columns at right hand edge of the table.
	   *
	   * @memberof Core#
	   * @function countEmptyCols
	   * @param {Boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.
	   * @returns {Number} Count empty cols.
	   */
	  this.countEmptyCols = function () {
	    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    if (instance.countRows() < 1) {
	      return 0;
	    }
	
	    var emptyColumns = 0;
	
	    (0, _number.rangeEachReverse)(instance.countCols() - 1, function (visualIndex) {
	      if (instance.isEmptyCol(visualIndex)) {
	        emptyColumns += 1;
	      } else if (ending === true) {
	        return false;
	      }
	    });
	
	    return emptyColumns;
	  };
	
	  /**
	   * Check if all cells in the row declared by the `row` argument are empty.
	   *
	   * @memberof Core#
	   * @function isEmptyRow
	   * @param {Number} row Visual row index.
	   * @returns {Boolean} `true` if the row at the given `row` is empty, `false` otherwise.
	   */
	  this.isEmptyRow = function (row) {
	    return priv.settings.isEmptyRow.call(instance, row);
	  };
	
	  /**
	   * Check if all cells in the the column declared by the `column` argument are empty.
	   *
	   * @memberof Core#
	   * @function isEmptyCol
	   * @param {Number} column Column index.
	   * @returns {Boolean} `true` if the column at the given `col` is empty, `false` otherwise.
	   */
	  this.isEmptyCol = function (column) {
	    return priv.settings.isEmptyCol.call(instance, column);
	  };
	
	  /**
	   * Select cell specified by `row` and `column` values or a range of cells finishing at `endRow`, `endCol`. If the table
	   * was configured to support data column properties that properties can be used to making a selection.
	   *
	   * By default, viewport will be scrolled to the selection. After the `selectCell` method had finished, the instance
	   * will be listening to keyboard input on the document.
	   *
	   * @example
	   * ```js
	   * // select a single cell
	   * hot.selectCell(2, 4);
	   * // select a single cell using column property
	   * hot.selectCell(2, 'address');
	   * // select a range of cells
	   * hot.selectCell(2, 4, 3, 5);
	   * // select a range of cells using column properties
	   * hot.selectCell(2, 'address', 3, 'phone_number');
	   * // select a range of cells without scrolling to them
	   * hot.selectCell(2, 'address', 3, 'phone_number', false);
	   * ```
	   *
	   * @memberof Core#
	   * @function selectCell
	   * @param {Number} row Visual row index.
	   * @param {Number|String} column Visual column index or column property.
	   * @param {Number} [endRow] Visual end row index (if selecting a range).
	   * @param {Number|String} [endColumn] Visual end column index or column property (if selecting a range).
	   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.
	   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.
	   * @returns {Boolean} `true` if selection was successful, `false` otherwise.
	   */
	  this.selectCell = function (row, column, endRow, endColumn) {
	    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	
	    if ((0, _mixed.isUndefined)(row) || (0, _mixed.isUndefined)(column)) {
	      return false;
	    }
	
	    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);
	  };
	
	  /**
	   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
	   * finishing at `endRow`, `endColumn`. The method supports two input formats which are the same as that
	   * produces by `getSelected` and `getSelectedRange` methods.
	   *
	   * By default, viewport will be scrolled to selection. After the `selectCells` method had finished, the instance
	   * will be listening to keyboard input on the document.
	   *
	   * @example
	   * ```js
	   * // Using an array of arrays.
	   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);
	   * // Using an array of arrays with defined columns as props.
	   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);
	   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
	   * const selected = hot.getSelectedRange();
	   *
	   * selected[0].from.row = 0;
	   * selected[0].from.col = 0;
	   *
	   * hot.selectCells(selected);
	   * ```
	   *
	   * @memberof Core#
	   * @since 0.38.0
	   * @function selectCells
	   * @param {Array[]|CellRange[]} coords Visual coords passed as an array of array (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)
	   *                                     the same format as `getSelected` method returns or as an CellRange objects
	   *                                     which is the same format what `getSelectedRange` method returns.
	   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.
	   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.
	   * @returns {Boolean} `true` if selection was successful, `false` otherwise.
	   */
	  this.selectCells = function () {
	    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];
	    var scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    var changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	    if (scrollToCell === false) {
	      preventScrollingToCell = true;
	    }
	
	    var wasSelected = selection.selectCells(coords);
	
	    if (wasSelected && changeListener) {
	      instance.listen();
	    }
	    preventScrollingToCell = false;
	
	    return wasSelected;
	  };
	
	  /**
	   * Select the cell specified by the `row` and `prop` arguments, or a range finishing at `endRow`, `endProp`.
	   * By default, viewport will be scrolled to selection.
	   *
	   * @deprecated
	   * @memberof Core#
	   * @function selectCellByProp
	   * @param {Number} row Visual row index.
	   * @param {String} prop Property name.
	   * @param {Number} [endRow] visual end row index (if selecting a range).
	   * @param {String} [endProp] End property name (if selecting a range).
	   * @param {Boolean} [scrollToCell=true] If `true`, viewport will be scrolled to the selection.
	   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.
	   * @returns {Boolean} `true` if selection was successful, `false` otherwise.
	   */
	  this.selectCellByProp = function (row, prop, endRow, endProp) {
	    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	
	    (0, _console.warn)((0, _templateLiteralTag.toSingleLine)(_templateObject));
	
	    return this.selectCells([[row, prop, endRow, endProp]], scrollToCell, changeListener);
	  };
	
	  /**
	   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.
	   *
	   * @example
	   * ```js
	   * // Select column using visual index.
	   * hot.selectColumns(1);
	   * // Select column using column property.
	   * hot.selectColumns('id');
	   * // Select range of columns using visual indexes.
	   * hot.selectColumns(1, 4);
	   * // Select range of columns using column properties.
	   * hot.selectColumns('id', 'last_name');
	   * ```
	   *
	   * @memberof Core#
	   * @since 0.38.0
	   * @function selectColumns
	   * @param {Number} startColumn The visual column index from which the selection starts.
	   * @param {Number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`
	   *                                         is not defined the column defined by `startColumn` will be selected.
	   * @returns {Boolean} `true` if selection was successful, `false` otherwise.
	   */
	  this.selectColumns = function (startColumn) {
	    var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;
	
	    return selection.selectColumns(startColumn, endColumn);
	  };
	
	  /**
	   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
	   *
	   * @example
	   * ```js
	   * // Select row using visual index.
	   * hot.selectRows(1);
	   * // Select range of rows using visual indexes.
	   * hot.selectRows(1, 4);
	   * ```
	   *
	   * @memberof Core#
	   * @since 0.38.0
	   * @function selectRows
	   * @param {Number} startRow The visual row index from which the selection starts.
	   * @param {Number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`
	   *                                   is not defined the row defined by `startRow` will be selected.
	   * @returns {Boolean} `true` if selection was successful, `false` otherwise.
	   */
	  this.selectRows = function (startRow) {
	    var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;
	
	    return selection.selectRows(startRow, endRow);
	  };
	
	  /**
	   * Deselects the current cell selection on the table.
	   *
	   * @memberof Core#
	   * @function deselectCell
	   */
	  this.deselectCell = function () {
	    selection.deselect();
	  };
	
	  /**
	   * Select the whole table. The previous selection will be overwritten.
	   *
	   * @since 0.38.2
	   * @memberof Core#
	   * @function selectAll
	   */
	  this.selectAll = function () {
	    preventScrollingToCell = true;
	    selection.selectAll();
	    preventScrollingToCell = false;
	  };
	
	  /**
	   * Scroll viewport to coordinates specified by the `row` and `column` arguments.
	   *
	   * @memberof Core#
	   * @function scrollViewportTo
	   * @param {Number} [row] Visual row index.
	   * @param {Number} [column] Visual column index.
	   * @param {Boolean} [snapToBottom = false] If `true`, viewport is scrolled to show the cell on the bottom of the table.
	   * @param {Boolean} [snapToRight = false] If `true`, viewport is scrolled to show the cell on the right side of the table.
	   * @returns {Boolean} `true` if scroll was successful, `false` otherwise.
	   */
	  this.scrollViewportTo = function (row, column) {
	    var snapToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	    var snapToRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	    var snapToTop = !snapToBottom;
	    var snapToLeft = !snapToRight;
	    var result = false;
	
	    if (row !== void 0 && column !== void 0) {
	      result = instance.view.scrollViewport(new _src.CellCoords(row, column), snapToTop, snapToRight, snapToBottom, snapToLeft);
	    }
	    if (typeof row === 'number' && typeof column !== 'number') {
	      result = instance.view.scrollViewportVertically(row, snapToTop, snapToBottom);
	    }
	    if (typeof column === 'number' && typeof row !== 'number') {
	      result = instance.view.scrollViewportHorizontally(column, snapToRight, snapToLeft);
	    }
	
	    return result;
	  };
	
	  /**
	   * Removes the table from the DOM and destroys the instance of the Handsontable.
	   *
	   * @memberof Core#
	   * @function destroy
	   * @fires Hooks#afterDestroy
	   */
	  this.destroy = function () {
	    instance._clearTimeouts();
	    instance._clearImmediates();
	
	    if (instance.view) {
	      // in case HT is destroyed before initialization has finished
	      instance.view.destroy();
	    }
	    if (dataSource) {
	      dataSource.destroy();
	    }
	    dataSource = null;
	
	    (0, _keyStateObserver.stopObserving)();
	
	    if (false) {
	      var licenseInfo = document.querySelector('#hot-display-license-info');
	
	      if (licenseInfo) {
	        licenseInfo.parentNode.removeChild(licenseInfo);
	      }
	    }
	    (0, _element.empty)(instance.rootElement);
	    eventManager.destroy();
	
	    if (editorManager) {
	      editorManager.destroy();
	    }
	
	    instance.runHooks('afterDestroy');
	    _pluginHooks2.default.getSingleton().destroy(instance);
	
	    (0, _object.objectEach)(instance, function (property, key, obj) {
	      // replace instance methods with post mortem
	      if ((0, _function.isFunction)(property)) {
	        obj[key] = postMortem(key);
	      } else if (key !== 'guid') {
	        // replace instance properties with null (restores memory)
	        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests
	        obj[key] = null;
	      }
	    });
	
	    instance.isDestroyed = true;
	
	    // replace private properties with null (restores memory)
	    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests
	    if (datamap) {
	      datamap.destroy();
	    }
	    datamap = null;
	    priv = null;
	    grid = null;
	    selection = null;
	    editorManager = null;
	    instance = null;
	    GridSettings = null;
	  };
	
	  /**
	   * Replacement for all methods after Handsotnable was destroyed.
	   *
	   * @private
	   */
	  function postMortem(method) {
	    return function () {
	      throw new Error('The "' + method + '" method cannot be called because this Handsontable instance has been destroyed');
	    };
	  }
	
	  /**
	   * Returns the active editor class instance.
	   *
	   * @memberof Core#
	   * @function getActiveEditor
	   * @returns {BaseEditor} The active editor instance.
	   */
	  this.getActiveEditor = function () {
	    return editorManager.getActiveEditor();
	  };
	
	  /**
	   * Returns plugin instance by provided its name.
	   *
	   * @memberof Core#
	   * @function getPlugin
	   * @param {String} pluginName The plugin name.
	   * @returns {BasePlugin} The plugin instance.
	   */
	  this.getPlugin = function (pluginName) {
	    return (0, _plugins.getPlugin)(this, pluginName);
	  };
	
	  /**
	   * Returns the Handsontable instance.
	   *
	   * @memberof Core#
	   * @function getInstance
	   * @returns {Handsontable} The Handsontable instance.
	   */
	  this.getInstance = function () {
	    return instance;
	  };
	
	  /**
	   * Adds listener to the specified hook name (only for this Handsontable instance).
	   *
	   * @memberof Core#
	   * @function addHook
	   * @see Hooks#add
	   * @param {String} key Hook name (see {@link Hooks}).
	   * @param {Function|Array} callback Function or array of functions.
	   * @example
	   * ```js
	   * hot.addHook('beforeInit', myCallback);
	   * ```
	   */
	  this.addHook = function (key, callback) {
	    _pluginHooks2.default.getSingleton().add(key, callback, instance);
	  };
	
	  /**
	   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available
	   * hooks you will find {@link Hooks}.
	   *
	   * @memberof Core#
	   * @function hasHook
	   * @see Hooks#has
	   * @param {String} key Hook name
	   * @return {Boolean}
	   *
	   * @example
	   * ```js
	   * const hasBeforeInitListeners = hot.hasHook('beforeInit');
	   * ```
	   */
	  this.hasHook = function (key) {
	    return _pluginHooks2.default.getSingleton().has(key, instance);
	  };
	
	  /**
	   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,
	   * it will be automatically removed.
	   *
	   * @memberof Core#
	   * @function addHookOnce
	   * @see Hooks#once
	   * @param {String} key Hook name (see {@link Hooks}).
	   * @param {Function|Array} callback Function or array of functions.
	   * @example
	   * ```js
	   * hot.addHookOnce('beforeInit', myCallback);
	   * ```
	   */
	  this.addHookOnce = function (key, callback) {
	    _pluginHooks2.default.getSingleton().once(key, callback, instance);
	  };
	
	  /**
	   * Removes the hook listener previously registered with {@link Core#addHook}.
	   *
	   * @memberof Core#
	   * @function removeHook
	   * @see Hooks#remove
	   * @param {String} key Hook name.
	   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.
	   *
	   * @example
	   * ```js
	   * hot.removeHook('beforeInit', myCallback);
	   * ```
	   */
	  this.removeHook = function (key, callback) {
	    _pluginHooks2.default.getSingleton().remove(key, callback, instance);
	  };
	
	  /**
	   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.
	   *
	   * @memberof Core#
	   * @function runHooks
	   * @see Hooks#run
	   * @param {String} key Hook name.
	   * @param {*} [p1] Argument passed to the callback.
	   * @param {*} [p2] Argument passed to the callback.
	   * @param {*} [p3] Argument passed to the callback.
	   * @param {*} [p4] Argument passed to the callback.
	   * @param {*} [p5] Argument passed to the callback.
	   * @param {*} [p6] Argument passed to the callback.
	   * @returns {*}
	   *
	   * @example
	   * ```js
	   * // Run built-in hook
	   * hot.runHooks('beforeInit');
	   * // Run custom hook
	   * hot.runHooks('customAction', 10, 'foo');
	   * ```
	   */
	  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {
	    return _pluginHooks2.default.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);
	  };
	
	  /**
	   * Get language phrase for specified dictionary key.
	   *
	   * @memberof Core#
	   * @function getTranslatedPhrase
	   * @since 0.35.0
	   * @param {String} dictionaryKey Constant which is dictionary key.
	   * @param {*} extraArguments Arguments which will be handled by formatters.
	   * @returns {String}
	   */
	  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {
	    return (0, _i18n.getTranslatedPhrase)(priv.settings.language, dictionaryKey, extraArguments);
	  };
	
	  this.timeouts = [];
	
	  /**
	   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.
	   *
	   * @param {Number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped
	   *                                 by setTimeout function).
	   * @param {Number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.
	   * @private
	   */
	  this._registerTimeout = function (handle) {
	    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	    var handleFunc = handle;
	
	    if (typeof handleFunc === 'function') {
	      handleFunc = setTimeout(handleFunc, delay);
	    }
	
	    this.timeouts.push(handleFunc);
	  };
	
	  /**
	   * Clears all known timeouts.
	   *
	   * @private
	   */
	  this._clearTimeouts = function () {
	    (0, _array.arrayEach)(this.timeouts, function (handler) {
	      clearTimeout(handler);
	    });
	  };
	
	  this.immediates = [];
	
	  /**
	   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.
	   *
	   * @param {Function} callback Function to be delayed in execution.
	   * @private
	   */
	  this._registerImmediate = function (callback) {
	    this.immediates.push(setImmediate(callback));
	  };
	
	  /**
	   * Clears all known timeouts.
	   *
	   * @private
	   */
	  this._clearImmediates = function () {
	    (0, _array.arrayEach)(this.immediates, function (handler) {
	      clearImmediate(handler);
	    });
	  };
	
	  /**
	   * Refresh selection borders. This is temporary method relic after selection rewrite.
	   *
	   * @private
	   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.
	   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.
	   */
	  this._refreshBorders = function () {
	    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	    editorManager.destroyEditor(revertOriginal);
	    instance.view.render();
	
	    if (prepareEditorIfNeeded && selection.isSelected()) {
	      editorManager.prepareEditor();
	    }
	  };
	
	  _pluginHooks2.default.getSingleton().run(instance, 'construct');
	}
	
	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.columnFactory = columnFactory;
	
	var _object = __webpack_require__(1);
	
	/* eslint-disable import/prefer-default-export */
	/**
	 * Factory for columns constructors.
	 *
	 * @param {Object} GridSettings
	 * @param {Array} conflictList
	 * @return {Object} ColumnSettings
	 */
	function columnFactory(GridSettings, conflictList) {
	  function ColumnSettings() {}
	
	  (0, _object.inherit)(ColumnSettings, GridSettings);
	
	  // Clear conflict settings
	  for (var i = 0, len = conflictList.length; i < len; i++) {
	    ColumnSettings.prototype[conflictList[i]] = void 0;
	  }
	
	  return ColumnSettings;
	}
	
	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.spreadsheetColumnLabel = spreadsheetColumnLabel;
	exports.spreadsheetColumnIndex = spreadsheetColumnIndex;
	exports.createSpreadsheetData = createSpreadsheetData;
	exports.createSpreadsheetObjectData = createSpreadsheetObjectData;
	exports.createEmptySpreadsheetData = createEmptySpreadsheetData;
	exports.translateRowsToColumns = translateRowsToColumns;
	exports.cellMethodLookupFactory = cellMethodLookupFactory;
	
	var _cellTypes = __webpack_require__(89);
	
	var _object = __webpack_require__(1);
	
	var COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	var COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;
	
	/**
	 * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.
	 *
	 * @param {Number} index Column index.
	 * @returns {String}
	 */
	function spreadsheetColumnLabel(index) {
	  var dividend = index + 1;
	  var columnLabel = '';
	  var modulo = void 0;
	
	  while (dividend > 0) {
	    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;
	    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;
	    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);
	  }
	
	  return columnLabel;
	}
	
	/**
	 * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.
	 *
	 * @param {String} label Column label.
	 * @returns {Number}
	 */
	function spreadsheetColumnIndex(label) {
	  var result = 0;
	
	  if (label) {
	    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {
	      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);
	    }
	  }
	  result -= 1;
	
	  return result;
	}
	
	/**
	 * Creates 2D array of Excel-like values "A1", "A2", ...
	 *
	 * @param {Number} rows Number of rows to generate.
	 * @param {Number} columns Number of columns to generate.
	 * @returns {Array}
	 */
	function createSpreadsheetData() {
	  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
	  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
	
	  var _rows = [];
	  var i = void 0;
	  var j = void 0;
	
	  for (i = 0; i < rows; i++) {
	    var row = [];
	
	    for (j = 0; j < columns; j++) {
	      row.push(spreadsheetColumnLabel(j) + (i + 1));
	    }
	    _rows.push(row);
	  }
	
	  return _rows;
	}
	
	/**
	 * Creates 2D array of Excel-like values "A1", "A2", as an array of objects.
	 *
	 * @param {Number} rows Number of rows to generate.
	 * @param {Number} colCount Number of columns to generate.
	 * @returns {Array}
	 */
	function createSpreadsheetObjectData() {
	  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
	  var colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
	
	  var _rows = [];
	  var i = void 0;
	  var j = void 0;
	
	  for (i = 0; i < rows; i++) {
	    var row = {};
	
	    for (j = 0; j < colCount; j++) {
	      row['prop' + j] = spreadsheetColumnLabel(j) + (i + 1);
	    }
	    _rows.push(row);
	  }
	
	  return _rows;
	}
	
	/**
	 * Generates an empty data object.
	 *
	 * @param {Number} rows Number of rows to generate.
	 * @param {Number} columns Number of columns to generate
	 * @returns {Array}
	 */
	function createEmptySpreadsheetData(rows, columns) {
	  var data = [];
	  var row = void 0;
	
	  for (var i = 0; i < rows; i++) {
	    row = [];
	    for (var j = 0; j < columns; j++) {
	      row.push('');
	    }
	    data.push(row);
	  }
	
	  return data;
	}
	
	function translateRowsToColumns(input) {
	  var output = [];
	  var i = void 0;
	  var ilen = void 0;
	  var j = void 0;
	  var jlen = void 0;
	  var olen = 0;
	
	  for (i = 0, ilen = input.length; i < ilen; i++) {
	    for (j = 0, jlen = input[i].length; j < jlen; j++) {
	      if (j === olen) {
	        output.push([]);
	        olen += 1;
	      }
	      output[j].push(input[i][j]);
	    }
	  }
	
	  return output;
	}
	
	/**
	 * Factory that produces a function for searching methods (or any properties) which could be defined directly in
	 * table configuration or implicitly, within cell type definition.
	 *
	 * For example: renderer can be defined explicitly using "renderer" property in column configuration or it can be
	 * defined implicitly using "type" property.
	 *
	 * Methods/properties defined explicitly always takes precedence over those defined through "type".
	 *
	 * If the method/property is not found in an object, searching is continued recursively through prototype chain, until
	 * it reaches the Object.prototype.
	 *
	 *
	 * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')
	 * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell "type"
	 * @returns {Function}
	 */
	function cellMethodLookupFactory(methodName, allowUndefined) {
	  var isUndefinedAllowed = typeof allowUndefined === 'undefined' ? true : allowUndefined;
	
	  return function cellMethodLookup(row, col) {
	    return function getMethodFromProperties(properties) {
	
	      if (!properties) {
	        return; // method not found
	      } else if ((0, _object.hasOwnProperty)(properties, methodName) && properties[methodName] !== void 0) {
	        // check if it is own and is not empty
	        return properties[methodName]; // method defined directly
	      } else if ((0, _object.hasOwnProperty)(properties, 'type') && properties.type) {
	        // check if it is own and is not empty
	        if (typeof properties.type !== 'string') {
	          throw new Error('Cell type must be a string ');
	        }
	
	        var type = (0, _cellTypes.getCellType)(properties.type);
	
	        if ((0, _object.hasOwnProperty)(type, methodName)) {
	          return type[methodName]; // method defined in type.
	        } else if (isUndefinedAllowed) {
	          return; // method does not defined in type (eg. validator), returns undefined
	        }
	      }
	
	      return getMethodFromProperties(Object.getPrototypeOf(properties));
	    }(typeof row === 'number' ? this.getCellMeta(row, col) : row);
	  };
	}
	
	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class GhostTable
	 * @util
	 */
	var GhostTable = function () {
	  function GhostTable(hotInstance) {
	    _classCallCheck(this, GhostTable);
	
	    /**
	     * Handsontable instance.
	     *
	     * @type {Core}
	     */
	    this.hot = hotInstance;
	    /**
	     * Container element where every table will be injected.
	     *
	     * @type {HTMLElement|null}
	     */
	    this.container = null;
	    /**
	     * Flag which determine is table was injected to DOM.
	     *
	     * @type {Boolean}
	     */
	    this.injected = false;
	    /**
	     * Added rows collection.
	     *
	     * @type {Array}
	     */
	    this.rows = [];
	    /**
	     * Added columns collection.
	     *
	     * @type {Array}
	     */
	    this.columns = [];
	    /**
	     * Samples prepared for calculations.
	     *
	     * @type {Map}
	     * @default {null}
	     */
	    this.samples = null;
	    /**
	     * Ghost table settings.
	     *
	     * @type {Object}
	     * @default {Object}
	     */
	    this.settings = {
	      useHeaders: true
	    };
	  }
	
	  /**
	   * Add row.
	   *
	   * @param {Number} row Row index.
	   * @param {Map} samples Samples Map object.
	   */
	
	
	  _createClass(GhostTable, [{
	    key: 'addRow',
	    value: function addRow(row, samples) {
	      if (this.columns.length) {
	        throw new Error('Doesn\'t support multi-dimensional table');
	      }
	      if (!this.rows.length) {
	        this.container = this.createContainer(this.hot.rootElement.className);
	      }
	      var rowObject = { row: row };
	      this.rows.push(rowObject);
	
	      this.samples = samples;
	      this.table = this.createTable(this.hot.table.className);
	      this.table.colGroup.appendChild(this.createColGroupsCol());
	      this.table.tr.appendChild(this.createRow(row));
	      this.container.container.appendChild(this.table.fragment);
	
	      rowObject.table = this.table.table;
	    }
	
	    /**
	     * Add a row consisting of the column headers.
	     */
	
	  }, {
	    key: 'addColumnHeadersRow',
	    value: function addColumnHeadersRow(samples) {
	      var colHeader = this.hot.getColHeader(0);
	
	      if (colHeader !== null && colHeader !== void 0) {
	        var rowObject = { row: -1 };
	
	        this.rows.push(rowObject);
	
	        this.container = this.createContainer(this.hot.rootElement.className);
	        this.samples = samples;
	        this.table = this.createTable(this.hot.table.className);
	
	        this.table.colGroup.appendChild(this.createColGroupsCol());
	        this.table.tHead.appendChild(this.createColumnHeadersRow());
	        this.container.container.appendChild(this.table.fragment);
	
	        rowObject.table = this.table.table;
	      }
	    }
	
	    /**
	     * Add column.
	     *
	     * @param {Number} column Column index.
	     * @param {Map} samples Samples Map object.
	     */
	
	  }, {
	    key: 'addColumn',
	    value: function addColumn(column, samples) {
	      if (this.rows.length) {
	        throw new Error('Doesn\'t support multi-dimensional table');
	      }
	      if (!this.columns.length) {
	        this.container = this.createContainer(this.hot.rootElement.className);
	      }
	      var columnObject = { col: column };
	      this.columns.push(columnObject);
	
	      this.samples = samples;
	      this.table = this.createTable(this.hot.table.className);
	
	      if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {
	        this.hot.view.appendColHeader(column, this.table.th);
	      }
	      this.table.tBody.appendChild(this.createCol(column));
	      this.container.container.appendChild(this.table.fragment);
	
	      columnObject.table = this.table.table;
	    }
	
	    /**
	     * Get calculated heights.
	     *
	     * @param {Function} callback Callback which will be fired for each calculated row.
	     */
	
	  }, {
	    key: 'getHeights',
	    value: function getHeights(callback) {
	      if (!this.injected) {
	        this.injectTable();
	      }
	      (0, _array.arrayEach)(this.rows, function (row) {
	        // -1 <- reduce border-top from table
	        callback(row.row, (0, _element.outerHeight)(row.table) - 1);
	      });
	    }
	
	    /**
	     * Get calculated widths.
	     *
	     * @param {Function} callback Callback which will be fired for each calculated column.
	     */
	
	  }, {
	    key: 'getWidths',
	    value: function getWidths(callback) {
	      if (!this.injected) {
	        this.injectTable();
	      }
	      (0, _array.arrayEach)(this.columns, function (column) {
	        callback(column.col, (0, _element.outerWidth)(column.table));
	      });
	    }
	
	    /**
	     * Set the Ghost Table settings to the provided object.
	     *
	     * @param {Object} settings New Ghost Table Settings
	     */
	
	  }, {
	    key: 'setSettings',
	    value: function setSettings(settings) {
	      this.settings = settings;
	    }
	
	    /**
	     * Set a single setting of the Ghost Table.
	     *
	     * @param {String} name Setting name.
	     * @param {*} value Setting value.
	     */
	
	  }, {
	    key: 'setSetting',
	    value: function setSetting(name, value) {
	      if (!this.settings) {
	        this.settings = {};
	      }
	
	      this.settings[name] = value;
	    }
	
	    /**
	     * Get the Ghost Table settings.
	     *
	     * @returns {Object|null}
	     */
	
	  }, {
	    key: 'getSettings',
	    value: function getSettings() {
	      return this.settings;
	    }
	
	    /**
	     * Get a single Ghost Table setting.
	     *
	     * @param {String} name
	     * @returns {Boolean|null}
	     */
	
	  }, {
	    key: 'getSetting',
	    value: function getSetting(name) {
	      if (this.settings) {
	        return this.settings[name];
	      }
	      return null;
	    }
	
	    /**
	     * Create colgroup col elements.
	     *
	     * @returns {DocumentFragment}
	     */
	
	  }, {
	    key: 'createColGroupsCol',
	    value: function createColGroupsCol() {
	      var _this = this;
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	
	      if (this.hot.hasRowHeaders()) {
	        fragment.appendChild(this.createColElement(-1));
	      }
	
	      this.samples.forEach(function (sample) {
	        (0, _array.arrayEach)(sample.strings, function (string) {
	          fragment.appendChild(_this.createColElement(string.col));
	        });
	      });
	
	      return fragment;
	    }
	
	    /**
	     * Create table row element.
	     *
	     * @param {Number} row Row index.
	     * @returns {DocumentFragment} Returns created table row elements.
	     */
	
	  }, {
	    key: 'createRow',
	    value: function createRow(row) {
	      var _this2 = this;
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	      var th = d.createElement('th');
	
	      if (this.hot.hasRowHeaders()) {
	        this.hot.view.appendRowHeader(row, th);
	
	        fragment.appendChild(th);
	      }
	
	      this.samples.forEach(function (sample) {
	        (0, _array.arrayEach)(sample.strings, function (string) {
	          var column = string.col;
	          var cellProperties = _this2.hot.getCellMeta(row, column);
	
	          cellProperties.col = column;
	          cellProperties.row = row;
	
	          var renderer = _this2.hot.getCellRenderer(cellProperties);
	          var td = d.createElement('td');
	
	          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);
	          fragment.appendChild(td);
	        });
	      });
	
	      return fragment;
	    }
	  }, {
	    key: 'createColumnHeadersRow',
	    value: function createColumnHeadersRow() {
	      var _this3 = this;
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	
	      if (this.hot.hasRowHeaders()) {
	        var th = d.createElement('th');
	        this.hot.view.appendColHeader(-1, th);
	        fragment.appendChild(th);
	      }
	
	      this.samples.forEach(function (sample) {
	        (0, _array.arrayEach)(sample.strings, function (string) {
	          var column = string.col;
	
	          var th = d.createElement('th');
	
	          _this3.hot.view.appendColHeader(column, th);
	          fragment.appendChild(th);
	        });
	      });
	
	      return fragment;
	    }
	
	    /**
	     * Create table column elements.
	     *
	     * @param {Number} column Column index.
	     * @returns {DocumentFragment} Returns created column table column elements.
	     */
	
	  }, {
	    key: 'createCol',
	    value: function createCol(column) {
	      var _this4 = this;
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	
	      this.samples.forEach(function (sample) {
	        (0, _array.arrayEach)(sample.strings, function (string) {
	          var row = string.row;
	          var cellProperties = _this4.hot.getCellMeta(row, column);
	
	          cellProperties.col = column;
	          cellProperties.row = row;
	
	          var renderer = _this4.hot.getCellRenderer(cellProperties);
	          var td = d.createElement('td');
	          var tr = d.createElement('tr');
	
	          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);
	          tr.appendChild(td);
	          fragment.appendChild(tr);
	        });
	      });
	
	      return fragment;
	    }
	
	    /**
	     * Remove table from document and reset internal state.
	     */
	
	  }, {
	    key: 'clean',
	    value: function clean() {
	      this.rows.length = 0;
	      this.rows[-1] = void 0;
	      this.columns.length = 0;
	
	      if (this.samples) {
	        this.samples.clear();
	      }
	      this.samples = null;
	      this.removeTable();
	    }
	
	    /**
	     * Inject generated table into document.
	     *
	     * @param {HTMLElement} [parent=null]
	     */
	
	  }, {
	    key: 'injectTable',
	    value: function injectTable() {
	      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      if (!this.injected) {
	        (parent || this.hot.rootElement).appendChild(this.container.fragment);
	        this.injected = true;
	      }
	    }
	
	    /**
	     * Remove table from document.
	     */
	
	  }, {
	    key: 'removeTable',
	    value: function removeTable() {
	      if (this.injected && this.container.container.parentNode) {
	        this.container.container.parentNode.removeChild(this.container.container);
	        this.container = null;
	        this.injected = false;
	      }
	    }
	
	    /**
	     * Create col element.
	     *
	     * @param {Number} column Column index.
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createColElement',
	    value: function createColElement(column) {
	      var d = document;
	      var col = d.createElement('col');
	
	      col.style.width = this.hot.view.wt.wtTable.getStretchedColumnWidth(column) + 'px';
	
	      return col;
	    }
	
	    /**
	     * Create table element.
	     *
	     * @param {String} className
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'createTable',
	    value: function createTable() {
	      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	      var table = d.createElement('table');
	      var tHead = d.createElement('thead');
	      var tBody = d.createElement('tbody');
	      var colGroup = d.createElement('colgroup');
	      var tr = d.createElement('tr');
	      var th = d.createElement('th');
	
	      if (this.isVertical()) {
	        table.appendChild(colGroup);
	      }
	      if (this.isHorizontal()) {
	        tr.appendChild(th);
	        tHead.appendChild(tr);
	        table.style.tableLayout = 'auto';
	        table.style.width = 'auto';
	      }
	      table.appendChild(tHead);
	
	      if (this.isVertical()) {
	        tBody.appendChild(tr);
	      }
	      table.appendChild(tBody);
	      (0, _element.addClass)(table, className);
	      fragment.appendChild(table);
	
	      return { fragment: fragment, table: table, tHead: tHead, tBody: tBody, colGroup: colGroup, tr: tr, th: th };
	    }
	
	    /**
	     * Create container for tables.
	     *
	     * @param {String} className
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'createContainer',
	    value: function createContainer() {
	      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	      var d = document;
	      var fragment = d.createDocumentFragment();
	      var container = d.createElement('div');
	      var containerClassName = 'htGhostTable htAutoSize ' + className.trim();
	
	      (0, _element.addClass)(container, containerClassName);
	      fragment.appendChild(container);
	
	      return { fragment: fragment, container: container };
	    }
	
	    /**
	     * Checks if table is raised vertically (checking rows).
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isVertical',
	    value: function isVertical() {
	      return !!(this.rows.length && !this.columns.length);
	    }
	
	    /**
	     * Checks if table is raised horizontally (checking columns).
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isHorizontal',
	    value: function isHorizontal() {
	      return !!(this.columns.length && !this.rows.length);
	    }
	  }]);
	
	  return GhostTable;
	}();
	
	exports.default = GhostTable;
	
	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var MIXIN_NAME = 'arrayMapper';
	
	/**
	 * @type {Object}
	 */
	var arrayMapper = {
	  _arrayMap: [],
	
	  /**
	   * Get translated index by its physical index.
	   *
	   * @param {Number} physicalIndex Physical index.
	   * @return {Number|null} Returns translated index mapped by passed physical index.
	   */
	  getValueByIndex: function getValueByIndex(physicalIndex) {
	    var length = this._arrayMap.length;
	    var translatedIndex = null;
	
	    if (physicalIndex < length) {
	      translatedIndex = this._arrayMap[physicalIndex];
	    }
	
	    return translatedIndex;
	  },
	
	
	  /**
	   * Get physical index by its translated index.
	   *
	   * @param {*} translatedIndex Value to search.
	   * @returns {Number|null} Returns a physical index of the array mapper.
	   */
	  getIndexByValue: function getIndexByValue(translatedIndex) {
	    var physicalIndex = void 0;
	
	    // eslint-disable-next-line no-cond-assign, no-return-assign
	    return (physicalIndex = this._arrayMap.indexOf(translatedIndex)) === -1 ? null : physicalIndex;
	  },
	
	
	  /**
	   * Insert new items to array mapper starting at passed index. New entries will be a continuation of last value in the array.
	   *
	   * @param {Number} physicalIndex Array index.
	   * @param {Number} [amount=1] Defines how many items will be created to an array.
	   * @returns {Array} Returns added items.
	   */
	  insertItems: function insertItems(physicalIndex) {
	    var _this = this;
	
	    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	    var newIndex = (0, _array.arrayMax)(this._arrayMap) + 1;
	    var addedItems = [];
	
	    (0, _number.rangeEach)(amount - 1, function (count) {
	      addedItems.push(_this._arrayMap.splice(physicalIndex + count, 0, newIndex + count));
	    });
	
	    return addedItems;
	  },
	
	
	  /**
	   * Remove items from array mapper.
	   *
	   * @param {Number} physicalIndex Array index.
	   * @param {Number} [amount=1] Defines how many items will be created to an array.
	   * @returns {Array} Returns removed items.
	   */
	  removeItems: function removeItems(physicalIndex) {
	    var _this2 = this;
	
	    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	    var removedItems = [];
	
	    if (Array.isArray(physicalIndex)) {
	      var mapCopy = [].concat(this._arrayMap);
	
	      // Sort descending
	      physicalIndex.sort(function (a, b) {
	        return b - a;
	      });
	
	      removedItems = (0, _array.arrayReduce)(physicalIndex, function (acc, item) {
	        _this2._arrayMap.splice(item, 1);
	
	        return acc.concat(mapCopy.slice(item, item + 1));
	      }, []);
	    } else {
	      removedItems = this._arrayMap.splice(physicalIndex, amount);
	    }
	
	    return removedItems;
	  },
	
	
	  /**
	   * Unshift items (remove and shift chunk of array to the left).
	   *
	   * @param {Number|Array} physicalIndex Array index or Array of indexes to unshift.
	   * @param {Number} [amount=1] Defines how many items will be removed from an array (when index is passed as number).
	   */
	  unshiftItems: function unshiftItems(physicalIndex) {
	    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	    var removedItems = this.removeItems(physicalIndex, amount);
	
	    function countRowShift(logicalRow) {
	      // Todo: compare perf between reduce vs sort->each->brake
	      return (0, _array.arrayReduce)(removedItems, function (count, removedLogicalRow) {
	        var result = count;
	
	        if (logicalRow > removedLogicalRow) {
	          result += 1;
	        }
	
	        return result;
	      }, 0);
	    }
	
	    this._arrayMap = (0, _array.arrayMap)(this._arrayMap, function (logicalRow) {
	      var logicalRowIndex = logicalRow;
	      var rowShift = countRowShift(logicalRowIndex);
	
	      if (rowShift) {
	        logicalRowIndex -= rowShift;
	      }
	
	      return logicalRowIndex;
	    });
	  },
	
	
	  /**
	   * Shift (right shifting) items starting at passed index.
	   *
	   * @param {Number} physicalIndex Array index.
	   * @param {Number} [amount=1] Defines how many items will be created to an array.
	   */
	  shiftItems: function shiftItems(physicalIndex) {
	    var _this3 = this;
	
	    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	    this._arrayMap = (0, _array.arrayMap)(this._arrayMap, function (row) {
	      var physicalRowIndex = row;
	
	      if (physicalRowIndex >= physicalIndex) {
	        physicalRowIndex += amount;
	      }
	
	      return physicalRowIndex;
	    });
	
	    (0, _number.rangeEach)(amount - 1, function (count) {
	      _this3._arrayMap.splice(physicalIndex + count, 0, physicalIndex + count);
	    });
	  },
	
	
	  /**
	   * Swap indexes in arrayMapper.
	   *
	   * @param {Number} physicalIndexFrom index to move.
	   * @param {Number} physicalIndexTo index to.
	   */
	  swapIndexes: function swapIndexes(physicalIndexFrom, physicalIndexTo) {
	    var _arrayMap;
	
	    (_arrayMap = this._arrayMap).splice.apply(_arrayMap, [physicalIndexTo, 0].concat(_toConsumableArray(this._arrayMap.splice(physicalIndexFrom, 1))));
	  },
	
	
	  /**
	   * Clear all stored index<->value information from an array.
	   */
	  clearMap: function clearMap() {
	    this._arrayMap.length = 0;
	  }
	};
	
	(0, _object.defineGetter)(arrayMapper, 'MIXIN_NAME', MIXIN_NAME, {
	  writable: false,
	  enumerable: false
	});
	
	exports.default = arrayMapper;
	
	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = separatorItem;
	var KEY = exports.KEY = '---------';
	
	function separatorItem() {
	  return {
	    name: KEY
	  };
	}
	
	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.ITEMS = exports.UNDO = exports.SEPARATOR = exports.ROW_BELOW = exports.ROW_ABOVE = exports.REMOVE_ROW = exports.REMOVE_COLUMN = exports.REDO = exports.READ_ONLY = exports.COLUMN_RIGHT = exports.COLUMN_LEFT = exports.CLEAR_COLUMN = exports.ALIGNMENT = undefined;
	
	var _predefinedItems2;
	
	var _alignment = __webpack_require__(305);
	
	Object.defineProperty(exports, 'ALIGNMENT', {
	  enumerable: true,
	  get: function get() {
	    return _alignment.KEY;
	  }
	});
	
	var _clearColumn = __webpack_require__(306);
	
	Object.defineProperty(exports, 'CLEAR_COLUMN', {
	  enumerable: true,
	  get: function get() {
	    return _clearColumn.KEY;
	  }
	});
	
	var _columnLeft = __webpack_require__(307);
	
	Object.defineProperty(exports, 'COLUMN_LEFT', {
	  enumerable: true,
	  get: function get() {
	    return _columnLeft.KEY;
	  }
	});
	
	var _columnRight = __webpack_require__(308);
	
	Object.defineProperty(exports, 'COLUMN_RIGHT', {
	  enumerable: true,
	  get: function get() {
	    return _columnRight.KEY;
	  }
	});
	
	var _readOnly = __webpack_require__(309);
	
	Object.defineProperty(exports, 'READ_ONLY', {
	  enumerable: true,
	  get: function get() {
	    return _readOnly.KEY;
	  }
	});
	
	var _redo = __webpack_require__(310);
	
	Object.defineProperty(exports, 'REDO', {
	  enumerable: true,
	  get: function get() {
	    return _redo.KEY;
	  }
	});
	
	var _removeColumn = __webpack_require__(311);
	
	Object.defineProperty(exports, 'REMOVE_COLUMN', {
	  enumerable: true,
	  get: function get() {
	    return _removeColumn.KEY;
	  }
	});
	
	var _removeRow = __webpack_require__(312);
	
	Object.defineProperty(exports, 'REMOVE_ROW', {
	  enumerable: true,
	  get: function get() {
	    return _removeRow.KEY;
	  }
	});
	
	var _rowAbove = __webpack_require__(313);
	
	Object.defineProperty(exports, 'ROW_ABOVE', {
	  enumerable: true,
	  get: function get() {
	    return _rowAbove.KEY;
	  }
	});
	
	var _rowBelow = __webpack_require__(314);
	
	Object.defineProperty(exports, 'ROW_BELOW', {
	  enumerable: true,
	  get: function get() {
	    return _rowBelow.KEY;
	  }
	});
	
	var _separator = __webpack_require__(95);
	
	Object.defineProperty(exports, 'SEPARATOR', {
	  enumerable: true,
	  get: function get() {
	    return _separator.KEY;
	  }
	});
	
	var _undo = __webpack_require__(315);
	
	Object.defineProperty(exports, 'UNDO', {
	  enumerable: true,
	  get: function get() {
	    return _undo.KEY;
	  }
	});
	exports.predefinedItems = predefinedItems;
	exports.addItem = addItem;
	
	var _object = __webpack_require__(1);
	
	var _alignment2 = _interopRequireDefault(_alignment);
	
	var _clearColumn2 = _interopRequireDefault(_clearColumn);
	
	var _columnLeft2 = _interopRequireDefault(_columnLeft);
	
	var _columnRight2 = _interopRequireDefault(_columnRight);
	
	var _readOnly2 = _interopRequireDefault(_readOnly);
	
	var _redo2 = _interopRequireDefault(_redo);
	
	var _removeColumn2 = _interopRequireDefault(_removeColumn);
	
	var _removeRow2 = _interopRequireDefault(_removeRow);
	
	var _rowAbove2 = _interopRequireDefault(_rowAbove);
	
	var _rowBelow2 = _interopRequireDefault(_rowBelow);
	
	var _separator2 = _interopRequireDefault(_separator);
	
	var _undo2 = _interopRequireDefault(_undo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var ITEMS = exports.ITEMS = [_rowAbove.KEY, _rowBelow.KEY, _columnLeft.KEY, _columnRight.KEY, _clearColumn.KEY, _removeRow.KEY, _removeColumn.KEY, _undo.KEY, _redo.KEY, _readOnly.KEY, _alignment.KEY, _separator.KEY];
	
	var _predefinedItems = (_predefinedItems2 = {}, _defineProperty(_predefinedItems2, _separator.KEY, _separator2.default), _defineProperty(_predefinedItems2, _rowAbove.KEY, _rowAbove2.default), _defineProperty(_predefinedItems2, _rowBelow.KEY, _rowBelow2.default), _defineProperty(_predefinedItems2, _columnLeft.KEY, _columnLeft2.default), _defineProperty(_predefinedItems2, _columnRight.KEY, _columnRight2.default), _defineProperty(_predefinedItems2, _clearColumn.KEY, _clearColumn2.default), _defineProperty(_predefinedItems2, _removeRow.KEY, _removeRow2.default), _defineProperty(_predefinedItems2, _removeColumn.KEY, _removeColumn2.default), _defineProperty(_predefinedItems2, _undo.KEY, _undo2.default), _defineProperty(_predefinedItems2, _redo.KEY, _redo2.default), _defineProperty(_predefinedItems2, _readOnly.KEY, _readOnly2.default), _defineProperty(_predefinedItems2, _alignment.KEY, _alignment2.default), _predefinedItems2);
	
	/**
	 * Gets new object with all predefined menu items.
	 *
	 * @returns {Object}
	 */
	function predefinedItems() {
	  var items = {};
	
	  (0, _object.objectEach)(_predefinedItems, function (itemFactory, key) {
	    items[key] = itemFactory();
	  });
	
	  return items;
	}
	
	/**
	 * Add new predefined menu item to the collection.
	 *
	 * @param {String} key Menu command id.
	 * @param {Object} item Object command descriptor.
	 */
	function addItem(key, item) {
	  if (ITEMS.indexOf(key) === -1) {
	    _predefinedItems[key] = item;
	  }
	}
	
	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _templateObject = _taggedTemplateLiteral(['The merged cell declared with {row: ', ', col: ', ', rowspan: \n    ', ', colspan: ', '} contains negative values, which is not supported. It \n    will not be added to the collection.'], ['The merged cell declared with {row: ', ', col: ', ', rowspan: \n    ', ', colspan: ', '} contains negative values, which is not supported. It \n    will not be added to the collection.']),
	    _templateObject2 = _taggedTemplateLiteral(['The merged cell declared at [', ', ', '] is positioned (or positioned partially) \n       outside of the table range. It was not added to the table, please fix your setup.'], ['The merged cell declared at [', ', ', '] is positioned (or positioned partially) \n       outside of the table range. It was not added to the table, please fix your setup.']),
	    _templateObject3 = _taggedTemplateLiteral(['The merged cell declared at [', ', ', '] has both "rowspan" \n     and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.'], ['The merged cell declared at [', ', ', '] has both "rowspan" \n     and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.']),
	    _templateObject4 = _taggedTemplateLiteral(['The merged cell declared at [', ', ', '] has "rowspan" or "colspan" declared as \n      "0", which is not supported. It cannot be added to the collection.'], ['The merged cell declared at [', ', ', '] has "rowspan" or "colspan" declared as \n      "0", which is not supported. It cannot be added to the collection.']);
	
	var _index = __webpack_require__(4);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The `MergedCellCoords` class represents a single merged cell.
	 *
	 * @class MergedCellCoords
	 * @plugin MergeCells
	 */
	var MergedCellCoords = function () {
	  function MergedCellCoords(row, column, rowspan, colspan) {
	    _classCallCheck(this, MergedCellCoords);
	
	    /**
	     * The index of the topmost merged cell row.
	     *
	     * @type {Number}
	     */
	    this.row = row;
	    /**
	     * The index of the leftmost column.
	     *
	     * @type {Number}
	     */
	    this.col = column;
	    /**
	     * The `rowspan` value of the merged cell.
	     *
	     * @type {Number}
	     */
	    this.rowspan = rowspan;
	    /**
	     * The `colspan` value of the merged cell.
	     *
	     * @type {Number}
	     */
	    this.colspan = colspan;
	    /**
	     * `true` only if the merged cell is bound to be removed.
	     *
	     * @type {Boolean}
	     */
	    this.removed = false;
	  }
	
	  /**
	   * Get a warning message for when the declared merged cell data contains negative values.
	   *
	   * @param {Object} newMergedCell Object containg information about the merged cells that was about to be added.
	   * @return {String}
	   */
	
	
	  _createClass(MergedCellCoords, [{
	    key: 'normalize',
	
	
	    /**
	     * Sanitize (prevent from going outside the boundaries) the merged cell.
	     *
	     * @param hotInstance
	     */
	    value: function normalize(hotInstance) {
	      var totalRows = hotInstance.countRows();
	      var totalColumns = hotInstance.countCols();
	
	      if (this.row < 0) {
	        this.row = 0;
	      } else if (this.row > totalRows - 1) {
	        this.row = totalRows - 1;
	      }
	
	      if (this.col < 0) {
	        this.col = 0;
	      } else if (this.col > totalColumns - 1) {
	        this.col = totalColumns - 1;
	      }
	
	      if (this.row + this.rowspan > totalRows - 1) {
	        this.rowspan = totalRows - this.row;
	      }
	
	      if (this.col + this.colspan > totalColumns - 1) {
	        this.colspan = totalColumns - this.col;
	      }
	    }
	
	    /**
	     * Returns `true` if the provided coordinates are inside the merged cell.
	     *
	     * @param {Number} row The row index.
	     * @param {Number} column The column index.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'includes',
	    value: function includes(row, column) {
	      return this.row <= row && this.col <= column && this.row + this.rowspan - 1 >= row && this.col + this.colspan - 1 >= column;
	    }
	
	    /**
	     * Returns `true` if the provided `column` property is within the column span of the merged cell.
	     *
	     * @param {Number} column The column index.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'includesHorizontally',
	    value: function includesHorizontally(column) {
	      return this.col <= column && this.col + this.colspan - 1 >= column;
	    }
	
	    /**
	     * Returns `true` if the provided `row` property is within the row span of the merged cell.
	     *
	     * @param {Number} row Row index.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'includesVertically',
	    value: function includesVertically(row) {
	      return this.row <= row && this.row + this.rowspan - 1 >= row;
	    }
	
	    /**
	     * Shift (and possibly resize, if needed) the merged cell.
	     *
	     * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
	     * @param {Number} indexOfChange Index of the preceding change.
	     * @returns {Boolean} Returns `false` if the whole merged cell was removed.
	     */
	
	  }, {
	    key: 'shift',
	    value: function shift(shiftVector, indexOfChange) {
	      var shiftValue = shiftVector[0] || shiftVector[1];
	      var shiftedIndex = indexOfChange + Math.abs(shiftVector[0] || shiftVector[1]) - 1;
	      var span = shiftVector[0] ? 'colspan' : 'rowspan';
	      var index = shiftVector[0] ? 'col' : 'row';
	      var changeStart = Math.min(indexOfChange, shiftedIndex);
	      var changeEnd = Math.max(indexOfChange, shiftedIndex);
	      var mergeStart = this[index];
	      var mergeEnd = this[index] + this[span] - 1;
	
	      if (mergeStart >= indexOfChange) {
	        this[index] += shiftValue;
	      }
	
	      // adding rows/columns
	      if (shiftValue > 0) {
	        if (indexOfChange <= mergeEnd && indexOfChange > mergeStart) {
	          this[span] += shiftValue;
	        }
	
	        // removing rows/columns
	      } else if (shiftValue < 0) {
	
	        // removing the whole merge
	        if (changeStart <= mergeStart && changeEnd >= mergeEnd) {
	          this.removed = true;
	          return false;
	
	          // removing the merge partially, including the beginning
	        } else if (mergeStart >= changeStart && mergeStart <= changeEnd) {
	          var removedOffset = changeEnd - mergeStart + 1;
	          var preRemovedOffset = Math.abs(shiftValue) - removedOffset;
	
	          this[index] -= preRemovedOffset + shiftValue;
	          this[span] -= removedOffset;
	
	          // removing the middle part of the merge
	        } else if (mergeStart <= changeStart && mergeEnd >= changeEnd) {
	          this[span] += shiftValue;
	
	          // removing the end part of the merge
	        } else if (mergeStart <= changeStart && mergeEnd >= changeStart && mergeEnd < changeEnd) {
	          var removedPart = mergeEnd - changeStart + 1;
	
	          this[span] -= removedPart;
	        }
	      }
	
	      return true;
	    }
	
	    /**
	     * Check if the second provided merged cell is "farther" in the provided direction.
	     *
	     * @param {MergedCellCoords} mergedCell The merged cell to check.
	     * @param {String} direction Drag direction.
	     * @return {Boolean|null} `true` if the second provided merged cell is "farther".
	     */
	
	  }, {
	    key: 'isFarther',
	    value: function isFarther(mergedCell, direction) {
	      if (!mergedCell) {
	        return true;
	      }
	
	      if (direction === 'down') {
	        return mergedCell.row + mergedCell.rowspan - 1 < this.row + this.rowspan - 1;
	      } else if (direction === 'up') {
	        return mergedCell.row > this.row;
	      } else if (direction === 'right') {
	        return mergedCell.col + mergedCell.colspan - 1 < this.col + this.colspan - 1;
	      } else if (direction === 'left') {
	        return mergedCell.col > this.col;
	      }
	      return null;
	    }
	
	    /**
	     * Get the bottom row index of the merged cell.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getLastRow',
	    value: function getLastRow() {
	      return this.row + this.rowspan - 1;
	    }
	
	    /**
	     * Get the rightmost column index of the merged cell.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getLastColumn',
	    value: function getLastColumn() {
	      return this.col + this.colspan - 1;
	    }
	
	    /**
	     * Get the range coordinates of the merged cell.
	     *
	     * @return {CellRange}
	     */
	
	  }, {
	    key: 'getRange',
	    value: function getRange() {
	      return new _index.CellRange(new _index.CellCoords(this.row, this.col), new _index.CellCoords(this.row, this.col), new _index.CellCoords(this.getLastRow(), this.getLastColumn()));
	    }
	  }], [{
	    key: 'NEGATIVE_VALUES_WARNING',
	    value: function NEGATIVE_VALUES_WARNING(newMergedCell) {
	      return (0, _templateLiteralTag.toSingleLine)(_templateObject, newMergedCell.row, newMergedCell.col, newMergedCell.rowspan, newMergedCell.colspan);
	    }
	
	    /**
	     * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
	     *
	     * @param {Object} newMergedCell Object containg information about the merged cells that was about to be added.
	     * @return {String}
	     */
	
	  }, {
	    key: 'IS_OUT_OF_BOUNDS_WARNING',
	    value: function IS_OUT_OF_BOUNDS_WARNING(newMergedCell) {
	      return (0, _templateLiteralTag.toSingleLine)(_templateObject2, newMergedCell.row, newMergedCell.col);
	    }
	
	    /**
	     * Get a warning message for when the declared merged cell data represents a single cell.
	     *
	     * @param {Object} newMergedCell Object containg information about the merged cells that was about to be added.
	     * @return {String}
	     */
	
	  }, {
	    key: 'IS_SINGLE_CELL',
	    value: function IS_SINGLE_CELL(newMergedCell) {
	      return (0, _templateLiteralTag.toSingleLine)(_templateObject3, newMergedCell.row, newMergedCell.col);
	    }
	
	    /**
	     * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
	     *
	     * @param {Object} newMergedCell Object containg information about the merged cells that was about to be added.
	     * @return {String}
	     */
	
	  }, {
	    key: 'ZERO_SPAN_WARNING',
	    value: function ZERO_SPAN_WARNING(newMergedCell) {
	      return (0, _templateLiteralTag.toSingleLine)(_templateObject4, newMergedCell.row, newMergedCell.col);
	    }
	
	    /**
	     * Check whether the values provided for a merged cell contain any negative values.
	     *
	     * @param {Object} mergedCellInfo Object containing the `row`, `col`, `rowspan` and `colspan` properties.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'containsNegativeValues',
	    value: function containsNegativeValues(mergedCellInfo) {
	      return mergedCellInfo.row < 0 || mergedCellInfo.col < 0 || mergedCellInfo.rowspan < 0 || mergedCellInfo.colspan < 0;
	    }
	
	    /**
	     * Check whether the provided merged cell information object represents a single cell.
	     *
	     * @private
	     * @param {Object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isSingleCell',
	    value: function isSingleCell(mergedCellInfo) {
	      return mergedCellInfo.colspan === 1 && mergedCellInfo.rowspan === 1;
	    }
	
	    /**
	     * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
	     *
	     * @private
	     * @param {Object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'containsZeroSpan',
	    value: function containsZeroSpan(mergedCellInfo) {
	      return mergedCellInfo.colspan === 0 || mergedCellInfo.rowspan === 0;
	    }
	
	    /**
	     * Check whether the provided merged cell object is to be declared out of bounds of the table.
	     *
	     * @param {Object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
	     * @param {Number} rowCount Number of rows in the table.
	     * @param {Number} columnCount Number of rows in the table.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isOutOfBounds',
	    value: function isOutOfBounds(mergeCell, rowCount, columnCount) {
	      return mergeCell.row < 0 || mergeCell.col < 0 || mergeCell.row >= rowCount || mergeCell.row + mergeCell.rowspan - 1 >= rowCount || mergeCell.col >= columnCount || mergeCell.col + mergeCell.colspan - 1 >= columnCount;
	    }
	  }]);
	
	  return MergedCellCoords;
	}();
	
	exports.default = MergedCellCoords;
	
	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var strong = __webpack_require__(99);
	var validate = __webpack_require__(45);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(66)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);
	
	
	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var dP = __webpack_require__(20).f;
	var create = __webpack_require__(76);
	var redefineAll = __webpack_require__(62);
	var ctx = __webpack_require__(30);
	var anInstance = __webpack_require__(64);
	var forOf = __webpack_require__(65);
	var $iterDefine = __webpack_require__(108);
	var step = __webpack_require__(110);
	var setSpecies = __webpack_require__(111);
	var DESCRIPTORS = __webpack_require__(22);
	var fastKey = __webpack_require__(32).fastKey;
	var validate = __webpack_require__(45);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};
	
	
	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(22) && !__webpack_require__(23)(function () {
	  return Object.defineProperty(__webpack_require__(74)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});
	
	
	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var has = __webpack_require__(27);
	var toIObject = __webpack_require__(24);
	var arrayIndexOf = __webpack_require__(102)(false);
	var IE_PROTO = __webpack_require__(78)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	
	
	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(24);
	var toLength = __webpack_require__(25);
	var toAbsoluteIndex = __webpack_require__(61);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};
	
	
	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var document = __webpack_require__(15).document;
	module.exports = document && document.documentElement;
	
	
	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(18);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};
	
	
	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// check on default Array iterator
	var Iterators = __webpack_require__(52);
	var ITERATOR = __webpack_require__(12)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};
	
	
	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var classof = __webpack_require__(107);
	var ITERATOR = __webpack_require__(12)('iterator');
	var Iterators = __webpack_require__(52);
	module.exports = __webpack_require__(37).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	
	
	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(44);
	var TAG = __webpack_require__(12)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	
	
	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY = __webpack_require__(49);
	var $export = __webpack_require__(3);
	var redefine = __webpack_require__(28);
	var hide = __webpack_require__(29);
	var Iterators = __webpack_require__(52);
	var $iterCreate = __webpack_require__(209);
	var setToStringTag = __webpack_require__(53);
	var getPrototypeOf = __webpack_require__(109);
	var ITERATOR = __webpack_require__(12)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	
	
	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(27);
	var toObject = __webpack_require__(31);
	var IE_PROTO = __webpack_require__(78)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};
	
	
	/***/ }),
	/* 110 */
	/***/ (function(module, exports) {
	
	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};
	
	
	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var global = __webpack_require__(15);
	var dP = __webpack_require__(20);
	var DESCRIPTORS = __webpack_require__(22);
	var SPECIES = __webpack_require__(12)('species');
	
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};
	
	
	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(9);
	var anObject = __webpack_require__(18);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(30)(Function.call, __webpack_require__(67).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	
	
	/***/ }),
	/* 113 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var strong = __webpack_require__(99);
	var validate = __webpack_require__(45);
	var SET = 'Set';
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(66)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);
	
	
	/***/ }),
	/* 114 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var each = __webpack_require__(68)(0);
	var redefine = __webpack_require__(28);
	var meta = __webpack_require__(32);
	var assign = __webpack_require__(116);
	var weak = __webpack_require__(117);
	var isObject = __webpack_require__(9);
	var fails = __webpack_require__(23);
	var validate = __webpack_require__(45);
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var tmp = {};
	var InternalMap;
	
	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(66)(WEAK_MAP, wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}
	
	
	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(44);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};
	
	
	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(35);
	var gOPS = __webpack_require__(69);
	var pIE = __webpack_require__(54);
	var toObject = __webpack_require__(31);
	var IObject = __webpack_require__(77);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(23)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;
	
	
	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var redefineAll = __webpack_require__(62);
	var getWeak = __webpack_require__(32).getWeak;
	var anObject = __webpack_require__(18);
	var isObject = __webpack_require__(9);
	var anInstance = __webpack_require__(64);
	var forOf = __webpack_require__(65);
	var createArrayMethod = __webpack_require__(68);
	var $has = __webpack_require__(27);
	var validate = __webpack_require__(45);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};
	
	
	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var weak = __webpack_require__(117);
	var validate = __webpack_require__(45);
	var WEAK_SET = 'WeakSet';
	
	// 23.4 WeakSet Objects
	__webpack_require__(66)(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(validate(this, WEAK_SET), value, true);
	  }
	}, weak, false, true);
	
	
	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY = __webpack_require__(49);
	var global = __webpack_require__(15);
	var ctx = __webpack_require__(30);
	var classof = __webpack_require__(107);
	var $export = __webpack_require__(3);
	var isObject = __webpack_require__(9);
	var aFunction = __webpack_require__(63);
	var anInstance = __webpack_require__(64);
	var forOf = __webpack_require__(65);
	var speciesConstructor = __webpack_require__(213);
	var task = __webpack_require__(82).set;
	var microtask = __webpack_require__(215)();
	var newPromiseCapabilityModule = __webpack_require__(120);
	var perform = __webpack_require__(216);
	var userAgent = __webpack_require__(83);
	var promiseResolve = __webpack_require__(217);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(12)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();
	
	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(62)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(53)($Promise, PROMISE);
	__webpack_require__(111)(PROMISE);
	Wrapper = __webpack_require__(37)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(81)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});
	
	
	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(63);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};
	
	
	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(15);
	var has = __webpack_require__(27);
	var DESCRIPTORS = __webpack_require__(22);
	var $export = __webpack_require__(3);
	var redefine = __webpack_require__(28);
	var META = __webpack_require__(32).KEY;
	var $fails = __webpack_require__(23);
	var shared = __webpack_require__(79);
	var setToStringTag = __webpack_require__(53);
	var uid = __webpack_require__(50);
	var wks = __webpack_require__(12);
	var wksExt = __webpack_require__(122);
	var wksDefine = __webpack_require__(218);
	var enumKeys = __webpack_require__(219);
	var isArray = __webpack_require__(115);
	var anObject = __webpack_require__(18);
	var isObject = __webpack_require__(9);
	var toIObject = __webpack_require__(24);
	var toPrimitive = __webpack_require__(75);
	var createDesc = __webpack_require__(51);
	var _create = __webpack_require__(76);
	var gOPNExt = __webpack_require__(123);
	var $GOPD = __webpack_require__(67);
	var $DP = __webpack_require__(20);
	var $keys = __webpack_require__(35);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(84).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(54).f = $propertyIsEnumerable;
	  __webpack_require__(69).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(49)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(29)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);
	
	
	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {
	
	exports.f = __webpack_require__(12);
	
	
	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(24);
	var gOPN = __webpack_require__(84).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};
	
	
	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(9);
	var meta = __webpack_require__(32).onFreeze;
	
	__webpack_require__(26)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});
	
	
	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(9);
	var meta = __webpack_require__(32).onFreeze;
	
	__webpack_require__(26)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});
	
	
	/***/ }),
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(9);
	var meta = __webpack_require__(32).onFreeze;
	
	__webpack_require__(26)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});
	
	
	/***/ }),
	/* 127 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(9);
	
	__webpack_require__(26)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});
	
	
	/***/ }),
	/* 128 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(9);
	
	__webpack_require__(26)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});
	
	
	/***/ }),
	/* 129 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(9);
	
	__webpack_require__(26)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});
	
	
	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(24);
	var $getOwnPropertyDescriptor = __webpack_require__(67).f;
	
	__webpack_require__(26)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});
	
	
	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(31);
	var $getPrototypeOf = __webpack_require__(109);
	
	__webpack_require__(26)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});
	
	
	/***/ }),
	/* 132 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(31);
	var $keys = __webpack_require__(35);
	
	__webpack_require__(26)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});
	
	
	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(26)('getOwnPropertyNames', function () {
	  return __webpack_require__(123).f;
	});
	
	
	/***/ }),
	/* 134 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(3);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(116) });
	
	
	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(3);
	$export($export.S, 'Object', { is: __webpack_require__(220) });
	
	
	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(3);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(112).set });
	
	
	/***/ }),
	/* 137 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP = __webpack_require__(20).f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(22) && dP(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});
	
	
	/***/ }),
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(3);
	var toIObject = __webpack_require__(24);
	var toLength = __webpack_require__(25);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = toIObject(callSite.raw);
	    var len = toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});
	
	
	/***/ }),
	/* 139 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(3);
	var toAbsoluteIndex = __webpack_require__(61);
	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});
	
	
	/***/ }),
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $export = __webpack_require__(3);
	var $at = __webpack_require__(221)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});
	
	
	/***/ }),
	/* 141 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(3);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(142)
	});
	
	
	/***/ }),
	/* 142 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var toInteger = __webpack_require__(60);
	var defined = __webpack_require__(36);
	
	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};
	
	
	/***/ }),
	/* 143 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	
	var $export = __webpack_require__(3);
	var toLength = __webpack_require__(25);
	var context = __webpack_require__(85);
	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(86)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = context(this, searchString, STARTS_WITH);
	    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});
	
	
	/***/ }),
	/* 144 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(9);
	var cof = __webpack_require__(44);
	var MATCH = __webpack_require__(12)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};
	
	
	/***/ }),
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	
	var $export = __webpack_require__(3);
	var toLength = __webpack_require__(25);
	var context = __webpack_require__(85);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(86)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});
	
	
	/***/ }),
	/* 146 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	
	var $export = __webpack_require__(3);
	var context = __webpack_require__(85);
	var INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(86)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	
	/***/ }),
	/* 147 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(22) && /./g.flags != 'g') __webpack_require__(20).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(222)
	});
	
	
	/***/ }),
	/* 148 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// @@match logic
	__webpack_require__(70)('match', 1, function (defined, MATCH, $match) {
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});
	
	
	/***/ }),
	/* 149 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// @@replace logic
	__webpack_require__(70)('replace', 2, function (defined, REPLACE, $replace) {
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue) {
	    'use strict';
	    var O = defined(this);
	    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});
	
	
	/***/ }),
	/* 150 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// @@split logic
	__webpack_require__(70)('split', 2, function (defined, SPLIT, $split) {
	  'use strict';
	  var isRegExp = __webpack_require__(144);
	  var _split = $split;
	  var $push = [].push;
	  var $SPLIT = 'split';
	  var LENGTH = 'length';
	  var LAST_INDEX = 'lastIndex';
	  if (
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ) {
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function (separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while (match = separatorCopy.exec(string)) {
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          // eslint-disable-next-line no-loop-func
	          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
	            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
	          });
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    $split = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit) {
	    var O = defined(this);
	    var fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});
	
	
	/***/ }),
	/* 151 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// @@search logic
	__webpack_require__(70)('search', 1, function (defined, SEARCH, $search) {
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});
	
	
	/***/ }),
	/* 152 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var ctx = __webpack_require__(30);
	var $export = __webpack_require__(3);
	var toObject = __webpack_require__(31);
	var call = __webpack_require__(104);
	var isArrayIter = __webpack_require__(105);
	var toLength = __webpack_require__(25);
	var createProperty = __webpack_require__(87);
	var getIterFn = __webpack_require__(106);
	
	$export($export.S + $export.F * !__webpack_require__(81)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});
	
	
	/***/ }),
	/* 153 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $export = __webpack_require__(3);
	var createProperty = __webpack_require__(87);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(23)(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});
	
	
	/***/ }),
	/* 154 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(3);
	
	$export($export.P, 'Array', { copyWithin: __webpack_require__(223) });
	
	__webpack_require__(46)('copyWithin');
	
	
	/***/ }),
	/* 155 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(3);
	var $find = __webpack_require__(68)(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(46)(KEY);
	
	
	/***/ }),
	/* 156 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(3);
	var $find = __webpack_require__(68)(6);
	var KEY = 'findIndex';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(46)(KEY);
	
	
	/***/ }),
	/* 157 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(3);
	
	$export($export.P, 'Array', { fill: __webpack_require__(224) });
	
	__webpack_require__(46)('fill');
	
	
	/***/ }),
	/* 158 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.2 Number.isFinite(number)
	var $export = __webpack_require__(3);
	var _isFinite = __webpack_require__(15).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});
	
	
	/***/ }),
	/* 159 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(3);
	
	$export($export.S, 'Number', { isInteger: __webpack_require__(160) });
	
	
	/***/ }),
	/* 160 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(9);
	var floor = Math.floor;
	module.exports = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};
	
	
	/***/ }),
	/* 161 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.5 Number.isSafeInteger(number)
	var $export = __webpack_require__(3);
	var isInteger = __webpack_require__(160);
	var abs = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});
	
	
	/***/ }),
	/* 162 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(3);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});
	
	
	/***/ }),
	/* 163 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(3);
	
	$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
	
	
	/***/ }),
	/* 164 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(3);
	
	$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });
	
	
	/***/ }),
	/* 165 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(3);
	
	$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
	
	
	/***/ }),
	/* 166 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// https://github.com/tc39/Array.prototype.includes
	var $export = __webpack_require__(3);
	var $includes = __webpack_require__(102)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(46)('includes');
	
	
	/***/ }),
	/* 167 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(3);
	var $values = __webpack_require__(168)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});
	
	
	/***/ }),
	/* 168 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var getKeys = __webpack_require__(35);
	var toIObject = __webpack_require__(24);
	var isEnum = __webpack_require__(54).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};
	
	
	/***/ }),
	/* 169 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(3);
	var $entries = __webpack_require__(168)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});
	
	
	/***/ }),
	/* 170 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export = __webpack_require__(3);
	var ownKeys = __webpack_require__(225);
	var toIObject = __webpack_require__(24);
	var gOPD = __webpack_require__(67);
	var createProperty = __webpack_require__(87);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIObject(object);
	    var getDesc = gOPD.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) createProperty(result, key, desc);
	    }
	    return result;
	  }
	});
	
	
	/***/ }),
	/* 171 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(3);
	var $pad = __webpack_require__(172);
	var userAgent = __webpack_require__(83);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});
	
	
	/***/ }),
	/* 172 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(25);
	var repeat = __webpack_require__(142);
	var defined = __webpack_require__(36);
	
	module.exports = function (that, maxLength, fillString, left) {
	  var S = String(defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};
	
	
	/***/ }),
	/* 173 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(3);
	var $pad = __webpack_require__(172);
	var userAgent = __webpack_require__(83);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});
	
	
	/***/ }),
	/* 174 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(3);
	var $task = __webpack_require__(82);
	$export($export.G + $export.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});
	
	
	/***/ }),
	/* 175 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $iterators = __webpack_require__(88);
	var getKeys = __webpack_require__(35);
	var redefine = __webpack_require__(28);
	var global = __webpack_require__(15);
	var hide = __webpack_require__(29);
	var Iterators = __webpack_require__(52);
	var wks = __webpack_require__(12);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;
	
	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};
	
	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
	  }
	}
	
	
	/***/ }),
	/* 176 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var privatePool = new WeakMap();
	
	/**
	 * Calculates indexes of columns to render OR columns that are visible.
	 * To redo the calculation, you need to create a new calculator.
	 *
	 * @class ViewportColumnsCalculator
	 */
	
	var ViewportColumnsCalculator = function () {
	  _createClass(ViewportColumnsCalculator, null, [{
	    key: 'DEFAULT_WIDTH',
	
	    /**
	     * Default column width
	     *
	     * @type {Number}
	     */
	    get: function get() {
	      return 50;
	    }
	
	    /**
	     * @param {Number} viewportWidth Width of the viewport
	     * @param {Number} scrollOffset Current horizontal scroll position of the viewport
	     * @param {Number} totalColumns Total number of rows
	     * @param {Function} columnWidthFn Function that returns the width of the column at a given index (in px)
	     * @param {Function} overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)
	     * @param {Boolean} onlyFullyVisible if `true`, only startRow and endRow will be indexes of rows that are fully in viewport
	     * @param {Boolean} stretchH
	     * @param {Function} [stretchingColumnWidthFn] Function that returns the new width of the stretched column.
	     */
	
	  }]);
	
	  function ViewportColumnsCalculator(viewportWidth, scrollOffset, totalColumns, columnWidthFn, overrideFn, onlyFullyVisible, stretchH) {
	    var stretchingColumnWidthFn = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function (width) {
	      return width;
	    };
	
	    _classCallCheck(this, ViewportColumnsCalculator);
	
	    privatePool.set(this, {
	      viewportWidth: viewportWidth,
	      scrollOffset: scrollOffset,
	      totalColumns: totalColumns,
	      columnWidthFn: columnWidthFn,
	      overrideFn: overrideFn,
	      onlyFullyVisible: onlyFullyVisible,
	      stretchingColumnWidthFn: stretchingColumnWidthFn
	    });
	
	    /**
	     * Number of rendered/visible columns
	     *
	     * @type {Number}
	     */
	    this.count = 0;
	
	    /**
	     * Index of the first rendered/visible column (can be overwritten using overrideFn)
	     *
	     * @type {Number|null}
	     */
	    this.startColumn = null;
	
	    /**
	     * Index of the last rendered/visible column (can be overwritten using overrideFn)
	     *
	     * @type {null}
	     */
	    this.endColumn = null;
	
	    /**
	     * Position of the first rendered/visible column (in px)
	     *
	     * @type {Number|null}
	     */
	    this.startPosition = null;
	
	    this.stretchAllRatio = 0;
	    this.stretchLastWidth = 0;
	    this.stretch = stretchH;
	    this.totalTargetWidth = 0;
	    this.needVerifyLastColumnWidth = true;
	    this.stretchAllColumnsWidth = [];
	
	    this.calculate();
	  }
	
	  /**
	   * Calculates viewport
	   */
	
	
	  _createClass(ViewportColumnsCalculator, [{
	    key: 'calculate',
	    value: function calculate() {
	      var sum = 0;
	      var needReverse = true;
	      var startPositions = [];
	      var columnWidth = void 0;
	
	      var priv = privatePool.get(this);
	      var onlyFullyVisible = priv.onlyFullyVisible;
	      var overrideFn = priv.overrideFn;
	      var scrollOffset = priv.scrollOffset;
	      var totalColumns = priv.totalColumns;
	      var viewportWidth = priv.viewportWidth;
	
	      for (var i = 0; i < totalColumns; i++) {
	        columnWidth = this._getColumnWidth(i);
	
	        if (sum <= scrollOffset && !onlyFullyVisible) {
	          this.startColumn = i;
	        }
	
	        // +1 pixel for row header width compensation for horizontal scroll > 0
	        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;
	
	        if (sum >= scrollOffset && sum + columnWidth <= scrollOffset + compensatedViewportWidth) {
	          if (this.startColumn === null || this.startColumn === void 0) {
	            this.startColumn = i;
	          }
	          this.endColumn = i;
	        }
	        startPositions.push(sum);
	        sum += columnWidth;
	
	        if (!onlyFullyVisible) {
	          this.endColumn = i;
	        }
	        if (sum >= scrollOffset + viewportWidth) {
	          needReverse = false;
	          break;
	        }
	      }
	
	      if (this.endColumn === totalColumns - 1 && needReverse) {
	        this.startColumn = this.endColumn;
	
	        while (this.startColumn > 0) {
	          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];
	
	          if (viewportSum <= viewportWidth || !onlyFullyVisible) {
	            this.startColumn -= 1;
	          }
	          if (viewportSum > viewportWidth) {
	            break;
	          }
	        }
	      }
	
	      if (this.startColumn !== null && overrideFn) {
	        overrideFn(this);
	      }
	      this.startPosition = startPositions[this.startColumn];
	
	      if (this.startPosition === void 0) {
	        this.startPosition = null;
	      }
	      if (this.startColumn !== null) {
	        this.count = this.endColumn - this.startColumn + 1;
	      }
	    }
	
	    /**
	     * Recalculate columns stretching.
	     *
	     * @param {Number} totalWidth
	     */
	
	  }, {
	    key: 'refreshStretching',
	    value: function refreshStretching(totalWidth) {
	      if (this.stretch === 'none') {
	        return;
	      }
	      var totalColumnsWidth = totalWidth;
	      this.totalTargetWidth = totalColumnsWidth;
	
	      var priv = privatePool.get(this);
	      var totalColumns = priv.totalColumns;
	      var sumAll = 0;
	
	      for (var i = 0; i < totalColumns; i++) {
	        var columnWidth = this._getColumnWidth(i);
	        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);
	
	        if (typeof permanentColumnWidth === 'number') {
	          totalColumnsWidth -= permanentColumnWidth;
	        } else {
	          sumAll += columnWidth;
	        }
	      }
	      var remainingSize = totalColumnsWidth - sumAll;
	
	      if (this.stretch === 'all' && remainingSize > 0) {
	        this.stretchAllRatio = totalColumnsWidth / sumAll;
	        this.stretchAllColumnsWidth = [];
	        this.needVerifyLastColumnWidth = true;
	      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {
	        var _columnWidth = this._getColumnWidth(totalColumns - 1);
	        var lastColumnWidth = remainingSize + _columnWidth;
	
	        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;
	      }
	    }
	
	    /**
	     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.
	     *
	     * @param {Number} column
	     * @param {Number} baseWidth
	     * @returns {Number|null}
	     */
	
	  }, {
	    key: 'getStretchedColumnWidth',
	    value: function getStretchedColumnWidth(column, baseWidth) {
	      var result = null;
	
	      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {
	        result = this._getStretchedAllColumnWidth(column, baseWidth);
	      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {
	        result = this._getStretchedLastColumnWidth(column);
	      }
	
	      return result;
	    }
	
	    /**
	     * @param {Number} column
	     * @param {Number} baseWidth
	     * @returns {Number}
	     * @private
	     */
	
	  }, {
	    key: '_getStretchedAllColumnWidth',
	    value: function _getStretchedAllColumnWidth(column, baseWidth) {
	      var sumRatioWidth = 0;
	      var priv = privatePool.get(this);
	      var totalColumns = priv.totalColumns;
	
	      if (!this.stretchAllColumnsWidth[column]) {
	        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);
	        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);
	
	        if (newStretchedWidth === void 0) {
	          this.stretchAllColumnsWidth[column] = stretchedWidth;
	        } else {
	          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;
	        }
	      }
	
	      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {
	        this.needVerifyLastColumnWidth = false;
	
	        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {
	          sumRatioWidth += this.stretchAllColumnsWidth[i];
	        }
	        if (sumRatioWidth !== this.totalTargetWidth) {
	          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;
	        }
	      }
	
	      return this.stretchAllColumnsWidth[column];
	    }
	
	    /**
	     * @param {Number} column
	     * @returns {Number|null}
	     * @private
	     */
	
	  }, {
	    key: '_getStretchedLastColumnWidth',
	    value: function _getStretchedLastColumnWidth(column) {
	      var priv = privatePool.get(this);
	      var totalColumns = priv.totalColumns;
	
	      if (column === totalColumns - 1) {
	        return this.stretchLastWidth;
	      }
	
	      return null;
	    }
	
	    /**
	     * @param {Number} column Column index.
	     * @returns {Number}
	     * @private
	     */
	
	  }, {
	    key: '_getColumnWidth',
	    value: function _getColumnWidth(column) {
	      var width = privatePool.get(this).columnWidthFn(column);
	
	      if (isNaN(width)) {
	        width = ViewportColumnsCalculator.DEFAULT_WIDTH;
	      }
	
	      return width;
	    }
	  }]);
	
	  return ViewportColumnsCalculator;
	}();
	
	exports.default = ViewportColumnsCalculator;
	
	/***/ }),
	/* 177 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var privatePool = new WeakMap();
	
	/**
	 * Calculates indexes of rows to render OR rows that are visible.
	 * To redo the calculation, you need to create a new calculator.
	 *
	 * @class ViewportRowsCalculator
	 */
	
	var ViewportRowsCalculator = function () {
	  _createClass(ViewportRowsCalculator, null, [{
	    key: "DEFAULT_HEIGHT",
	
	    /**
	     * Default row height
	     *
	     * @type {Number}
	     */
	    get: function get() {
	      return 23;
	    }
	
	    /**
	     * @param {Number} viewportHeight Height of the viewport
	     * @param {Number} scrollOffset Current vertical scroll position of the viewport
	     * @param {Number} totalRows Total number of rows
	     * @param {Function} rowHeightFn Function that returns the height of the row at a given index (in px)
	     * @param {Function} overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin)
	     * @param {Boolean} onlyFullyVisible if `true`, only startRow and endRow will be indexes of rows that are fully in viewport
	     * @param {Number} horizontalScrollbarHeight
	     */
	
	  }]);
	
	  function ViewportRowsCalculator(viewportHeight, scrollOffset, totalRows, rowHeightFn, overrideFn, onlyFullyVisible, horizontalScrollbarHeight) {
	    _classCallCheck(this, ViewportRowsCalculator);
	
	    privatePool.set(this, {
	      viewportHeight: viewportHeight,
	      scrollOffset: scrollOffset,
	      totalRows: totalRows,
	      rowHeightFn: rowHeightFn,
	      overrideFn: overrideFn,
	      onlyFullyVisible: onlyFullyVisible,
	      horizontalScrollbarHeight: horizontalScrollbarHeight
	    });
	
	    /**
	     * Number of rendered/visible rows
	     *
	     * @type {Number}
	     */
	    this.count = 0;
	
	    /**
	     * Index of the first rendered/visible row (can be overwritten using overrideFn)
	     *
	     * @type {Number|null}
	     */
	    this.startRow = null;
	
	    /**
	     * Index of the last rendered/visible row (can be overwritten using overrideFn)
	     *
	     * @type {null}
	     */
	    this.endRow = null;
	
	    /**
	     * Position of the first rendered/visible row (in px)
	     *
	     * @type {Number|null}
	     */
	    this.startPosition = null;
	
	    this.calculate();
	  }
	
	  /**
	   * Calculates viewport
	   */
	
	
	  _createClass(ViewportRowsCalculator, [{
	    key: "calculate",
	    value: function calculate() {
	      var sum = 0;
	      var needReverse = true;
	      var startPositions = [];
	
	      var priv = privatePool.get(this);
	      var onlyFullyVisible = priv.onlyFullyVisible;
	      var overrideFn = priv.overrideFn;
	      var rowHeightFn = priv.rowHeightFn;
	      var scrollOffset = priv.scrollOffset;
	      var totalRows = priv.totalRows;
	      var viewportHeight = priv.viewportHeight;
	      var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;
	      var rowHeight = void 0;
	
	      // Calculate the number (start and end index) of rows needed
	      for (var i = 0; i < totalRows; i++) {
	        rowHeight = rowHeightFn(i);
	
	        if (isNaN(rowHeight)) {
	          rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;
	        }
	        if (sum <= scrollOffset && !onlyFullyVisible) {
	          this.startRow = i;
	        }
	
	        // the row is within the "visible range"
	        if (sum >= scrollOffset && sum + rowHeight <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	          if (this.startRow === null) {
	            this.startRow = i;
	          }
	          this.endRow = i;
	        }
	        startPositions.push(sum);
	        sum += rowHeight;
	
	        if (!onlyFullyVisible) {
	          this.endRow = i;
	        }
	        if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {
	          needReverse = false;
	          break;
	        }
	      }
	
	      // If the estimation has reached the last row and there is still some space available in the viewport,
	      // we need to render in reverse in order to fill the whole viewport with rows
	      if (this.endRow === totalRows - 1 && needReverse) {
	        this.startRow = this.endRow;
	
	        while (this.startRow > 0) {
	          // rowHeight is the height of the last row
	          var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];
	
	          if (viewportSum <= viewportHeight - horizontalScrollbarHeight || !onlyFullyVisible) {
	            this.startRow -= 1;
	          }
	          if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {
	            break;
	          }
	        }
	      }
	
	      if (this.startRow !== null && overrideFn) {
	        overrideFn(this);
	      }
	      this.startPosition = startPositions[this.startRow];
	
	      if (this.startPosition === void 0) {
	        this.startPosition = null;
	      }
	      if (this.startRow !== null) {
	        this.count = this.endRow - this.startRow + 1;
	      }
	    }
	  }]);
	
	  return ViewportRowsCalculator;
	}();
	
	exports.default = ViewportRowsCalculator;
	
	/***/ }),
	/* 178 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _coords = __webpack_require__(56);
	
	var _coords2 = _interopRequireDefault(_coords);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * CellRange holds cell coordinates as {@link CellCoords} instances. This object represent unit of the selection layer which
	 * can contains multiple contiquous cells or single cell.
	 *
	 * @util
	 */
	var CellRange = function () {
	  function CellRange(highlight) {
	    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : highlight;
	    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : highlight;
	
	    _classCallCheck(this, CellRange);
	
	    /**
	     * Used to draw bold border around a cell where selection was started and to edit the cell when you press Enter.
	     *
	     * @type {CellCoords}
	     */
	    this.highlight = highlight;
	    /**
	     * Usually the same as highlight, but in Excel there is distinction - one can change highlight within a selection.
	     *
	     * @type {CellCoords}
	     */
	    this.from = from;
	    /**
	     * End selection.
	     *
	     * @type {CellCoords}
	     */
	    this.to = to;
	  }
	
	  /**
	   * Set the new coordinates for highlighting selection.
	   *
	   * @param {CellCoords} coords Coordinates to use.
	   */
	
	
	  _createClass(CellRange, [{
	    key: 'setHighlight',
	    value: function setHighlight(coords) {
	      this.highlight = coords;
	
	      return this;
	    }
	
	    /**
	     * Set the new coordinates where selection starts from.
	     *
	     * @param {CellCoords} coords Coordinates to use.
	     */
	
	  }, {
	    key: 'setFrom',
	    value: function setFrom(coords) {
	      this.from = coords;
	
	      return this;
	    }
	
	    /**
	     * Set new coordinates where selection ends from.
	     *
	     * @param {CellCoords} coords Coordinates to use.
	     */
	
	  }, {
	    key: 'setTo',
	    value: function setTo(coords) {
	      this.to = coords;
	
	      return this;
	    }
	
	    /**
	     * Checks if given coordinates are valid in context of a given Walkontable instance.
	     *
	     * @param {Walkontable} wot The Walkontable instance.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isValid',
	    value: function isValid(wot) {
	      return this.from.isValid(wot) && this.to.isValid(wot);
	    }
	
	    /**
	     * Checks if this cell range is restricted to one cell
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSingle',
	    value: function isSingle() {
	      return this.from.row === this.to.row && this.from.col === this.to.col;
	    }
	
	    /**
	     * Returns selected range height (in number of rows).
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getHeight',
	    value: function getHeight() {
	      return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
	    }
	
	    /**
	     * Returns selected range width (in number of columns).
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getWidth',
	    value: function getWidth() {
	      return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
	    }
	
	    /**
	     * Checks if given cell coordinates are within `from` and `to` cell coordinates of this range.
	     *
	     * @param {CellCoords} cellCoords The cell coordinates to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'includes',
	    value: function includes(cellCoords) {
	      var row = cellCoords.row,
	          col = cellCoords.col;
	
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	
	      return topLeft.row <= row && bottomRight.row >= row && topLeft.col <= col && bottomRight.col >= col;
	    }
	
	    /**
	     * Checks if given range is within of this range.
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'includesRange',
	    value: function includesRange(cellRange) {
	      return this.includes(cellRange.getTopLeftCorner()) && this.includes(cellRange.getBottomRightCorner());
	    }
	
	    /**
	     * Checks if given range is equal to this range.
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isEqual',
	    value: function isEqual(cellRange) {
	      return Math.min(this.from.row, this.to.row) === Math.min(cellRange.from.row, cellRange.to.row) && Math.max(this.from.row, this.to.row) === Math.max(cellRange.from.row, cellRange.to.row) && Math.min(this.from.col, this.to.col) === Math.min(cellRange.from.col, cellRange.to.col) && Math.max(this.from.col, this.to.col) === Math.max(cellRange.from.col, cellRange.to.col);
	    }
	
	    /**
	     * Checks if tested range overlaps with the range. Range A is considered to to be overlapping with range B
	     * if intersection of A and B or B and A is not empty.
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'overlaps',
	    value: function overlaps(cellRange) {
	      return cellRange.isSouthEastOf(this.getTopLeftCorner()) && cellRange.isNorthWestOf(this.getBottomRightCorner());
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in south-east from this cell range.
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSouthEastOf',
	    value: function isSouthEastOf(cellRange) {
	      return this.getTopLeftCorner().isSouthEastOf(cellRange) || this.getBottomRightCorner().isSouthEastOf(cellRange);
	    }
	
	    /**
	     * Checks if tested coordinates are positioned in north-west from this cell range.
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isNorthWestOf',
	    value: function isNorthWestOf(cellRange) {
	      return this.getTopLeftCorner().isNorthWestOf(cellRange) || this.getBottomRightCorner().isNorthWestOf(cellRange);
	    }
	
	    /**
	     * Returns `true` if the provided range is overlapping the current range horizontally (e.g. the current range's last
	     * column is 5 and the provided range's first column is 3).
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isOverlappingHorizontally',
	    value: function isOverlappingHorizontally(cellRange) {
	      return this.getTopRightCorner().col >= cellRange.getTopLeftCorner().col && this.getTopRightCorner().col <= cellRange.getTopRightCorner().col || this.getTopLeftCorner().col <= cellRange.getTopRightCorner().col && this.getTopLeftCorner().col >= cellRange.getTopLeftCorner().col;
	    }
	
	    /**
	     * Returns `true` if the provided range is overlapping the current range vertically (e.g. the current range's last
	     *  row is 5 and the provided range's first row is 3).
	     *
	     * @param {CellRange} cellRange The cells range to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isOverlappingVertically',
	    value: function isOverlappingVertically(cellRange) {
	      return this.getBottomRightCorner().row >= cellRange.getTopRightCorner().row && this.getBottomRightCorner().row <= cellRange.getBottomRightCorner().row || this.getTopRightCorner().row <= cellRange.getBottomRightCorner().row && this.getTopRightCorner().row >= cellRange.getTopRightCorner().row;
	    }
	
	    /**
	     * Adds a cell to a range (only if exceeds corners of the range). Returns information if range was expanded.
	     *
	     * @param {CellCoords} cellCoords
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'expand',
	    value: function expand(cellCoords) {
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	
	      if (cellCoords.row < topLeft.row || cellCoords.col < topLeft.col || cellCoords.row > bottomRight.row || cellCoords.col > bottomRight.col) {
	        this.from = new _coords2.default(Math.min(topLeft.row, cellCoords.row), Math.min(topLeft.col, cellCoords.col));
	        this.to = new _coords2.default(Math.max(bottomRight.row, cellCoords.row), Math.max(bottomRight.col, cellCoords.col));
	
	        return true;
	      }
	
	      return false;
	    }
	
	    /**
	     * Expand the current object by the range passed in the first argument.
	     *
	     * @param {CellRange} expandingRange Object extending the range.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'expandByRange',
	    value: function expandByRange(expandingRange) {
	      if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {
	        return false;
	      }
	
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	      var initialDirection = this.getDirection();
	
	      var expandingTopLeft = expandingRange.getTopLeftCorner();
	      var expandingBottomRight = expandingRange.getBottomRightCorner();
	
	      var resultTopRow = Math.min(topLeft.row, expandingTopLeft.row);
	      var resultTopCol = Math.min(topLeft.col, expandingTopLeft.col);
	      var resultBottomRow = Math.max(bottomRight.row, expandingBottomRight.row);
	      var resultBottomCol = Math.max(bottomRight.col, expandingBottomRight.col);
	
	      var finalFrom = new _coords2.default(resultTopRow, resultTopCol);
	      var finalTo = new _coords2.default(resultBottomRow, resultBottomCol);
	
	      this.from = finalFrom;
	      this.to = finalTo;
	
	      this.setDirection(initialDirection);
	
	      if (this.highlight.row === this.getBottomRightCorner().row && this.getVerticalDirection() === 'N-S') {
	        this.flipDirectionVertically();
	      }
	
	      if (this.highlight.col === this.getTopRightCorner().col && this.getHorizontalDirection() === 'W-E') {
	        this.flipDirectionHorizontally();
	      }
	
	      return true;
	    }
	
	    /**
	     * Gets the direction of the selection.
	     *
	     * @returns {String} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
	     */
	
	  }, {
	    key: 'getDirection',
	    value: function getDirection() {
	      if (this.from.isNorthWestOf(this.to)) {
	        // NorthWest - SouthEast
	        return 'NW-SE';
	      } else if (this.from.isNorthEastOf(this.to)) {
	        // NorthEast - SouthWest
	        return 'NE-SW';
	      } else if (this.from.isSouthEastOf(this.to)) {
	        // SouthEast - NorthWest
	        return 'SE-NW';
	      } else if (this.from.isSouthWestOf(this.to)) {
	        // SouthWest - NorthEast
	        return 'SW-NE';
	      }
	    }
	
	    /**
	     * Sets the direction of the selection.
	     *
	     * @param {String} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
	     */
	
	  }, {
	    key: 'setDirection',
	    value: function setDirection(direction) {
	      switch (direction) {
	        case 'NW-SE':
	          var _ref = [this.getTopLeftCorner(), this.getBottomRightCorner()];
	          this.from = _ref[0];
	          this.to = _ref[1];
	
	          break;
	        case 'NE-SW':
	          var _ref2 = [this.getTopRightCorner(), this.getBottomLeftCorner()];
	          this.from = _ref2[0];
	          this.to = _ref2[1];
	
	          break;
	        case 'SE-NW':
	          var _ref3 = [this.getBottomRightCorner(), this.getTopLeftCorner()];
	          this.from = _ref3[0];
	          this.to = _ref3[1];
	
	          break;
	        case 'SW-NE':
	          var _ref4 = [this.getBottomLeftCorner(), this.getTopRightCorner()];
	          this.from = _ref4[0];
	          this.to = _ref4[1];
	
	          break;
	        default:
	          break;
	      }
	    }
	
	    /**
	     * Gets the vertical direction of the range.
	     *
	     * @returns {String} Returns one of the values: `N-S` (north->south), `S-N` (south->north).
	     */
	
	  }, {
	    key: 'getVerticalDirection',
	    value: function getVerticalDirection() {
	      return ['NE-SW', 'NW-SE'].indexOf(this.getDirection()) > -1 ? 'N-S' : 'S-N';
	    }
	
	    /**
	     * Gets the horizontal direction of the range.
	     *
	     * @returns {String} Returns one of the values: `W-E` (west->east), `E-W` (east->west).
	     */
	
	  }, {
	    key: 'getHorizontalDirection',
	    value: function getHorizontalDirection() {
	      return ['NW-SE', 'SW-NE'].indexOf(this.getDirection()) > -1 ? 'W-E' : 'E-W';
	    }
	
	    /**
	     * Flip the direction vertically. (e.g. `NW-SE` changes to `SW-NE`).
	     */
	
	  }, {
	    key: 'flipDirectionVertically',
	    value: function flipDirectionVertically() {
	      var direction = this.getDirection();
	      switch (direction) {
	        case 'NW-SE':
	          this.setDirection('SW-NE');
	          break;
	        case 'NE-SW':
	          this.setDirection('SE-NW');
	          break;
	        case 'SE-NW':
	          this.setDirection('NE-SW');
	          break;
	        case 'SW-NE':
	          this.setDirection('NW-SE');
	          break;
	        default:
	          break;
	      }
	    }
	
	    /**
	     * Flip the direction horizontally. (e.g. `NW-SE` changes to `NE-SW`).
	     */
	
	  }, {
	    key: 'flipDirectionHorizontally',
	    value: function flipDirectionHorizontally() {
	      var direction = this.getDirection();
	      switch (direction) {
	        case 'NW-SE':
	          this.setDirection('NE-SW');
	          break;
	        case 'NE-SW':
	          this.setDirection('NW-SE');
	          break;
	        case 'SE-NW':
	          this.setDirection('SW-NE');
	          break;
	        case 'SW-NE':
	          this.setDirection('SE-NW');
	          break;
	        default:
	          break;
	      }
	    }
	
	    /**
	     * Gets the top left corner of this range.
	     *
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'getTopLeftCorner',
	    value: function getTopLeftCorner() {
	      return new _coords2.default(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	    }
	
	    /**
	     * Gets the bottom right corner of this range.
	     *
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'getBottomRightCorner',
	    value: function getBottomRightCorner() {
	      return new _coords2.default(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	    }
	
	    /**
	     * Gets the top right corner of this range.
	     *
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'getTopRightCorner',
	    value: function getTopRightCorner() {
	      return new _coords2.default(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
	    }
	
	    /**
	     * Gets the bottom left corner of this range.
	     *
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'getBottomLeftCorner',
	    value: function getBottomLeftCorner() {
	      return new _coords2.default(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
	    }
	
	    /**
	     * Checks if coordinates match to one of the 4th corners of this range.
	     *
	     * @param {CellCoords} coords Cell coordinates to check.
	     * @param {CellRange} [expandedRange]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isCorner',
	    value: function isCorner(coords, expandedRange) {
	      if (expandedRange && expandedRange.includes(coords) && (this.getTopLeftCorner().isEqual(new _coords2.default(expandedRange.from.row, expandedRange.from.col)) || this.getTopRightCorner().isEqual(new _coords2.default(expandedRange.from.row, expandedRange.to.col)) || this.getBottomLeftCorner().isEqual(new _coords2.default(expandedRange.to.row, expandedRange.from.col)) || this.getBottomRightCorner().isEqual(new _coords2.default(expandedRange.to.row, expandedRange.to.col)))) {
	        return true;
	      }
	
	      return coords.isEqual(this.getTopLeftCorner()) || coords.isEqual(this.getTopRightCorner()) || coords.isEqual(this.getBottomLeftCorner()) || coords.isEqual(this.getBottomRightCorner());
	    }
	
	    /**
	     * Gets coordinates of the corner which is opposite to the matched. When the passed coordinates matched to the
	     * bottom-right corner of this range then the coordinates for top-left will be returned.
	     *
	     * @param {CellCoords} coords Cell coordinates to check.
	     * @param {CellRange} [expandedRange]
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'getOppositeCorner',
	    value: function getOppositeCorner(coords, expandedRange) {
	      if (!(coords instanceof _coords2.default)) {
	        return false;
	      }
	
	      if (expandedRange) {
	        if (expandedRange.includes(coords)) {
	          if (this.getTopLeftCorner().isEqual(new _coords2.default(expandedRange.from.row, expandedRange.from.col))) {
	            return this.getBottomRightCorner();
	          }
	          if (this.getTopRightCorner().isEqual(new _coords2.default(expandedRange.from.row, expandedRange.to.col))) {
	            return this.getBottomLeftCorner();
	          }
	          if (this.getBottomLeftCorner().isEqual(new _coords2.default(expandedRange.to.row, expandedRange.from.col))) {
	            return this.getTopRightCorner();
	          }
	          if (this.getBottomRightCorner().isEqual(new _coords2.default(expandedRange.to.row, expandedRange.to.col))) {
	            return this.getTopLeftCorner();
	          }
	        }
	      }
	
	      if (coords.isEqual(this.getBottomRightCorner())) {
	        return this.getTopLeftCorner();
	      } else if (coords.isEqual(this.getTopLeftCorner())) {
	        return this.getBottomRightCorner();
	      } else if (coords.isEqual(this.getTopRightCorner())) {
	        return this.getBottomLeftCorner();
	      } else if (coords.isEqual(this.getBottomLeftCorner())) {
	        return this.getTopRightCorner();
	      }
	    }
	
	    /**
	     * @param {CellRange} range
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getBordersSharedWith',
	    value: function getBordersSharedWith(range) {
	      if (!this.includesRange(range)) {
	        return [];
	      }
	
	      var thisBorders = {
	        top: Math.min(this.from.row, this.to.row),
	        bottom: Math.max(this.from.row, this.to.row),
	        left: Math.min(this.from.col, this.to.col),
	        right: Math.max(this.from.col, this.to.col)
	      };
	      var rangeBorders = {
	        top: Math.min(range.from.row, range.to.row),
	        bottom: Math.max(range.from.row, range.to.row),
	        left: Math.min(range.from.col, range.to.col),
	        right: Math.max(range.from.col, range.to.col)
	      };
	      var result = [];
	
	      if (thisBorders.top === rangeBorders.top) {
	        result.push('top');
	      }
	      if (thisBorders.right === rangeBorders.right) {
	        result.push('right');
	      }
	      if (thisBorders.bottom === rangeBorders.bottom) {
	        result.push('bottom');
	      }
	      if (thisBorders.left === rangeBorders.left) {
	        result.push('left');
	      }
	
	      return result;
	    }
	
	    /**
	     * Get inner selected cell coords defined by this range
	     *
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getInner',
	    value: function getInner() {
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	      var out = [];
	
	      for (var r = topLeft.row; r <= bottomRight.row; r++) {
	        for (var c = topLeft.col; c <= bottomRight.col; c++) {
	          if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {
	            out.push(new _coords2.default(r, c));
	          }
	        }
	      }
	      return out;
	    }
	
	    /**
	     * Get all selected cell coords defined by this range
	     *
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getAll',
	    value: function getAll() {
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	      var out = [];
	
	      for (var r = topLeft.row; r <= bottomRight.row; r++) {
	        for (var c = topLeft.col; c <= bottomRight.col; c++) {
	          if (topLeft.row === r && topLeft.col === c) {
	            out.push(topLeft);
	          } else if (bottomRight.row === r && bottomRight.col === c) {
	            out.push(bottomRight);
	          } else {
	            out.push(new _coords2.default(r, c));
	          }
	        }
	      }
	
	      return out;
	    }
	
	    /**
	     * Runs a callback function against all cells in the range. You can break the iteration by returning
	     * `false` in the callback function
	     *
	     * @param callback {Function}
	     */
	
	  }, {
	    key: 'forAll',
	    value: function forAll(callback) {
	      var topLeft = this.getTopLeftCorner();
	      var bottomRight = this.getBottomRightCorner();
	
	      for (var r = topLeft.row; r <= bottomRight.row; r++) {
	        for (var c = topLeft.col; c <= bottomRight.col; c++) {
	          var breakIteration = callback(r, c);
	
	          if (breakIteration === false) {
	            return;
	          }
	        }
	      }
	    }
	
	    /**
	     * Convert CellRange to literal object.
	     *
	     * @return {Object} Returns a literal object with `from` and `to` properties which each of that object
	     *                  contains `row` and `col` keys.
	     */
	
	  }, {
	    key: 'toObject',
	    value: function toObject() {
	      return {
	        from: this.from.toObject(),
	        to: this.to.toObject()
	      };
	    }
	  }]);
	
	  return CellRange;
	}();
	
	exports.default = CellRange;
	
	/***/ }),
	/* 179 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class ColumnFilter
	 */
	var ColumnFilter = function () {
	  /**
	   * @param {Number} offset
	   * @param {Number} total
	   * @param {Number} countTH
	   */
	  function ColumnFilter(offset, total, countTH) {
	    _classCallCheck(this, ColumnFilter);
	
	    this.offset = offset;
	    this.total = total;
	    this.countTH = countTH;
	  }
	
	  /**
	   * @param index
	   * @returns {Number}
	   */
	
	
	  _createClass(ColumnFilter, [{
	    key: "offsetted",
	    value: function offsetted(index) {
	      return index + this.offset;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "unOffsetted",
	    value: function unOffsetted(index) {
	      return index - this.offset;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "renderedToSource",
	    value: function renderedToSource(index) {
	      return this.offsetted(index);
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "sourceToRendered",
	    value: function sourceToRendered(index) {
	      return this.unOffsetted(index);
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "offsettedTH",
	    value: function offsettedTH(index) {
	      return index - this.countTH;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "unOffsettedTH",
	    value: function unOffsettedTH(index) {
	      return index + this.countTH;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "visibleRowHeadedColumnToSourceColumn",
	    value: function visibleRowHeadedColumnToSourceColumn(index) {
	      return this.renderedToSource(this.offsettedTH(index));
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "sourceColumnToVisibleRowHeadedColumn",
	    value: function sourceColumnToVisibleRowHeadedColumn(index) {
	      return this.unOffsettedTH(this.sourceToRendered(index));
	    }
	  }]);
	
	  return ColumnFilter;
	}();
	
	exports.default = ColumnFilter;
	
	/***/ }),
	/* 180 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class RowFilter
	 */
	var RowFilter = function () {
	  /**
	   * @param {Number} offset
	   * @param {Number} total
	   * @param {Number} countTH
	   */
	  function RowFilter(offset, total, countTH) {
	    _classCallCheck(this, RowFilter);
	
	    this.offset = offset;
	    this.total = total;
	    this.countTH = countTH;
	  }
	
	  /**
	   * @param index
	   * @returns {Number}
	   */
	
	
	  _createClass(RowFilter, [{
	    key: "offsetted",
	    value: function offsetted(index) {
	      return index + this.offset;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "unOffsetted",
	    value: function unOffsetted(index) {
	      return index - this.offset;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "renderedToSource",
	    value: function renderedToSource(index) {
	      return this.offsetted(index);
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "sourceToRendered",
	    value: function sourceToRendered(index) {
	      return this.unOffsetted(index);
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "offsettedTH",
	    value: function offsettedTH(index) {
	      return index - this.countTH;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "unOffsettedTH",
	    value: function unOffsettedTH(index) {
	      return index + this.countTH;
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "visibleColHeadedRowToSourceRow",
	    value: function visibleColHeadedRowToSourceRow(index) {
	      return this.renderedToSource(this.offsettedTH(index));
	    }
	
	    /**
	     * @param index
	     * @returns {Number}
	     */
	
	  }, {
	    key: "sourceRowToVisibleColHeadedRow",
	    value: function sourceRowToVisibleColHeadedRow(index) {
	      return this.unOffsettedTH(this.sourceToRendered(index));
	    }
	  }]);
	
	  return RowFilter;
	}();
	
	exports.default = RowFilter;
	
	/***/ }),
	/* 181 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _string = __webpack_require__(33);
	
	var _event = __webpack_require__(182);
	
	var _event2 = _interopRequireDefault(_event);
	
	var _overlays = __webpack_require__(183);
	
	var _overlays2 = _interopRequireDefault(_overlays);
	
	var _scroll = __webpack_require__(184);
	
	var _scroll2 = _interopRequireDefault(_scroll);
	
	var _settings = __webpack_require__(185);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _table = __webpack_require__(186);
	
	var _table2 = _interopRequireDefault(_table);
	
	var _viewport = __webpack_require__(188);
	
	var _viewport2 = _interopRequireDefault(_viewport);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Walkontable
	 */
	var Walkontable = function () {
	  /**
	   * @param {Object} settings
	   */
	  function Walkontable(settings) {
	    _classCallCheck(this, Walkontable);
	
	    var originalHeaders = [];
	
	    // this is the namespace for global events
	    this.guid = 'wt_' + (0, _string.randomString)();
	
	    // bootstrap from settings
	    if (settings.cloneSource) {
	      this.cloneSource = settings.cloneSource;
	      this.cloneOverlay = settings.cloneOverlay;
	      this.wtSettings = settings.cloneSource.wtSettings;
	      this.wtTable = new _table2.default(this, settings.table, settings.wtRootElement);
	      this.wtScroll = new _scroll2.default(this);
	      this.wtViewport = settings.cloneSource.wtViewport;
	      this.wtEvent = new _event2.default(this);
	      this.selections = this.cloneSource.selections;
	    } else {
	      this.wtSettings = new _settings2.default(this, settings);
	      this.wtTable = new _table2.default(this, settings.table);
	      this.wtScroll = new _scroll2.default(this);
	      this.wtViewport = new _viewport2.default(this);
	      this.wtEvent = new _event2.default(this);
	      this.selections = this.getSetting('selections');
	      this.wtOverlays = new _overlays2.default(this);
	      this.exportSettingsAsClassNames();
	    }
	
	    // find original headers
	    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
	      for (var c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {
	        originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);
	      }
	      if (!this.getSetting('columnHeaders').length) {
	        this.update('columnHeaders', [function (column, TH) {
	          (0, _element.fastInnerText)(TH, originalHeaders[column]);
	        }]);
	      }
	    }
	    this.drawn = false;
	    this.drawInterrupted = false;
	  }
	
	  /**
	   * Force rerender of Walkontable
	   *
	   * @param {Boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
	   *                                   the data. It will only work if Table.draw() does not force
	   *                                   rendering anyway
	   * @returns {Walkontable}
	   */
	
	
	  _createClass(Walkontable, [{
	    key: 'draw',
	    value: function draw() {
	      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      this.drawInterrupted = false;
	
	      if (!fastDraw && !(0, _element.isVisible)(this.wtTable.TABLE)) {
	        // draw interrupted because TABLE is not visible
	        this.drawInterrupted = true;
	      } else {
	        this.wtTable.draw(fastDraw);
	      }
	
	      return this;
	    }
	
	    /**
	     * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,
	     * if not set or set to false, returns TD from the master table.
	     *
	     * @param {CellCoords} coords
	     * @param {Boolean} [topmost=false]
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'getCell',
	    value: function getCell(coords) {
	      var topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (!topmost) {
	        return this.wtTable.getCell(coords);
	      }
	
	      var totalRows = this.wtSettings.getSetting('totalRows');
	      var fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');
	      var fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');
	      var fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');
	
	      if (coords.row < fixedRowsTop && coords.col < fixedColumns) {
	        return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(coords);
	      } else if (coords.row < fixedRowsTop) {
	        return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);
	      } else if (coords.col < fixedColumns && coords.row >= totalRows - fixedRowsBottom) {
	        if (this.wtOverlays.bottomLeftCornerOverlay && this.wtOverlays.bottomLeftCornerOverlay.clone) {
	          return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(coords);
	        }
	      } else if (coords.col < fixedColumns) {
	        return this.wtOverlays.leftOverlay.clone.wtTable.getCell(coords);
	      } else if (coords.row < totalRows && coords.row > totalRows - fixedRowsBottom) {
	        if (this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone) {
	          return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);
	        }
	      }
	
	      return this.wtTable.getCell(coords);
	    }
	
	    /**
	     * @param {Object} settings
	     * @param {*} value
	     * @returns {Walkontable}
	     */
	
	  }, {
	    key: 'update',
	    value: function update(settings, value) {
	      return this.wtSettings.update(settings, value);
	    }
	
	    /**
	     * Scrolls the viewport to a cell (rerenders if needed).
	     *
	     * @param {CellCoords} coords
	     * @param {Boolean} [snapToTop]
	     * @param {Boolean} [snapToRight]
	     * @param {Boolean} [snapToBottom]
	     * @param {Boolean} [snapToLeft]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollViewport',
	    value: function scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {
	      return this.wtScroll.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);
	    }
	
	    /**
	     * Scrolls the viewport to a column (rerenders if needed).
	     *
	     * @param {Number} column Visual column index.
	     * @param {Boolean} [snapToRight]
	     * @param {Boolean} [snapToLeft]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollViewportHorizontally',
	    value: function scrollViewportHorizontally(column, snapToRight, snapToLeft) {
	      return this.wtScroll.scrollViewportHorizontally(column, snapToRight, snapToLeft);
	    }
	
	    /**
	     * Scrolls the viewport to a row (rerenders if needed).
	     *
	     * @param {Number} row Visual row index.
	     * @param {Boolean} [snapToTop]
	     * @param {Boolean} [snapToBottom]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollViewportVertically',
	    value: function scrollViewportVertically(row, snapToTop, snapToBottom) {
	      return this.wtScroll.scrollViewportVertically(row, snapToTop, snapToBottom);
	    }
	
	    /**
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getViewport',
	    value: function getViewport() {
	      return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
	    }
	
	    /**
	     * Get overlay name
	     *
	     * @returns {String}
	     */
	
	  }, {
	    key: 'getOverlayName',
	    value: function getOverlayName() {
	      return this.cloneOverlay ? this.cloneOverlay.type : 'master';
	    }
	
	    /**
	     * Check overlay type of this Walkontable instance.
	     *
	     * @param {String} name Clone type @see {Overlay.CLONE_TYPES}.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isOverlayName',
	    value: function isOverlayName(name) {
	      if (this.cloneOverlay) {
	        return this.cloneOverlay.type === name;
	      }
	
	      return false;
	    }
	
	    /**
	     * Export settings as class names added to the parent element of the table.
	     */
	
	  }, {
	    key: 'exportSettingsAsClassNames',
	    value: function exportSettingsAsClassNames() {
	      var _this = this;
	
	      var toExport = {
	        rowHeaders: ['array'],
	        columnHeaders: ['array']
	      };
	      var allClassNames = [];
	      var newClassNames = [];
	
	      (0, _object.objectEach)(toExport, function (optionType, key) {
	        if (optionType.indexOf('array') > -1 && _this.getSetting(key).length) {
	          newClassNames.push('ht' + (0, _string.toUpperCaseFirst)(key));
	        }
	        allClassNames.push('ht' + (0, _string.toUpperCaseFirst)(key));
	      });
	      (0, _element.removeClass)(this.wtTable.wtRootElement.parentNode, allClassNames);
	      (0, _element.addClass)(this.wtTable.wtRootElement.parentNode, newClassNames);
	    }
	
	    /**
	     * Get/Set Walkontable instance setting
	     *
	     * @param {String} key
	     * @param {*} [param1]
	     * @param {*} [param2]
	     * @param {*} [param3]
	     * @param {*} [param4]
	     * @returns {*}
	     */
	
	  }, {
	    key: 'getSetting',
	    value: function getSetting(key, param1, param2, param3, param4) {
	      // this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
	      return this.wtSettings.getSetting(key, param1, param2, param3, param4);
	    }
	
	    /**
	     * Checks if setting exists
	     *
	     * @param {String} key
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'hasSetting',
	    value: function hasSetting(key) {
	      return this.wtSettings.has(key);
	    }
	
	    /**
	     * Destroy instance
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.wtOverlays.destroy();
	      this.wtEvent.destroy();
	    }
	  }]);
	
	  return Walkontable;
	}();
	
	exports.default = Walkontable;
	
	/***/ }),
	/* 182 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _function = __webpack_require__(43);
	
	var _browser = __webpack_require__(39);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *
	 */
	function Event(instance) {
	  var that = this;
	  var eventManager = new _eventManager2.default(instance);
	  var selectedCellBeforeTouchEnd = void 0;
	
	  this.instance = instance;
	
	  var dblClickOrigin = [null, null];
	  this.dblClickTimeout = [null, null];
	
	  var onMouseDown = function onMouseDown(event) {
	    var activeElement = document.activeElement;
	    var getParentNode = (0, _function.partial)(_element.getParent, event.realTarget);
	    var realTarget = event.realTarget;
	
	    // ignore focusable element from mouse down processing (https://github.com/handsontable/handsontable/issues/3555)
	    if (realTarget === activeElement || getParentNode(0) === activeElement || getParentNode(1) === activeElement) {
	      return;
	    }
	
	    var cell = that.parentCell(realTarget);
	
	    if ((0, _element.hasClass)(realTarget, 'corner')) {
	      that.instance.getSetting('onCellCornerMouseDown', event, realTarget);
	    } else if (cell.TD) {
	      if (that.instance.hasSetting('onCellMouseDown')) {
	        that.instance.getSetting('onCellMouseDown', event, cell.coords, cell.TD, that.instance);
	      }
	    }
	
	    if (event.button !== 2) {
	      // if not right mouse button
	      if (cell.TD) {
	        dblClickOrigin[0] = cell.TD;
	        clearTimeout(that.dblClickTimeout[0]);
	        that.dblClickTimeout[0] = setTimeout(function () {
	          dblClickOrigin[0] = null;
	        }, 1000);
	      }
	    }
	  };
	
	  var onContextMenu = function onContextMenu(event) {
	    if (that.instance.hasSetting('onCellContextMenu')) {
	      var cell = that.parentCell(event.realTarget);
	
	      if (cell.TD) {
	        that.instance.getSetting('onCellContextMenu', event, cell.coords, cell.TD, that.instance);
	      }
	    }
	  };
	
	  var onTouchMove = function onTouchMove() {
	    that.instance.touchMoving = true;
	  };
	
	  var onTouchStart = function onTouchStart(event) {
	    eventManager.addEventListener(this, 'touchmove', onTouchMove);
	
	    // Prevent cell selection when scrolling with touch event - not the best solution performance-wise
	    that.checkIfTouchMove = setTimeout(function () {
	      if (that.instance.touchMoving === true) {
	        that.instance.touchMoving = void 0;
	
	        eventManager.removeEventListener('touchmove', onTouchMove, false);
	      }
	
	      onMouseDown(event);
	    }, 30);
	  };
	
	  var onMouseOver = function onMouseOver(event) {
	    var table = void 0;
	    var td = void 0;
	    var mainWOT = void 0;
	
	    if (that.instance.hasSetting('onCellMouseOver')) {
	      table = that.instance.wtTable.TABLE;
	      td = (0, _element.closestDown)(event.realTarget, ['TD', 'TH'], table);
	      mainWOT = that.instance.cloneSource || that.instance;
	
	      if (td && td !== mainWOT.lastMouseOver && (0, _element.isChildOf)(td, table)) {
	        mainWOT.lastMouseOver = td;
	
	        that.instance.getSetting('onCellMouseOver', event, that.instance.wtTable.getCoords(td), td, that.instance);
	      }
	    }
	  };
	
	  var onMouseOut = function onMouseOut(event) {
	    var table = void 0;
	    var lastTD = void 0;
	    var nextTD = void 0;
	
	    if (that.instance.hasSetting('onCellMouseOut')) {
	      table = that.instance.wtTable.TABLE;
	      lastTD = (0, _element.closestDown)(event.realTarget, ['TD', 'TH'], table);
	      nextTD = (0, _element.closestDown)(event.relatedTarget, ['TD', 'TH'], table);
	
	      if (lastTD && lastTD !== nextTD && (0, _element.isChildOf)(lastTD, table)) {
	        that.instance.getSetting('onCellMouseOut', event, that.instance.wtTable.getCoords(lastTD), lastTD, that.instance);
	      }
	    }
	  };
	
	  var onMouseUp = function onMouseUp(event) {
	    if (event.button !== 2) {
	      // if not right mouse button
	      var cell = that.parentCell(event.realTarget);
	
	      if (cell.TD === dblClickOrigin[0] && cell.TD === dblClickOrigin[1]) {
	        if ((0, _element.hasClass)(event.realTarget, 'corner')) {
	          that.instance.getSetting('onCellCornerDblClick', event, cell.coords, cell.TD, that.instance);
	        } else {
	          that.instance.getSetting('onCellDblClick', event, cell.coords, cell.TD, that.instance);
	        }
	
	        dblClickOrigin[0] = null;
	        dblClickOrigin[1] = null;
	      } else if (cell.TD === dblClickOrigin[0]) {
	        that.instance.getSetting('onCellMouseUp', event, cell.coords, cell.TD, that.instance);
	
	        dblClickOrigin[1] = cell.TD;
	        clearTimeout(that.dblClickTimeout[1]);
	        that.dblClickTimeout[1] = setTimeout(function () {
	          dblClickOrigin[1] = null;
	        }, 500);
	      } else if (cell.TD && that.instance.hasSetting('onCellMouseUp')) {
	        that.instance.getSetting('onCellMouseUp', event, cell.coords, cell.TD, that.instance);
	      }
	    }
	  };
	
	  var selectedCellWasTouched = function selectedCellWasTouched(touchTarget) {
	    var cellUnderFinger = that.parentCell(touchTarget);
	    var coordsOfCellUnderFinger = cellUnderFinger.coords;
	
	    if (selectedCellBeforeTouchEnd && coordsOfCellUnderFinger) {
	      var _ref = [coordsOfCellUnderFinger.row, selectedCellBeforeTouchEnd.from.row],
	          rowTouched = _ref[0],
	          rowSelected = _ref[1];
	      var _ref2 = [coordsOfCellUnderFinger.col, selectedCellBeforeTouchEnd.from.col],
	          colTouched = _ref2[0],
	          colSelected = _ref2[1];
	
	
	      return rowTouched === rowSelected && colTouched === colSelected;
	    }
	
	    return false;
	  };
	
	  var onTouchEnd = function onTouchEnd(event) {
	    var excludeTags = ['A', 'BUTTON', 'INPUT'];
	    var target = event.target;
	
	    // touched link which was placed inside a cell (a cell with DOM `a` element) WILL NOT trigger the below function calls
	    // and as consequence will behave as standard (open the link).
	    if (selectedCellWasTouched(target) === false || excludeTags.includes(target.tagName) === false) {
	      event.preventDefault();
	      onMouseUp(event);
	    }
	  };
	
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mousedown', onMouseDown);
	  eventManager.addEventListener(this.instance.wtTable.holder, 'contextmenu', onContextMenu);
	  eventManager.addEventListener(this.instance.wtTable.TABLE, 'mouseover', onMouseOver);
	  eventManager.addEventListener(this.instance.wtTable.TABLE, 'mouseout', onMouseOut);
	  eventManager.addEventListener(this.instance.wtTable.holder, 'mouseup', onMouseUp);
	
	  // check if full HOT instance, or detached WOT AND run on mobile device
	  if (this.instance.wtTable.holder.parentNode.parentNode && (0, _browser.isMobileBrowser)() && !that.instance.wtTable.isWorkingOnClone()) {
	    var classSelector = '.' + this.instance.wtTable.holder.parentNode.className.split(' ').join('.');
	
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchstart', function (event) {
	      selectedCellBeforeTouchEnd = instance.selections.getCell().cellRange;
	
	      that.instance.touchApplied = true;
	      if ((0, _element.isChildOf)(event.target, classSelector)) {
	        onTouchStart.call(event.target, event);
	      }
	    });
	    eventManager.addEventListener(this.instance.wtTable.holder, 'touchend', function (event) {
	      that.instance.touchApplied = false;
	      if ((0, _element.isChildOf)(event.target, classSelector)) {
	        onTouchEnd.call(event.target, event);
	      }
	    });
	
	    if (!that.instance.momentumScrolling) {
	      that.instance.momentumScrolling = {};
	    }
	    eventManager.addEventListener(this.instance.wtTable.holder, 'scroll', function () {
	      clearTimeout(that.instance.momentumScrolling._timeout);
	
	      if (!that.instance.momentumScrolling.ongoing) {
	        that.instance.getSetting('onBeforeTouchScroll');
	      }
	      that.instance.momentumScrolling.ongoing = true;
	
	      that.instance.momentumScrolling._timeout = setTimeout(function () {
	        if (!that.instance.touchApplied) {
	          that.instance.momentumScrolling.ongoing = false;
	
	          that.instance.getSetting('onAfterMomentumScroll');
	        }
	      }, 200);
	    });
	  }
	
	  eventManager.addEventListener(window, 'resize', function () {
	    if (that.instance.getSetting('stretchH') !== 'none') {
	      that.instance.draw();
	    }
	  });
	
	  this.destroy = function () {
	    clearTimeout(this.dblClickTimeout[0]);
	    clearTimeout(this.dblClickTimeout[1]);
	
	    eventManager.destroy();
	  };
	}
	
	Event.prototype.parentCell = function (elem) {
	  var cell = {};
	  var TABLE = this.instance.wtTable.TABLE;
	  var TD = (0, _element.closestDown)(elem, ['TD', 'TH'], TABLE);
	
	  if (TD) {
	    cell.coords = this.instance.wtTable.getCoords(TD);
	    cell.TD = TD;
	  } else if ((0, _element.hasClass)(elem, 'wtBorder') && (0, _element.hasClass)(elem, 'current')) {
	    cell.coords = this.instance.selections.getCell().cellRange.highlight;
	    cell.TD = this.instance.wtTable.getCell(cell.coords);
	  } else if ((0, _element.hasClass)(elem, 'wtBorder') && (0, _element.hasClass)(elem, 'area')) {
	    if (this.instance.selections.createOrGetArea().cellRange) {
	      cell.coords = this.instance.selections.createOrGetArea().cellRange.to;
	      cell.TD = this.instance.wtTable.getCell(cell.coords);
	    }
	  }
	
	  return cell;
	};
	
	exports.default = Event;
	
	/***/ }),
	/* 183 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	var _unicode = __webpack_require__(21);
	
	var _browser = __webpack_require__(39);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Overlays
	 */
	var Overlays = function () {
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function Overlays(wotInstance) {
	    _classCallCheck(this, Overlays);
	
	    /**
	     * Sometimes `line-height` might be set to 'normal'. In that case, a default `font-size` should be multiplied by roughly 1.2.
	     * https://developer.mozilla.org/pl/docs/Web/CSS/line-height#Values
	     */
	    var BODY_LINE_HEIGHT = parseInt(getComputedStyle(document.body).lineHeight, 10);
	    var FALLBACK_BODY_LINE_HEIGHT = parseInt(getComputedStyle(document.body).fontSize, 10) * 1.2;
	
	    this.wot = wotInstance;
	
	    // legacy support
	    this.instance = this.wot;
	    this.eventManager = new _eventManager2.default(this.wot);
	
	    this.wot.update('scrollbarWidth', (0, _element.getScrollbarWidth)());
	    this.wot.update('scrollbarHeight', (0, _element.getScrollbarWidth)());
	
	    this.scrollableElement = (0, _element.getScrollableElement)(this.wot.wtTable.TABLE);
	
	    this.prepareOverlays();
	
	    this.destroyed = false;
	    this.keyPressed = false;
	    this.spreaderLastSize = {
	      width: null,
	      height: null
	    };
	    this.overlayScrollPositions = {
	      master: {
	        top: 0,
	        left: 0
	      },
	      top: {
	        top: null,
	        left: 0
	      },
	      bottom: {
	        top: null,
	        left: 0
	      },
	      left: {
	        top: 0,
	        left: null
	      }
	    };
	
	    this.pendingScrollCallbacks = {
	      master: {
	        top: 0,
	        left: 0
	      },
	      top: {
	        left: 0
	      },
	      bottom: {
	        left: 0
	      },
	      left: {
	        top: 0
	      }
	    };
	
	    this.verticalScrolling = false;
	    this.horizontalScrolling = false;
	    this.delegatedScrollCallback = false;
	
	    this.registeredListeners = [];
	
	    this.browserLineHeight = BODY_LINE_HEIGHT || FALLBACK_BODY_LINE_HEIGHT;
	
	    this.registerListeners();
	  }
	
	  /**
	   * Prepare overlays based on user settings.
	   *
	   * @returns {Boolean} Returns `true` if changes applied to overlay needs scroll synchronization.
	   */
	
	
	  _createClass(Overlays, [{
	    key: 'prepareOverlays',
	    value: function prepareOverlays() {
	      var syncScroll = false;
	
	      if (this.topOverlay) {
	        syncScroll = this.topOverlay.updateStateOfRendering() || syncScroll;
	      } else {
	        this.topOverlay = _base2.default.createOverlay(_base2.default.CLONE_TOP, this.wot);
	      }
	
	      if (!_base2.default.hasOverlay(_base2.default.CLONE_BOTTOM)) {
	        this.bottomOverlay = {
	          needFullRender: false,
	          updateStateOfRendering: function updateStateOfRendering() {
	            return false;
	          }
	        };
	      }
	      if (!_base2.default.hasOverlay(_base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	        this.bottomLeftCornerOverlay = {
	          needFullRender: false,
	          updateStateOfRendering: function updateStateOfRendering() {
	            return false;
	          }
	        };
	      }
	
	      if (this.bottomOverlay) {
	        syncScroll = this.bottomOverlay.updateStateOfRendering() || syncScroll;
	      } else {
	        this.bottomOverlay = _base2.default.createOverlay(_base2.default.CLONE_BOTTOM, this.wot);
	      }
	
	      if (this.leftOverlay) {
	        syncScroll = this.leftOverlay.updateStateOfRendering() || syncScroll;
	      } else {
	        this.leftOverlay = _base2.default.createOverlay(_base2.default.CLONE_LEFT, this.wot);
	      }
	
	      if (this.topOverlay.needFullRender && this.leftOverlay.needFullRender) {
	        if (this.topLeftCornerOverlay) {
	          syncScroll = this.topLeftCornerOverlay.updateStateOfRendering() || syncScroll;
	        } else {
	          this.topLeftCornerOverlay = _base2.default.createOverlay(_base2.default.CLONE_TOP_LEFT_CORNER, this.wot);
	        }
	      }
	
	      if (this.bottomOverlay.needFullRender && this.leftOverlay.needFullRender) {
	        if (this.bottomLeftCornerOverlay) {
	          syncScroll = this.bottomLeftCornerOverlay.updateStateOfRendering() || syncScroll;
	        } else {
	          this.bottomLeftCornerOverlay = _base2.default.createOverlay(_base2.default.CLONE_BOTTOM_LEFT_CORNER, this.wot);
	        }
	      }
	
	      if (this.wot.getSetting('debug') && !this.debug) {
	        this.debug = _base2.default.createOverlay(_base2.default.CLONE_DEBUG, this.wot);
	      }
	
	      return syncScroll;
	    }
	
	    /**
	     * Refresh and redraw table
	     */
	
	  }, {
	    key: 'refreshAll',
	    value: function refreshAll() {
	      if (!this.wot.drawn) {
	        return;
	      }
	      if (!this.wot.wtTable.holder.parentNode) {
	        // Walkontable was detached from DOM, but this handler was not removed
	        this.destroy();
	
	        return;
	      }
	      this.wot.draw(true);
	
	      if (this.verticalScrolling) {
	        this.leftOverlay.onScroll();
	      }
	
	      if (this.horizontalScrolling) {
	        this.topOverlay.onScroll();
	      }
	
	      this.verticalScrolling = false;
	      this.horizontalScrolling = false;
	    }
	
	    /**
	     * Register all necessary event listeners.
	     */
	
	  }, {
	    key: 'registerListeners',
	    value: function registerListeners() {
	      var _this = this;
	
	      var topOverlayScrollable = this.topOverlay.mainTableScrollableElement;
	      var leftOverlayScrollable = this.leftOverlay.mainTableScrollableElement;
	
	      var listenersToRegister = [];
	      listenersToRegister.push([document.documentElement, 'keydown', function (event) {
	        return _this.onKeyDown(event);
	      }]);
	      listenersToRegister.push([document.documentElement, 'keyup', function () {
	        return _this.onKeyUp();
	      }]);
	      listenersToRegister.push([document, 'visibilitychange', function () {
	        return _this.onKeyUp();
	      }]);
	      listenersToRegister.push([topOverlayScrollable, 'scroll', function (event) {
	        return _this.onTableScroll(event);
	      }]);
	
	      if (topOverlayScrollable !== leftOverlayScrollable) {
	        listenersToRegister.push([leftOverlayScrollable, 'scroll', function (event) {
	          return _this.onTableScroll(event);
	        }]);
	      }
	
	      var isHighPixelRatio = window.devicePixelRatio && window.devicePixelRatio > 1;
	
	      if (isHighPixelRatio || !(0, _browser.isChrome)()) {
	        listenersToRegister.push([this.instance.wtTable.wtRootElement.parentNode, 'wheel', function (event) {
	          return _this.onCloneWheel(event);
	        }]);
	      } else {
	        if (this.topOverlay.needFullRender) {
	          listenersToRegister.push([this.topOverlay.clone.wtTable.holder, 'wheel', function (event) {
	            return _this.onCloneWheel(event);
	          }]);
	        }
	
	        if (this.bottomOverlay.needFullRender) {
	          listenersToRegister.push([this.bottomOverlay.clone.wtTable.holder, 'wheel', function (event) {
	            return _this.onCloneWheel(event);
	          }]);
	        }
	
	        if (this.leftOverlay.needFullRender) {
	          listenersToRegister.push([this.leftOverlay.clone.wtTable.holder, 'wheel', function (event) {
	            return _this.onCloneWheel(event);
	          }]);
	        }
	
	        if (this.topLeftCornerOverlay && this.topLeftCornerOverlay.needFullRender) {
	          listenersToRegister.push([this.topLeftCornerOverlay.clone.wtTable.holder, 'wheel', function (event) {
	            return _this.onCloneWheel(event);
	          }]);
	        }
	
	        if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.needFullRender) {
	          listenersToRegister.push([this.bottomLeftCornerOverlay.clone.wtTable.holder, 'wheel', function (event) {
	            return _this.onCloneWheel(event);
	          }]);
	        }
	      }
	
	      if (this.topOverlay.trimmingContainer !== window && this.leftOverlay.trimmingContainer !== window) {
	        // This is necessary?
	        // eventManager.addEventListener(window, 'scroll', (event) => this.refreshAll(event));
	        listenersToRegister.push([window, 'wheel', function (event) {
	          var overlay = void 0;
	          var deltaY = event.wheelDeltaY || event.deltaY;
	          var deltaX = event.wheelDeltaX || event.deltaX;
	
	          if (_this.topOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	            overlay = 'top';
	          } else if (_this.bottomOverlay.clone && _this.bottomOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	            overlay = 'bottom';
	          } else if (_this.leftOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	            overlay = 'left';
	          } else if (_this.topLeftCornerOverlay && _this.topLeftCornerOverlay.clone && _this.topLeftCornerOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	            overlay = 'topLeft';
	          } else if (_this.bottomLeftCornerOverlay && _this.bottomLeftCornerOverlay.clone && _this.bottomLeftCornerOverlay.clone.wtTable.holder.contains(event.realTarget)) {
	            overlay = 'bottomLeft';
	          }
	
	          if (overlay === 'top' && deltaY !== 0 || overlay === 'left' && deltaX !== 0 || overlay === 'bottom' && deltaY !== 0 || (overlay === 'topLeft' || overlay === 'bottomLeft') && (deltaY !== 0 || deltaX !== 0)) {
	
	            event.preventDefault();
	          }
	        }]);
	      }
	
	      while (listenersToRegister.length) {
	        var listener = listenersToRegister.pop();
	        this.eventManager.addEventListener(listener[0], listener[1], listener[2]);
	
	        this.registeredListeners.push(listener);
	      }
	    }
	
	    /**
	     * Deregister all previously registered listeners.
	     */
	
	  }, {
	    key: 'deregisterListeners',
	    value: function deregisterListeners() {
	      while (this.registeredListeners.length) {
	        var listener = this.registeredListeners.pop();
	        this.eventManager.removeEventListener(listener[0], listener[1], listener[2]);
	      }
	    }
	
	    /**
	     * Scroll listener
	     *
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'onTableScroll',
	    value: function onTableScroll(event) {
	      // There was if statement which controlled flow of this function. It avoided the execution of the next lines
	      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.
	
	      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;
	      var masterVertical = this.topOverlay.mainTableScrollableElement;
	      var target = event.target;
	
	      // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered
	      // by hot.refreshBorder
	      if (this.keyPressed) {
	        if (masterVertical !== window && target !== window && !event.target.contains(masterVertical) || masterHorizontal !== window && target !== window && !event.target.contains(masterHorizontal)) {
	          return;
	        }
	      }
	
	      this.syncScrollPositions(event);
	    }
	
	    /**
	     * Wheel listener for cloned overlays.
	     *
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'onCloneWheel',
	    value: function onCloneWheel(event) {
	      if (this.scrollableElement !== window) {
	        event.preventDefault();
	      }
	      // There was if statement which controlled flow of this function. It avoided the execution of the next lines
	      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.
	
	      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;
	      var masterVertical = this.topOverlay.mainTableScrollableElement;
	      var target = event.target;
	
	      // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered
	      // by hot.refreshBorder
	      var shouldNotWheelVertically = masterVertical !== window && target !== window && !event.target.contains(masterVertical);
	      var shouldNotWheelHorizontally = masterHorizontal !== window && target !== window && !event.target.contains(masterHorizontal);
	
	      if (this.keyPressed && (shouldNotWheelVertically || shouldNotWheelHorizontally)) {
	        return;
	      }
	
	      this.translateMouseWheelToScroll(event);
	    }
	
	    /**
	     * Key down listener
	     */
	
	  }, {
	    key: 'onKeyDown',
	    value: function onKeyDown(event) {
	      this.keyPressed = (0, _unicode.isKey)(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');
	    }
	
	    /**
	     * Key up listener
	     */
	
	  }, {
	    key: 'onKeyUp',
	    value: function onKeyUp() {
	      this.keyPressed = false;
	    }
	
	    /**
	     * Translate wheel event into scroll event and sync scroll overlays position
	     *
	     * @private
	     * @param {Event} event
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'translateMouseWheelToScroll',
	    value: function translateMouseWheelToScroll(event) {
	      var deltaY = isNaN(event.deltaY) ? -1 * event.wheelDeltaY : event.deltaY;
	      var deltaX = isNaN(event.deltaX) ? -1 * event.wheelDeltaX : event.deltaX;
	
	      if (event.deltaMode === 1) {
	        deltaX += deltaX * this.browserLineHeight;
	        deltaY += deltaY * this.browserLineHeight;
	      }
	
	      this.scrollVertically(deltaY);
	      this.scrollHorizontally(deltaX);
	
	      return false;
	    }
	  }, {
	    key: 'scrollVertically',
	    value: function scrollVertically(distance) {
	      if (distance === 0) {
	        return 0;
	      }
	      this.scrollableElement.scrollTop += distance;
	    }
	  }, {
	    key: 'scrollHorizontally',
	    value: function scrollHorizontally(distance) {
	      if (distance === 0) {
	        return 0;
	      }
	      this.scrollableElement.scrollLeft += distance;
	    }
	
	    /**
	     * Synchronize scroll position between master table and overlay table.
	     *
	     * @private
	     * @param {Event|Object} event
	     */
	
	  }, {
	    key: 'syncScrollPositions',
	    value: function syncScrollPositions() {
	      if (this.destroyed) {
	        return;
	      }
	
	      var topHolder = this.topOverlay.clone.wtTable.holder;
	      var leftHolder = this.leftOverlay.clone.wtTable.holder;
	
	      var _ref = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop],
	          scrollLeft = _ref[0],
	          scrollTop = _ref[1];
	
	
	      this.horizontalScrolling = topHolder.scrollLeft !== scrollLeft;
	      this.verticalScrolling = leftHolder.scrollTop !== scrollTop;
	
	      if (this.horizontalScrolling) {
	        topHolder.scrollLeft = scrollLeft;
	
	        var bottomHolder = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;
	
	        if (bottomHolder) {
	          bottomHolder.scrollLeft = scrollLeft;
	        }
	      }
	
	      if (this.verticalScrolling) {
	        leftHolder.scrollTop = scrollTop;
	      }
	
	      this.refreshAll();
	    }
	
	    /**
	     * Synchronize overlay scrollbars with the master scrollbar
	     */
	
	  }, {
	    key: 'syncScrollWithMaster',
	    value: function syncScrollWithMaster() {
	      var master = this.topOverlay.mainTableScrollableElement;
	      var scrollLeft = master.scrollLeft,
	          scrollTop = master.scrollTop;
	
	
	      if (this.topOverlay.needFullRender) {
	        this.topOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;
	      }
	      if (this.bottomOverlay.needFullRender) {
	        this.bottomOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;
	      }
	      if (this.leftOverlay.needFullRender) {
	        this.leftOverlay.clone.wtTable.holder.scrollTop = scrollTop;
	      }
	    }
	
	    /**
	     * Update the main scrollable elements for all the overlays.
	     */
	
	  }, {
	    key: 'updateMainScrollableElements',
	    value: function updateMainScrollableElements() {
	      this.deregisterListeners();
	
	      this.leftOverlay.updateMainScrollableElement();
	      this.topOverlay.updateMainScrollableElement();
	
	      if (this.bottomOverlay.needFullRender) {
	        this.bottomOverlay.updateMainScrollableElement();
	      }
	
	      this.scrollableElement = (0, _element.getScrollableElement)(this.wot.wtTable.TABLE);
	
	      this.registerListeners();
	    }
	
	    /**
	     *
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.eventManager.destroy();
	      this.topOverlay.destroy();
	
	      if (this.bottomOverlay.clone) {
	        this.bottomOverlay.destroy();
	      }
	      this.leftOverlay.destroy();
	
	      if (this.topLeftCornerOverlay) {
	        this.topLeftCornerOverlay.destroy();
	      }
	
	      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	        this.bottomLeftCornerOverlay.destroy();
	      }
	
	      if (this.debug) {
	        this.debug.destroy();
	      }
	      this.destroyed = true;
	    }
	
	    /**
	     * @param {Boolean} [fastDraw=false]
	     */
	
	  }, {
	    key: 'refresh',
	    value: function refresh() {
	      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      if (this.topOverlay.areElementSizesAdjusted && this.leftOverlay.areElementSizesAdjusted) {
	        var container = this.wot.wtTable.wtRootElement.parentNode || this.wot.wtTable.wtRootElement;
	        var width = container.clientWidth;
	        var height = container.clientHeight;
	
	        if (width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height) {
	          this.spreaderLastSize.width = width;
	          this.spreaderLastSize.height = height;
	          this.adjustElementsSize();
	        }
	      }
	
	      if (this.bottomOverlay.clone) {
	        this.bottomOverlay.refresh(fastDraw);
	      }
	
	      this.leftOverlay.refresh(fastDraw);
	      this.topOverlay.refresh(fastDraw);
	
	      if (this.topLeftCornerOverlay) {
	        this.topLeftCornerOverlay.refresh(fastDraw);
	      }
	
	      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {
	        this.bottomLeftCornerOverlay.refresh(fastDraw);
	      }
	
	      if (this.debug) {
	        this.debug.refresh(fastDraw);
	      }
	    }
	
	    /**
	     * Adjust overlays elements size and master table size
	     *
	     * @param {Boolean} [force=false]
	     */
	
	  }, {
	    key: 'adjustElementsSize',
	    value: function adjustElementsSize() {
	      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      var totalColumns = this.wot.getSetting('totalColumns');
	      var totalRows = this.wot.getSetting('totalRows');
	      var headerRowSize = this.wot.wtViewport.getRowHeaderWidth();
	      var headerColumnSize = this.wot.wtViewport.getColumnHeaderHeight();
	      var hiderStyle = this.wot.wtTable.hider.style;
	
	      hiderStyle.width = headerRowSize + this.leftOverlay.sumCellSizes(0, totalColumns) + 'px';
	      hiderStyle.height = headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1 + 'px';
	
	      this.topOverlay.adjustElementsSize(force);
	      this.leftOverlay.adjustElementsSize(force);
	
	      if (this.bottomOverlay.clone) {
	        this.bottomOverlay.adjustElementsSize(force);
	      }
	    }
	
	    /**
	     *
	     */
	
	  }, {
	    key: 'applyToDOM',
	    value: function applyToDOM() {
	      if (!this.topOverlay.areElementSizesAdjusted || !this.leftOverlay.areElementSizesAdjusted) {
	        this.adjustElementsSize();
	      }
	      this.topOverlay.applyToDOM();
	
	      if (this.bottomOverlay.clone) {
	        this.bottomOverlay.applyToDOM();
	      }
	
	      this.leftOverlay.applyToDOM();
	    }
	
	    /**
	     * Get the parent overlay of the provided element.
	     *
	     * @param {HTMLElement} element
	     * @returns {Object|null}
	     */
	
	  }, {
	    key: 'getParentOverlay',
	    value: function getParentOverlay(element) {
	      if (!element) {
	        return null;
	      }
	
	      var overlays = [this.topOverlay, this.leftOverlay, this.bottomOverlay, this.topLeftCornerOverlay, this.bottomLeftCornerOverlay];
	      var result = null;
	
	      (0, _array.arrayEach)(overlays, function (elem) {
	        if (!elem) {
	          return;
	        }
	
	        if (elem.clone && elem.clone.wtTable.TABLE.contains(element)) {
	          result = elem.clone;
	        }
	      });
	
	      return result;
	    }
	  }]);
	
	  return Overlays;
	}();
	
	exports.default = Overlays;
	
	/***/ }),
	/* 184 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _number = __webpack_require__(6);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Scroll
	 */
	var Scroll = function () {
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function Scroll(wotInstance) {
	    _classCallCheck(this, Scroll);
	
	    this.wot = wotInstance;
	
	    // legacy support
	    this.instance = wotInstance;
	  }
	
	  /**
	   * Scrolls viewport to a cell.
	   *
	   * @param {CellCoords} coords
	   * @param {Boolean} [snapToTop]
	   * @param {Boolean} [snapToRight]
	   * @param {Boolean} [snapToBottom]
	   * @param {Boolean} [snapToLeft]
	   * @returns {Boolean}
	   */
	
	
	  _createClass(Scroll, [{
	    key: 'scrollViewport',
	    value: function scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {
	      var scrolledHorizontally = this.scrollViewportHorizontally(coords.col, snapToRight, snapToLeft);
	      var scrolledVertically = this.scrollViewportVertically(coords.row, snapToTop, snapToBottom);
	
	      return scrolledHorizontally || scrolledVertically;
	    }
	
	    /**
	     * Scrolls viewport to a column.
	     *
	     * @param {Number} column Visual column index.
	     * @param {Boolean} [snapToRight]
	     * @param {Boolean} [snapToLeft]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollViewportHorizontally',
	    value: function scrollViewportHorizontally(column, snapToRight, snapToLeft) {
	      if (!this.wot.drawn) {
	        return false;
	      }
	
	      var _getVariables2 = this._getVariables(),
	          fixedColumnsLeft = _getVariables2.fixedColumnsLeft,
	          leftOverlay = _getVariables2.leftOverlay,
	          totalColumns = _getVariables2.totalColumns;
	
	      var result = false;
	
	      if (column >= 0 && column <= Math.max(totalColumns - 1, 0)) {
	        if (column >= fixedColumnsLeft && (column < this.getFirstVisibleColumn() || snapToLeft)) {
	          result = leftOverlay.scrollTo(column);
	        } else if (column > this.getLastVisibleColumn() || snapToRight) {
	          result = leftOverlay.scrollTo(column, true);
	        }
	      }
	
	      return result;
	    }
	
	    /**
	     * Scrolls viewport to a row.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Boolean} [snapToTop]
	     * @param {Boolean} [snapToBottom]
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollViewportVertically',
	    value: function scrollViewportVertically(row, snapToTop, snapToBottom) {
	      if (!this.wot.drawn) {
	        return false;
	      }
	
	      var _getVariables3 = this._getVariables(),
	          fixedRowsBottom = _getVariables3.fixedRowsBottom,
	          fixedRowsTop = _getVariables3.fixedRowsTop,
	          topOverlay = _getVariables3.topOverlay,
	          totalRows = _getVariables3.totalRows;
	
	      var result = false;
	
	      if (row >= 0 && row <= Math.max(totalRows - 1, 0)) {
	        if (row >= fixedRowsTop && (row < this.getFirstVisibleRow() || snapToTop)) {
	          result = topOverlay.scrollTo(row);
	        } else if (row > this.getLastVisibleRow() && row < totalRows - fixedRowsBottom || snapToBottom) {
	          result = topOverlay.scrollTo(row, true);
	        }
	      }
	
	      return result;
	    }
	
	    /**
	     * Get first visible row based on virtual dom and how table is visible in browser window viewport.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getFirstVisibleRow',
	    value: function getFirstVisibleRow() {
	      var _getVariables4 = this._getVariables(),
	          topOverlay = _getVariables4.topOverlay,
	          wtTable = _getVariables4.wtTable,
	          wtViewport = _getVariables4.wtViewport,
	          totalRows = _getVariables4.totalRows,
	          fixedRowsTop = _getVariables4.fixedRowsTop;
	
	      var firstVisibleRow = wtTable.getFirstVisibleRow();
	
	      if (topOverlay.mainTableScrollableElement === window) {
	        var rootElementOffset = (0, _element.offset)(wtTable.wtRootElement);
	        var totalTableHeight = (0, _element.innerHeight)(wtTable.hider);
	        var windowHeight = (0, _element.innerHeight)(window);
	        var windowScrollTop = (0, _element.getScrollTop)(window);
	
	        // Only calculate firstVisibleRow when table didn't filled (from up) whole viewport space
	        if (rootElementOffset.top + totalTableHeight - windowHeight <= windowScrollTop) {
	          var rowsHeight = wtViewport.getColumnHeaderHeight();
	
	          rowsHeight += topOverlay.sumCellSizes(0, fixedRowsTop);
	
	          (0, _number.rangeEachReverse)(totalRows, 1, function (row) {
	            rowsHeight += topOverlay.sumCellSizes(row - 1, row);
	
	            if (rootElementOffset.top + totalTableHeight - rowsHeight <= windowScrollTop) {
	              // Return physical row + 1
	              firstVisibleRow = row;
	
	              return false;
	            }
	          });
	        }
	      }
	
	      return firstVisibleRow;
	    }
	
	    /**
	     * Get last visible row based on virtual dom and how table is visible in browser window viewport.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getLastVisibleRow',
	    value: function getLastVisibleRow() {
	      var _getVariables5 = this._getVariables(),
	          topOverlay = _getVariables5.topOverlay,
	          wtTable = _getVariables5.wtTable,
	          wtViewport = _getVariables5.wtViewport,
	          totalRows = _getVariables5.totalRows;
	
	      var lastVisibleRow = wtTable.getLastVisibleRow();
	
	      if (topOverlay.mainTableScrollableElement === window) {
	        var rootElementOffset = (0, _element.offset)(wtTable.wtRootElement);
	        var windowHeight = (0, _element.innerHeight)(window);
	        var windowScrollTop = (0, _element.getScrollTop)(window);
	
	        // Only calculate lastVisibleRow when table didn't filled (from bottom) whole viewport space
	        if (rootElementOffset.top > windowScrollTop) {
	          var rowsHeight = wtViewport.getColumnHeaderHeight();
	
	          (0, _number.rangeEach)(1, totalRows, function (row) {
	            rowsHeight += topOverlay.sumCellSizes(row - 1, row);
	
	            if (rootElementOffset.top + rowsHeight - windowScrollTop >= windowHeight) {
	              // Return physical row - 1 (-2 because rangeEach gives row index + 1 - sumCellSizes requirements)
	              lastVisibleRow = row - 2;
	
	              return false;
	            }
	          });
	        }
	      }
	
	      return lastVisibleRow;
	    }
	
	    /**
	     * Get first visible column based on virtual dom and how table is visible in browser window viewport.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getFirstVisibleColumn',
	    value: function getFirstVisibleColumn() {
	      var _getVariables6 = this._getVariables(),
	          leftOverlay = _getVariables6.leftOverlay,
	          wtTable = _getVariables6.wtTable,
	          wtViewport = _getVariables6.wtViewport,
	          totalColumns = _getVariables6.totalColumns;
	
	      var firstVisibleColumn = wtTable.getFirstVisibleColumn();
	
	      if (leftOverlay.mainTableScrollableElement === window) {
	        var rootElementOffset = (0, _element.offset)(wtTable.wtRootElement);
	        var totalTableWidth = (0, _element.innerWidth)(wtTable.hider);
	        var windowWidth = (0, _element.innerWidth)(window);
	        var windowScrollLeft = (0, _element.getScrollLeft)(window);
	
	        // Only calculate firstVisibleColumn when table didn't filled (from left) whole viewport space
	        if (rootElementOffset.left + totalTableWidth - windowWidth <= windowScrollLeft) {
	          var columnsWidth = wtViewport.getRowHeaderWidth();
	
	          (0, _number.rangeEachReverse)(totalColumns, 1, function (column) {
	            columnsWidth += leftOverlay.sumCellSizes(column - 1, column);
	
	            if (rootElementOffset.left + totalTableWidth - columnsWidth <= windowScrollLeft) {
	              // Return physical column + 1
	              firstVisibleColumn = column;
	
	              return false;
	            }
	          });
	        }
	      }
	
	      return firstVisibleColumn;
	    }
	
	    /**
	     * Get last visible column based on virtual dom and how table is visible in browser window viewport.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getLastVisibleColumn',
	    value: function getLastVisibleColumn() {
	      var _getVariables7 = this._getVariables(),
	          leftOverlay = _getVariables7.leftOverlay,
	          wtTable = _getVariables7.wtTable,
	          wtViewport = _getVariables7.wtViewport,
	          totalColumns = _getVariables7.totalColumns;
	
	      var lastVisibleColumn = wtTable.getLastVisibleColumn();
	
	      if (leftOverlay.mainTableScrollableElement === window) {
	        var rootElementOffset = (0, _element.offset)(wtTable.wtRootElement);
	        var windowWidth = (0, _element.innerWidth)(window);
	        var windowScrollLeft = (0, _element.getScrollLeft)(window);
	
	        // Only calculate lastVisibleColumn when table didn't filled (from right) whole viewport space
	        if (rootElementOffset.left > windowScrollLeft) {
	          var columnsWidth = wtViewport.getRowHeaderWidth();
	
	          (0, _number.rangeEach)(1, totalColumns, function (column) {
	            columnsWidth += leftOverlay.sumCellSizes(column - 1, column);
	
	            if (rootElementOffset.left + columnsWidth - windowScrollLeft >= windowWidth) {
	              // Return physical column - 1 (-2 because rangeEach gives column index + 1 - sumCellSizes requirements)
	              lastVisibleColumn = column - 2;
	
	              return false;
	            }
	          });
	        }
	      }
	
	      return lastVisibleColumn;
	    }
	
	    /**
	     * Returns collection of variables used to rows and columns visibility calculations.
	     *
	     * @returns {Object}
	     * @private
	     */
	
	  }, {
	    key: '_getVariables',
	    value: function _getVariables() {
	      var wot = this.wot;
	      var topOverlay = wot.wtOverlays.topOverlay;
	      var leftOverlay = wot.wtOverlays.leftOverlay;
	      var wtTable = wot.wtTable;
	      var wtViewport = wot.wtViewport;
	      var totalRows = wot.getSetting('totalRows');
	      var totalColumns = wot.getSetting('totalColumns');
	      var fixedRowsTop = wot.getSetting('fixedRowsTop');
	      var fixedRowsBottom = wot.getSetting('fixedRowsBottom');
	      var fixedColumnsLeft = wot.getSetting('fixedColumnsLeft');
	
	      return {
	        topOverlay: topOverlay,
	        leftOverlay: leftOverlay,
	        wtTable: wtTable,
	        wtViewport: wtViewport,
	        totalRows: totalRows,
	        totalColumns: totalColumns,
	        fixedRowsTop: fixedRowsTop,
	        fixedRowsBottom: fixedRowsBottom,
	        fixedColumnsLeft: fixedColumnsLeft
	      };
	    }
	  }]);
	
	  return Scroll;
	}();
	
	exports.default = Scroll;
	
	/***/ }),
	/* 185 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Settings
	 */
	var Settings = function () {
	  /**
	   * @param {Walkontable} wotInstance
	   * @param {Object} settings
	   */
	  function Settings(wotInstance, settings) {
	    var _this = this;
	
	    _classCallCheck(this, Settings);
	
	    this.wot = wotInstance;
	
	    // legacy support
	    this.instance = wotInstance;
	
	    // default settings. void 0 means it is required, null means it can be empty
	    this.defaults = {
	      table: void 0,
	      debug: false, // shows WalkontableDebugOverlay
	
	      // presentation mode
	      externalRowCalculator: false,
	      stretchH: 'none', // values: all, last, none
	      currentRowClassName: null,
	      currentColumnClassName: null,
	      preventOverflow: function preventOverflow() {
	        return false;
	      },
	
	
	      // data source
	      data: void 0,
	      freezeOverlays: false,
	      fixedColumnsLeft: 0,
	      fixedRowsTop: 0,
	      fixedRowsBottom: 0,
	      minSpareRows: 0,
	
	      // this must be array of functions: [function (row, TH) {}]
	      rowHeaders: function rowHeaders() {
	        return [];
	      },
	
	
	      // this must be array of functions: [function (column, TH) {}]
	      columnHeaders: function columnHeaders() {
	        return [];
	      },
	
	      totalRows: void 0,
	      totalColumns: void 0,
	      cellRenderer: function cellRenderer(row, column, TD) {
	        var cellData = _this.getSetting('data', row, column);
	
	        (0, _element.fastInnerText)(TD, cellData === void 0 || cellData === null ? '' : cellData);
	      },
	
	      // columnWidth: 50,
	      columnWidth: function columnWidth() {
	        // return undefined means use default size for the rendered cell content
	      },
	      rowHeight: function rowHeight() {
	        // return undefined means use default size for the rendered cell content
	      },
	
	      defaultRowHeight: 23,
	      defaultColumnWidth: 50,
	      selections: null,
	      hideBorderOnMouseDownOver: false,
	      viewportRowCalculatorOverride: null,
	      viewportColumnCalculatorOverride: null,
	
	      // callbacks
	      onCellMouseDown: null,
	      onCellContextMenu: null,
	      onCellMouseOver: null,
	      onCellMouseOut: null,
	      onCellMouseUp: null,
	
	      //    onCellMouseOut: null,
	      onCellDblClick: null,
	      onCellCornerMouseDown: null,
	      onCellCornerDblClick: null,
	      beforeDraw: null,
	      onDraw: null,
	      onBeforeRemoveCellClassNames: null,
	      onAfterDrawSelection: null,
	      onBeforeDrawBorders: null,
	      onScrollVertically: null,
	      onScrollHorizontally: null,
	      onBeforeTouchScroll: null,
	      onAfterMomentumScroll: null,
	      onBeforeStretchingColumnWidth: function onBeforeStretchingColumnWidth(width) {
	        return width;
	      },
	      onModifyRowHeaderWidth: null,
	      onModifyGetCellCoords: null,
	
	      // constants
	      scrollbarWidth: 10,
	      scrollbarHeight: 10,
	
	      renderAllRows: false,
	      groups: false,
	      rowHeaderWidth: null,
	      columnHeaderHeight: null,
	      headerClassName: null
	    };
	
	    // reference to settings
	    this.settings = {};
	
	    (0, _object.objectEach)(this.defaults, function (value, key) {
	      if (settings[key] !== void 0) {
	        _this.settings[key] = settings[key];
	      } else if (value === void 0) {
	        throw new Error('A required setting "' + key + '" was not provided');
	      } else {
	        _this.settings[key] = value;
	      }
	    });
	  }
	
	  /**
	   * Update settings
	   *
	   * @param {Object} settings
	   * @param {*} value
	   * @returns {Walkontable}
	   */
	
	
	  _createClass(Settings, [{
	    key: 'update',
	    value: function update(settings, value) {
	      var _this2 = this;
	
	      if (value === void 0) {
	        // settings is object
	        (0, _object.objectEach)(settings, function (settingValue, key) {
	          _this2.settings[key] = settingValue;
	        });
	      } else {
	        // if value is defined then settings is the key
	        this.settings[settings] = value;
	      }
	      return this.wot;
	    }
	
	    /**
	     * Get setting by name
	     *
	     * @param {String} key
	     * @param {*} param1
	     * @param {*} param2
	     * @param {*} param3
	     * @param {*} param4
	     * @returns {*}
	     */
	
	  }, {
	    key: 'getSetting',
	    value: function getSetting(key, param1, param2, param3, param4) {
	      if (typeof this.settings[key] === 'function') {
	        // this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
	        return this.settings[key](param1, param2, param3, param4);
	      } else if (param1 !== void 0 && Array.isArray(this.settings[key])) {
	        // perhaps this can be removed, it is only used in tests
	        return this.settings[key][param1];
	      }
	
	      return this.settings[key];
	    }
	
	    /**
	     * Checks if setting exists
	     *
	     * @param {Boolean} key
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'has',
	    value: function has(key) {
	      return !!this.settings[key];
	    }
	  }]);
	
	  return Settings;
	}();
	
	exports.default = Settings;
	
	/***/ }),
	/* 186 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _function = __webpack_require__(43);
	
	var _coords = __webpack_require__(56);
	
	var _coords2 = _interopRequireDefault(_coords);
	
	var _column = __webpack_require__(179);
	
	var _column2 = _interopRequireDefault(_column);
	
	var _row = __webpack_require__(180);
	
	var _row2 = _interopRequireDefault(_row);
	
	var _tableRenderer = __webpack_require__(187);
	
	var _tableRenderer2 = _interopRequireDefault(_tableRenderer);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 *
	 */
	var Table = function () {
	  /**
	   * @param {Walkontable} wotInstance
	   * @param {HTMLTableElement} table
	   */
	  function Table(wotInstance, table) {
	    var _this = this;
	
	    _classCallCheck(this, Table);
	
	    this.wot = wotInstance;
	
	    // legacy support
	    this.instance = this.wot;
	    this.TABLE = table;
	    this.TBODY = null;
	    this.THEAD = null;
	    this.COLGROUP = null;
	    this.tableOffset = 0;
	    this.holderOffset = 0;
	
	    (0, _element.removeTextNodes)(this.TABLE);
	
	    this.spreader = this.createSpreader(this.TABLE);
	    this.hider = this.createHider(this.spreader);
	    this.holder = this.createHolder(this.hider);
	
	    this.wtRootElement = this.holder.parentNode;
	    this.alignOverlaysWithTrimmingContainer();
	    this.fixTableDomTree();
	
	    this.colgroupChildrenLength = this.COLGROUP.childNodes.length;
	    this.theadChildrenLength = this.THEAD.firstChild ? this.THEAD.firstChild.childNodes.length : 0;
	    this.tbodyChildrenLength = this.TBODY.childNodes.length;
	
	    this.rowFilter = null;
	    this.columnFilter = null;
	    this.correctHeaderWidth = false;
	
	    var origRowHeaderWidth = this.wot.wtSettings.settings.rowHeaderWidth;
	
	    // Fix for jumping row headers (https://github.com/handsontable/handsontable/issues/3850)
	    this.wot.wtSettings.settings.rowHeaderWidth = function () {
	      return _this._modifyRowHeaderWidth(origRowHeaderWidth);
	    };
	  }
	
	  /**
	   *
	   */
	
	
	  _createClass(Table, [{
	    key: 'fixTableDomTree',
	    value: function fixTableDomTree() {
	      this.TBODY = this.TABLE.querySelector('tbody');
	
	      if (!this.TBODY) {
	        this.TBODY = document.createElement('tbody');
	        this.TABLE.appendChild(this.TBODY);
	      }
	      this.THEAD = this.TABLE.querySelector('thead');
	
	      if (!this.THEAD) {
	        this.THEAD = document.createElement('thead');
	        this.TABLE.insertBefore(this.THEAD, this.TBODY);
	      }
	      this.COLGROUP = this.TABLE.querySelector('colgroup');
	
	      if (!this.COLGROUP) {
	        this.COLGROUP = document.createElement('colgroup');
	        this.TABLE.insertBefore(this.COLGROUP, this.THEAD);
	      }
	
	      if (this.wot.getSetting('columnHeaders').length && !this.THEAD.childNodes.length) {
	        this.THEAD.appendChild(document.createElement('TR'));
	      }
	    }
	
	    /**
	     * @param table
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createSpreader',
	    value: function createSpreader(table) {
	      var parent = table.parentNode;
	      var spreader = void 0;
	
	      if (!parent || parent.nodeType !== 1 || !(0, _element.hasClass)(parent, 'wtHolder')) {
	        spreader = document.createElement('div');
	        spreader.className = 'wtSpreader';
	
	        if (parent) {
	          // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
	          parent.insertBefore(spreader, table);
	        }
	        spreader.appendChild(table);
	      }
	      spreader.style.position = 'relative';
	
	      return spreader;
	    }
	
	    /**
	     * @param spreader
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createHider',
	    value: function createHider(spreader) {
	      var parent = spreader.parentNode;
	      var hider = void 0;
	
	      if (!parent || parent.nodeType !== 1 || !(0, _element.hasClass)(parent, 'wtHolder')) {
	        hider = document.createElement('div');
	        hider.className = 'wtHider';
	
	        if (parent) {
	          // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
	          parent.insertBefore(hider, spreader);
	        }
	        hider.appendChild(spreader);
	      }
	
	      return hider;
	    }
	
	    /**
	     *
	     * @param hider
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createHolder',
	    value: function createHolder(hider) {
	      var parent = hider.parentNode;
	      var holder = void 0;
	
	      if (!parent || parent.nodeType !== 1 || !(0, _element.hasClass)(parent, 'wtHolder')) {
	        holder = document.createElement('div');
	        holder.style.position = 'relative';
	        holder.className = 'wtHolder';
	
	        if (parent) {
	          // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
	          parent.insertBefore(holder, hider);
	        }
	        if (!this.isWorkingOnClone()) {
	          holder.parentNode.className += 'ht_master handsontable';
	        }
	        holder.appendChild(hider);
	      }
	
	      return holder;
	    }
	  }, {
	    key: 'alignOverlaysWithTrimmingContainer',
	    value: function alignOverlaysWithTrimmingContainer() {
	      var trimmingElement = (0, _element.getTrimmingContainer)(this.wtRootElement);
	
	      if (!this.isWorkingOnClone()) {
	        this.holder.parentNode.style.position = 'relative';
	
	        if (trimmingElement === window) {
	          var preventOverflow = this.wot.getSetting('preventOverflow');
	
	          if (!preventOverflow) {
	            this.holder.style.overflow = 'visible';
	            this.wtRootElement.style.overflow = 'visible';
	          }
	        } else {
	          this.holder.style.width = (0, _element.getStyle)(trimmingElement, 'width');
	          this.holder.style.height = (0, _element.getStyle)(trimmingElement, 'height');
	          this.holder.style.overflow = '';
	        }
	      }
	    }
	  }, {
	    key: 'isWorkingOnClone',
	    value: function isWorkingOnClone() {
	      return !!this.wot.cloneSource;
	    }
	
	    /**
	     * Redraws the table
	     *
	     * @param {Boolean} fastDraw If TRUE, will try to avoid full redraw and only update the border positions. If FALSE or UNDEFINED, will perform a full redraw
	     * @returns {Table}
	     */
	
	  }, {
	    key: 'draw',
	    value: function draw(fastDraw) {
	      var _wot = this.wot,
	          wtOverlays = _wot.wtOverlays,
	          wtViewport = _wot.wtViewport;
	
	      var totalRows = this.instance.getSetting('totalRows');
	      var rowHeaders = this.wot.getSetting('rowHeaders').length;
	      var columnHeaders = this.wot.getSetting('columnHeaders').length;
	      var syncScroll = false;
	      var runFastDraw = fastDraw;
	
	      if (!this.isWorkingOnClone()) {
	        this.holderOffset = (0, _element.offset)(this.holder);
	        runFastDraw = wtViewport.createRenderCalculators(runFastDraw);
	
	        if (rowHeaders && !this.wot.getSetting('fixedColumnsLeft')) {
	          var leftScrollPos = wtOverlays.leftOverlay.getScrollPosition();
	          var previousState = this.correctHeaderWidth;
	
	          this.correctHeaderWidth = leftScrollPos > 0;
	
	          if (previousState !== this.correctHeaderWidth) {
	            runFastDraw = false;
	          }
	        }
	      }
	
	      if (!this.isWorkingOnClone()) {
	        syncScroll = wtOverlays.prepareOverlays();
	      }
	
	      if (runFastDraw) {
	        if (!this.isWorkingOnClone()) {
	          // in case we only scrolled without redraw, update visible rows information in oldRowsCalculator
	          wtViewport.createVisibleCalculators();
	        }
	        if (wtOverlays) {
	          wtOverlays.refresh(true);
	        }
	      } else {
	        if (this.isWorkingOnClone()) {
	          this.tableOffset = this.wot.cloneSource.wtTable.tableOffset;
	        } else {
	          this.tableOffset = (0, _element.offset)(this.TABLE);
	        }
	        var startRow = void 0;
	
	        if (_base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_DEBUG) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_TOP) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_TOP_LEFT_CORNER)) {
	          startRow = 0;
	        } else if (_base2.default.isOverlayTypeOf(this.instance.cloneOverlay, _base2.default.CLONE_BOTTOM) || _base2.default.isOverlayTypeOf(this.instance.cloneOverlay, _base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	          startRow = Math.max(totalRows - this.wot.getSetting('fixedRowsBottom'), 0);
	        } else {
	          startRow = wtViewport.rowsRenderCalculator.startRow;
	        }
	        var startColumn = void 0;
	
	        if (_base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_DEBUG) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_LEFT) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_TOP_LEFT_CORNER) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	          startColumn = 0;
	        } else {
	          startColumn = wtViewport.columnsRenderCalculator.startColumn;
	        }
	        this.rowFilter = new _row2.default(startRow, totalRows, columnHeaders);
	        this.columnFilter = new _column2.default(startColumn, this.wot.getSetting('totalColumns'), rowHeaders);
	
	        this.alignOverlaysWithTrimmingContainer();
	        this._doDraw(); // creates calculator after draw
	      }
	      this.refreshSelections(runFastDraw);
	
	      if (!this.isWorkingOnClone()) {
	        wtOverlays.topOverlay.resetFixedPosition();
	
	        if (wtOverlays.bottomOverlay.clone) {
	          wtOverlays.bottomOverlay.resetFixedPosition();
	        }
	
	        wtOverlays.leftOverlay.resetFixedPosition();
	
	        if (wtOverlays.topLeftCornerOverlay) {
	          wtOverlays.topLeftCornerOverlay.resetFixedPosition();
	        }
	
	        if (wtOverlays.bottomLeftCornerOverlay && wtOverlays.bottomLeftCornerOverlay.clone) {
	          wtOverlays.bottomLeftCornerOverlay.resetFixedPosition();
	        }
	      }
	      if (syncScroll) {
	        wtOverlays.syncScrollWithMaster();
	      }
	      this.wot.drawn = true;
	
	      return this;
	    }
	  }, {
	    key: '_doDraw',
	    value: function _doDraw() {
	      var wtRenderer = new _tableRenderer2.default(this);
	
	      wtRenderer.render();
	    }
	  }, {
	    key: 'removeClassFromCells',
	    value: function removeClassFromCells(className) {
	      var nodes = this.TABLE.querySelectorAll('.' + className);
	
	      for (var i = 0, len = nodes.length; i < len; i++) {
	        (0, _element.removeClass)(nodes[i], className);
	      }
	    }
	
	    /**
	     * Refresh the table selection by re-rendering Selection instances connected with that instance.
	     *
	     * @param {Boolean} fastDraw If fast drawing is enabled than additionally className clearing is applied.
	     */
	
	  }, {
	    key: 'refreshSelections',
	    value: function refreshSelections(fastDraw) {
	      if (!this.wot.selections) {
	        return;
	      }
	      var highlights = Array.from(this.wot.selections);
	      var len = highlights.length;
	
	      if (fastDraw) {
	        var classesToRemove = [];
	
	        for (var i = 0; i < len; i++) {
	          var _highlights$i$setting = highlights[i].settings,
	              highlightHeaderClassName = _highlights$i$setting.highlightHeaderClassName,
	              highlightRowClassName = _highlights$i$setting.highlightRowClassName,
	              highlightColumnClassName = _highlights$i$setting.highlightColumnClassName;
	
	          var classNames = highlights[i].classNames;
	          var classNamesLength = classNames.length;
	
	          for (var j = 0; j < classNamesLength; j++) {
	            if (!classesToRemove.includes(classNames[j])) {
	              classesToRemove.push(classNames[j]);
	            }
	          }
	
	          if (highlightHeaderClassName && !classesToRemove.includes(highlightHeaderClassName)) {
	            classesToRemove.push(highlightHeaderClassName);
	          }
	          if (highlightRowClassName && !classesToRemove.includes(highlightRowClassName)) {
	            classesToRemove.push(highlightRowClassName);
	          }
	          if (highlightColumnClassName && !classesToRemove.includes(highlightColumnClassName)) {
	            classesToRemove.push(highlightColumnClassName);
	          }
	        }
	
	        var additionalClassesToRemove = this.wot.getSetting('onBeforeRemoveCellClassNames');
	
	        if (Array.isArray(additionalClassesToRemove)) {
	          for (var _i = 0; _i < additionalClassesToRemove.length; _i++) {
	            classesToRemove.push(additionalClassesToRemove[_i]);
	          }
	        }
	
	        var classesToRemoveLength = classesToRemove.length;
	
	        for (var _i2 = 0; _i2 < classesToRemoveLength; _i2++) {
	          // there was no rerender, so we need to remove classNames by ourselves
	          this.removeClassFromCells(classesToRemove[_i2]);
	        }
	      }
	
	      for (var _i3 = 0; _i3 < len; _i3++) {
	        highlights[_i3].draw(this.wot, fastDraw);
	      }
	    }
	
	    /**
	     * Get cell element at coords.
	     *
	     * @param {CellCoords} coords
	     * @returns {HTMLElement|Number} HTMLElement on success or Number one of the exit codes on error:
	     *  -1 row before viewport
	     *  -2 row after viewport
	     */
	
	  }, {
	    key: 'getCell',
	    value: function getCell(coords) {
	      var row = coords.row;
	      var column = coords.col;
	      var hookResult = this.wot.getSetting('onModifyGetCellCoords', row, column);
	
	      if (hookResult && Array.isArray(hookResult)) {
	        var _hookResult = _slicedToArray(hookResult, 2);
	
	        row = _hookResult[0];
	        column = _hookResult[1];
	      }
	
	      if (this.isRowBeforeRenderedRows(row)) {
	        // row before rendered rows
	        return -1;
	      } else if (this.isRowAfterRenderedRows(row)) {
	        // row after rendered rows
	        return -2;
	      }
	
	      var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	
	      if (TR) {
	        return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(column)];
	      }
	    }
	
	    /**
	     * getColumnHeader
	     *
	     * @param {Number} col Column index
	     * @param {Number} [level=0] Header level (0 = most distant to the table)
	     * @returns {Object} HTMLElement on success or undefined on error
	     */
	
	  }, {
	    key: 'getColumnHeader',
	    value: function getColumnHeader(col) {
	      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	      var TR = this.THEAD.childNodes[level];
	
	      if (TR) {
	        return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];
	      }
	    }
	
	    /**
	     * getRowHeader
	     *
	     * @param {Number} row Row index
	     * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have row headers`
	     */
	
	  }, {
	    key: 'getRowHeader',
	    value: function getRowHeader(row) {
	      if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0) {
	        return null;
	      }
	      var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	
	      if (TR) {
	        return TR.childNodes[0];
	      }
	    }
	
	    /**
	     * Returns cell coords object for a given TD (or a child element of a TD element).
	     *
	     * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).
	     * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the provided element is not applicable.
	     */
	
	  }, {
	    key: 'getCoords',
	    value: function getCoords(TD) {
	      var cellElement = TD;
	
	      if (cellElement.nodeName !== 'TD' && cellElement.nodeName !== 'TH') {
	        cellElement = (0, _element.closest)(cellElement, ['TD', 'TH']);
	      }
	
	      if (cellElement === null) {
	        return null;
	      }
	
	      var TR = cellElement.parentNode;
	      var CONTAINER = TR.parentNode;
	      var row = (0, _element.index)(TR);
	      var col = cellElement.cellIndex;
	
	      if ((0, _element.overlayContainsElement)(_base2.default.CLONE_TOP_LEFT_CORNER, cellElement) || (0, _element.overlayContainsElement)(_base2.default.CLONE_TOP, cellElement)) {
	        if (CONTAINER.nodeName === 'THEAD') {
	          row -= CONTAINER.childNodes.length;
	        }
	      } else if (CONTAINER === this.THEAD) {
	        row = this.rowFilter.visibleColHeadedRowToSourceRow(row);
	      } else {
	        row = this.rowFilter.renderedToSource(row);
	      }
	
	      if ((0, _element.overlayContainsElement)(_base2.default.CLONE_TOP_LEFT_CORNER, cellElement) || (0, _element.overlayContainsElement)(_base2.default.CLONE_LEFT, cellElement)) {
	        col = this.columnFilter.offsettedTH(col);
	      } else {
	        col = this.columnFilter.visibleRowHeadedColumnToSourceColumn(col);
	      }
	
	      return new _coords2.default(row, col);
	    }
	  }, {
	    key: 'getTrForRow',
	    value: function getTrForRow(row) {
	      return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];
	    }
	  }, {
	    key: 'getFirstRenderedRow',
	    value: function getFirstRenderedRow() {
	      return this.wot.wtViewport.rowsRenderCalculator.startRow;
	    }
	  }, {
	    key: 'getFirstVisibleRow',
	    value: function getFirstVisibleRow() {
	      return this.wot.wtViewport.rowsVisibleCalculator.startRow;
	    }
	  }, {
	    key: 'getFirstRenderedColumn',
	    value: function getFirstRenderedColumn() {
	      return this.wot.wtViewport.columnsRenderCalculator.startColumn;
	    }
	
	    /**
	     * @returns {Number} Returns -1 if no row is visible
	     */
	
	  }, {
	    key: 'getFirstVisibleColumn',
	    value: function getFirstVisibleColumn() {
	      return this.wot.wtViewport.columnsVisibleCalculator.startColumn;
	    }
	
	    /**
	     * @returns {Number} Returns -1 if no row is visible
	     */
	
	  }, {
	    key: 'getLastRenderedRow',
	    value: function getLastRenderedRow() {
	      return this.wot.wtViewport.rowsRenderCalculator.endRow;
	    }
	  }, {
	    key: 'getLastVisibleRow',
	    value: function getLastVisibleRow() {
	      return this.wot.wtViewport.rowsVisibleCalculator.endRow;
	    }
	  }, {
	    key: 'getLastRenderedColumn',
	    value: function getLastRenderedColumn() {
	      return this.wot.wtViewport.columnsRenderCalculator.endColumn;
	    }
	
	    /**
	     * @returns {Number} Returns -1 if no column is visible
	     */
	
	  }, {
	    key: 'getLastVisibleColumn',
	    value: function getLastVisibleColumn() {
	      return this.wot.wtViewport.columnsVisibleCalculator.endColumn;
	    }
	  }, {
	    key: 'isRowBeforeRenderedRows',
	    value: function isRowBeforeRenderedRows(row) {
	      return this.rowFilter && this.rowFilter.sourceToRendered(row) < 0 && row >= 0;
	    }
	  }, {
	    key: 'isRowAfterViewport',
	    value: function isRowAfterViewport(row) {
	      return this.rowFilter && this.rowFilter.sourceToRendered(row) > this.getLastVisibleRow();
	    }
	  }, {
	    key: 'isRowAfterRenderedRows',
	    value: function isRowAfterRenderedRows(row) {
	      return this.rowFilter && this.rowFilter.sourceToRendered(row) > this.getLastRenderedRow();
	    }
	  }, {
	    key: 'isColumnBeforeViewport',
	    value: function isColumnBeforeViewport(column) {
	      return this.columnFilter && this.columnFilter.sourceToRendered(column) < 0 && column >= 0;
	    }
	  }, {
	    key: 'isColumnAfterViewport',
	    value: function isColumnAfterViewport(column) {
	      return this.columnFilter && this.columnFilter.sourceToRendered(column) > this.getLastVisibleColumn();
	    }
	  }, {
	    key: 'isLastRowFullyVisible',
	    value: function isLastRowFullyVisible() {
	      return this.getLastVisibleRow() === this.getLastRenderedRow();
	    }
	  }, {
	    key: 'isLastColumnFullyVisible',
	    value: function isLastColumnFullyVisible() {
	      return this.getLastVisibleColumn() === this.getLastRenderedColumn();
	    }
	  }, {
	    key: 'getRenderedColumnsCount',
	    value: function getRenderedColumnsCount() {
	      var columnsCount = this.wot.wtViewport.columnsRenderCalculator.count;
	      var totalColumns = this.wot.getSetting('totalColumns');
	
	      if (this.wot.isOverlayName(_base2.default.CLONE_DEBUG)) {
	        columnsCount = totalColumns;
	      } else if (this.wot.isOverlayName(_base2.default.CLONE_LEFT) || this.wot.isOverlayName(_base2.default.CLONE_TOP_LEFT_CORNER) || this.wot.isOverlayName(_base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	        return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);
	      }
	
	      return columnsCount;
	    }
	  }, {
	    key: 'getRenderedRowsCount',
	    value: function getRenderedRowsCount() {
	      var rowsCount = this.wot.wtViewport.rowsRenderCalculator.count;
	      var totalRows = this.wot.getSetting('totalRows');
	
	      if (this.wot.isOverlayName(_base2.default.CLONE_DEBUG)) {
	        rowsCount = totalRows;
	      } else if (this.wot.isOverlayName(_base2.default.CLONE_TOP) || this.wot.isOverlayName(_base2.default.CLONE_TOP_LEFT_CORNER)) {
	        rowsCount = Math.min(this.wot.getSetting('fixedRowsTop'), totalRows);
	      } else if (this.wot.isOverlayName(_base2.default.CLONE_BOTTOM) || this.wot.isOverlayName(_base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	        rowsCount = Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);
	      }
	
	      return rowsCount;
	    }
	  }, {
	    key: 'getVisibleRowsCount',
	    value: function getVisibleRowsCount() {
	      return this.wot.wtViewport.rowsVisibleCalculator.count;
	    }
	  }, {
	    key: 'allRowsInViewport',
	    value: function allRowsInViewport() {
	      return this.wot.getSetting('totalRows') === this.getVisibleRowsCount();
	    }
	
	    /**
	     * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height
	     *
	     * @param {Number} sourceRow
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getRowHeight',
	    value: function getRowHeight(sourceRow) {
	      var height = this.wot.wtSettings.settings.rowHeight(sourceRow);
	      var oversizedHeight = this.wot.wtViewport.oversizedRows[sourceRow];
	
	      if (oversizedHeight !== void 0) {
	        height = height === void 0 ? oversizedHeight : Math.max(height, oversizedHeight);
	      }
	
	      return height;
	    }
	  }, {
	    key: 'getColumnHeaderHeight',
	    value: function getColumnHeaderHeight(level) {
	      var height = this.wot.wtSettings.settings.defaultRowHeight;
	      var oversizedHeight = this.wot.wtViewport.oversizedColumnHeaders[level];
	
	      if (oversizedHeight !== void 0) {
	        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;
	      }
	
	      return height;
	    }
	  }, {
	    key: 'getVisibleColumnsCount',
	    value: function getVisibleColumnsCount() {
	      return this.wot.wtViewport.columnsVisibleCalculator.count;
	    }
	  }, {
	    key: 'allColumnsInViewport',
	    value: function allColumnsInViewport() {
	      return this.wot.getSetting('totalColumns') === this.getVisibleColumnsCount();
	    }
	  }, {
	    key: 'getColumnWidth',
	    value: function getColumnWidth(sourceColumn) {
	      var width = this.wot.wtSettings.settings.columnWidth;
	
	      if (typeof width === 'function') {
	        width = width(sourceColumn);
	      } else if ((typeof width === 'undefined' ? 'undefined' : _typeof(width)) === 'object') {
	        width = width[sourceColumn];
	      }
	
	      return width || this.wot.wtSettings.settings.defaultColumnWidth;
	    }
	  }, {
	    key: 'getStretchedColumnWidth',
	    value: function getStretchedColumnWidth(sourceColumn) {
	      var columnWidth = this.getColumnWidth(sourceColumn);
	      var width = columnWidth === null || columnWidth === void 0 ? this.instance.wtSettings.settings.defaultColumnWidth : columnWidth;
	      var calculator = this.wot.wtViewport.columnsRenderCalculator;
	
	      if (calculator) {
	        var stretchedWidth = calculator.getStretchedColumnWidth(sourceColumn, width);
	
	        if (stretchedWidth) {
	          width = stretchedWidth;
	        }
	      }
	
	      return width;
	    }
	
	    /**
	     * Modify row header widths provided by user in class contructor.
	     *
	     * @private
	     */
	
	  }, {
	    key: '_modifyRowHeaderWidth',
	    value: function _modifyRowHeaderWidth(rowHeaderWidthFactory) {
	      var widths = (0, _function.isFunction)(rowHeaderWidthFactory) ? rowHeaderWidthFactory() : null;
	
	      if (Array.isArray(widths)) {
	        widths = [].concat(_toConsumableArray(widths));
	        widths[widths.length - 1] = this._correctRowHeaderWidth(widths[widths.length - 1]);
	      } else {
	        widths = this._correctRowHeaderWidth(widths);
	      }
	
	      return widths;
	    }
	
	    /**
	     * Correct row header width if necessary.
	     *
	     * @private
	     */
	
	  }, {
	    key: '_correctRowHeaderWidth',
	    value: function _correctRowHeaderWidth(width) {
	      var rowHeaderWidth = width;
	
	      if (typeof width !== 'number') {
	        rowHeaderWidth = this.wot.getSetting('defaultColumnWidth');
	      }
	      if (this.correctHeaderWidth) {
	        rowHeaderWidth += 1;
	      }
	
	      return rowHeaderWidth;
	    }
	  }]);
	
	  return Table;
	}();
	
	exports.default = Table;
	
	/***/ }),
	/* 187 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _templateObject = _taggedTemplateLiteral(['Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting the number \n          of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.'], ['Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting the number \n          of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.']);
	
	var _element = __webpack_require__(0);
	
	var _console = __webpack_require__(58);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var performanceWarningAppeared = false;
	
	/**
	 * @class TableRenderer
	 */
	
	var TableRenderer = function () {
	  /**
	   * @param {WalkontableTable} wtTable
	   */
	  function TableRenderer(wtTable) {
	    _classCallCheck(this, TableRenderer);
	
	    this.wtTable = wtTable;
	    this.wot = wtTable.instance;
	
	    // legacy support
	    this.instance = wtTable.instance;
	
	    this.rowFilter = wtTable.rowFilter;
	    this.columnFilter = wtTable.columnFilter;
	
	    this.TABLE = wtTable.TABLE;
	    this.THEAD = wtTable.THEAD;
	    this.TBODY = wtTable.TBODY;
	    this.COLGROUP = wtTable.COLGROUP;
	
	    this.rowHeaders = [];
	    this.rowHeaderCount = 0;
	    this.columnHeaders = [];
	    this.columnHeaderCount = 0;
	    this.fixedRowsTop = 0;
	    this.fixedRowsBottom = 0;
	  }
	
	  /**
	   *
	   */
	
	
	  _createClass(TableRenderer, [{
	    key: 'render',
	    value: function render() {
	      if (!this.wtTable.isWorkingOnClone()) {
	        var skipRender = {};
	        this.wot.getSetting('beforeDraw', true, skipRender);
	
	        if (skipRender.skipRender === true) {
	          return;
	        }
	      }
	
	      this.rowHeaders = this.wot.getSetting('rowHeaders');
	      this.rowHeaderCount = this.rowHeaders.length;
	      this.fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	      this.fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	      this.columnHeaders = this.wot.getSetting('columnHeaders');
	      this.columnHeaderCount = this.columnHeaders.length;
	
	      var columnsToRender = this.wtTable.getRenderedColumnsCount();
	      var rowsToRender = this.wtTable.getRenderedRowsCount();
	      var totalColumns = this.wot.getSetting('totalColumns');
	      var totalRows = this.wot.getSetting('totalRows');
	      var workspaceWidth = void 0;
	      var adjusted = false;
	
	      if (_base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_BOTTOM) || _base2.default.isOverlayTypeOf(this.wot.cloneOverlay, _base2.default.CLONE_BOTTOM_LEFT_CORNER)) {
	
	        // do NOT render headers on the bottom or bottom-left corner overlay
	        this.columnHeaders = [];
	        this.columnHeaderCount = 0;
	      }
	
	      if (totalColumns >= 0) {
	        // prepare COL and TH elements for rendering
	        this.adjustAvailableNodes();
	        adjusted = true;
	
	        // adjust column widths according to user widths settings
	        this.renderColumnHeaders();
	
	        // Render table rows
	        this.renderRows(totalRows, rowsToRender, columnsToRender);
	
	        if (!this.wtTable.isWorkingOnClone()) {
	          workspaceWidth = this.wot.wtViewport.getWorkspaceWidth();
	          this.wot.wtViewport.containerWidth = null;
	        }
	
	        this.adjustColumnWidths(columnsToRender);
	        this.markOversizedColumnHeaders();
	        this.adjustColumnHeaderHeights();
	      }
	
	      if (!adjusted) {
	        this.adjustAvailableNodes();
	      }
	      this.removeRedundantRows(rowsToRender);
	
	      if (!this.wtTable.isWorkingOnClone() || this.wot.isOverlayName(_base2.default.CLONE_BOTTOM)) {
	        this.markOversizedRows();
	      }
	      if (!this.wtTable.isWorkingOnClone()) {
	        this.wot.wtViewport.createVisibleCalculators();
	        this.wot.wtOverlays.refresh(false);
	
	        this.wot.wtOverlays.applyToDOM();
	
	        var hiderWidth = (0, _element.outerWidth)(this.wtTable.hider);
	        var tableWidth = (0, _element.outerWidth)(this.wtTable.TABLE);
	
	        if (hiderWidth !== 0 && tableWidth !== hiderWidth) {
	          // Recalculate the column widths, if width changes made in the overlays removed the scrollbar, thus changing the viewport width.
	          this.adjustColumnWidths(columnsToRender);
	        }
	
	        if (workspaceWidth !== this.wot.wtViewport.getWorkspaceWidth()) {
	          // workspace width changed though to shown/hidden vertical scrollbar. Let's reapply stretching
	          this.wot.wtViewport.containerWidth = null;
	
	          var firstRendered = this.wtTable.getFirstRenderedColumn();
	          var lastRendered = this.wtTable.getLastRenderedColumn();
	          var defaultColumnWidth = this.wot.getSetting('defaultColumnWidth');
	          var rowHeaderWidthSetting = this.wot.getSetting('rowHeaderWidth');
	
	          rowHeaderWidthSetting = this.instance.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);
	
	          if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {
	            for (var i = 0; i < this.rowHeaderCount; i++) {
	              var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[i] : rowHeaderWidthSetting;
	
	              width = width === null || width === void 0 ? defaultColumnWidth : width;
	
	              this.COLGROUP.childNodes[i].style.width = width + 'px';
	            }
	          }
	
	          for (var _i = firstRendered; _i < lastRendered; _i++) {
	            var _width = this.wtTable.getStretchedColumnWidth(_i);
	            var renderedIndex = this.columnFilter.sourceToRendered(_i);
	
	            this.COLGROUP.childNodes[renderedIndex + this.rowHeaderCount].style.width = _width + 'px';
	          }
	        }
	
	        this.wot.getSetting('onDraw', true);
	      } else if (this.wot.isOverlayName(_base2.default.CLONE_BOTTOM)) {
	        this.wot.cloneSource.wtOverlays.adjustElementsSize();
	      }
	    }
	
	    /**
	     * @param {Number} renderedRowsCount
	     */
	
	  }, {
	    key: 'removeRedundantRows',
	    value: function removeRedundantRows(renderedRowsCount) {
	      while (this.wtTable.tbodyChildrenLength > renderedRowsCount) {
	        this.TBODY.removeChild(this.TBODY.lastChild);
	        this.wtTable.tbodyChildrenLength -= 1;
	      }
	    }
	
	    /**
	     * @param {Number} totalRows
	     * @param {Number} rowsToRender
	     * @param {Number} columnsToRender
	     */
	
	  }, {
	    key: 'renderRows',
	    value: function renderRows(totalRows, rowsToRender, columnsToRender) {
	      var TR = void 0;
	      var visibleRowIndex = 0;
	      var sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	      var isWorkingOnClone = this.wtTable.isWorkingOnClone();
	
	      while (sourceRowIndex < totalRows && sourceRowIndex >= 0) {
	        if (!performanceWarningAppeared && visibleRowIndex > 1000) {
	          performanceWarningAppeared = true;
	          (0, _console.warn)((0, _templateLiteralTag.toSingleLine)(_templateObject));
	        }
	        if (rowsToRender !== void 0 && visibleRowIndex === rowsToRender) {
	          // We have as much rows as needed for this clone
	          break;
	        }
	        TR = this.getOrCreateTrForRow(visibleRowIndex, TR);
	
	        // Render row headers
	        this.renderRowHeaders(sourceRowIndex, TR);
	        // Add and/or remove TDs to TR to match the desired number
	        this.adjustColumns(TR, columnsToRender + this.rowHeaderCount);
	        // Render cells
	        this.renderCells(sourceRowIndex, TR, columnsToRender);
	
	        if (!isWorkingOnClone ||
	        // Necessary to refresh oversized row heights after editing cell in overlays
	        this.wot.isOverlayName(_base2.default.CLONE_BOTTOM)) {
	          // Reset the oversized row cache for this row
	          this.resetOversizedRow(sourceRowIndex);
	        }
	
	        if (TR.firstChild) {
	          // if I have 2 fixed columns with one-line content and the 3rd column has a multiline content, this is
	          // the way to make sure that the overlay will has same row height
	          var height = this.wot.wtTable.getRowHeight(sourceRowIndex);
	
	          if (height) {
	            // Decrease height. 1 pixel will be "replaced" by 1px border top
	            height -= 1;
	            TR.firstChild.style.height = height + 'px';
	          } else {
	            TR.firstChild.style.height = '';
	          }
	        }
	        visibleRowIndex += 1;
	        sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);
	      }
	    }
	
	    /**
	     * Reset the oversized row cache for the provided index
	     *
	     * @param {Number} sourceRow Row index
	     */
	
	  }, {
	    key: 'resetOversizedRow',
	    value: function resetOversizedRow(sourceRow) {
	      if (this.wot.getSetting('externalRowCalculator')) {
	        return;
	      }
	      if (this.wot.wtViewport.oversizedRows && this.wot.wtViewport.oversizedRows[sourceRow]) {
	        this.wot.wtViewport.oversizedRows[sourceRow] = void 0;
	      }
	    }
	
	    /**
	     * Check if any of the rendered rows is higher than expected, and if so, cache them
	     */
	
	  }, {
	    key: 'markOversizedRows',
	    value: function markOversizedRows() {
	      if (this.wot.getSetting('externalRowCalculator')) {
	        return;
	      }
	      var rowCount = this.instance.wtTable.TBODY.childNodes.length;
	      var expectedTableHeight = rowCount * this.instance.wtSettings.settings.defaultRowHeight;
	      var actualTableHeight = (0, _element.innerHeight)(this.instance.wtTable.TBODY) - 1;
	      var previousRowHeight = void 0;
	      var rowInnerHeight = void 0;
	      var sourceRowIndex = void 0;
	      var currentTr = void 0;
	      var rowHeader = void 0;
	
	      if (expectedTableHeight === actualTableHeight && !this.instance.getSetting('fixedRowsBottom')) {
	        // If the actual table height equals rowCount * default single row height, no row is oversized -> no need to iterate over them
	        return;
	      }
	
	      while (rowCount) {
	        rowCount -= 1;
	        sourceRowIndex = this.instance.wtTable.rowFilter.renderedToSource(rowCount);
	        previousRowHeight = this.instance.wtTable.getRowHeight(sourceRowIndex);
	        currentTr = this.instance.wtTable.getTrForRow(sourceRowIndex);
	        rowHeader = currentTr.querySelector('th');
	
	        if (rowHeader) {
	          rowInnerHeight = (0, _element.innerHeight)(rowHeader);
	        } else {
	          rowInnerHeight = (0, _element.innerHeight)(currentTr) - 1;
	        }
	
	        if (!previousRowHeight && this.instance.wtSettings.settings.defaultRowHeight < rowInnerHeight || previousRowHeight < rowInnerHeight) {
	          rowInnerHeight += 1;
	          this.instance.wtViewport.oversizedRows[sourceRowIndex] = rowInnerHeight;
	        }
	      }
	    }
	
	    /**
	     * Check if any of the rendered columns is higher than expected, and if so, cache them.
	     */
	
	  }, {
	    key: 'markOversizedColumnHeaders',
	    value: function markOversizedColumnHeaders() {
	      var overlayName = this.wot.getOverlayName();
	
	      if (!this.columnHeaderCount || this.wot.wtViewport.hasOversizedColumnHeadersMarked[overlayName] || this.wtTable.isWorkingOnClone()) {
	        return;
	      }
	      var columnCount = this.wtTable.getRenderedColumnsCount();
	
	      for (var i = 0; i < this.columnHeaderCount; i++) {
	        for (var renderedColumnIndex = -1 * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	          this.markIfOversizedColumnHeader(renderedColumnIndex);
	        }
	      }
	      this.wot.wtViewport.hasOversizedColumnHeadersMarked[overlayName] = true;
	    }
	
	    /**
	     *
	     */
	
	  }, {
	    key: 'adjustColumnHeaderHeights',
	    value: function adjustColumnHeaderHeights() {
	      var columnHeaders = this.wot.getSetting('columnHeaders');
	      var children = this.wot.wtTable.THEAD.childNodes;
	      var oversizedColumnHeaders = this.wot.wtViewport.oversizedColumnHeaders;
	
	      for (var i = 0, len = columnHeaders.length; i < len; i++) {
	        if (oversizedColumnHeaders[i]) {
	          if (!children[i] || children[i].childNodes.length === 0) {
	            return;
	          }
	          children[i].childNodes[0].style.height = oversizedColumnHeaders[i] + 'px';
	        }
	      }
	    }
	
	    /**
	     * Check if column header for the specified column is higher than expected, and if so, cache it
	     *
	     * @param {Number} col Index of column
	     */
	
	  }, {
	    key: 'markIfOversizedColumnHeader',
	    value: function markIfOversizedColumnHeader(col) {
	      var sourceColIndex = this.wot.wtTable.columnFilter.renderedToSource(col);
	      var level = this.columnHeaderCount;
	      var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	      var previousColHeaderHeight = void 0;
	      var currentHeader = void 0;
	      var currentHeaderHeight = void 0;
	      var columnHeaderHeightSetting = this.wot.getSetting('columnHeaderHeight') || [];
	
	      while (level) {
	        level -= 1;
	
	        previousColHeaderHeight = this.wot.wtTable.getColumnHeaderHeight(level);
	        currentHeader = this.wot.wtTable.getColumnHeader(sourceColIndex, level);
	
	        if (!currentHeader) {
	          /* eslint-disable no-continue */
	          continue;
	        }
	        currentHeaderHeight = (0, _element.innerHeight)(currentHeader);
	
	        if (!previousColHeaderHeight && defaultRowHeight < currentHeaderHeight || previousColHeaderHeight < currentHeaderHeight) {
	          this.wot.wtViewport.oversizedColumnHeaders[level] = currentHeaderHeight;
	        }
	
	        if (Array.isArray(columnHeaderHeightSetting)) {
	          if (columnHeaderHeightSetting[level] !== null && columnHeaderHeightSetting[level] !== void 0) {
	            this.wot.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level];
	          }
	        } else if (!isNaN(columnHeaderHeightSetting)) {
	          this.wot.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting;
	        }
	
	        if (this.wot.wtViewport.oversizedColumnHeaders[level] < (columnHeaderHeightSetting[level] || columnHeaderHeightSetting)) {
	          this.wot.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level] || columnHeaderHeightSetting;
	        }
	      }
	    }
	
	    /**
	     * @param {Number} sourceRowIndex
	     * @param {HTMLTableRowElement} TR
	     * @param {Number} columnsToRender
	     * @returns {HTMLTableCellElement}
	     */
	
	  }, {
	    key: 'renderCells',
	    value: function renderCells(sourceRowIndex, TR, columnsToRender) {
	      var TD = void 0;
	      var sourceColIndex = void 0;
	
	      for (var visibleColIndex = 0; visibleColIndex < columnsToRender; visibleColIndex++) {
	        sourceColIndex = this.columnFilter.renderedToSource(visibleColIndex);
	
	        if (visibleColIndex === 0) {
	          TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(sourceColIndex)];
	        } else {
	          TD = TD.nextSibling; // http://jsperf.com/nextsibling-vs-indexed-childnodes
	        }
	        // If the number of headers has been reduced, we need to replace excess TH with TD
	        if (TD.nodeName === 'TH') {
	          TD = replaceThWithTd(TD, TR);
	        }
	        if (!(0, _element.hasClass)(TD, 'hide')) {
	          TD.className = '';
	        }
	        TD.removeAttribute('style');
	        this.wot.wtSettings.settings.cellRenderer(sourceRowIndex, sourceColIndex, TD);
	      }
	
	      return TD;
	    }
	
	    /**
	     * @param {Number} columnsToRender Number of columns to render.
	     */
	
	  }, {
	    key: 'adjustColumnWidths',
	    value: function adjustColumnWidths(columnsToRender) {
	      var scrollbarCompensation = 0;
	      var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	      var mainHolder = sourceInstance.wtTable.holder;
	      var defaultColumnWidth = this.wot.getSetting('defaultColumnWidth');
	      var rowHeaderWidthSetting = this.wot.getSetting('rowHeaderWidth');
	
	      if (mainHolder.offsetHeight < mainHolder.scrollHeight) {
	        scrollbarCompensation = (0, _element.getScrollbarWidth)();
	      }
	      this.wot.wtViewport.columnsRenderCalculator.refreshStretching(this.wot.wtViewport.getViewportWidth() - scrollbarCompensation);
	
	      rowHeaderWidthSetting = this.instance.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);
	
	      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {
	        for (var i = 0; i < this.rowHeaderCount; i++) {
	          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[i] : rowHeaderWidthSetting;
	
	          width = width === null || width === void 0 ? defaultColumnWidth : width;
	
	          this.COLGROUP.childNodes[i].style.width = width + 'px';
	        }
	      }
	
	      for (var renderedColIndex = 0; renderedColIndex < columnsToRender; renderedColIndex++) {
	        var _width2 = this.wtTable.getStretchedColumnWidth(this.columnFilter.renderedToSource(renderedColIndex));
	
	        this.COLGROUP.childNodes[renderedColIndex + this.rowHeaderCount].style.width = _width2 + 'px';
	      }
	    }
	
	    /**
	     * @param {HTMLTableCellElement} TR
	     */
	
	  }, {
	    key: 'appendToTbody',
	    value: function appendToTbody(TR) {
	      this.TBODY.appendChild(TR);
	      this.wtTable.tbodyChildrenLength += 1;
	    }
	
	    /**
	     * @param {Number} rowIndex
	     * @param {HTMLTableRowElement} currentTr
	     * @returns {HTMLTableCellElement}
	     */
	
	  }, {
	    key: 'getOrCreateTrForRow',
	    value: function getOrCreateTrForRow(rowIndex, currentTr) {
	      var TR = void 0;
	
	      if (rowIndex >= this.wtTable.tbodyChildrenLength) {
	        TR = this.createRow();
	        this.appendToTbody(TR);
	      } else if (rowIndex === 0) {
	        TR = this.TBODY.firstChild;
	      } else {
	        // http://jsperf.com/nextsibling-vs-indexed-childnodes
	        TR = currentTr.nextSibling;
	      }
	      if (TR.className) {
	        TR.removeAttribute('class');
	      }
	
	      return TR;
	    }
	
	    /**
	     * @returns {HTMLTableCellElement}
	     */
	
	  }, {
	    key: 'createRow',
	    value: function createRow() {
	      var TR = document.createElement('TR');
	
	      for (var visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	        TR.appendChild(document.createElement('TH'));
	      }
	
	      return TR;
	    }
	
	    /**
	     * @param {Number} row
	     * @param {Number} col
	     * @param {HTMLTableCellElement} TH
	     */
	
	  }, {
	    key: 'renderRowHeader',
	    value: function renderRowHeader(row, col, TH) {
	      TH.className = '';
	      TH.removeAttribute('style');
	      this.rowHeaders[col](row, TH, col);
	    }
	
	    /**
	     * @param {Number} row
	     * @param {HTMLTableCellElement} TR
	     */
	
	  }, {
	    key: 'renderRowHeaders',
	    value: function renderRowHeaders(row, TR) {
	      for (var TH = TR.firstChild, visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {
	        // If the number of row headers increased we need to create TH or replace an existing TD node with TH
	        if (!TH) {
	          TH = document.createElement('TH');
	          TR.appendChild(TH);
	        } else if (TH.nodeName === 'TD') {
	          TH = replaceTdWithTh(TH, TR);
	        }
	        this.renderRowHeader(row, visibleColIndex, TH);
	        // http://jsperf.com/nextsibling-vs-indexed-childnodes
	        TH = TH.nextSibling;
	      }
	    }
	
	    /**
	     * Adjust the number of COL and TH elements to match the number of columns and headers that need to be rendered
	     */
	
	  }, {
	    key: 'adjustAvailableNodes',
	    value: function adjustAvailableNodes() {
	      this.adjustColGroups();
	      this.adjustThead();
	    }
	
	    /**
	     * Renders the column headers
	     */
	
	  }, {
	    key: 'renderColumnHeaders',
	    value: function renderColumnHeaders() {
	      if (!this.columnHeaderCount) {
	        return;
	      }
	      var columnCount = this.wtTable.getRenderedColumnsCount();
	
	      for (var i = 0; i < this.columnHeaderCount; i++) {
	        var TR = this.getTrForColumnHeaders(i);
	
	        for (var renderedColumnIndex = -1 * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {
	          var sourceCol = this.columnFilter.renderedToSource(renderedColumnIndex);
	
	          this.renderColumnHeader(i, sourceCol, TR.childNodes[renderedColumnIndex + this.rowHeaderCount]);
	        }
	      }
	    }
	
	    /**
	     * Adjusts the number of COL elements to match the number of columns that need to be rendered
	     */
	
	  }, {
	    key: 'adjustColGroups',
	    value: function adjustColGroups() {
	      var columnCount = this.wtTable.getRenderedColumnsCount();
	
	      while (this.wtTable.colgroupChildrenLength < columnCount + this.rowHeaderCount) {
	        this.COLGROUP.appendChild(document.createElement('COL'));
	        this.wtTable.colgroupChildrenLength += 1;
	      }
	      while (this.wtTable.colgroupChildrenLength > columnCount + this.rowHeaderCount) {
	        this.COLGROUP.removeChild(this.COLGROUP.lastChild);
	        this.wtTable.colgroupChildrenLength -= 1;
	      }
	      if (this.rowHeaderCount) {
	        (0, _element.addClass)(this.COLGROUP.childNodes[0], 'rowHeader');
	      }
	    }
	
	    /**
	     * Adjusts the number of TH elements in THEAD to match the number of headers and columns that need to be rendered
	     */
	
	  }, {
	    key: 'adjustThead',
	    value: function adjustThead() {
	      var columnCount = this.wtTable.getRenderedColumnsCount();
	      var TR = this.THEAD.firstChild;
	
	      if (this.columnHeaders.length) {
	        for (var i = 0, len = this.columnHeaders.length; i < len; i++) {
	          TR = this.THEAD.childNodes[i];
	
	          if (!TR) {
	            TR = document.createElement('TR');
	            this.THEAD.appendChild(TR);
	          }
	          this.theadChildrenLength = TR.childNodes.length;
	
	          while (this.theadChildrenLength < columnCount + this.rowHeaderCount) {
	            TR.appendChild(document.createElement('TH'));
	            this.theadChildrenLength += 1;
	          }
	          while (this.theadChildrenLength > columnCount + this.rowHeaderCount) {
	            TR.removeChild(TR.lastChild);
	            this.theadChildrenLength -= 1;
	          }
	        }
	        var theadChildrenLength = this.THEAD.childNodes.length;
	
	        if (theadChildrenLength > this.columnHeaders.length) {
	          for (var _i2 = this.columnHeaders.length; _i2 < theadChildrenLength; _i2++) {
	            this.THEAD.removeChild(this.THEAD.lastChild);
	          }
	        }
	      } else if (TR) {
	        (0, _element.empty)(TR);
	      }
	    }
	
	    /**
	     * @param {Number} index
	     * @returns {HTMLTableCellElement}
	     */
	
	  }, {
	    key: 'getTrForColumnHeaders',
	    value: function getTrForColumnHeaders(index) {
	      return this.THEAD.childNodes[index];
	    }
	
	    /**
	     * @param {Number} row
	     * @param {Number} col
	     * @param {HTMLTableCellElement} TH
	     * @returns {*}
	     */
	
	  }, {
	    key: 'renderColumnHeader',
	    value: function renderColumnHeader(row, col, TH) {
	      TH.className = '';
	      TH.removeAttribute('style');
	
	      return this.columnHeaders[row](col, TH, row);
	    }
	
	    /**
	     * Add and/or remove the TDs to match the desired number
	     *
	     * @param {HTMLTableCellElement} TR Table row in question
	     * @param {Number} desiredCount The desired number of TDs in the TR
	     */
	
	  }, {
	    key: 'adjustColumns',
	    value: function adjustColumns(TR, desiredCount) {
	      var count = TR.childNodes.length;
	
	      while (count < desiredCount) {
	        var TD = document.createElement('TD');
	
	        TR.appendChild(TD);
	        count += 1;
	      }
	      while (count > desiredCount) {
	        TR.removeChild(TR.lastChild);
	        count -= 1;
	      }
	    }
	
	    /**
	     * @param {Number} columnsToRender
	     */
	
	  }, {
	    key: 'removeRedundantColumns',
	    value: function removeRedundantColumns(columnsToRender) {
	      while (this.wtTable.tbodyChildrenLength > columnsToRender) {
	        this.TBODY.removeChild(this.TBODY.lastChild);
	        this.wtTable.tbodyChildrenLength -= 1;
	      }
	    }
	  }]);
	
	  return TableRenderer;
	}();
	
	function replaceTdWithTh(TD, TR) {
	  var TH = document.createElement('TH');
	
	  TR.insertBefore(TH, TD);
	  TR.removeChild(TD);
	
	  return TH;
	}
	
	function replaceThWithTd(TH, TR) {
	  var TD = document.createElement('TD');
	
	  TR.insertBefore(TD, TH);
	  TR.removeChild(TH);
	
	  return TD;
	}
	
	exports.default = TableRenderer;
	
	/***/ }),
	/* 188 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _viewportColumns = __webpack_require__(176);
	
	var _viewportColumns2 = _interopRequireDefault(_viewportColumns);
	
	var _viewportRows = __webpack_require__(177);
	
	var _viewportRows2 = _interopRequireDefault(_viewportRows);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Viewport
	 */
	var Viewport = function () {
	  /**
	   * @param wotInstance
	   */
	  function Viewport(wotInstance) {
	    var _this = this;
	
	    _classCallCheck(this, Viewport);
	
	    this.wot = wotInstance;
	    // legacy support
	    this.instance = this.wot;
	
	    this.oversizedRows = [];
	    this.oversizedColumnHeaders = [];
	    this.hasOversizedColumnHeadersMarked = {};
	    this.clientHeight = 0;
	    this.containerWidth = NaN;
	    this.rowHeaderWidth = NaN;
	    this.rowsVisibleCalculator = null;
	    this.columnsVisibleCalculator = null;
	
	    this.eventManager = new _eventManager2.default(this.wot);
	    this.eventManager.addEventListener(window, 'resize', function () {
	      _this.clientHeight = _this.getWorkspaceHeight();
	    });
	  }
	
	  /**
	   * @returns {number}
	   */
	
	
	  _createClass(Viewport, [{
	    key: 'getWorkspaceHeight',
	    value: function getWorkspaceHeight() {
	      var trimmingContainer = this.instance.wtOverlays.topOverlay.trimmingContainer;
	      var elemHeight = void 0;
	      var height = 0;
	
	      if (trimmingContainer === window) {
	        height = document.documentElement.clientHeight;
	      } else {
	        elemHeight = (0, _element.outerHeight)(trimmingContainer);
	        // returns height without DIV scrollbar
	        height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;
	      }
	
	      return height;
	    }
	  }, {
	    key: 'getWorkspaceWidth',
	    value: function getWorkspaceWidth() {
	      var width = void 0;
	      var totalColumns = this.wot.getSetting('totalColumns');
	      var trimmingContainer = this.instance.wtOverlays.leftOverlay.trimmingContainer;
	      var overflow = void 0;
	      var stretchSetting = this.wot.getSetting('stretchH');
	      var docOffsetWidth = document.documentElement.offsetWidth;
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (preventOverflow) {
	        return (0, _element.outerWidth)(this.instance.wtTable.wtRootElement);
	      }
	
	      if (this.wot.getSetting('freezeOverlays')) {
	        width = Math.min(docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	      } else {
	        width = Math.min(this.getContainerFillWidth(), docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);
	      }
	
	      if (trimmingContainer === window && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {
	        // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window
	        // otherwise continue below, which will allow stretching
	        // this is used in `scroll_window.html`
	        // TODO test me
	        return document.documentElement.clientWidth;
	      }
	
	      if (trimmingContainer !== window) {
	        overflow = (0, _element.getStyle)(this.instance.wtOverlays.leftOverlay.trimmingContainer, 'overflow');
	
	        if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {
	          // this is used in `scroll.html`
	          // TODO test me
	          return Math.max(width, trimmingContainer.clientWidth);
	        }
	      }
	
	      if (stretchSetting === 'none' || !stretchSetting) {
	        // if no stretching is used, return the maximum used workspace width
	        return Math.max(width, (0, _element.outerWidth)(this.instance.wtTable.TABLE));
	      }
	
	      // if stretching is used, return the actual container width, so the columns can fit inside it
	      return width;
	    }
	
	    /**
	     * Checks if viewport has vertical scroll
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'hasVerticalScroll',
	    value: function hasVerticalScroll() {
	      return this.getWorkspaceActualHeight() > this.getWorkspaceHeight();
	    }
	
	    /**
	     * Checks if viewport has horizontal scroll
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'hasHorizontalScroll',
	    value: function hasHorizontalScroll() {
	      return this.getWorkspaceActualWidth() > this.getWorkspaceWidth();
	    }
	
	    /**
	     * @param from
	     * @param length
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'sumColumnWidths',
	    value: function sumColumnWidths(from, length) {
	      var wtTable = this.wot.wtTable;
	      var sum = 0;
	      var column = from;
	
	      while (column < length) {
	        sum += wtTable.getColumnWidth(column);
	        column += 1;
	      }
	
	      return sum;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getContainerFillWidth',
	    value: function getContainerFillWidth() {
	      if (this.containerWidth) {
	        return this.containerWidth;
	      }
	
	      var mainContainer = this.instance.wtTable.holder;
	      var dummyElement = document.createElement('div');
	
	      dummyElement.style.width = '100%';
	      dummyElement.style.height = '1px';
	      mainContainer.appendChild(dummyElement);
	
	      var fillWidth = dummyElement.offsetWidth;
	
	      this.containerWidth = fillWidth;
	      mainContainer.removeChild(dummyElement);
	
	      return fillWidth;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getWorkspaceOffset',
	    value: function getWorkspaceOffset() {
	      return (0, _element.offset)(this.wot.wtTable.TABLE);
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getWorkspaceActualHeight',
	    value: function getWorkspaceActualHeight() {
	      return (0, _element.outerHeight)(this.wot.wtTable.TABLE);
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getWorkspaceActualWidth',
	    value: function getWorkspaceActualWidth() {
	      return (0, _element.outerWidth)(this.wot.wtTable.TABLE) || (0, _element.outerWidth)(this.wot.wtTable.TBODY) || (0, _element.outerWidth)(this.wot.wtTable.THEAD); // IE8 reports 0 as <table> offsetWidth;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getColumnHeaderHeight',
	    value: function getColumnHeaderHeight() {
	      if (isNaN(this.columnHeaderHeight)) {
	        this.columnHeaderHeight = (0, _element.outerHeight)(this.wot.wtTable.THEAD);
	      }
	
	      return this.columnHeaderHeight;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getViewportHeight',
	    value: function getViewportHeight() {
	      var containerHeight = this.getWorkspaceHeight();
	
	      if (containerHeight === Infinity) {
	        return containerHeight;
	      }
	
	      var columnHeaderHeight = this.getColumnHeaderHeight();
	
	      if (columnHeaderHeight > 0) {
	        containerHeight -= columnHeaderHeight;
	      }
	
	      return containerHeight;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getRowHeaderWidth',
	    value: function getRowHeaderWidth() {
	      var rowHeadersHeightSetting = this.instance.getSetting('rowHeaderWidth');
	      var rowHeaders = this.instance.getSetting('rowHeaders');
	
	      if (rowHeadersHeightSetting) {
	        this.rowHeaderWidth = 0;
	
	        for (var i = 0, len = rowHeaders.length; i < len; i++) {
	          this.rowHeaderWidth += rowHeadersHeightSetting[i] || rowHeadersHeightSetting;
	        }
	      }
	
	      if (this.wot.cloneSource) {
	        return this.wot.cloneSource.wtViewport.getRowHeaderWidth();
	      }
	
	      if (isNaN(this.rowHeaderWidth)) {
	
	        if (rowHeaders.length) {
	          var TH = this.instance.wtTable.TABLE.querySelector('TH');
	          this.rowHeaderWidth = 0;
	
	          for (var _i = 0, _len = rowHeaders.length; _i < _len; _i++) {
	            if (TH) {
	              this.rowHeaderWidth += (0, _element.outerWidth)(TH);
	              TH = TH.nextSibling;
	            } else {
	              // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.
	              // TODO: proper fix
	              this.rowHeaderWidth += 50;
	            }
	          }
	        } else {
	          this.rowHeaderWidth = 0;
	        }
	      }
	
	      this.rowHeaderWidth = this.instance.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;
	
	      return this.rowHeaderWidth;
	    }
	
	    /**
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getViewportWidth',
	    value: function getViewportWidth() {
	      var containerWidth = this.getWorkspaceWidth();
	
	      if (containerWidth === Infinity) {
	        return containerWidth;
	      }
	
	      var rowHeaderWidth = this.getRowHeaderWidth();
	
	      if (rowHeaderWidth > 0) {
	        return containerWidth - rowHeaderWidth;
	      }
	
	      return containerWidth;
	    }
	
	    /**
	     * Creates:
	     *  - rowsRenderCalculator (before draw, to qualify rows for rendering)
	     *  - rowsVisibleCalculator (after draw, to measure which rows are actually visible)
	     *
	     * @returns {ViewportRowsCalculator}
	     */
	
	  }, {
	    key: 'createRowsCalculator',
	    value: function createRowsCalculator() {
	      var _this2 = this;
	
	      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      var height = void 0;
	      var scrollbarHeight = void 0;
	      var fixedRowsHeight = void 0;
	
	      this.rowHeaderWidth = NaN;
	
	      if (this.wot.wtSettings.settings.renderAllRows && !visible) {
	        height = Infinity;
	      } else {
	        height = this.getViewportHeight();
	      }
	
	      var pos = this.wot.wtOverlays.topOverlay.getScrollPosition() - this.wot.wtOverlays.topOverlay.getTableParentOffset();
	
	      if (pos < 0) {
	        pos = 0;
	      }
	
	      var fixedRowsTop = this.wot.getSetting('fixedRowsTop');
	      var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	      var totalRows = this.wot.getSetting('totalRows');
	
	      if (fixedRowsTop) {
	        fixedRowsHeight = this.wot.wtOverlays.topOverlay.sumCellSizes(0, fixedRowsTop);
	        pos += fixedRowsHeight;
	        height -= fixedRowsHeight;
	      }
	
	      if (fixedRowsBottom && this.wot.wtOverlays.bottomOverlay.clone) {
	        fixedRowsHeight = this.wot.wtOverlays.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	
	        height -= fixedRowsHeight;
	      }
	
	      if (this.wot.wtTable.holder.clientHeight === this.wot.wtTable.holder.offsetHeight) {
	        scrollbarHeight = 0;
	      } else {
	        scrollbarHeight = (0, _element.getScrollbarWidth)();
	      }
	
	      return new _viewportRows2.default(height, pos, this.wot.getSetting('totalRows'), function (sourceRow) {
	        return _this2.wot.wtTable.getRowHeight(sourceRow);
	      }, visible ? null : this.wot.wtSettings.settings.viewportRowCalculatorOverride, visible, scrollbarHeight);
	    }
	
	    /**
	     * Creates:
	     *  - columnsRenderCalculator (before draw, to qualify columns for rendering)
	     *  - columnsVisibleCalculator (after draw, to measure which columns are actually visible)
	     *
	     * @returns {ViewportRowsCalculator}
	     */
	
	  }, {
	    key: 'createColumnsCalculator',
	    value: function createColumnsCalculator() {
	      var _this3 = this;
	
	      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      var width = this.getViewportWidth();
	      var pos = this.wot.wtOverlays.leftOverlay.getScrollPosition() - this.wot.wtOverlays.leftOverlay.getTableParentOffset();
	
	      this.columnHeaderHeight = NaN;
	
	      if (pos < 0) {
	        pos = 0;
	      }
	
	      var fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	
	      if (fixedColumnsLeft) {
	        var fixedColumnsWidth = this.wot.wtOverlays.leftOverlay.sumCellSizes(0, fixedColumnsLeft);
	        pos += fixedColumnsWidth;
	        width -= fixedColumnsWidth;
	      }
	      if (this.wot.wtTable.holder.clientWidth !== this.wot.wtTable.holder.offsetWidth) {
	        width -= (0, _element.getScrollbarWidth)();
	      }
	
	      return new _viewportColumns2.default(width, pos, this.wot.getSetting('totalColumns'), function (sourceCol) {
	        return _this3.wot.wtTable.getColumnWidth(sourceCol);
	      }, visible ? null : this.wot.wtSettings.settings.viewportColumnCalculatorOverride, visible, this.wot.getSetting('stretchH'), function (stretchedWidth, column) {
	        return _this3.wot.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);
	      });
	    }
	
	    /**
	     * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and
	     * cols should be rendered)
	     *
	     * @param fastDraw {Boolean} If `true`, will try to avoid full redraw and only update the border positions.
	     *                           If `false` or `undefined`, will perform a full redraw
	     * @returns fastDraw {Boolean} The fastDraw value, possibly modified
	     */
	
	  }, {
	    key: 'createRenderCalculators',
	    value: function createRenderCalculators() {
	      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      var runFastDraw = fastDraw;
	
	      if (runFastDraw) {
	        var proposedRowsVisibleCalculator = this.createRowsCalculator(true);
	        var proposedColumnsVisibleCalculator = this.createColumnsCalculator(true);
	
	        if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {
	          runFastDraw = false;
	        }
	      }
	
	      if (!runFastDraw) {
	        this.rowsRenderCalculator = this.createRowsCalculator();
	        this.columnsRenderCalculator = this.createColumnsCalculator();
	      }
	      // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator
	      this.rowsVisibleCalculator = null;
	      this.columnsVisibleCalculator = null;
	
	      return runFastDraw;
	    }
	
	    /**
	     * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are
	     * the actually visible rows and columns)
	     */
	
	  }, {
	    key: 'createVisibleCalculators',
	    value: function createVisibleCalculators() {
	      this.rowsVisibleCalculator = this.createRowsCalculator(true);
	      this.columnsVisibleCalculator = this.createColumnsCalculator(true);
	    }
	
	    /**
	     * Returns information whether proposedRowsVisibleCalculator viewport
	     * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator)
	     *
	     * @param {Object} proposedRowsVisibleCalculator
	     * @returns {Boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).
	     *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed)
	     */
	
	  }, {
	    key: 'areAllProposedVisibleRowsAlreadyRendered',
	    value: function areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {
	      if (this.rowsVisibleCalculator) {
	        if (proposedRowsVisibleCalculator.startRow < this.rowsRenderCalculator.startRow || proposedRowsVisibleCalculator.startRow === this.rowsRenderCalculator.startRow && proposedRowsVisibleCalculator.startRow > 0) {
	          return false;
	        } else if (proposedRowsVisibleCalculator.endRow > this.rowsRenderCalculator.endRow || proposedRowsVisibleCalculator.endRow === this.rowsRenderCalculator.endRow && proposedRowsVisibleCalculator.endRow < this.wot.getSetting('totalRows') - 1) {
	          return false;
	        }
	        return true;
	      }
	
	      return false;
	    }
	
	    /**
	     * Returns information whether proposedColumnsVisibleCalculator viewport
	     * is contained inside column rendered in previous draw (cached in columnsRenderCalculator)
	     *
	     * @param {Object} proposedColumnsVisibleCalculator
	     * @returns {Boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).
	     *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed)
	     */
	
	  }, {
	    key: 'areAllProposedVisibleColumnsAlreadyRendered',
	    value: function areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {
	      if (this.columnsVisibleCalculator) {
	        if (proposedColumnsVisibleCalculator.startColumn < this.columnsRenderCalculator.startColumn || proposedColumnsVisibleCalculator.startColumn === this.columnsRenderCalculator.startColumn && proposedColumnsVisibleCalculator.startColumn > 0) {
	          return false;
	        } else if (proposedColumnsVisibleCalculator.endColumn > this.columnsRenderCalculator.endColumn || proposedColumnsVisibleCalculator.endColumn === this.columnsRenderCalculator.endColumn && proposedColumnsVisibleCalculator.endColumn < this.wot.getSetting('totalColumns') - 1) {
	          return false;
	        }
	        return true;
	      }
	
	      return false;
	    }
	
	    /**
	     * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.
	     */
	
	  }, {
	    key: 'resetHasOversizedColumnHeadersMarked',
	    value: function resetHasOversizedColumnHeadersMarked() {
	      (0, _object.objectEach)(this.hasOversizedColumnHeadersMarked, function (value, key, object) {
	        object[key] = void 0;
	      });
	    }
	  }]);
	
	  return Viewport;
	}();
	
	exports.default = Viewport;
	
	/***/ }),
	/* 189 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _event = __webpack_require__(13);
	
	var _object = __webpack_require__(1);
	
	var _browser = __webpack_require__(39);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _coords = __webpack_require__(56);
	
	var _coords2 = _interopRequireDefault(_coords);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 *
	 */
	var Border = function () {
	  /**
	   * @param {Walkontable} wotInstance
	   * @param {Object} settings
	   */
	  function Border(wotInstance, settings) {
	    _classCallCheck(this, Border);
	
	    if (!settings) {
	      return;
	    }
	    this.eventManager = new _eventManager2.default(wotInstance);
	    this.instance = wotInstance;
	    this.wot = wotInstance;
	    this.settings = settings;
	    this.mouseDown = false;
	    this.main = null;
	
	    this.top = null;
	    this.left = null;
	    this.bottom = null;
	    this.right = null;
	
	    this.topStyle = null;
	    this.leftStyle = null;
	    this.bottomStyle = null;
	    this.rightStyle = null;
	
	    this.cornerDefaultStyle = {
	      width: '6px',
	      height: '6px',
	      borderWidth: '1px',
	      borderStyle: 'solid',
	      borderColor: '#FFF'
	    };
	    this.corner = null;
	    this.cornerStyle = null;
	
	    this.createBorders(settings);
	    this.registerListeners();
	  }
	
	  /**
	   * Register all necessary events
	   */
	
	
	  _createClass(Border, [{
	    key: 'registerListeners',
	    value: function registerListeners() {
	      var _this2 = this;
	
	      this.eventManager.addEventListener(document.body, 'mousedown', function () {
	        return _this2.onMouseDown();
	      });
	      this.eventManager.addEventListener(document.body, 'mouseup', function () {
	        return _this2.onMouseUp();
	      });
	
	      var _loop = function _loop(c, len) {
	        _this2.eventManager.addEventListener(_this2.main.childNodes[c], 'mouseenter', function (event) {
	          return _this2.onMouseEnter(event, _this2.main.childNodes[c]);
	        });
	      };
	
	      for (var c = 0, len = this.main.childNodes.length; c < len; c++) {
	        _loop(c, len);
	      }
	    }
	
	    /**
	     * Mouse down listener
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown() {
	      this.mouseDown = true;
	    }
	
	    /**
	     * Mouse up listener
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      this.mouseDown = false;
	    }
	
	    /**
	     * Mouse enter listener for fragment selection functionality.
	     *
	     * @private
	     * @param {Event} event Dom event
	     * @param {HTMLElement} parentElement Part of border element.
	     */
	
	  }, {
	    key: 'onMouseEnter',
	    value: function onMouseEnter(event, parentElement) {
	      if (!this.mouseDown || !this.wot.getSetting('hideBorderOnMouseDownOver')) {
	        return;
	      }
	      event.preventDefault();
	      (0, _event.stopImmediatePropagation)(event);
	
	      var _this = this;
	      var bounds = parentElement.getBoundingClientRect();
	      // Hide border to prevents selection jumping when fragmentSelection is enabled.
	      parentElement.style.display = 'none';
	
	      function isOutside(mouseEvent) {
	        if (mouseEvent.clientY < Math.floor(bounds.top)) {
	          return true;
	        }
	        if (mouseEvent.clientY > Math.ceil(bounds.top + bounds.height)) {
	          return true;
	        }
	        if (mouseEvent.clientX < Math.floor(bounds.left)) {
	          return true;
	        }
	        if (mouseEvent.clientX > Math.ceil(bounds.left + bounds.width)) {
	          return true;
	        }
	      }
	
	      function handler(handlerEvent) {
	        if (isOutside(handlerEvent)) {
	          _this.eventManager.removeEventListener(document.body, 'mousemove', handler);
	          parentElement.style.display = 'block';
	        }
	      }
	
	      this.eventManager.addEventListener(document.body, 'mousemove', handler);
	    }
	
	    /**
	     * Create border elements
	     *
	     * @param {Object} settings
	     */
	
	  }, {
	    key: 'createBorders',
	    value: function createBorders(settings) {
	      this.main = document.createElement('div');
	
	      var borderDivs = ['top', 'left', 'bottom', 'right', 'corner'];
	      var style = this.main.style;
	      style.position = 'absolute';
	      style.top = 0;
	      style.left = 0;
	
	      for (var i = 0; i < 5; i++) {
	        var position = borderDivs[i];
	        var div = document.createElement('div');
	
	        div.className = 'wtBorder ' + (this.settings.className || ''); // + borderDivs[i];
	
	        if (this.settings[position] && this.settings[position].hide) {
	          div.className += ' hidden';
	        }
	        style = div.style;
	        style.backgroundColor = this.settings[position] && this.settings[position].color ? this.settings[position].color : settings.border.color;
	        style.height = this.settings[position] && this.settings[position].width ? this.settings[position].width + 'px' : settings.border.width + 'px';
	        style.width = this.settings[position] && this.settings[position].width ? this.settings[position].width + 'px' : settings.border.width + 'px';
	
	        this.main.appendChild(div);
	      }
	      this.top = this.main.childNodes[0];
	      this.left = this.main.childNodes[1];
	      this.bottom = this.main.childNodes[2];
	      this.right = this.main.childNodes[3];
	
	      this.topStyle = this.top.style;
	      this.leftStyle = this.left.style;
	      this.bottomStyle = this.bottom.style;
	      this.rightStyle = this.right.style;
	
	      this.corner = this.main.childNodes[4];
	      this.corner.className += ' corner';
	      this.cornerStyle = this.corner.style;
	      this.cornerStyle.width = this.cornerDefaultStyle.width;
	      this.cornerStyle.height = this.cornerDefaultStyle.height;
	      this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(' ');
	
	      if ((0, _browser.isMobileBrowser)()) {
	        this.createMultipleSelectorHandles();
	      }
	      this.disappear();
	
	      var bordersHolder = this.wot.wtTable.bordersHolder;
	
	      if (!bordersHolder) {
	        bordersHolder = document.createElement('div');
	        bordersHolder.className = 'htBorders';
	        this.wot.wtTable.bordersHolder = bordersHolder;
	        this.wot.wtTable.spreader.appendChild(bordersHolder);
	      }
	      bordersHolder.appendChild(this.main);
	    }
	
	    /**
	     * Create multiple selector handler for mobile devices
	     */
	
	  }, {
	    key: 'createMultipleSelectorHandles',
	    value: function createMultipleSelectorHandles() {
	      var _this3 = this;
	
	      this.selectionHandles = {
	        topLeft: document.createElement('DIV'),
	        topLeftHitArea: document.createElement('DIV'),
	        bottomRight: document.createElement('DIV'),
	        bottomRightHitArea: document.createElement('DIV')
	      };
	      var width = 10;
	      var hitAreaWidth = 40;
	
	      this.selectionHandles.topLeft.className = 'topLeftSelectionHandle';
	      this.selectionHandles.topLeftHitArea.className = 'topLeftSelectionHandle-HitArea';
	      this.selectionHandles.bottomRight.className = 'bottomRightSelectionHandle';
	      this.selectionHandles.bottomRightHitArea.className = 'bottomRightSelectionHandle-HitArea';
	
	      this.selectionHandles.styles = {
	        topLeft: this.selectionHandles.topLeft.style,
	        topLeftHitArea: this.selectionHandles.topLeftHitArea.style,
	        bottomRight: this.selectionHandles.bottomRight.style,
	        bottomRightHitArea: this.selectionHandles.bottomRightHitArea.style
	      };
	
	      var hitAreaStyle = {
	        position: 'absolute',
	        height: hitAreaWidth + 'px',
	        width: hitAreaWidth + 'px',
	        'border-radius': parseInt(hitAreaWidth / 1.5, 10) + 'px'
	      };
	
	      (0, _object.objectEach)(hitAreaStyle, function (value, key) {
	        _this3.selectionHandles.styles.bottomRightHitArea[key] = value;
	        _this3.selectionHandles.styles.topLeftHitArea[key] = value;
	      });
	
	      var handleStyle = {
	        position: 'absolute',
	        height: width + 'px',
	        width: width + 'px',
	        'border-radius': parseInt(width / 1.5, 10) + 'px',
	        background: '#F5F5FF',
	        border: '1px solid #4285c8'
	      };
	
	      (0, _object.objectEach)(handleStyle, function (value, key) {
	        _this3.selectionHandles.styles.bottomRight[key] = value;
	        _this3.selectionHandles.styles.topLeft[key] = value;
	      });
	
	      this.main.appendChild(this.selectionHandles.topLeft);
	      this.main.appendChild(this.selectionHandles.bottomRight);
	      this.main.appendChild(this.selectionHandles.topLeftHitArea);
	      this.main.appendChild(this.selectionHandles.bottomRightHitArea);
	    }
	  }, {
	    key: 'isPartRange',
	    value: function isPartRange(row, col) {
	      var areaSelection = this.wot.selections.createOrGetArea();
	
	      if (areaSelection.cellRange) {
	        if (row !== areaSelection.cellRange.to.row || col !== areaSelection.cellRange.to.col) {
	          return true;
	        }
	      }
	
	      return false;
	    }
	  }, {
	    key: 'updateMultipleSelectionHandlesPosition',
	    value: function updateMultipleSelectionHandlesPosition(row, col, top, left, width, height) {
	      var handleWidth = parseInt(this.selectionHandles.styles.topLeft.width, 10);
	      var hitAreaWidth = parseInt(this.selectionHandles.styles.topLeftHitArea.width, 10);
	
	      this.selectionHandles.styles.topLeft.top = parseInt(top - handleWidth, 10) + 'px';
	      this.selectionHandles.styles.topLeft.left = parseInt(left - handleWidth, 10) + 'px';
	
	      this.selectionHandles.styles.topLeftHitArea.top = parseInt(top - hitAreaWidth / 4 * 3, 10) + 'px';
	      this.selectionHandles.styles.topLeftHitArea.left = parseInt(left - hitAreaWidth / 4 * 3, 10) + 'px';
	
	      this.selectionHandles.styles.bottomRight.top = parseInt(top + height, 10) + 'px';
	      this.selectionHandles.styles.bottomRight.left = parseInt(left + width, 10) + 'px';
	
	      this.selectionHandles.styles.bottomRightHitArea.top = parseInt(top + height - hitAreaWidth / 4, 10) + 'px';
	      this.selectionHandles.styles.bottomRightHitArea.left = parseInt(left + width - hitAreaWidth / 4, 10) + 'px';
	
	      if (this.settings.border.cornerVisible && this.settings.border.cornerVisible()) {
	        this.selectionHandles.styles.topLeft.display = 'block';
	        this.selectionHandles.styles.topLeftHitArea.display = 'block';
	
	        if (this.isPartRange(row, col)) {
	          this.selectionHandles.styles.bottomRight.display = 'none';
	          this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	        } else {
	          this.selectionHandles.styles.bottomRight.display = 'block';
	          this.selectionHandles.styles.bottomRightHitArea.display = 'block';
	        }
	      } else {
	        this.selectionHandles.styles.topLeft.display = 'none';
	        this.selectionHandles.styles.bottomRight.display = 'none';
	        this.selectionHandles.styles.topLeftHitArea.display = 'none';
	        this.selectionHandles.styles.bottomRightHitArea.display = 'none';
	      }
	
	      if (row === this.wot.wtSettings.getSetting('fixedRowsTop') || col === this.wot.wtSettings.getSetting('fixedColumnsLeft')) {
	        this.selectionHandles.styles.topLeft.zIndex = '9999';
	        this.selectionHandles.styles.topLeftHitArea.zIndex = '9999';
	      } else {
	        this.selectionHandles.styles.topLeft.zIndex = '';
	        this.selectionHandles.styles.topLeftHitArea.zIndex = '';
	      }
	    }
	
	    /**
	     * Show border around one or many cells
	     *
	     * @param {Array} corners
	     */
	
	  }, {
	    key: 'appear',
	    value: function appear(corners) {
	      if (this.disabled) {
	        return;
	      }
	
	      var fromRow = void 0;
	      var toRow = void 0;
	      var fromColumn = void 0;
	      var toColumn = void 0;
	
	      var rowsCount = this.wot.wtTable.getRenderedRowsCount();
	
	      for (var i = 0; i < rowsCount; i += 1) {
	        var s = this.wot.wtTable.rowFilter.renderedToSource(i);
	
	        if (s >= corners[0] && s <= corners[2]) {
	          fromRow = s;
	          break;
	        }
	      }
	
	      for (var _i = rowsCount - 1; _i >= 0; _i -= 1) {
	        var _s = this.wot.wtTable.rowFilter.renderedToSource(_i);
	
	        if (_s >= corners[0] && _s <= corners[2]) {
	          toRow = _s;
	          break;
	        }
	      }
	
	      var columnsCount = this.wot.wtTable.getRenderedColumnsCount();
	
	      for (var _i2 = 0; _i2 < columnsCount; _i2 += 1) {
	        var _s2 = this.wot.wtTable.columnFilter.renderedToSource(_i2);
	
	        if (_s2 >= corners[1] && _s2 <= corners[3]) {
	          fromColumn = _s2;
	          break;
	        }
	      }
	
	      for (var _i3 = columnsCount - 1; _i3 >= 0; _i3 -= 1) {
	        var _s3 = this.wot.wtTable.columnFilter.renderedToSource(_i3);
	
	        if (_s3 >= corners[1] && _s3 <= corners[3]) {
	          toColumn = _s3;
	          break;
	        }
	      }
	      if (fromRow === void 0 || fromColumn === void 0) {
	        this.disappear();
	
	        return;
	      }
	      var fromTD = this.wot.wtTable.getCell(new _coords2.default(fromRow, fromColumn));
	      var isMultiple = fromRow !== toRow || fromColumn !== toColumn;
	      var toTD = isMultiple ? this.wot.wtTable.getCell(new _coords2.default(toRow, toColumn)) : fromTD;
	      var fromOffset = (0, _element.offset)(fromTD);
	      var toOffset = isMultiple ? (0, _element.offset)(toTD) : fromOffset;
	      var containerOffset = (0, _element.offset)(this.wot.wtTable.TABLE);
	      var minTop = fromOffset.top;
	      var minLeft = fromOffset.left;
	
	      var left = minLeft - containerOffset.left - 1;
	      var width = toOffset.left + (0, _element.outerWidth)(toTD) - minLeft;
	
	      if (this.isEntireColumnSelected(fromRow, toRow)) {
	        var modifiedValues = this.getDimensionsFromHeader('columns', fromColumn, toColumn, containerOffset);
	        var fromTH = null;
	
	        if (modifiedValues) {
	          var _modifiedValues = _slicedToArray(modifiedValues, 3);
	
	          fromTH = _modifiedValues[0];
	          left = _modifiedValues[1];
	          width = _modifiedValues[2];
	        }
	
	        if (fromTH) {
	          fromTD = fromTH;
	        }
	      }
	
	      var top = minTop - containerOffset.top - 1;
	      var height = toOffset.top + (0, _element.outerHeight)(toTD) - minTop;
	
	      if (this.isEntireRowSelected(fromColumn, toColumn)) {
	        var _modifiedValues2 = this.getDimensionsFromHeader('rows', fromRow, toRow, containerOffset);
	        var _fromTH = null;
	
	        if (_modifiedValues2) {
	          var _modifiedValues3 = _slicedToArray(_modifiedValues2, 3);
	
	          _fromTH = _modifiedValues3[0];
	          top = _modifiedValues3[1];
	          height = _modifiedValues3[2];
	        }
	
	        if (_fromTH) {
	          fromTD = _fromTH;
	        }
	      }
	
	      var style = (0, _element.getComputedStyle)(fromTD);
	
	      if (parseInt(style.borderTopWidth, 10) > 0) {
	        top += 1;
	        height = height > 0 ? height - 1 : 0;
	      }
	      if (parseInt(style.borderLeftWidth, 10) > 0) {
	        left += 1;
	        width = width > 0 ? width - 1 : 0;
	      }
	
	      this.topStyle.top = top + 'px';
	      this.topStyle.left = left + 'px';
	      this.topStyle.width = width + 'px';
	      this.topStyle.display = 'block';
	
	      this.leftStyle.top = top + 'px';
	      this.leftStyle.left = left + 'px';
	      this.leftStyle.height = height + 'px';
	      this.leftStyle.display = 'block';
	
	      var delta = Math.floor(this.settings.border.width / 2);
	
	      this.bottomStyle.top = top + height - delta + 'px';
	      this.bottomStyle.left = left + 'px';
	      this.bottomStyle.width = width + 'px';
	      this.bottomStyle.display = 'block';
	
	      this.rightStyle.top = top + 'px';
	      this.rightStyle.left = left + width - delta + 'px';
	      this.rightStyle.height = height + 1 + 'px';
	      this.rightStyle.display = 'block';
	
	      var cornerVisibleSetting = this.settings.border.cornerVisible;
	      cornerVisibleSetting = typeof cornerVisibleSetting === 'function' ? cornerVisibleSetting(this.settings.layerLevel) : cornerVisibleSetting;
	
	      var hookResult = this.wot.getSetting('onModifyGetCellCoords', toRow, toColumn);
	      var checkRow = toRow,
	          checkCol = toColumn;
	
	
	      if (hookResult && Array.isArray(hookResult)) {
	        var _hookResult = _slicedToArray(hookResult, 4);
	
	        checkRow = _hookResult[2];
	        checkCol = _hookResult[3];
	      }
	
	      if ((0, _browser.isMobileBrowser)() || !cornerVisibleSetting || this.isPartRange(checkRow, checkCol)) {
	        this.cornerStyle.display = 'none';
	      } else {
	        this.cornerStyle.top = top + height - 4 + 'px';
	        this.cornerStyle.left = left + width - 4 + 'px';
	        this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth;
	        this.cornerStyle.width = this.cornerDefaultStyle.width;
	
	        // Hide the fill handle, so the possible further adjustments won't force unneeded scrollbars.
	        this.cornerStyle.display = 'none';
	
	        var trimmingContainer = (0, _element.getTrimmingContainer)(this.wot.wtTable.TABLE);
	        var trimToWindow = trimmingContainer === window;
	
	        if (trimToWindow) {
	          trimmingContainer = document.documentElement;
	        }
	
	        if (toColumn === this.wot.getSetting('totalColumns') - 1) {
	          var toTdOffsetLeft = trimToWindow ? toTD.getBoundingClientRect().left : toTD.offsetLeft;
	          var cornerRightEdge = toTdOffsetLeft + (0, _element.outerWidth)(toTD) + parseInt(this.cornerDefaultStyle.width, 10) / 2;
	          var cornerOverlappingContainer = cornerRightEdge >= (0, _element.innerWidth)(trimmingContainer);
	
	          if (cornerOverlappingContainer) {
	            this.cornerStyle.left = Math.floor(left + width - 3 - parseInt(this.cornerDefaultStyle.width, 10) / 2) + 'px';
	            this.cornerStyle.borderRightWidth = 0;
	          }
	        }
	
	        if (toRow === this.wot.getSetting('totalRows') - 1) {
	          var toTdOffsetTop = trimToWindow ? toTD.getBoundingClientRect().top : toTD.offsetTop;
	          var cornerBottomEdge = toTdOffsetTop + (0, _element.outerHeight)(toTD) + parseInt(this.cornerDefaultStyle.height, 10) / 2;
	          var _cornerOverlappingContainer = cornerBottomEdge >= (0, _element.innerHeight)(trimmingContainer);
	
	          if (_cornerOverlappingContainer) {
	            this.cornerStyle.top = Math.floor(top + height - 3 - parseInt(this.cornerDefaultStyle.height, 10) / 2) + 'px';
	            this.cornerStyle.borderBottomWidth = 0;
	          }
	        }
	
	        this.cornerStyle.display = 'block';
	      }
	
	      if ((0, _browser.isMobileBrowser)()) {
	        this.updateMultipleSelectionHandlesPosition(toRow, toColumn, top, left, width, height);
	      }
	    }
	
	    /**
	     * Check whether an entire column of cells is selected.
	     *
	     * @private
	     * @param {Number} startRowIndex Start row index.
	     * @param {Number} endRowIndex End row index.
	     */
	
	  }, {
	    key: 'isEntireColumnSelected',
	    value: function isEntireColumnSelected(startRowIndex, endRowIndex) {
	      return startRowIndex === this.wot.wtTable.getFirstRenderedRow() && endRowIndex === this.wot.wtTable.getLastRenderedRow();
	    }
	
	    /**
	     * Check whether an entire row of cells is selected.
	     *
	     * @private
	     * @param {Number} startColumnIndex Start column index.
	     * @param {Number} endColumnIndex End column index.
	     */
	
	  }, {
	    key: 'isEntireRowSelected',
	    value: function isEntireRowSelected(startColumnIndex, endColumnIndex) {
	      return startColumnIndex === this.wot.wtTable.getFirstRenderedColumn() && endColumnIndex === this.wot.wtTable.getLastRenderedColumn();
	    }
	
	    /**
	     * Get left/top index and width/height depending on the `direction` provided.
	     *
	     * @private
	     * @param {String} direction `rows` or `columns`, defines if an entire column or row is selected.
	     * @param {Number} fromIndex Start index of the selection.
	     * @param {Number} toIndex End index of the selection.
	     * @param {Number} containerOffset offset of the container.
	     * @return {Array|Boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).
	     */
	
	  }, {
	    key: 'getDimensionsFromHeader',
	    value: function getDimensionsFromHeader(direction, fromIndex, toIndex, containerOffset) {
	      var _this4 = this;
	
	      var rootHotElement = this.wot.wtTable.wtRootElement.parentNode;
	      var getHeaderFn = null;
	      var dimensionFn = null;
	      var entireSelectionClassname = null;
	      var index = null;
	      var dimension = null;
	      var dimensionProperty = null;
	      var startHeader = null;
	      var endHeader = null;
	
	      switch (direction) {
	        case 'rows':
	          getHeaderFn = function getHeaderFn() {
	            var _wot$wtTable;
	
	            return (_wot$wtTable = _this4.wot.wtTable).getRowHeader.apply(_wot$wtTable, arguments);
	          };
	          dimensionFn = function dimensionFn() {
	            return _element.outerHeight.apply(undefined, arguments);
	          };
	          entireSelectionClassname = 'ht__selection--rows';
	          dimensionProperty = 'top';
	
	          break;
	
	        case 'columns':
	          getHeaderFn = function getHeaderFn() {
	            var _wot$wtTable2;
	
	            return (_wot$wtTable2 = _this4.wot.wtTable).getColumnHeader.apply(_wot$wtTable2, arguments);
	          };
	          dimensionFn = function dimensionFn() {
	            return _element.outerWidth.apply(undefined, arguments);
	          };
	          entireSelectionClassname = 'ht__selection--columns';
	          dimensionProperty = 'left';
	          break;
	        default:
	      }
	
	      if (rootHotElement.className.includes(entireSelectionClassname)) {
	        var columnHeaderLevelCount = this.wot.getSetting('columnHeaders').length;
	
	        startHeader = getHeaderFn(fromIndex, columnHeaderLevelCount - 1);
	        endHeader = getHeaderFn(toIndex, columnHeaderLevelCount - 1);
	
	        if (!startHeader || !endHeader) {
	          return false;
	        }
	
	        var startHeaderOffset = (0, _element.offset)(startHeader);
	        var endOffset = (0, _element.offset)(endHeader);
	
	        if (startHeader && endHeader) {
	          index = startHeaderOffset[dimensionProperty] - containerOffset[dimensionProperty] - 1;
	          dimension = endOffset[dimensionProperty] + dimensionFn(endHeader) - startHeaderOffset[dimensionProperty];
	        }
	
	        return [startHeader, index, dimension];
	      }
	
	      return false;
	    }
	
	    /**
	     * Change border style.
	     *
	     * @private
	     * @param {String} borderElement Coordinate where add/remove border: top, right, bottom, left.
	     */
	
	  }, {
	    key: 'changeBorderStyle',
	    value: function changeBorderStyle(borderElement, border) {
	      var style = this[borderElement].style;
	      var borderStyle = border[borderElement];
	
	      if (!borderStyle || borderStyle.hide) {
	        (0, _element.addClass)(this[borderElement], 'hidden');
	      } else {
	        if ((0, _element.hasClass)(this[borderElement], 'hidden')) {
	          (0, _element.removeClass)(this[borderElement], 'hidden');
	        }
	
	        style.backgroundColor = borderStyle.color;
	
	        if (borderElement === 'top' || borderElement === 'bottom') {
	          style.height = borderStyle.width + 'px';
	        }
	
	        if (borderElement === 'right' || borderElement === 'left') {
	          style.width = borderStyle.width + 'px';
	        }
	      }
	    }
	
	    /**
	     * Change border style to default.
	     *
	     * @private
	     * @param {HTMLElement} position
	     */
	
	  }, {
	    key: 'changeBorderToDefaultStyle',
	    value: function changeBorderToDefaultStyle(position) {
	      var defaultBorder = {
	        width: 1,
	        color: '#000'
	      };
	      var style = this[position].style;
	
	      style.backgroundColor = defaultBorder.color;
	      style.width = defaultBorder.width + 'px';
	      style.height = defaultBorder.width + 'px';
	    }
	
	    /**
	     * Toggle class 'hidden' to element.
	     *
	     * @private
	     * @param {String} borderElement Coordinate where add/remove border: top, right, bottom, left.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'toggleHiddenClass',
	    value: function toggleHiddenClass(borderElement, remove) {
	      this.changeBorderToDefaultStyle(borderElement);
	
	      if (remove) {
	        (0, _element.addClass)(this[borderElement], 'hidden');
	      } else {
	        (0, _element.removeClass)(this[borderElement], 'hidden');
	      }
	    }
	
	    /**
	     * Hide border
	     */
	
	  }, {
	    key: 'disappear',
	    value: function disappear() {
	      this.topStyle.display = 'none';
	      this.leftStyle.display = 'none';
	      this.bottomStyle.display = 'none';
	      this.rightStyle.display = 'none';
	      this.cornerStyle.display = 'none';
	
	      if ((0, _browser.isMobileBrowser)()) {
	        this.selectionHandles.styles.topLeft.display = 'none';
	        this.selectionHandles.styles.bottomRight.display = 'none';
	      }
	    }
	  }]);
	
	  return Border;
	}();
	
	exports.default = Border;
	
	/***/ }),
	/* 190 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _unicode = __webpack_require__(21);
	
	var _mixed = __webpack_require__(11);
	
	var _string = __webpack_require__(33);
	
	var _array = __webpack_require__(2);
	
	var _element = __webpack_require__(0);
	
	var _handsontableEditor = __webpack_require__(191);
	
	var _handsontableEditor2 = _interopRequireDefault(_handsontableEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AutocompleteEditor = _handsontableEditor2.default.prototype.extend();
	
	/**
	 * @private
	 * @editor AutocompleteEditor
	 * @class AutocompleteEditor
	 * @dependencies HandsontableEditor
	 */
	AutocompleteEditor.prototype.init = function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  _handsontableEditor2.default.prototype.init.apply(this, args);
	  this.query = null;
	  this.strippedChoices = [];
	  this.rawChoices = [];
	};
	
	AutocompleteEditor.prototype.getValue = function () {
	  var _this2 = this;
	
	  var selectedValue = this.rawChoices.find(function (value) {
	    var strippedValue = _this2.stripValueIfNeeded(value);
	
	    return strippedValue === _this2.TEXTAREA.value;
	  });
	
	  if ((0, _mixed.isDefined)(selectedValue)) {
	    return selectedValue;
	  }
	
	  return this.TEXTAREA.value;
	};
	
	AutocompleteEditor.prototype.createElements = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	
	  _handsontableEditor2.default.prototype.createElements.apply(this, args);
	
	  (0, _element.addClass)(this.htContainer, 'autocompleteEditor');
	  (0, _element.addClass)(this.htContainer, window.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');
	};
	
	var skipOne = false;
	function onBeforeKeyDown(event) {
	  skipOne = false;
	  var editor = this.getActiveEditor();
	
	  if ((0, _unicode.isPrintableChar)(event.keyCode) || event.keyCode === _unicode.KEY_CODES.BACKSPACE || event.keyCode === _unicode.KEY_CODES.DELETE || event.keyCode === _unicode.KEY_CODES.INSERT) {
	    var timeOffset = 0;
	
	    // on ctl+c / cmd+c don't update suggestion list
	    if (event.keyCode === _unicode.KEY_CODES.C && (event.ctrlKey || event.metaKey)) {
	      return;
	    }
	    if (!editor.isOpened()) {
	      timeOffset += 10;
	    }
	
	    if (editor.htEditor) {
	      editor.instance._registerTimeout(function () {
	        editor.queryChoices(editor.TEXTAREA.value);
	        skipOne = true;
	      }, timeOffset);
	    }
	  }
	}
	
	AutocompleteEditor.prototype.prepare = function () {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }
	
	  _handsontableEditor2.default.prototype.prepare.apply(this, args);
	};
	
	AutocompleteEditor.prototype.open = function () {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  // Ugly fix for handsontable which grab window object for autocomplete scroll listener instead table element.
	  this.TEXTAREA_PARENT.style.overflow = 'auto';
	
	  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    args[_key4] = arguments[_key4];
	  }
	
	  _handsontableEditor2.default.prototype.open.apply(this, args);
	  this.TEXTAREA_PARENT.style.overflow = '';
	
	  var choicesListHot = this.htEditor.getInstance();
	  var _this = this;
	  var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
	
	  this.showEditableElement();
	  this.focus();
	
	  choicesListHot.updateSettings({
	    colWidths: trimDropdown ? [(0, _element.outerWidth)(this.TEXTAREA) - 2] : void 0,
	    width: trimDropdown ? (0, _element.outerWidth)(this.TEXTAREA) + (0, _element.getScrollbarWidth)() + 2 : void 0,
	    afterRenderer: function afterRenderer(TD, row, col, prop, value) {
	      var _this$cellProperties = _this.cellProperties,
	          filteringCaseSensitive = _this$cellProperties.filteringCaseSensitive,
	          allowHtml = _this$cellProperties.allowHtml;
	
	      var cellValue = (0, _mixed.stringify)(value);
	      var indexOfMatch = void 0;
	      var match = void 0;
	
	      if (cellValue && !allowHtml) {
	        indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(this.query) : cellValue.toLowerCase().indexOf(_this.query.toLowerCase());
	
	        if (indexOfMatch !== -1) {
	          match = cellValue.substr(indexOfMatch, _this.query.length);
	          cellValue = cellValue.replace(match, '<strong>' + match + '</strong>');
	        }
	      }
	      TD.innerHTML = cellValue;
	    },
	
	    autoColumnSize: true,
	    modifyColWidth: function modifyColWidth(width, col) {
	      // workaround for <strong> text overlapping the dropdown, not really accurate
	      var autoWidths = this.getPlugin('autoColumnSize').widths;
	      var columnWidth = width;
	
	      if (autoWidths[col]) {
	        columnWidth = autoWidths[col];
	      }
	
	      return trimDropdown ? columnWidth : columnWidth + 15;
	    }
	  });
	
	  // Add additional space for autocomplete holder
	  this.htEditor.view.wt.wtTable.holder.parentNode.style['padding-right'] = (0, _element.getScrollbarWidth)() + 2 + 'px';
	
	  if (skipOne) {
	    skipOne = false;
	  }
	
	  _this.instance._registerTimeout(function () {
	    _this.queryChoices(_this.TEXTAREA.value);
	  });
	};
	
	AutocompleteEditor.prototype.queryChoices = function (query) {
	  var _this3 = this;
	
	  this.query = query;
	  var source = this.cellProperties.source;
	
	  if (typeof source === 'function') {
	    source.call(this.cellProperties, query, function (choices) {
	      _this3.rawChoices = choices;
	      _this3.updateChoicesList(_this3.stripValuesIfNeeded(choices));
	    });
	  } else if (Array.isArray(source)) {
	    this.rawChoices = source;
	    this.updateChoicesList(this.stripValuesIfNeeded(source));
	  } else {
	    this.updateChoicesList([]);
	  }
	};
	
	AutocompleteEditor.prototype.updateChoicesList = function (choicesList) {
	  var pos = (0, _element.getCaretPosition)(this.TEXTAREA);
	  var endPos = (0, _element.getSelectionEndPosition)(this.TEXTAREA);
	  var sortByRelevanceSetting = this.cellProperties.sortByRelevance;
	  var filterSetting = this.cellProperties.filter;
	  var orderByRelevance = null;
	  var highlightIndex = null;
	  var choices = choicesList;
	
	  if (sortByRelevanceSetting) {
	    orderByRelevance = AutocompleteEditor.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);
	  }
	  var orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;
	
	  if (filterSetting === false) {
	    if (orderByRelevanceLength) {
	      highlightIndex = orderByRelevance[0];
	    }
	  } else {
	    var sorted = [];
	
	    for (var i = 0, choicesCount = choices.length; i < choicesCount; i++) {
	      if (sortByRelevanceSetting && orderByRelevanceLength <= i) {
	        break;
	      }
	      if (orderByRelevanceLength) {
	        sorted.push(choices[orderByRelevance[i]]);
	      } else {
	        sorted.push(choices[i]);
	      }
	    }
	
	    highlightIndex = 0;
	    choices = sorted;
	  }
	
	  this.strippedChoices = choices;
	  this.htEditor.loadData((0, _array.pivot)([choices]));
	
	  this.updateDropdownHeight();
	
	  this.flipDropdownIfNeeded();
	
	  if (this.cellProperties.strict === true) {
	    this.highlightBestMatchingChoice(highlightIndex);
	  }
	
	  this.instance.listen(false);
	
	  (0, _element.setCaretPosition)(this.TEXTAREA, pos, pos === endPos ? void 0 : endPos);
	};
	
	AutocompleteEditor.prototype.flipDropdownIfNeeded = function () {
	  var textareaOffset = (0, _element.offset)(this.TEXTAREA);
	  var textareaHeight = (0, _element.outerHeight)(this.TEXTAREA);
	  var dropdownHeight = this.getDropdownHeight();
	  var trimmingContainer = (0, _element.getTrimmingContainer)(this.instance.view.wt.wtTable.TABLE);
	  var trimmingContainerScrollTop = trimmingContainer.scrollTop;
	  var headersHeight = (0, _element.outerHeight)(this.instance.view.wt.wtTable.THEAD);
	  var containerOffset = {
	    row: 0,
	    col: 0
	  };
	
	  if (trimmingContainer !== window) {
	    containerOffset = (0, _element.offset)(trimmingContainer);
	  }
	
	  var spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;
	  var spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;
	  var flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;
	
	  if (flipNeeded) {
	    this.flipDropdown(dropdownHeight);
	  } else {
	    this.unflipDropdown();
	  }
	
	  this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);
	
	  return flipNeeded;
	};
	
	AutocompleteEditor.prototype.limitDropdownIfNeeded = function (spaceAvailable, dropdownHeight) {
	  if (dropdownHeight > spaceAvailable) {
	    var tempHeight = 0;
	    var i = 0;
	    var lastRowHeight = 0;
	    var height = null;
	
	    do {
	      lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view.wt.wtSettings.settings.defaultRowHeight;
	      tempHeight += lastRowHeight;
	      i += 1;
	    } while (tempHeight < spaceAvailable);
	
	    height = tempHeight - lastRowHeight;
	
	    if (this.htEditor.flipped) {
	      this.htEditor.rootElement.style.top = parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height + 'px';
	    }
	
	    this.setDropdownHeight(tempHeight - lastRowHeight);
	  }
	};
	
	AutocompleteEditor.prototype.flipDropdown = function (dropdownHeight) {
	  var dropdownStyle = this.htEditor.rootElement.style;
	
	  dropdownStyle.position = 'absolute';
	  dropdownStyle.top = -dropdownHeight + 'px';
	
	  this.htEditor.flipped = true;
	};
	
	AutocompleteEditor.prototype.unflipDropdown = function () {
	  var dropdownStyle = this.htEditor.rootElement.style;
	
	  if (dropdownStyle.position === 'absolute') {
	    dropdownStyle.position = '';
	    dropdownStyle.top = '';
	  }
	
	  this.htEditor.flipped = void 0;
	};
	
	AutocompleteEditor.prototype.updateDropdownHeight = function () {
	  var currentDropdownWidth = this.htEditor.getColWidth(0) + (0, _element.getScrollbarWidth)() + 2;
	  var trimDropdown = this.cellProperties.trimDropdown;
	
	  this.htEditor.updateSettings({
	    height: this.getDropdownHeight(),
	    width: trimDropdown ? void 0 : currentDropdownWidth
	  });
	
	  this.htEditor.view.wt.wtTable.alignOverlaysWithTrimmingContainer();
	};
	
	AutocompleteEditor.prototype.setDropdownHeight = function (height) {
	  this.htEditor.updateSettings({
	    height: height
	  });
	};
	
	AutocompleteEditor.prototype.finishEditing = function (restoreOriginalValue) {
	  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	    args[_key5 - 1] = arguments[_key5];
	  }
	
	  _handsontableEditor2.default.prototype.finishEditing.apply(this, [restoreOriginalValue].concat(args));
	};
	
	AutocompleteEditor.prototype.highlightBestMatchingChoice = function (index) {
	  if (typeof index === 'number') {
	    this.htEditor.selectCell(index, 0, void 0, void 0, void 0, false);
	  } else {
	    this.htEditor.deselectCell();
	  }
	};
	
	/**
	 * Filters and sorts by relevance
	 * @param value
	 * @param choices
	 * @param caseSensitive
	 * @returns {Array} array of indexes in original choices array
	 */
	AutocompleteEditor.sortByRelevance = function (value, choices, caseSensitive) {
	  var choicesRelevance = [];
	  var currentItem = void 0;
	  var valueLength = value.length;
	  var valueIndex = void 0;
	  var charsLeft = void 0;
	  var result = [];
	  var i = void 0;
	  var choicesCount = choices.length;
	
	  if (valueLength === 0) {
	    for (i = 0; i < choicesCount; i++) {
	      result.push(i);
	    }
	    return result;
	  }
	
	  for (i = 0; i < choicesCount; i++) {
	    currentItem = (0, _string.stripTags)((0, _mixed.stringify)(choices[i]));
	
	    if (caseSensitive) {
	      valueIndex = currentItem.indexOf(value);
	    } else {
	      valueIndex = currentItem.toLowerCase().indexOf(value.toLowerCase());
	    }
	
	    if (valueIndex !== -1) {
	      charsLeft = currentItem.length - valueIndex - valueLength;
	
	      choicesRelevance.push({
	        baseIndex: i,
	        index: valueIndex,
	        charsLeft: charsLeft,
	        value: currentItem
	      });
	    }
	  }
	
	  choicesRelevance.sort(function (a, b) {
	
	    if (b.index === -1) {
	      return -1;
	    }
	    if (a.index === -1) {
	      return 1;
	    }
	
	    if (a.index < b.index) {
	      return -1;
	    } else if (b.index < a.index) {
	      return 1;
	    } else if (a.index === b.index) {
	      if (a.charsLeft < b.charsLeft) {
	        return -1;
	      } else if (a.charsLeft > b.charsLeft) {
	        return 1;
	      }
	    }
	
	    return 0;
	  });
	
	  for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {
	    result.push(choicesRelevance[i].baseIndex);
	  }
	
	  return result;
	};
	
	AutocompleteEditor.prototype.getDropdownHeight = function () {
	  var firstRowHeight = this.htEditor.getInstance().getRowHeight(0) || 23;
	  var visibleRows = this.cellProperties.visibleRows;
	
	  return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8;
	};
	
	AutocompleteEditor.prototype.stripValueIfNeeded = function (value) {
	  return this.stripValuesIfNeeded([value])[0];
	};
	
	AutocompleteEditor.prototype.stripValuesIfNeeded = function (values) {
	  var allowHtml = this.cellProperties.allowHtml;
	
	
	  var stringifiedValues = (0, _array.arrayMap)(values, function (value) {
	    return (0, _mixed.stringify)(value);
	  });
	  var strippedValues = (0, _array.arrayMap)(stringifiedValues, function (value) {
	    return allowHtml ? value : (0, _string.stripTags)(value);
	  });
	
	  return strippedValues;
	};
	
	AutocompleteEditor.prototype.allowKeyEventPropagation = function (keyCode) {
	  var selectedRange = this.htEditor.getSelectedRangeLast();
	  var selected = { row: selectedRange ? selectedRange.from.row : -1 };
	  var allowed = false;
	
	  if (keyCode === _unicode.KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {
	    allowed = true;
	  }
	  if (keyCode === _unicode.KEY_CODES.ARROW_UP && selected.row > -1) {
	    allowed = true;
	  }
	
	  return allowed;
	};
	
	AutocompleteEditor.prototype.close = function () {
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	
	  for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	    args[_key6] = arguments[_key6];
	  }
	
	  _handsontableEditor2.default.prototype.close.apply(this, args);
	};
	
	AutocompleteEditor.prototype.discardEditor = function () {
	  for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	    args[_key7] = arguments[_key7];
	  }
	
	  _handsontableEditor2.default.prototype.discardEditor.apply(this, args);
	
	  this.instance.view.render();
	};
	
	exports.default = AutocompleteEditor;
	
	/***/ }),
	/* 191 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _unicode = __webpack_require__(21);
	
	var _object = __webpack_require__(1);
	
	var _element = __webpack_require__(0);
	
	var _event = __webpack_require__(13);
	
	var _textEditor = __webpack_require__(59);
	
	var _textEditor2 = _interopRequireDefault(_textEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var HandsontableEditor = _textEditor2.default.prototype.extend();
	
	/**
	 * @private
	 * @editor HandsontableEditor
	 * @class HandsontableEditor
	 * @dependencies TextEditor
	 */
	HandsontableEditor.prototype.createElements = function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  _textEditor2.default.prototype.createElements.apply(this, args);
	
	  var DIV = document.createElement('DIV');
	  DIV.className = 'handsontableEditor';
	  this.TEXTAREA_PARENT.appendChild(DIV);
	
	  this.htContainer = DIV;
	  this.assignHooks();
	};
	
	HandsontableEditor.prototype.prepare = function (td, row, col, prop, value, cellProperties) {
	  for (var _len2 = arguments.length, args = Array(_len2 > 6 ? _len2 - 6 : 0), _key2 = 6; _key2 < _len2; _key2++) {
	    args[_key2 - 6] = arguments[_key2];
	  }
	
	  _textEditor2.default.prototype.prepare.apply(this, [td, row, col, prop, value, cellProperties].concat(args));
	
	  var parent = this;
	  var options = {
	    startRows: 0,
	    startCols: 0,
	    minRows: 0,
	    minCols: 0,
	    className: 'listbox',
	    copyPaste: false,
	    autoColumnSize: false,
	    autoRowSize: false,
	    readOnly: true,
	    fillHandle: false,
	    autoWrapCol: false,
	    autoWrapRow: false,
	    afterOnCellMouseDown: function afterOnCellMouseDown(_, coords) {
	      var sourceValue = this.getSourceData(coords.row, coords.col);
	
	      // if the value is undefined then it means we don't want to set the value
	      if (sourceValue !== void 0) {
	        parent.setValue(sourceValue);
	      }
	      parent.instance.destroyEditor();
	    }
	  };
	
	  if (this.cellProperties.handsontable) {
	    (0, _object.extend)(options, cellProperties.handsontable);
	  }
	  this.htOptions = options;
	};
	
	var onBeforeKeyDown = function onBeforeKeyDown(event) {
	  if ((0, _event.isImmediatePropagationStopped)(event)) {
	    return;
	  }
	  var editor = this.getActiveEditor();
	
	  var innerHOT = editor.htEditor.getInstance();
	
	  var rowToSelect = void 0;
	  var selectedRow = void 0;
	
	  if (event.keyCode === _unicode.KEY_CODES.ARROW_DOWN) {
	    if (!innerHOT.getSelectedLast() && !innerHOT.flipped) {
	      rowToSelect = 0;
	    } else if (innerHOT.getSelectedLast()) {
	      if (innerHOT.flipped) {
	        rowToSelect = innerHOT.getSelectedLast()[0] + 1;
	      } else if (!innerHOT.flipped) {
	        var lastRow = innerHOT.countRows() - 1;
	        selectedRow = innerHOT.getSelectedLast()[0];
	        rowToSelect = Math.min(lastRow, selectedRow + 1);
	      }
	    }
	  } else if (event.keyCode === _unicode.KEY_CODES.ARROW_UP) {
	    if (!innerHOT.getSelectedLast() && innerHOT.flipped) {
	      rowToSelect = innerHOT.countRows() - 1;
	    } else if (innerHOT.getSelectedLast()) {
	      if (innerHOT.flipped) {
	        selectedRow = innerHOT.getSelectedLast()[0];
	        rowToSelect = Math.max(0, selectedRow - 1);
	      } else {
	        selectedRow = innerHOT.getSelectedLast()[0];
	        rowToSelect = selectedRow - 1;
	      }
	    }
	  }
	
	  if (rowToSelect !== void 0) {
	    if (rowToSelect < 0 || innerHOT.flipped && rowToSelect > innerHOT.countRows() - 1) {
	      innerHOT.deselectCell();
	    } else {
	      innerHOT.selectCell(rowToSelect, 0);
	    }
	    if (innerHOT.getData().length) {
	      event.preventDefault();
	      (0, _event.stopImmediatePropagation)(event);
	
	      editor.instance.listen();
	      editor.TEXTAREA.focus();
	    }
	  }
	};
	
	HandsontableEditor.prototype.open = function () {
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }
	
	  _textEditor2.default.prototype.open.apply(this, args);
	
	  if (this.htEditor) {
	    this.htEditor.destroy();
	  }
	
	  if (this.htContainer.style.display === 'none') {
	    this.htContainer.style.display = '';
	  }
	
	  // Construct and initialise a new Handsontable
	  this.htEditor = new this.instance.constructor(this.htContainer, this.htOptions);
	  this.htEditor.init();
	  this.htEditor.rootElement.style.display = '';
	
	  if (this.cellProperties.strict) {
	    this.htEditor.selectCell(0, 0);
	  } else {
	    this.htEditor.deselectCell();
	  }
	
	  (0, _element.setCaretPosition)(this.TEXTAREA, 0, this.TEXTAREA.value.length);
	};
	
	HandsontableEditor.prototype.close = function () {
	  this.htEditor.rootElement.style.display = 'none';
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	
	  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    args[_key4] = arguments[_key4];
	  }
	
	  _textEditor2.default.prototype.close.apply(this, args);
	};
	
	HandsontableEditor.prototype.focus = function () {
	  for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	    args[_key5] = arguments[_key5];
	  }
	
	  _textEditor2.default.prototype.focus.apply(this, args);
	};
	
	HandsontableEditor.prototype.beginEditing = function () {
	  var onBeginEditing = this.instance.getSettings().onBeginEditing;
	
	  if (onBeginEditing && onBeginEditing() === false) {
	    return;
	  }
	
	  for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	    args[_key6] = arguments[_key6];
	  }
	
	  _textEditor2.default.prototype.beginEditing.apply(this, args);
	};
	
	HandsontableEditor.prototype.finishEditing = function () {
	  if (this.htEditor && this.htEditor.isListening()) {
	    // if focus is still in the HOT editor
	    this.instance.listen(); // return the focus to the parent HOT instance
	  }
	
	  if (this.htEditor && this.htEditor.getSelectedLast()) {
	    var value = this.htEditor.getInstance().getValue();
	
	    if (value !== void 0) {
	      // if the value is undefined then it means we don't want to set the value
	      this.setValue(value);
	    }
	  }
	
	  for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	    args[_key7] = arguments[_key7];
	  }
	
	  return _textEditor2.default.prototype.finishEditing.apply(this, args);
	};
	
	HandsontableEditor.prototype.assignHooks = function () {
	  var _this = this;
	
	  this.instance.addHook('afterDestroy', function () {
	    if (_this.htEditor) {
	      _this.htEditor.destroy();
	    }
	  });
	};
	
	exports.default = HandsontableEditor;
	
	/***/ }),
	/* 192 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getNormalizedDate = getNormalizedDate;
	/* eslint-disable import/prefer-default-export */
	
	/**
	 * Get normalized Date object for the ISO formatted date strings.
	 * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.
	 * See: Github issue #3338.
	 *
	 * @param {String} dateString String representing the date.
	 * @returns {Date} The proper Date object.
	 */
	function getNormalizedDate(dateString) {
	  var nativeDate = new Date(dateString);
	
	  // NaN if dateString is not in ISO format
	  if (!isNaN(new Date(dateString + "T00:00").getDate())) {
	
	    // Compensate timezone offset
	    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);
	  }
	
	  return nativeDate;
	}
	
	/***/ }),
	/* 193 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	/**
	 * SheetClip - Spreadsheet Clipboard Parser
	 * version 0.2
	 *
	 * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,
	 * Google Docs and Microsoft Excel.
	 *
	 * Copyright 2012, Marcin Warpechowski
	 * Licensed under the MIT license.
	 * http://github.com/warpech/sheetclip/
	 */
	/*jslint white: true*/
	(function (global) {
	  "use strict";
	
	  function countQuotes(str) {
	    return str.split('"').length - 1;
	  }
	
	  var SheetClip = {
	    /**
	     * Decode spreadsheet string into array
	     *
	     * @param {String} str
	     * @returns {Array}
	     */
	    parse: function parse(str) {
	      var r,
	          rLen,
	          rows,
	          arr = [],
	          a = 0,
	          c,
	          cLen,
	          multiline,
	          last;
	
	      rows = str.split('\n');
	
	      if (rows.length > 1 && rows[rows.length - 1] === '') {
	        rows.pop();
	      }
	      for (r = 0, rLen = rows.length; r < rLen; r += 1) {
	        rows[r] = rows[r].split('\t');
	
	        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {
	          if (!arr[a]) {
	            arr[a] = [];
	          }
	          if (multiline && c === 0) {
	            last = arr[a].length - 1;
	            arr[a][last] = arr[a][last] + '\n' + rows[r][0];
	
	            if (multiline && countQuotes(rows[r][0]) & 1) {
	              //& 1 is a bitwise way of performing mod 2
	              multiline = false;
	              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/""/g, '"');
	            }
	          } else {
	            if (c === cLen - 1 && rows[r][c].indexOf('"') === 0 && countQuotes(rows[r][c]) & 1) {
	              arr[a].push(rows[r][c].substring(1).replace(/""/g, '"'));
	              multiline = true;
	            } else {
	              arr[a].push(rows[r][c].replace(/""/g, '"'));
	              multiline = false;
	            }
	          }
	        }
	        if (!multiline) {
	          a += 1;
	        }
	      }
	
	      return arr;
	    },
	
	    /**
	     * Encode array into valid spreadsheet string
	     *
	     * @param arr
	     * @returns {String}
	     */
	    stringify: function stringify(arr) {
	      var r,
	          rLen,
	          c,
	          cLen,
	          str = '',
	          val;
	
	      for (r = 0, rLen = arr.length; r < rLen; r += 1) {
	        cLen = arr[r].length;
	
	        for (c = 0; c < cLen; c += 1) {
	          if (c > 0) {
	            str += '\t';
	          }
	          val = arr[r][c];
	
	          if (typeof val === 'string') {
	            if (val.indexOf('\n') > -1) {
	              str += '"' + val.replace(/"/g, '""') + '"';
	            } else {
	              str += val;
	            }
	          } else if (val === null || val === void 0) {
	            // void 0 resolves to undefined
	            str += '';
	          } else {
	            str += val;
	          }
	        }
	
	        if (r !== rLen - 1) {
	          str += '\n';
	        }
	      }
	
	      return str;
	    }
	  };
	
	  if (true) {
	    exports.parse = SheetClip.parse;
	    exports.stringify = SheetClip.stringify;
	  } else {
	    global.SheetClip = SheetClip;
	  }
	})(window);
	
	/***/ }),
	/* 194 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.mouseDown = mouseDown;
	exports.mouseOver = mouseOver;
	exports.handleMouseEvent = handleMouseEvent;
	
	var _event = __webpack_require__(13);
	
	var _src = __webpack_require__(4);
	
	/**
	 * MouseDown handler.
	 *
	 * @param {Object} options
	 * @param {Boolean} options.isShiftKey The flag which indicates if the shift key is pressed.
	 * @param {Boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.
	 * @param {Boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.
	 * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.
	 * @param {Selection} options.selection The Selection class instance.
	 * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what
	 *                                    operation will be performed in later selection stages.
	 */
	function mouseDown(_ref) {
	  var isShiftKey = _ref.isShiftKey,
	      isLeftClick = _ref.isLeftClick,
	      isRightClick = _ref.isRightClick,
	      coords = _ref.coords,
	      selection = _ref.selection,
	      controller = _ref.controller;
	
	  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;
	  var selectedCorner = selection.isSelectedByCorner();
	  var selectedRow = selection.isSelectedByRowHeader();
	
	  if (isShiftKey && currentSelection) {
	    if (coords.row >= 0 && coords.col >= 0 && !controller.cells) {
	      selection.setRangeEnd(coords);
	    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cells) {
	      selection.setRangeEnd(new _src.CellCoords(coords.row, coords.col));
	    } else if (selectedCorner && coords.row < 0 && !controller.column) {
	      selection.setRangeEnd(new _src.CellCoords(currentSelection.to.row, coords.col));
	    } else if (selectedRow && coords.col < 0 && !controller.row) {
	      selection.setRangeEnd(new _src.CellCoords(coords.row, currentSelection.to.col));
	    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {
	      selection.selectRows(currentSelection.from.row, coords.row);
	    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {
	      selection.selectColumns(currentSelection.from.col, coords.col);
	    }
	  } else {
	    var newCoord = new _src.CellCoords(coords.row, coords.col);
	
	    if (newCoord.row < 0) {
	      newCoord.row = 0;
	    }
	    if (newCoord.col < 0) {
	      newCoord.col = 0;
	    }
	
	    var allowRightClickSelection = !selection.inInSelection(newCoord);
	    var performSelection = isLeftClick || isRightClick && allowRightClickSelection;
	
	    // clicked row header and when some column was selected
	    if (coords.row < 0 && coords.col >= 0 && !controller.column) {
	      if (performSelection) {
	        selection.selectColumns(coords.col);
	      }
	
	      // clicked column header and when some row was selected
	    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {
	      if (performSelection) {
	        selection.selectRows(coords.row);
	      }
	    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cells) {
	      if (performSelection) {
	        selection.setRangeStart(coords);
	      }
	    } else if (coords.col < 0 && coords.row < 0) {
	      selection.setRangeStart(coords);
	    }
	  }
	}
	
	/**
	 * MouseOver handler.
	 *
	 * @param {Object} options
	 * @param {Boolean} options.isLeftClick
	 * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.
	 * @param {Selection} options.selection The Selection class instance.
	 * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what
	 *                                    operation will be performed in later selection stages.
	 */
	function mouseOver(_ref2) {
	  var isLeftClick = _ref2.isLeftClick,
	      coords = _ref2.coords,
	      selection = _ref2.selection,
	      controller = _ref2.controller;
	
	  if (!isLeftClick) {
	    return;
	  }
	
	  var selectedRow = selection.isSelectedByRowHeader();
	  var selectedColumn = selection.isSelectedByColumnHeader();
	  var countCols = selection.tableProps.countCols();
	  var countRows = selection.tableProps.countRows();
	
	  if (selectedColumn && !controller.column) {
	    selection.setRangeEnd(new _src.CellCoords(countRows - 1, coords.col));
	  } else if (selectedRow && !controller.row) {
	    selection.setRangeEnd(new _src.CellCoords(coords.row, countCols - 1));
	  } else if (!controller.cell) {
	    selection.setRangeEnd(coords);
	  }
	}
	
	var handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);
	
	/**
	 * Mouse handler for selection functionality.
	 *
	 * @param {Event} event An native event to handle.
	 * @param {Object} options
	 * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.
	 * @param {Selection} options.selection The Selection class instance.
	 * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what
	 *                                    operation will be performed in later selection stages.
	 */
	function handleMouseEvent(event, _ref3) {
	  var coords = _ref3.coords,
	      selection = _ref3.selection,
	      controller = _ref3.controller;
	
	  handlers.get(event.type)({
	    coords: coords,
	    selection: selection,
	    controller: controller,
	    isShiftKey: event.shiftKey,
	    isLeftClick: (0, _event.isLeftClick)(event) || event.type === 'touchstart',
	    isRightClick: (0, _event.isRightClick)(event)
	  });
	}
	
	/***/ }),
	/* 195 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.RecordTranslator = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.registerIdentity = registerIdentity;
	exports.getTranslator = getTranslator;
	exports.getIdentity = getIdentity;
	
	var _core = __webpack_require__(90);
	
	var _core2 = _interopRequireDefault(_core);
	
	var _object = __webpack_require__(1);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class RecordTranslator
	 * @util
	 */
	var RecordTranslator = exports.RecordTranslator = function () {
	  function RecordTranslator(hot) {
	    _classCallCheck(this, RecordTranslator);
	
	    this.hot = hot;
	  }
	
	  /**
	   * Translate physical row index into visual.
	   *
	   * @param {Number} row Physical row index.
	   * @returns {Number} Returns visual row index.
	   */
	
	
	  _createClass(RecordTranslator, [{
	    key: 'toVisualRow',
	    value: function toVisualRow(row) {
	      return this.hot.runHooks('unmodifyRow', row);
	    }
	
	    /**
	     * Translate physical column index into visual.
	     *
	     * @param {Number} column Physical column index.
	     * @returns {Number} Returns visual column index.
	     */
	
	  }, {
	    key: 'toVisualColumn',
	    value: function toVisualColumn(column) {
	      return this.hot.runHooks('unmodifyCol', column);
	    }
	
	    /**
	     * Translate physical coordinates into visual. Can be passed as separate 2 arguments (row, column) or as an object in first
	     * argument with `row` and `column` keys.
	     *
	     * @param {Number|Object} row Physical coordinates or row index.
	     * @param {Number} [column] Physical column index.
	     * @returns {Object|Array} Returns an object with visual records or an array if coordinates passed as separate arguments.
	     */
	
	  }, {
	    key: 'toVisual',
	    value: function toVisual(row, column) {
	      var result = void 0;
	
	      if ((0, _object.isObject)(row)) {
	        result = {
	          row: this.toVisualRow(row.row),
	          column: this.toVisualColumn(row.column)
	        };
	      } else {
	        result = [this.toVisualRow(row), this.toVisualColumn(column)];
	      }
	
	      return result;
	    }
	
	    /**
	     * Translate visual row index into physical.
	     *
	     * @param {Number} row Visual row index.
	     * @returns {Number} Returns physical row index.
	     */
	
	  }, {
	    key: 'toPhysicalRow',
	    value: function toPhysicalRow(row) {
	      return this.hot.runHooks('modifyRow', row);
	    }
	
	    /**
	     * Translate visual column index into physical.
	     *
	     * @param {Number} column Visual column index.
	     * @returns {Number} Returns physical column index.
	     */
	
	  }, {
	    key: 'toPhysicalColumn',
	    value: function toPhysicalColumn(column) {
	      return this.hot.runHooks('modifyCol', column);
	    }
	
	    /**
	     * Translate visual coordinates into physical. Can be passed as separate 2 arguments (row, column) or as an object in first
	     * argument with `row` and `column` keys.
	     *
	     * @param {Number|Object} row Visual coordinates or row index.
	     * @param {Number} [column] Visual column index.
	     * @returns {Object|Array} Returns an object with physical records or an array if coordinates passed as separate arguments.
	     */
	
	  }, {
	    key: 'toPhysical',
	    value: function toPhysical(row, column) {
	      var result = void 0;
	
	      if ((0, _object.isObject)(row)) {
	        result = {
	          row: this.toPhysicalRow(row.row),
	          column: this.toPhysicalColumn(row.column)
	        };
	      } else {
	        result = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];
	      }
	
	      return result;
	    }
	  }]);
	
	  return RecordTranslator;
	}();
	
	var identities = new WeakMap();
	var translatorSingletons = new WeakMap();
	
	/**
	 * Allows to register custom identity manually.
	 *
	 * @param {*} identity
	 * @param {*} hot
	 */
	function registerIdentity(identity, hot) {
	  identities.set(identity, hot);
	}
	
	/**
	 * Returns a cached instance of RecordTranslator or create the new one for given identity.
	 *
	 * @param {*} identity
	 * @returns {RecordTranslator}
	 */
	function getTranslator(identity) {
	  var instance = identity instanceof _core2.default ? identity : getIdentity(identity);
	  var singleton = void 0;
	
	  if (translatorSingletons.has(instance)) {
	    singleton = translatorSingletons.get(instance);
	  } else {
	    singleton = new RecordTranslator(instance);
	    translatorSingletons.set(instance, singleton);
	  }
	
	  return singleton;
	}
	
	/**
	 * Returns mapped identity.
	 *
	 * @param {*} identity
	 * @returns {*}
	 */
	function getIdentity(identity) {
	  if (!identities.has(identity)) {
	    throw Error('Record translator was not registered for this object identity');
	  }
	
	  return identities.get(identity);
	}
	
	/***/ }),
	/* 196 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.registerAsRootInstance = registerAsRootInstance;
	exports.hasValidParameter = hasValidParameter;
	exports.isRootInstance = isRootInstance;
	var holder = exports.holder = new WeakMap();
	
	var rootInstanceSymbol = exports.rootInstanceSymbol = Symbol('rootInstance');
	
	/**
	 * Register an object as a root instance.
	 *
	 * @param  {Object} object An object to associate with root instance flag.
	 */
	function registerAsRootInstance(object) {
	  holder.set(object, true);
	}
	
	/**
	 * Check if the source of the root indication call is valid.
	 *
	 * @param  {Symbol} rootSymbol A symbol as a source of truth.
	 * @return {Boolean}
	 */
	function hasValidParameter(rootSymbol) {
	  return rootSymbol === rootInstanceSymbol;
	}
	
	/**
	 * Check if passed an object was flagged as a root instance.
	 *
	 * @param  {Object} object An object to check.
	 * @return {Boolean}
	 */
	function isRootInstance(object) {
	  return holder.has(object);
	}
	
	/***/ }),
	/* 197 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _mixed = __webpack_require__(11);
	
	var _object = __webpack_require__(1);
	
	/**
	 * @alias Options
	 * @constructor
	 * @description
	
	 * ## Constructor options
	 *
	 * Constructor options are applied using an object literal passed as a second argument to the Handsontable constructor.
	 *
	 * ```js
	 * const container = document.getElementById('example');
	 * const hot = new Handsontable(container, {
	 *   data: myArray,
	 *   width: 400,
	 *   height: 300
	 * });
	 * ```
	 *
	 * ---
	 * ## Cascading configuration
	 *
	 * Handsontable is using *Cascading Configuration*, which is a fast way to provide configuration options
	 * for the entire table, including its columns and particular cells.
	 *
	 * Consider the following example:
	 * ```js
	 * const container = document.getElementById('example');
	 * const hot = new Handsontable(container, {
	 *   readOnly: true,
	 *   columns: [
	 *     {readOnly: false},
	 *     {},
	 *     {}
	 *   ],
	 *   cells: function(row, col, prop) {
	 *     var cellProperties = {};
	 *
	 *     if (row === 0 && col === 0) {
	 *       cellProperties.readOnly = true;
	 *     }
	 *
	 *     return cellProperties;
	 *   }
	 * });
	 * ```
	 *
	 * The above notation will result in all TDs being *read only*, except for first column TDs which will be *editable*, except for the TD in top left corner which will still be *read only*.
	 *
	 * ### The Cascading Configuration model
	 *
	 * ##### 1. Constructor
	 *
	 * Configuration options that are provided using first-level `handsontable(container, {option: "value"})` and `updateSettings` method.
	 *
	 * ##### 2. Columns
	 *
	 * Configuration options that are provided using second-level object `handsontable(container, {columns: {option: "value"}]})`
	 *
	 * ##### 3. Cells
	 *
	 * Configuration options that are provided using third-level function `handsontable(container, {cells: function: (row, col, prop){ }})`
	 *
	 * ---
	 * ## Architecture performance
	 *
	 * The Cascading Configuration model is based on prototypical inheritance. It is much faster and memory efficient
	 * compared to the previous model that used jQuery extend. See: [http://jsperf.com/extending-settings](http://jsperf.com/extending-settings).
	 *
	 * ---
	 * __Important notice:__ In order for the data separation to work properly, make sure that each instance of Handsontable has a unique `id`.
	 */
	function DefaultSettings() {}
	
	DefaultSettings.prototype = {
	  /**
	   * License key for commercial version of Handsontable.
	   *
	   * @pro
	   * @type {String}
	   * @default 'trial'
	   * @example
	   * ```js
	   * licenseKey: '00000-00000-00000-00000-00000',
	   * ```
	   */
	  licenseKey: 'trial',
	
	  /**
	   * @description
	   * Initial data source that will be bound to the data grid __by reference__ (editing data grid alters the data source).
	   * Can be declared as an array of arrays, array of objects or a function.
	   *
	   * See [Understanding binding as reference](https://docs.handsontable.com/tutorial-data-binding.html#page-reference).
	   *
	   * @type {Array[]|Object[]|Function}
	   * @default undefined
	   * @example
	   * ```js
	   * // as an array of arrays
	   * data: [
	   *   ['A', 'B', 'C'],
	   *   ['D', 'E', 'F'],
	   *   ['G', 'H', 'J']
	   * ]
	   *
	   * // as an array of objects
	   * data: [
	   *   {id: 1, name: 'Ted Right'},
	   *   {id: 2, name: 'Frank Honest'},
	   *   {id: 3, name: 'Joan Well'},
	   *   {id: 4, name: 'Gail Polite'},
	   *   {id: 5, name: 'Michael Fair'},
	   * ]
	   * ```
	   */
	  data: void 0,
	
	  /**
	   * @description
	   * Defines the structure of a new row when data source is an array of objects.
	   *
	   * See [data-schema](https://docs.handsontable.com/tutorial-data-sources.html#page-data-schema) for more options.
	   *
	   * @type {Object}
	   * @default undefined
	   *
	   * @example
	   * ```
	   * // with data schema we can start with an empty table
	   * data: null,
	   * dataSchema: {id: null, name: {first: null, last: null}, address: null},
	   * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
	   * columns: [
	   *   {data: 'id'},
	   *   {data: 'name.first'},
	   *   {data: 'name.last'},
	   *   {data: 'address'}
	   * ],
	   * startRows: 5,
	   * minSpareRows: 1
	   * ```
	   */
	  dataSchema: void 0,
	
	  /**
	   * Width of the grid. Can be a value or a function that returns a value.
	   *
	   * @type {Number|Function}
	   * @default undefined
	   *
	   * @example
	   * ```
	   * // as a number
	   * width: 500,
	   *
	   * // as a function
	   * width: function() {
	   *   return 500;
	   * },
	   * ```
	   */
	  width: void 0,
	
	  /**
	   * Height of the grid. Can be a number or a function that returns a number.
	   *
	   * @type {Number|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a number
	   * height: 500,
	   *
	   * // as a function
	   * height: function() {
	   *   return 500;
	   * },
	   * ```
	   */
	  height: void 0,
	
	  /**
	   * @description
	   * Initial number of rows.
	   *
	   * __Note:__ This option only has effect in Handsontable constructor and only if `data` option is not provided
	   *
	   * @type {Number}
	   * @default 5
	   *
	   * @example
	   * ```js
	   * // start with 15 empty rows
	   * startRows: 15,
	   * ```
	   */
	  startRows: 5,
	
	  /**
	   * @description
	   * Initial number of columns.
	   *
	   * __Note:__ This option only has effect in Handsontable constructor and only if `data` option is not provided
	   *
	   * @type {Number}
	   * @default 5
	   *
	   * @example
	   * ```js
	   * // start with 15 empty columns
	   * startCols: 15,
	   * ```
	   */
	  startCols: 5,
	
	  /**
	   * Setting `true` or `false` will enable or disable the default row headers (1, 2, 3).
	   * You can also define an array `['One', 'Two', 'Three', ...]` or a function to define the headers.
	   * If a function is set the index of the row is passed as a parameter.
	   *
	   * @type {Boolean|String[]|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * rowHeaders: true,
	   *
	   * // as an array
	   * rowHeaders: ['1', '2', '3'],
	   *
	   * // as a function
	   * rowHeaders: function(index) {
	   *   return index + ': AB';
	   * },
	   * ```
	   */
	  rowHeaders: void 0,
	
	  /**
	   * Setting `true` or `false` will enable or disable the default column headers (A, B, C).
	   * You can also define an array `['One', 'Two', 'Three', ...]` or a function to define the headers.
	   * If a function is set, then the index of the column is passed as a parameter.
	   *
	   * @type {Boolean|String[]|Function}
	   * @default null
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * colHeaders: true,
	   *
	   * // as an array
	   * colHeaders: ['A', 'B', 'C'],
	   *
	   * // as a function
	   * colHeaders: function(index) {
	   *   return index + ': AB';
	   * },
	   * ```
	   */
	  colHeaders: null,
	
	  /**
	   * Defines column widths in pixels. Accepts number, string (that will be converted to a number), array of numbers
	   * (if you want to define column width separately for each column) or a function (if you want to set column width
	   * dynamically on each render).
	   *
	   * @type {Number|Number[]|String|String[]|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a number, for each column.
	   * colWidths: 100,
	   *
	   * // as a string, for each column.
	   * colWidths: '100px',
	   *
	   * // as an array, based on visual indexes. The rest of the columns have a default width.
	   * colWidths: [100, 120, 90],
	   *
	   * // as a function, based on visual indexes.
	   * colWidths: function(index) {
	   *   return index * 10;
	   * },
	   * ```
	   */
	  colWidths: void 0,
	
	  /**
	   * Defines row heights in pixels. Accepts numbers, strings (that will be converted into a number), array of numbers
	   * (if you want to define row height separately for each row) or a function (if you want to set row height dynamically
	   * on each render).
	   *
	   * If the {@link ManualRowResize} or {@link AutoRowSize} plugins are enabled, this is also the minimum height that can
	   * be set via either of those two plugins.
	   *
	   * Height should be equal or greater than 23px. Table is rendered incorrectly if height is less than 23px.
	   *
	   * @type {Number|Number[]|String|String[]|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a number, the same for all rows
	   * rowHeights: 100,
	   *
	   * // as a string, the same for all row
	   * rowHeights: '100px',
	   *
	   * // as an array, based on visual indexes. The rest of the rows have a default height
	   * rowHeights: [100, 120, 90],
	   *
	   * // as a function, based on visual indexes
	   * rowHeights: function(index) {
	   *   return index * 10;
	   * },
	   * ```
	   */
	  rowHeights: void 0,
	
	  /**
	   * @description
	   * Defines the cell properties and data binding for certain columns.
	   *
	   * __Note:__ Using this option sets a fixed number of columns (options `startCols`, `minCols`, `maxCols` will be ignored).
	   *
	   * See [documentation -> datasources.html](https://docs.handsontable.com/tutorial-data-sources.html#page-nested) for examples.
	   *
	   * @type {Object[]|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as an array of objects
	   * // order of the objects in array is representation of physical indexes.
	   * columns: [
	   *   {
	   *     // column options for the first column
	   *     type: 'numeric',
	   *     numericFormat: {
	   *       pattern: '0,0.00 $'
	   *     }
	   *   },
	   *   {
	   *     // column options for the second column
	   *     type: 'text',
	   *     readOnly: true
	   *   }
	   * ],
	   *
	   * // or as a function, based on physical indexes
	   * columns: function(index) {
	   *   return {
	   *     type: index > 0 ? 'numeric' : 'text',
	   *     readOnly: index < 1
	   *   }
	   * }
	   * ```
	   */
	  columns: void 0,
	
	  /**
	   * @description
	   * Defines the cell properties for given `row`, `col`, `prop` coordinates. Any constructor or column option may be
	   * overwritten for a particular cell (row/column combination) using the `cells` property in the Handsontable constructor.
	   *
	   * __Note:__ Parameters `row` and `col` always represent __physical indexes__. Example below show how to execute
	   * operations based on the __visual__ representation of Handsontable.
	   *
	   * Possible values of `prop`:
	   * - property name for column's data source object, when dataset is an [array of objects](/tutorial-data-sources.html#page-object)
	   * - the same number as `col`, when dataset is an [array of arrays](/tutorial-data-sources.html#page-array)
	   *
	   * @type {Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * cells: function(row, column, prop) {
	   *   const cellProperties = {};
	   *   const visualRowIndex = this.instance.toVisualRow(row);
	   *   const visualColIndex = this.instance.toVisualColumn(column);
	   *
	   *   if (visualRowIndex === 0 && visualColIndex === 0) {
	   *     cellProperties.readOnly = true;
	   *   }
	   *
	   *   return cellProperties;
	   * },
	   * ```
	   */
	  cells: void 0,
	
	  /**
	   * Any constructor or column option may be overwritten for a particular cell (row/column combination), using `cell`
	   * array passed to the Handsontable constructor.
	   *
	   * @type {Array[]}
	   * @default []
	   *
	   * @example
	   * ```js
	   * // make cell with coordinates (0, 0) read only
	   * cell: [
	   *   {
	   *     row: 0,
	   *     col: 0,
	   *     readOnly: true
	   *   }
	   * ],
	   * ```
	   */
	  cell: [],
	
	  /**
	   * @description
	   * If `true`, enables the {@link Comments} plugin, which enables an option to apply cell comments through the context menu
	   * (configurable with context menu keys `commentsAddEdit`, `commentsRemove`).
	   *
	   * To initialize Handsontable with predefined comments, provide cell coordinates and comment text values in a form of
	   * an array.
	   *
	   * See [Comments](https://docs.handsontable.com/demo-comments_.html) demo for examples.
	   *
	   * @type {Boolean|Object[]}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable comments plugin
	   * comments: true,
	   *
	   * // or
	   * // enable comments plugin and add predefined comments
	   * comments: [
	   *   {
	   *     row: 1,
	   *     col: 1,
	   *     comment: {
	   *       value: "Test comment"
	   *     }
	   *   }
	   * ],
	   * ```
	   */
	  comments: false,
	
	  /**
	   * @description
	   * If `true`, enables the {@link CustomBorders} plugin, which enables an option to apply custom borders through the context
	   * menu (configurable with context menu key `borders`). To initialize Handsontable with predefined custom borders,
	   * provide cell coordinates and border styles in a form of an array.
	   *
	   * See [Custom Borders](https://docs.handsontable.com/demo-custom-borders.html) demo for examples.
	   *
	   * @type {Boolean|Object[]}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable custom borders
	   * customBorders: true,
	   *
	   * // or
	   * // enable custom borders and start with predefined left border
	   * customBorders: [
	   *   {
	   *     range: {
	   *       from: {
	   *         row: 1,
	   *         col: 1
	   *       },
	   *       to: {
	   *         row: 3,
	   *         col: 4
	   *       }
	   *     },
	   *     left: {
	   *       width: 2,
	   *       color: 'red'
	   *     },
	   *     right: {},
	   *     top: {},
	   *     bottom: {}
	   *   }
	   * ],
	   *
	   * // or
	   * customBorders: [
	   *   {
	   *     row: 2,
	   *     col: 2,
	   *     left: {
	   *       width: 2,
	   *       color: 'red'
	   *     },
	   *     right: {
	   *       width: 1,
	   *       color: 'green'
	   *     },
	   *     top: '',
	   *     bottom: ''
	   *   }
	   * ],
	   * ```
	   */
	  customBorders: false,
	
	  /**
	   * Minimum number of rows. At least that number of rows will be created during initialization.
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // set minimum table size to 10 rows
	   * minRows: 10,
	   * ```
	   */
	  minRows: 0,
	
	  /**
	   * Minimum number of columns. At least that number of columns will be created during initialization.
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // set minimum table size to 10 columns
	   * minCols: 10,
	   * ```
	   */
	  minCols: 0,
	
	  /**
	   * Maximum number of rows. If set to a value lower than the initial row count, the data will be trimmed to the provided
	   * value as the number of rows.
	   *
	   * @type {Number}
	   * @default Infinity
	   *
	   * @example
	   * ```js
	   * // limit table size to maximum 300 rows
	   * maxRows: 300,
	   * ```
	   */
	  maxRows: Infinity,
	
	  /**
	   * Maximum number of cols. If set to a value lower than the initial col count, the data will be trimmed to the provided
	   * value as the number of cols.
	   *
	   * @type {Number}
	   * @default Infinity
	   *
	   * @example
	   * ```js
	   * // limit table size to maximum 300 columns
	   * maxCols: 300,
	   * ```
	   */
	  maxCols: Infinity,
	
	  /**
	   * When set to 1 (or more), Handsontable will add a new row at the end of grid if there are no more empty rows.
	   * (unless the number of rows exceeds the one set in the `maxRows` property)
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // always add 3 empty rows at the table end
	   * minSpareRows: 3,
	   * ```
	   */
	  minSpareRows: 0,
	
	  /**
	   * When set to 1 (or more), Handsontable will add a new column at the end of grid if there are no more empty columns.
	   * (unless the number of rows exceeds the one set in the `maxCols` property)
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // always add 3 empty columns at the table end
	   * minSpareCols: 3,
	   * ```
	   */
	  minSpareCols: 0,
	
	  /**
	   * If set to `false`, there won't be an option to insert new rows in the Context Menu.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // hide "Insert row above" and "Insert row below" options from the Context Menu
	   * allowInsertRow: false,
	   * ```
	   */
	  allowInsertRow: true,
	
	  /**
	   * If set to `false`, there won't be an option to insert new columns in the Context Menu.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // hide "Insert column left" and "Insert column right" options from the Context Menu
	   * allowInsertColumn: false,
	   * ```
	   */
	  allowInsertColumn: true,
	
	  /**
	   * If set to `false`, there won't be an option to remove rows in the Context Menu.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // hide "Remove row" option from the Context Menu
	   * allowRemoveRow: false,
	   * ```
	   */
	  allowRemoveRow: true,
	
	  /**
	   * If set to `false`, there won't be an option to remove columns in the Context Menu.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // hide "Remove column" option from the Context Menu
	   * allowRemoveColumn: false,
	   * ```
	   */
	  allowRemoveColumn: true,
	
	  /**
	   * @description
	   * Defines how the table selection reacts. The selection support three different behaviors defined as:
	   *  * `'single'` Only a single cell can be selected.
	   *  * `'range'` Multiple cells within a single range can be selected.
	   *  * `'multiple'` Multiple ranges of cells can be selected.
	   *
	   * To see how to interact with selection by getting selected data or change styles of the selected cells go to
	   * [https://docs.handsontable.com/demo-selecting-ranges.html](https://docs.handsontable.com/demo-selecting-ranges.html).
	   *
	   * @type {String}
	   * @default 'multiple'
	   *
	   * @example
	   * ```js
	   * // only one cell can be selected at a time
	   * selectionMode: 'single',
	   * ```
	   */
	  selectionMode: 'multiple',
	
	  /**
	   * Enables the fill handle (drag-down and copy-down) functionality, which shows a small rectangle in bottom
	   * right corner of the selected area, that let's you expand values to the adjacent cells.
	   *
	   * Setting to `true` enables the fillHandle plugin. Possible values: `true` (to enable in all directions),
	   * `'vertical'` or `'horizontal'` (to enable in one direction), `false` (to disable completely), an object with
	   * options: `autoInsertRow`, `direction`.
	   *
	   * If `autoInsertRow` option is `true`, fill-handler will create new rows till it reaches the last row.
	   * It is enabled by default.
	   *
	   * @type {Boolean|String|Object}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // enable plugin in all directions and with autoInsertRow as true
	   * fillHandle: true,
	   *
	   * // or
	   * // enable plugin in vertical direction and with autoInsertRow as true
	   * fillHandle: 'vertical',
	   *
	   * // or
	   * fillHandle: {
	   *   // enable plugin in both directions and with autoInsertRow as false
	   *   autoInsertRow: false,
	   * },
	   *
	   * // or
	   * fillHandle: {
	   *   // enable plugin in vertical direction and with autoInsertRow as false
	   *   autoInsertRow: false,
	   *   direction: 'vertical'
	   * },
	   * ```
	   */
	  fillHandle: {
	    autoInsertRow: false
	  },
	
	  /**
	   * Allows to specify the number of fixed (or *frozen*) rows at the top of the table.
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // freeze the first 3 rows of the table.
	   * fixedRowsTop: 3,
	   * ```
	   */
	  fixedRowsTop: 0,
	
	  /**
	   * Allows to specify the number of fixed (or *frozen*) rows at the bottom of the table.
	   *
	   * @pro
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // freeze the last 3 rows of the table.
	   * fixedRowsBottom: 3,
	   * ```
	   */
	  fixedRowsBottom: 0,
	
	  /**
	   * Allows to specify the number of fixed (or *frozen*) columns on the left of the table.
	   *
	   * @type {Number}
	   * @default 0
	   *
	   * @example
	   * ```js
	   * // freeze first 3 columns of the table.
	   * fixedColumnsLeft: 3,
	   * ```
	   */
	  fixedColumnsLeft: 0,
	
	  /**
	   * If `true`, mouse click outside the grid will deselect the current selection. Can be a function that takes the
	   * click event target and returns a boolean.
	   *
	   * @type {Boolean|Function}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // don't clear current selection when mouse click was outside the grid
	   * outsideClickDeselects: false,
	   *
	   * // or
	   * outsideClickDeselects: function(event) {
	   *   return false;
	   * }
	   * ```
	   */
	  outsideClickDeselects: true,
	
	  /**
	   * If `true`, <kbd>ENTER</kbd> begins editing mode (like in Google Docs). If `false`, <kbd>ENTER</kbd> moves to next
	   * row (like Excel) and adds a new row if necessary. <kbd>TAB</kbd> adds new column if necessary.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * enterBeginsEditing: false,
	   * ```
	   */
	  enterBeginsEditing: true,
	
	  /**
	   * Defines the cursor movement after <kbd>ENTER</kbd> was pressed (<kbd>SHIFT</kbd> + <kbd>ENTER</kbd> uses a negative vector). Can
	   * be an object or a function that returns an object. The event argument passed to the function is a DOM Event object
	   * received after the <kbd>ENTER</kbd> key has been pressed. This event object can be used to check whether user pressed
	   * <kbd>ENTER</kbd> or <kbd>SHIFT</kbd> + <kbd>ENTER</kbd>.
	   *
	   * @type {Object|Function}
	   * @default {row: 1, col: 0}
	   *
	   * @example
	   * ```js
	   * // move selection diagonal by 1 cell in x and y axis
	   * enterMoves: {row: 1, col: 1},
	   * // or as a function
	   * enterMoves: function(event) {
	   *   return {row: 1, col: 1};
	   * },
	   * ```
	   */
	  enterMoves: { row: 1, col: 0 },
	
	  /**
	   * Defines the cursor movement after <kbd>TAB</kbd> is pressed (<kbd>SHIFT</kbd> + <kbd>TAB</kbd> uses a negative vector). Can
	   * be an object or a function that returns an object. The event argument passed to the function is a DOM Event object
	   * received after the <kbd>TAB</kbd> key has been pressed. This event object can be used to check whether user pressed
	   * <kbd>TAB</kbd> or <kbd>SHIFT</kbd> + <kbd>TAB</kbd>.
	   *
	   * @type {Object|Function}
	   * @default {row: 0, col: 1}
	   *
	   * @example
	   * ```js
	   * // move selection 2 cells away after TAB pressed.
	   * tabMoves: {row: 2, col: 2},
	   * // or as a function
	   * tabMoves: function(event) {
	   *   return {row: 2, col: 2};
	   * },
	   * ```
	   */
	  tabMoves: { row: 0, col: 1 },
	
	  /**
	   * If `true`, pressing <kbd>TAB</kbd> or right arrow in the last column will move to first column in next row.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // stop TAB key navigation on the last column
	   * autoWrapRow: false,
	   * ```
	   */
	  autoWrapRow: true,
	
	  /**
	   * If `true`, pressing <kbd>ENTER</kbd> or down arrow in the last row will move to the first row in the next column.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // stop ENTER key navigation on the last row
	   * autoWrapCol: false,
	   * ```
	   */
	  autoWrapCol: true,
	
	  /**
	   * @description
	   * Turns on saving the state of column sorting, column positions and column sizes in local storage.
	   *
	   * You can save any sort of data in local storage to preserve table state between page reloads.  In order to enable
	   * data storage mechanism, `persistentState` option must be set to `true` (you can set it either during Handsontable
	   * initialization or using the `updateSettings` method). When `persistentState` is enabled it exposes 3 hooks:
	   *
	   * __persistentStateSave__ (key: String, value: Mixed)
	   *
	   *   * Saves value under given key in browser local storage.
	   *
	   * __persistentStateLoad__ (key: String, valuePlaceholder: Object)
	   *
	   *   * Loads `value`, saved under given key, form browser local storage. The loaded `value` will be saved in
	   *   `valuePlaceholder.value` (this is due to specific behaviour of `Hooks.run()` method). If no value have
	   *   been saved under key `valuePlaceholder.value` will be `undefined`.
	   *
	   * __persistentStateReset__ (key: String)
	   *
	   *   * Clears the value saved under `key`. If no `key` is given, all values associated with table will be cleared.
	   *
	   * __Note:__ The main reason behind using `persistentState` hooks rather than regular LocalStorage API is that it
	   * ensures separation of data stored by multiple Handsontable instances. In other words, if you have two (or more)
	   * instances of Handsontable on one page, data saved by one instance won't be accessible by the second instance.
	   * Those two instances can store data under the same key and no data would be overwritten.
	   *
	   * __Important:__ In order for the data separation to work properly, make sure that each instance of Handsontable has a unique `id`.
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable the persistent state plugin
	   * persistentState: true,
	   * ```
	   */
	  persistentState: void 0,
	
	  /**
	   * Class name for all visible rows in the current selection.
	   *
	   * @type {String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // This will add a 'currentRow' class name to appropriate table cells.
	   * currentRowClassName: 'currentRow',
	   * ```
	   */
	  currentRowClassName: void 0,
	
	  /**
	   * Class name for all visible columns in the current selection.
	   *
	   * @type {String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // This will add a 'currentColumn' class name to appropriate table cells.
	   * currentColClassName: 'currentColumn',
	   * ```
	   */
	  currentColClassName: void 0,
	
	  /**
	   * Class name for all visible headers in current selection.
	   *
	   * @type {String}
	   * @default 'ht__highlight'
	   *
	   * @example
	   * ```js
	   * // This will add a 'ht__highlight' class name to appropriate table headers.
	   * currentHeaderClassName: 'ht__highlight',
	   * ```
	   */
	  currentHeaderClassName: 'ht__highlight',
	
	  /**
	   * Class name for all active headers in selections. The header will be marked with this class name
	   * only when a whole column or row will be selected.
	   *
	   * @type {String}
	   * @since 0.38.2
	   * @default 'ht__active_highlight'
	   *
	   * @example
	   * ```js
	   * // this will add a 'ht__active_highlight' class name to appropriate table headers.
	   * activeHeaderClassName: 'ht__active_highlight',
	   * ```
	   */
	  activeHeaderClassName: 'ht__active_highlight',
	
	  /**
	   * Class name for the Handsontable container element.
	   *
	   * @type {String|String[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // set custom class for table container
	   * className: 'your__class--name',
	   *
	   * // or
	   * className: ['first-class-name', 'second-class-name'],
	   * ```
	   */
	  className: void 0,
	
	  /**
	   * Class name for all tables inside container element.
	   *
	   * @type {String|String[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // set custom class for table element
	   * tableClassName: 'your__class--name',
	   *
	   * // or
	   * tableClassName: ['first-class-name', 'second-class-name'],
	   * ```
	   */
	  tableClassName: void 0,
	
	  /**
	   * @description
	   * Defines how the columns react, when the declared table width is different than the calculated sum of all column widths.
	   * [See more](https://docs.handsontable.com/demo-stretching.html) mode. Possible values:
	   *  * `'none'` Disable stretching
	   *  * `'last'` Stretch only the last column
	   *  * `'all'` Stretch all the columns evenly
	   *
	   * @type {String}
	   * @default 'none'
	   *
	   * @example
	   * ```js
	   * // fit table to the container
	   * stretchH: 'all',
	   * ```
	   */
	  stretchH: 'none',
	
	  /**
	   * Overwrites the default `isEmptyRow` method, which checks if row at the provided index is empty.
	   *
	   * @type {Function}
	   * @param {Number} row Visual row index.
	   * @returns {Boolean}
	   *
	   * @example
	   * ```js
	   * // define custom checks for empty row
	   * isEmptyRow: function(row) {
	   *    ...
	   * },
	   * ```
	   */
	  isEmptyRow: function isEmptyRow(row) {
	    var col = void 0;
	    var colLen = void 0;
	    var value = void 0;
	    var meta = void 0;
	
	    for (col = 0, colLen = this.countCols(); col < colLen; col++) {
	      value = this.getDataAtCell(row, col);
	
	      if (value !== '' && value !== null && (0, _mixed.isDefined)(value)) {
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	          meta = this.getCellMeta(row, col);
	
	          return (0, _object.isObjectEqual)(this.getSchema()[meta.prop], value);
	        }
	        return false;
	      }
	    }
	
	    return true;
	  },
	
	
	  /**
	   * Overwrites the default `isEmptyCol` method, which checks if column at the provided index is empty.
	   *
	   * @type {Function}
	   * @param {Number} column Visual column index
	   * @returns {Boolean}
	   *
	   * @example
	   * ```js
	   * // define custom checks for empty column
	   * isEmptyCol: function(column) {
	   *    return false;
	   * },
	   * ```
	   */
	  isEmptyCol: function isEmptyCol(col) {
	    var row = void 0;
	    var rowLen = void 0;
	    var value = void 0;
	
	    for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {
	      value = this.getDataAtCell(row, col);
	
	      if (value !== '' && value !== null && (0, _mixed.isDefined)(value)) {
	        return false;
	      }
	    }
	
	    return true;
	  },
	
	
	  /**
	   * When set to `true`, the table is re-rendered when it is detected that it was made visible in DOM.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // don't rerender the table on visibility changes
	   * observeDOMVisibility: false,
	   * ```
	   */
	  observeDOMVisibility: true,
	
	  /**
	   * If set to `true`, Handsontable will accept values that were marked as invalid by the cell `validator`. It will
	   * result with *invalid* cells being treated as *valid* (will save the *invalid* value into the Handsontable data source).
	   * If set to `false`, Handsontable will *not* accept the invalid values and won't allow the user to close the editor.
	   * This option will be particularly useful when used with the Autocomplete's `strict` mode.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // don't save the invalid values
	   * allowInvalid: false,
	   * ```
	   */
	  allowInvalid: true,
	
	  /**
	   * If set to `true`, Handsontable will accept values that are empty (`null`, `undefined` or `''`). If set to `false`,
	   * Handsontable will *not* accept the empty values and mark cell as invalid.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // allow empty values for all cells (whole table)
	   * allowEmpty: true,
	   *
	   * // or
	   * columns: [
	   *   {
	   *     data: 'date',
	   *     dateFormat: 'DD/MM/YYYY',
	   *     // allow empty values only for the 'date' column
	   *     allowEmpty: true
	   *   }
	   * ],
	   * ```
	   */
	  allowEmpty: true,
	
	  /**
	   * CSS class name for cells that did not pass validation.
	   *
	   * @type {String}
	   * @default 'htInvalid'
	   *
	   * @example
	   * ```js
	   * // set custom validation error class
	   * invalidCellClassName: 'highlight--error',
	   * ```
	   */
	  invalidCellClassName: 'htInvalid',
	
	  /**
	   * When set to an non-empty string, displayed as the cell content for empty cells. If a value of a different type is provided,
	   * it will be stringified and applied as a string.
	   *
	   * @type {String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // add custom placeholder content to empty cells
	   * placeholder: 'Empty Cell',
	   * ```
	   */
	  placeholder: void 0,
	
	  /**
	   * CSS class name for cells that have a placeholder in use.
	   *
	   * @type {String}
	   * @default 'htPlaceholder'
	   *
	   * @example
	   * ```js
	   * // set custom placeholder class
	   * placeholderCellClassName: 'has-placeholder',
	   * ```
	   */
	  placeholderCellClassName: 'htPlaceholder',
	
	  /**
	   * CSS class name for read-only cells.
	   *
	   * @type {String}
	   * @default 'htDimmed'
	   *
	   * @example
	   * ```js
	   * // set custom read-only class
	   * readOnlyCellClassName: 'is-readOnly',
	   * ```
	   */
	  readOnlyCellClassName: 'htDimmed',
	
	  /**
	   * @description
	   * If a string is provided, it may be one of the following predefined values:
	   * * `autocomplete`,
	   * * `checkbox`,
	   * * `html`,
	   * * `numeric`,
	   * * `password`.
	   * * `text`.
	   *
	   * Or you can [register](https://docs.handsontable.com/demo-custom-renderers.html) the custom renderer under specified name and use its name as an alias in your
	   * configuration.
	   *
	   * If a function is provided, it will receive the following arguments:
	   * ```js
	   * function(instance, TD, row, col, prop, value, cellProperties) {}
	   * ```
	   *
	   * You can read more about custom renderes [in the documentation](https://docs.handsontable.com/demo-custom-renderers.html).
	   *
	   * @type {String|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // register custom renderer
	   * Handsontable.renderers.registerRenderer('my.renderer', function(instance, TD, row, col, prop, value, cellProperties) {
	   *   TD.innerHTML = value;
	   * });
	   *
	   * // use it for selected column:
	   * columns: [
	   *   {
	   *     // as a string with the name of build in renderer
	   *     renderer: 'autocomplete',
	   *     editor: 'select'
	   *   },
	   *   {
	   *     // as an alias to custom renderer registered above
	   *     renderer: 'my.renderer'
	   *   },
	   *   {
	   *     // renderer as custom function
	   *     renderer: function(hotInstance, TD, row, col, prop, value, cellProperties) {
	   *       TD.style.color = 'blue';
	   *       TD.innerHTML = value;
	   *     }
	   *   }
	   * ],
	   * ```
	   */
	  renderer: void 0,
	
	  /**
	   * CSS class name added to the commented cells.
	   *
	   * @type {String}
	   * @default 'htCommentCell'
	   *
	   * @example
	   * ```js
	   * // set custom class for commented cells
	   * commentedCellClassName: 'has-comment',
	   * ```
	   */
	  commentedCellClassName: 'htCommentCell',
	
	  /**
	   * If set to `true`, it enables the browser's native selection of a fragment of the text within a single cell, between
	   * adjacent cells or in a whole table. If set to `'cell'`, it enables the possibility of selecting a fragment of the
	   * text within a single cell's body.
	   *
	   * @type {Boolean|String}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable text selection within table
	   * fragmentSelection: true,
	   *
	   * // or
	   * // enable text selection within cells only
	   * fragmentSelection: 'cell',
	   * ```
	   */
	  fragmentSelection: false,
	
	  /**
	   * @description
	   * Makes cell [read only](https://docs.handsontable.com/demo-read-only.html).
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // set cell as read only
	   * readOnly: true,
	   * ```
	   */
	  readOnly: false,
	
	  /**
	   * @description
	   * When added to a `column` property, it skips the column on paste and pastes the data on the next column to the right.
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     // don't paste data to this column
	   *     skipColumnOnPaste: true
	   *   }
	   * ],
	   * ```
	   */
	  skipColumnOnPaste: false,
	
	  /**
	   * @description
	   * Setting to `true` enables the {@link Search} plugin (see [demo](https://docs.handsontable.com/demo-search-for-values.html)).
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable search plugin
	   * search: true,
	   *
	   * // or
	   * // as an object with detailed configuration
	   * search: {
	   *   searchResultClass: 'customClass',
	   *   queryMethod: function(queryStr, value) {
	   *     ...
	   *   },
	   *   callback: function(instance, row, column, value, result) {
	   *     ...
	   *   }
	   * }
	   * ```
	   */
	  search: false,
	
	  /**
	   * @description
	   * Shortcut to define the combination of the cell renderer, editor and validator for the column, cell or whole table.
	   *
	   * Possible values:
	   *  * [autocomplete](https://docs.handsontable.com/demo-autocomplete.html)
	   *  * [checkbox](https://docs.handsontable.com/demo-checkbox.html)
	   *  * [date](https://docs.handsontable.com/demo-date.html)
	   *  * [dropdown](https://docs.handsontable.com/demo-dropdown.html)
	   *  * [handsontable](https://docs.handsontable.com/demo-handsontable.html)
	   *  * [numeric](https://docs.handsontable.com/demo-numeric.html)
	   *  * [password](https://docs.handsontable.com/demo-password.html)
	   *  * text
	   *  * [time](https://docs.handsontable.com/demo-time.html)
	   *
	   * Or you can register the custom cell type under specified name and use
	   * its name as an alias in your configuration.
	   *
	   * @type {String}
	   * @default 'text'
	   *
	   * @example
	   * ```js
	   * // register custom cell type:
	   * Handsontable.cellTypes.registerCellType('my.type', {
	   *   editor: MyEditorClass,
	   *   renderer: function(hot, td, row, col, prop, value, cellProperties) {
	   *     td.innerHTML = value;
	   *   },
	   *   validator: function(value, callback) {
	   *     callback(value === 'foo' ? true : false);
	   *   }
	   * });
	   *
	   * // use it in column settings:
	   * columns: [
	   *   {
	   *     type: 'text'
	   *   },
	   *   {
	   *     // an alias to custom type
	   *     type: 'my.type'
	   *   },
	   *   {
	   *     type: 'checkbox'
	   *   }
	   * ],
	   * ```
	   */
	  type: 'text',
	
	  /**
	   * @description
	   * Makes a cell copyable (pressing <kbd>CTRL</kbd> + <kbd>C</kbd> on your keyboard moves its value to system clipboard).
	   *
	   * __Note:__ this setting is `false` by default for cells with type `password`.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * cells: [
	   *   {
	   *     cell: 0,
	   *     row: 0,
	   *     // cell with coordinates (0, 0) can't be copied
	   *     copyable: false,
	   *   }
	   * ],
	   * ```
	   */
	  copyable: true,
	
	  /**
	   * Defines the editor for the table/column/cell.
	   *
	   * If a string is provided, it may be one of the following predefined values:
	   *  * [autocomplete](https://docs.handsontable.com/demo-autocomplete.html)
	   *  * [checkbox](https://docs.handsontable.com/demo-checkbox.html)
	   *  * [date](https://docs.handsontable.com/demo-date.html)
	   *  * [dropdown](https://docs.handsontable.com/demo-dropdown.html)
	   *  * [handsontable](https://docs.handsontable.com/demo-handsontable.html)
	   *  * [mobile](https://docs.handsontable.com/demo-mobiles-and-tablets.html)
	   *  * [password](https://docs.handsontable.com/demo-password.html)
	   *  * [select](https://docs.handsontable.com/demo-select.html)
	   *  * text
	   *
	   * Or you can [register](https://docs.handsontable.com/tutorial-cell-editor.html#registering-an-editor) the custom editor under specified name and use its name as an alias in your
	   * configuration.
	   *
	   * To disable cell editing completely set `editor` property to `false`.
	   *
	   * @type {String|Function|Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     // set editor for the first column
	   *     editor: 'select'
	   *   },
	   *   {
	   *     // disable editor for the second column
	   *     editor: false
	   *   }
	   * ],
	   * ```
	   */
	  editor: void 0,
	
	  /**
	   * Control number of choices for the autocomplete (or dropdown) typed cells. After exceeding it, a scrollbar for the
	   * dropdown list of choices will appear.
	   *
	   * @type {Number}
	   * @default 10
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'autocomplete',
	   *     // set autocomplete options list height
	   *     visibleRows: 15,
	   *   }
	   * ],
	   * ```
	   */
	  visibleRows: 10,
	
	  /**
	   * Makes autocomplete or dropdown width the same as the edited cell width. If `false` then editor will be scaled
	   * according to its content.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'autocomplete',
	   *     // don't trim dropdown width with column width
	   *     trimDropdown: false,
	   *   }
	   * ],
	   * ```
	   */
	  trimDropdown: true,
	
	  /**
	   * Setting to `true` enables the debug mode, currently used to test the correctness of the row and column
	   * header fixed positioning on a layer above the master table.
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enable debug mode
	   * debug: true,
	   * ```
	   */
	  debug: false,
	
	  /**
	   * When set to `true`, the text of the cell content is wrapped if it does not fit in the fixed column width.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * colWidths: 100,
	   * columns: [
	   *   {
	   *     // fixed column width is set but don't wrap the content
	   *     wordWrap: false,
	   *   }
	   * ],
	   * ```
	   */
	  wordWrap: true,
	
	  /**
	   * CSS class name added to cells with cell meta `wordWrap: false`.
	   *
	   * @type {String}
	   * @default 'htNoWrap'
	   *
	   * @example
	   * ```js
	   * // set custom class for cells which content won't be wrapped
	   * noWordWrapClassName: 'is-noWrapCell',
	   * ```
	   */
	  noWordWrapClassName: 'htNoWrap',
	
	  /**
	   * @description
	   * Defines if the right-click context menu should be enabled. Context menu allows to create new row or column at any
	   * place in the grid among [other features](https://docs.handsontable.com/demo-context-menu.html).
	   * Possible values:
	   * * `true` (to enable default options),
	   * * `false` (to disable completely)
	   * * an array of [predefined options](https://docs.handsontable.com/demo-context-menu.html#page-specific),
	   * * an object [with defined structure](https://docs.handsontable.com/demo-context-menu.html#page-custom)
	   *
	   * See [the context menu demo](https://docs.handsontable.com/demo-context-menu.html) for examples.
	   *
	   * @type {Boolean|String[]|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * contextMenu: true,
	   *
	   * // as an array
	   * contextMenu: ['row_above', 'row_below', '--------', 'undo', 'redo'],
	   *
	   * // as an object (`name` attribute is required in the custom keys)
	   * contextMenu: {
	   *   items: {
	   *     "option1": {
	   *       name: "option1"
	   *     },
	   *     "option2": {
	   *       name: "option2",
	   *       submenu: {
	   *         items: [
	   *           {
	   *             key: "option2:suboption1",
	   *             name: "option2:suboption1",
	   *             callback: function(key, options) {
	   *               ...
	   *             }
	   *           },
	   *           ...
	   *         ]
	   *       }
	   *     }
	   *   }
	   * },
	   * ```
	   */
	  contextMenu: void 0,
	
	  /**
	   * Disables or enables the copy/paste functionality.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // disable copy and paste
	   * copyPaste: false,
	   * ```
	   */
	  copyPaste: true,
	
	  /**
	   * If `true`, undo/redo functionality is enabled.
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable undo and redo
	   * undo: true,
	   * ```
	   */
	  undo: void 0,
	
	  /**
	   * @description
	   * Turns on [Column sorting](https://docs.handsontable.com/demo-sorting-data.html). Can be either a boolean (`true` / `false`) or an object with a declared sorting options:
	   * * `column` - sorted column
	   * * `sortOrder` - order in which column will be sorted
	   *   * `'asc'` = ascending
	   *   * `'desc'` = descending
	   *   * `'none'` = original order
	   * * `sortEmptyCells` - how empty values should be handled
	   *   * `true` = the table sorts empty cells
	   *   * `false` = the table moves all empty cells to the end of the table
	   *
	   * @type {Boolean|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * columnSorting: true,
	   *
	   * // as a object with initial order (sort ascending column at index 2)
	   * columnSorting: {
	   *   column: 2,
	   *   sortOrder: 'asc',
	   *   sortEmptyCells: true
	   * },
	   * ```
	   */
	  columnSorting: void 0,
	
	  /**
	   * Turns on [Manual column move](https://docs.handsontable.com/demo-moving-rows-and-columns.html), if set to a boolean or define initial column order (as an array of column indexes).
	   *
	   * @type {Boolean|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean to enable column move
	   * manualColumnMove: true,
	   *
	   * // as a array with initial order
	   * // (move column index at 0 to 1 and move column index at 1 to 4)
	   * manualColumnMove: [1, 4],
	   * ```
	   */
	  manualColumnMove: void 0,
	
	  /**
	   * @description
	   * Turns on [Manual column resize](https://docs.handsontable.com/demo-resizing.html), if set to a boolean or define initial column resized widths (an an array of widths).
	   *
	   * @type {Boolean|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean to enable column resize
	   * manualColumnResize: true,
	   *
	   * // as a array with initial widths
	   * // (column at 0 index has 40px and column at 1 index has 50px)
	   * manualColumnResize: [40, 50],
	   * ```
	   */
	  manualColumnResize: void 0,
	
	  /**
	   * @description
	   * Turns on [Manual row move](https://docs.handsontable.com/demo-moving-rows-and-columns.html), if set to a boolean or define initial row order (as an array of row indexes).
	   *
	   * @type {Boolean|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * manualRowMove: true,
	   *
	   * // as a array with initial order
	   * // (move row index at 0 to 1 and move row index at 1 to 4)
	   * manualRowMove: [1, 4],
	   * ```
	   */
	  manualRowMove: void 0,
	
	  /**
	   * @description
	   * Turns on [Manual row resize](https://docs.handsontable.com/demo-resizing.html), if set to a boolean or define initial row resized heights (as an array of heights).
	   *
	   * @type {Boolean|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // as a boolean to enable row resize
	   * manualRowResize: true,
	   *
	   * // as an array to set initial heights
	   * // (row at 0 index has 40px and row at 1 index has 50px)
	   * manualRowResize: [40, 50],
	   * ```
	   */
	  manualRowResize: void 0,
	
	  /**
	   * @description
	   * If set to `true`, it enables a possibility to merge cells. If set to an array of objects, it merges the cells provided
	   * in the objects (see the example below). More information on [the demo page](https://docs.handsontable.com/demo-merge-cells.html).
	   *
	   * @type {Boolean|Object[]}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // enables the mergeCells plugin
	   * margeCells: true,
	   *
	   * // declares a list of merged sections
	   * mergeCells: [
	   *   // rowspan and colspan properties declare the width and height of a merged section in cells
	   *   {row: 1, col: 1, rowspan: 3, colspan: 3},
	   *   {row: 3, col: 4, rowspan: 2, colspan: 2},
	   *   {row: 5, col: 6, rowspan: 3, colspan: 3}
	   * ],
	   * ```
	   */
	  mergeCells: false,
	
	  /**
	   * @description
	   * Number of rows to be rendered outside of the visible part of the table. By default, it's set to `'auto'`, which
	   * makes Handsontable to attempt to calculate the best offset performance-wise.
	   *
	   * You may test out different values to find the best one that works for your specific implementation.
	   *
	   * @type {Number|String}
	   * @default 'auto'
	   *
	   * @example
	   * ```js
	   * viewportRowRenderingOffset: 70,
	   * ```
	   */
	  viewportRowRenderingOffset: 'auto',
	
	  /**
	   * @description
	   * Number of columns to be rendered outside of the visible part of the table. By default, it's set to `'auto'`, which
	   * makes Handsontable try calculating the best offset performance-wise.
	   *
	   * You may experiment with the value to find the one that works best for your specific implementation.
	   *
	   * @type {Number|String}
	   * @default 'auto'
	   *
	   * @example
	   * ```js
	   * viewportColumnRenderingOffset: 70,
	   * ```
	   */
	  viewportColumnRenderingOffset: 'auto',
	
	  /**
	   * @description
	   * A function, regular expression or a string, which will be used in the process of cell validation. If a function is
	   * used, be sure to execute the callback argument with either `true` (`callback(true)`) if the validation passed
	   * or with `false` (`callback(false)`), if the validation failed.
	   *
	   * __Note__, that `this` in the function points to the `cellProperties` object.
	   *
	   * If a string is provided, it may be one of the following predefined values:
	   * * `autocomplete`,
	   * * `date`,
	   * * `numeric`,
	   * * `time`.
	   *
	   * Or you can [register](https://docs.handsontable.com/demo-data-validation.html) the validator function under specified name and use its name as an alias in your
	   * configuration.
	   *
	   * See more [in the demo](https://docs.handsontable.com/demo-data-validation.html).
	   *
	   * @type {Function|RegExp|String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *    {
	   *      // as a function
	   *      validator: function(value, callback) {
	   *          ...
	   *      }
	   *    },
	   *    {
	   *      // regular expression
	   *      validator: /^[0-9]$/
	   *    },
	   *    {
	   *      // as a string
	   *      validator: 'numeric'
	   *    }
	   * ],
	   * ```
	   */
	  validator: void 0,
	
	  /**
	   * @description
	   * Disables visual cells selection.
	   *
	   * Possible values:
	   *  * `true` - Disables any type of visual selection (current and area selection),
	   *  * `false` - Enables any type of visual selection. This is default value.
	   *  * `'current'` - Disables the selection of a currently selected cell, the area selection is still present.
	   *  * `'area'` - Disables the area selection, the currently selected cell selection is still present.
	   *  * `'header'` - Disables the headers selection, the currently selected cell selection is still present.
	   *
	   * @type {Boolean|String|String[]}
	   * @default false
	   *
	   * @example
	   * ```js
	   * // as a boolean
	   * disableVisualSelection: true,
	   *
	   * // as a string ('current', 'area' or 'header')
	   * disableVisualSelection: 'current',
	   *
	   * // as an array
	   * disableVisualSelection: ['current', 'area'],
	   * ```
	   */
	  disableVisualSelection: false,
	
	  /**
	   * Set whether to display the current sorting order indicator (a triangle icon in the column header, specifying the sorting
	   * order).
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // show sort indicator for sorted columns
	   * sortIndicator: true,
	   * ```
	   */
	  sortIndicator: void 0,
	
	  /**
	   * Disables or enables {@link ManualColumnFreeze} plugin.
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable fixed columns
	   * manualColumnFreeze: true,
	   * ```
	   */
	  manualColumnFreeze: void 0,
	
	  /**
	   * Defines whether Handsontable should trim the whitespace at the beginning and the end of the cell contents.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     // don't remove whitespace
	   *     trimWhitespace: false
	   *   }
	   * ]
	   * ```
	   */
	  trimWhitespace: true,
	
	  /**
	   * Defines data source for Autocomplete or Dropdown cell types.
	   *
	   * @type {Array|Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // source as a array
	   * columns: [{
	   *   type: 'autocomplete',
	   *   source: ['A', 'B', 'C', 'D']
	   * }],
	   *
	   * // source as a function
	   * columns: [{
	   *   type: 'autocomplete',
	   *   source: function(query, callback) {
	   *     fetch('https://example.com/query?q=' + query, function(response) {
	   *       callback(response.items);
	   *     })
	   *   }
	   * }],
	   * ```
	   */
	  source: void 0,
	
	  /**
	   * @description
	   * Defines the column header name.
	   *
	   * @type {String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // set header names for every column
	   * columns: [
	   *   {
	   *     title: 'First name',
	   *     type: 'text',
	   *   },
	   *   {
	   *     title: 'Last name',
	   *     type: 'text',
	   *   }
	   * ],
	   * ```
	   */
	  title: void 0,
	
	  /**
	   * Data template for `'checkbox'` type when checkbox is checked.
	   *
	   * @type {Boolean|String|Number}
	   * @default true
	   *
	   * @example
	   * ```js
	   * checkedTemplate: 'good'
	   *
	   * // if a checkbox-typed cell is checked, then getDataAtCell(x, y),
	   * // where x and y are the coordinates of the cell will return 'good'.
	   * ```
	   */
	  checkedTemplate: void 0,
	
	  /**
	   * Data template for `'checkbox'` type when checkbox is unchecked.
	   *
	   * @type {Boolean|String|Number}
	   * @default false
	   *
	   * @example
	   * ```js
	   * uncheckedTemplate: 'bad'
	   *
	   * // if a checkbox-typed cell is not checked, then getDataAtCell(x,y),
	   * // where x and y are the coordinates of the cell will return 'bad'.
	   * ```
	   */
	  uncheckedTemplate: void 0,
	
	  /**
	   * @description
	   * Object which describes if renderer should create checkbox element with label element as a parent.
	   *
	   * __Note__, this option only works for [checkbox-typed](https://docs.handsontable.com/demo-checkbox.html) cells.
	   *
	   * By default the [checkbox](https://docs.handsontable.com/demo-checkbox.html) renderer renders the checkbox without a label.
	   *
	   * Possible object properties:
	   *  * `property` - Defines the property name of the data object, which will to be used as a label.
	   *  (eg. `label: {property: 'name.last'}`). This option works only if data was passed as an array of objects.
	   *  * `position` - String which describes where to place the label text (before or after checkbox element).
	   * Valid values are `'before'` and '`after`' (defaults to `'after'`).
	   *  * `value` - String or a Function which will be used as label text.
	   *
	   * @type {Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [{
	   *   type: 'checkbox',
	   *   // add "My label:" after the checkbox
	   *   label: {position: 'after', value: 'My label: '}
	   * }],
	   * ```
	   */
	  label: void 0,
	
	  /**
	   * Display format for numeric typed renderers.
	   *
	   * __Note__, this option only works for [numeric-typed](https://docs.handsontable.com/demo-numeric.html) cells.
	   *
	   * Format is described by two properties:
	   * * `pattern` - Handled by `numbro` for purpose of formatting numbers to desired pattern. List of supported patterns can be found [here](http://numbrojs.com/format.html#numbers).
	   * * `culture` - Handled by `numbro` for purpose of formatting currencies. Examples showing how it works can be found [here](http://numbrojs.com/format.html#currency). List of supported cultures can be found [here](http://numbrojs.com/languages.html#supported-languages).
	   *
	   * __Note:__ Please keep in mind that this option is used only to format the displayed output! It has no effect on the input data provided for the cell. The numeric data can be entered to the table only as floats (separated by a dot or a comma) or integers, and are stored in the source dataset as JavaScript numbers.
	   *
	   * Handsontable uses [numbro](http://numbrojs.com/) as a main library for numbers formatting.
	   *
	   * @since 0.35.0
	   * @type {Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'numeric',
	   *     // set desired format pattern and
	   *     numericFormat: {
	   *       pattern: '0,00',
	   *       culture: 'en-US'
	   *     }
	   *   }
	   * ],
	   * ```
	   */
	  numericFormat: void 0,
	
	  /**
	   * Language for Handsontable translation. Possible language codes are [listed here](https://docs.handsontable.com/tutorial-internationalization.html#available-languages).
	   *
	   * @type {String}
	   * @default 'en-US'
	   *
	   * @example
	   * ```js
	   * // set Polish language
	   * language: 'pl-PL',
	   * ```
	   */
	  language: 'en-US',
	
	  /**
	   * Data source for [select-typed](https://docs.handsontable.com/demo-select.html) cells.
	   *
	   * __Note__, this option only works for [select-typed](https://docs.handsontable.com/demo-select.html) cells.
	   *
	   * @type {String[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     editor: 'select',
	   *     // add three select options to choose from
	   *     selectOptions: ['A', 'B', 'C'],
	   *   }
	   * ],
	   * ```
	   */
	  selectOptions: void 0,
	
	  /**
	   * Enables or disables the {@link AutoColumnSize} plugin. Default value is `undefined`, which has the same effect as `true`.
	   * Disabling this plugin can increase performance, as no size-related calculations would be done.
	   *
	   * Column width calculations are divided into sync and async part. Each of those parts has their own advantages and
	   * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous
	   * operations don't block the browser UI.
	   *
	   * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value.
	   *
	   * You can also use the `useHeaders` option to take the column headers width into calculation.
	   *
	   * @type {Object|Boolean}
	   * @default {syncLimit: 50}
	   *
	   * @example
	   * ```js
	   * // as a number (300 columns in sync, rest async)
	   * autoColumnSize: {syncLimit: 300},
	   *
	   * // as a string (percent)
	   * autoColumnSize: {syncLimit: '40%'},
	   *
	   * // use headers width while calculating the column width
	   * autoColumnSize: {useHeaders: true},
	   * ```
	   */
	  autoColumnSize: void 0,
	
	  /**
	   * Enables or disables {@link AutoRowSize} plugin. Default value is `undefined`, which has the same effect as `false`
	   * (disabled). Enabling this plugin can decrease performance, as size-related calculations would be performed.
	   *
	   * Row height calculations are divided into sync and async stages. Each of these stages has their own advantages and
	   * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous
	   * operations don't block the browser UI.
	   *
	   * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value.
	   *
	   * @type {Object|Boolean}
	   * @default {syncLimit: 500}
	   *
	   * @example
	   * ```js
	   * // as a number (300 columns in sync, rest async)
	   * autoRowSize: {syncLimit: 300},
	   *
	   * // as a string (percent)
	   * autoRowSize: {syncLimit: '40%'},
	   * ```
	   */
	  autoRowSize: void 0,
	
	  /**
	   * Date validation format.
	   *
	   * __Note__, this option only works for [date-typed](https://docs.handsontable.com/demo-date.html) cells.
	   *
	   * @type {String}
	   * @default 'DD/MM/YYYY'
	   *
	   * @example
	   * ```js
	   * columns: [{
	   *   type: 'date',
	   *   // localise date format
	   *   dateFormat: 'MM/DD/YYYY'
	   * }],
	   * ```
	   */
	  dateFormat: 'DD/MM/YYYY',
	
	  /**
	   * If `true` then dates will be automatically formatted to match the desired format.
	   *
	   * __Note__, this option only works for [date-typed](https://docs.handsontable.com/demo-date.html) cells.
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * columns: [{
	   *   type: 'date',
	   *   dateFormat: 'YYYY-MM-DD',
	   *   // force selected date format
	   *   correctFormat: true
	   * }],
	   * ```
	   */
	  correctFormat: false,
	
	  /**
	   * Definition of default value which will fill the empty cells.
	   *
	   * __Note__, this option only works for [date-typed](https://docs.handsontable.com/demo-date.html) cells.
	   *
	   * @type {String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'date',
	   *     // always set this date for empty cells
	   *     defaultDate: '2015-02-02'
	   *   }
	   * ],
	   * ```
	   */
	  defaultDate: void 0,
	
	  /**
	   * If set to `true`, the value entered into the cell must match (case-sensitive) the autocomplete source.
	   * Otherwise, cell won't pass the validation. When filtering the autocomplete source list, the editor will
	   * be working in case-insensitive mode.
	   *
	   * __Note__, this option only works for [autocomplete-typed](https://docs.handsontable.com/demo-autocomplete.html) cells.
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [{
	   *   type: 'autocomplete',
	   *   source: ['A', 'B', 'C'],
	   *   // force selected value to match the source list
	   *   strict: true
	   * }],
	   * ```
	   */
	  strict: void 0,
	
	  /**
	   * If set to `true`, data defined in `source` of the autocomplete or dropdown cell will be treated as HTML.
	   *
	   * __Warning:__ Enabling this option can cause serious XSS vulnerabilities.
	   *
	   * __Note__, this option only works for [autocomplete-typed](https://docs.handsontable.com/demo-autocomplete.html) cells.
	   *
	   * @type {Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * columns: [{
	   *   type: 'autocomplete',
	   *   // use HTML in the source list
	   *   allowHtml: true,
	   *   source: ['<strong>foo</strong>', '<strong>bar</strong>']
	   * }],
	   * ```
	   */
	  allowHtml: false,
	
	  /**
	   * If typed `true` then virtual rendering mechanism for handsontable will be disabled.
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // disable virtual rows rendering
	   * renderAllRows: true,
	   * ```
	   */
	  renderAllRows: void 0,
	
	  /**
	   * Prevents table to overlap outside the parent element. If `'horizontal'` option is chosen then table will show
	   * a horizontal scrollbar if parent's width is narrower then table's width.
	   *
	   * Possible values:
	   *  * `false` - Disables functionality.
	   *  * `horizontal` - Prevents horizontal overflow table.
	   *  * `vertical` - Prevents vertical overflow table.
	   *
	   * @type {String|Boolean}
	   * @default false
	   *
	   * @example
	   * ```js
	   * preventOverflow: 'horizontal',
	   * ```
	   */
	  preventOverflow: false,
	
	  /**
	   * @description
	   * Enables the functionality of the {@link BindRowsWithHeaders} plugin which allows binding the table rows with their headers.
	   * If the plugin is enabled, the table row headers will "stick" to the rows, when they are hidden/moved. Basically,
	   * if at the initialization row 0 has a header titled "A", it will have it no matter what you do with the table.
	   *
	   * @pro
	   * @type {Boolean|String}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // keep row data and row headers in sync
	   * bindRowsWithHeaders: true
	   * ```
	   */
	  bindRowsWithHeaders: void 0,
	
	  /**
	   * @description
	   * The {@link CollapsibleColumns} plugin allows collapsing of columns, covered by a header with the `colspan` property
	   * defined.
	   *
	   * Clicking the "collapse/expand" button collapses (or expands) all "child" headers except the first one.
	   *
	   * Setting the `collapsibleColumns` property to `true` will display a "collapse/expand" button in every
	   * header with a defined colspan` property.
	   *
	   * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property
	   * as an array of objects, as in the example below.
	   *
	   * @pro
	   * @type {Boolean|Object[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable collapsing for all headers
	   * collapsibleColumns: true,
	   *
	   * // or
	   * // enable collapsing for selected headers
	   * collapsibleColumns: [
	   *   {row: -4, col: 1, collapsible: true},
	   *   {row: -3, col: 5, collapsible: true}
	   * ],
	   * ```
	   */
	  collapsibleColumns: void 0,
	
	  /**
	   * @description
	   * Allows making pre-defined calculations on the cell values and display the results within Handsontable.
	   *
	   * Possible types:
	   *  * `'sum'`
	   *  * `'min'`
	   *  * `'max'`
	   *  * `'count'`
	   *  * `'average'`
	   *  * `'custom'` - add `customFunction`
	   *
	   * [See the demo for more information](https://docs.handsontable.com/pro/demo-summary-calculations.html).
	   *
	   * @pro
	   * @type {Object[]|Function}
	   * @default undefined
	   *
	   * @example
	   * ```
	   * columnSummary: [
	   *   {
	   *     destinationRow: 4,
	   *     destinationColumn: 1,
	   *     forceNumeric: true,
	   *     reversedRowCoords: true,
	   *     suppressDataTypeErrors: false,
	   *     readOnly: true,
	   *     roundFloat: false,
	   *     type: 'custom',
	   *     customFunction: function(endpoint) {
	   *        return 100;
	   *     }
	   *   }
	   * ],
	   * ```
	   */
	  columnSummary: void 0,
	
	  /**
	   * This plugin allows adding a configurable dropdown menu to the table's column headers. The dropdown menu acts like
	   * the {@link Options#contextMenu}, but is triggered by clicking the button in the header.
	   *
	   * @pro
	   * @type {Boolean|Object|String[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable dropdown menu
	   * dropdownMenu: true,
	   *
	   * // or
	   * // enable and configure dropdown menu options
	   * dropdownMenu: ['remove_col', '---------', 'make_read_only', 'alignment']
	   * ```
	   */
	  dropdownMenu: void 0,
	
	  /**
	   * The {@link Filters} plugin allows filtering the table data either by the built-in component or with the API.
	   *
	   * @pro
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable filters
	   * filters: true,
	   * ```
	   */
	  filters: void 0,
	
	  /**
	   * The {@link Formulas} plugin allows Handsontable to process formula expressions defined in the provided data.
	   *
	   * @pro
	   * @type {Boolean|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable formulas plugin
	   * formulas: true,
	   *
	   * // or as an object with custom variables to be used in formula expressions
	   * formulas: {
	   *   variables: {
	   *     FOO: 64,
	   *     BAR: 'baz',
	   *   }
	   * },
	   * ```
	   */
	  formulas: void 0,
	
	  /**
	   * @description
	   * The {@link GanttChart} plugin enables a possibility to create a Gantt chart using a Handsontable instance. In this
	   * case, the whole table becomes read-only.
	   *
	   * @pro
	   * @type {Object}
	   * @default undefined
	   */
	  ganttChart: void 0,
	
	  /**
	   * @description
	   * Allows adding a tooltip to the table headers.
	   *
	   * Available options:
	   * * the `rows` property defines if tooltips should be added to row headers,
	   * * the `columns` property defines if tooltips should be added to column headers,
	   * * the `onlyTrimmed` property defines if tooltips should be added only to headers, which content is trimmed by the header itself (the content being wider then the header).
	   *
	   * @pro
	   * @type {Boolean|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable tooltips for all headers
	   * headerTooltips: true,
	   *
	   * // or
	   * headerTooltips: {
	   *   rows: false,
	   *   columns: true,
	   *   onlyTrimmed: true
	   * }
	   * ```
	   */
	  headerTooltips: void 0,
	
	  /**
	   * The {@link HiddenColumns} plugin allows hiding of certain columns. You can pass additional configuration with an
	   * object notation. Options that are then available are:
	   *  * `columns` - an array of rows that should be hidden on plugin initialization
	   *  * `indicators` - enables small ui markers to indicate where are hidden columns
	   *
	   * @pro
	   * @type {Boolean|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable column hiding
	   * hiddenColumns: true,
	   *
	   * // or
	   * hiddenColumns: {
	   *   // set columns that are hidden by default
	   *   columns: [5, 10, 15],
	   *   // show where are hidden columns
	   *   indicators: true
	   * }
	   * ```
	   */
	  hiddenColumns: void 0,
	
	  /**
	   * The {@link HiddenRows} plugin allows hiding of certain rows. You can pass additional configuration with an
	   * object notation. Options that are then available are:
	   *  * `rows` - an array of rows that should be hidden on plugin initialization
	   *  * `indicators` - enables small ui markers to indicate where are hidden columns
	   *
	   * @pro
	   * @type {Boolean|Object}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable row hiding
	   * hiddenRows: true,
	   *
	   * // or
	   * hiddenRows: {
	   *   // set rows that are hidden by default
	   *   rows: [5, 10, 15],
	   *   // show where are hidden rows
	   *   indicators: true
	   * }
	   * ```
	   */
	  hiddenRows: void 0,
	
	  /**
	   * @description
	   * Allows creating a nested header structure, using the HTML's colspan attribute.
	   *
	   * @pro
	   * @type {Array[]}
	   * @default undefined
	   *
	   * @example
	   * ```
	   * nestedHeaders: [
	   *   ['A', {label: 'B', colspan: 8}, 'C'],
	   *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],
	   *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']
	   * ],
	   * ```
	   */
	  nestedHeaders: void 0,
	
	  /**
	   * @description
	   * Plugin allowing hiding of certain rows.
	   *
	   * @pro
	   * @type {Boolean|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // enable plugin
	   * trimRows: true,
	   *
	   * // or
	   * // trim selected rows on table initialization
	   * trimRows: [5, 10, 15],
	   * ```
	   */
	  trimRows: void 0,
	
	  /**
	   * @description
	   * Allows setting a custom width of the row headers. You can provide a number or an array of widths, if many row
	   * header levels are defined.
	   *
	   * @type {Number|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // set width for all row headers
	   * rowHeaderWidth: 25,
	   *
	   * // or
	   * // set width for selected headers only
	   * rowHeaderWidth: [25, 30, 55],
	   * ```
	   */
	  rowHeaderWidth: void 0,
	
	  /**
	   * @description
	   * Allows setting a custom height of the column headers. You can provide a number or an array of heights, if many
	   * column header levels are defined.
	   *
	   * @type {Number|Number[]}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * // set shared height for all headers
	   * columnHeaderHeight: 35,
	   *
	   * // or
	   * // set height for each header individually
	   * columnHeaderHeight: [35, 20, 55],
	   *
	   * // or
	   * // skipped headers will fallback to default value
	   * columnHeaderHeight: [35, undefined, 55],
	   * ```
	   */
	  columnHeaderHeight: void 0,
	
	  /**
	   * @description
	   * Enables the {@link ObserveChanges} plugin switches table into one-way data binding where changes are applied into
	   * data source (from outside table) will be automatically reflected in the table.
	   *
	   * For every data change [afterChangesObserved](Hooks.html#event:afterChangesObserved) hook will be fired.
	   *
	   * @type {Boolean}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * observeChanges: true,
	   * ```
	   */
	  observeChanges: void 0,
	
	  /**
	   * @description
	   * When passed to the `column` property, allows specifying a custom sorting function for the desired column.
	   *
	   * @type {Function}
	   * @default undefined
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     sortFunction: function(sortOrder) {
	   *        return function(a, b) {
	   *          // sorting function body.
	   *          //
	   *          // Function parameters:
	   *          // sortOrder: If true, the order is ascending, if false - descending. undefined = original order
	   *          // a, b: Two compared elements. These are 2-element arrays, with the first element being the row index, the second - cell value.
	   *        }
	   *     }
	   *   }
	   * ],
	   * ```
	   */
	  sortFunction: void 0,
	
	  /**
	   * If defined as `true`, the Autocomplete's suggestion list would be sorted by relevance (the closer to the left the
	   * match is, the higher the suggestion).
	   *
	   * __Note__, this option only works for [autocomplete-typed](https://docs.handsontable.com/demo-autocomplete.html) cells.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'autocomplete',
	   *     source: [ ... ],
	   *     // keep options order as they were defined
	   *     sortByRelevance: false
	   *   }
	   * ],
	   * ```
	   */
	  sortByRelevance: true,
	
	  /**
	   * If defined as `true`, when the user types into the input area the Autocomplete's suggestion list is updated to only
	   * include those choices starting with what has been typed; if defined as `false` all suggestions remain shown, with
	   * those matching what has been typed marked in bold.
	   *
	   * __Note__, this option only works for [autocomplete-typed](https://docs.handsontable.com/demo-autocomplete.html) cells.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'autocomplete',
	   *     source: [ ... ],
	   *     // don't hide options that don't match search query
	   *     filter: false
	   *   }
	   * ],
	   * ```
	   */
	  filter: true,
	
	  /**
	   * If defined as `true`, filtering in the Autocomplete Editor will be case-sensitive.
	   *
	   * __Note__, this option only works for [autocomplete-typed](https://docs.handsontable.com/demo-autocomplete.html) cells.
	   *
	   * @type {Boolean}
	   * @default: false
	   *
	   * @example
	   * ```js
	   * columns: [
	   *   {
	   *     type: 'autocomplete',
	   *     source: [ ... ],
	   *     // match case while searching autocomplete options
	   *     filteringCaseSensitive: true
	   *   }
	   * ],
	   * ```
	   */
	  filteringCaseSensitive: false,
	
	  /**
	   * @description
	   * Disables or enables the drag to scroll functionality.
	   *
	   * @type {Boolean}
	   * @default true
	   *
	   * @example
	   * ```js
	   * // don't scroll the viewport when selection gets to the viewport edge
	   * dragToScroll: false,
	   * ```
	   */
	  dragToScroll: true,
	
	  /**
	   * @description
	   * Disable or enable the nested rows functionality - displaying nested structures in a two-dimensional data table.
	   *
	   * See [quick setup of the Nested rows](https://docs.handsontable.kbudnik/pro/next/demo-nested-rows.html).
	   * @example
	   * ```js
	   * nestedRows: true,
	   * ```
	   *
	   * @pro
	   * @type {Boolean}
	   * @default false
	   */
	  nestedRows: void 0
	};
	
	exports.default = DefaultSettings;
	
	/***/ }),
	/* 198 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getTranslatedPhrase = getTranslatedPhrase;
	
	var _array = __webpack_require__(2);
	
	var _dictionariesManager = __webpack_require__(71);
	
	var _phraseFormatters = __webpack_require__(271);
	
	var _mixed = __webpack_require__(11);
	
	/**
	 * Get phrase for specified dictionary key.
	 *
	 * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.
	 * @param {String} dictionaryKey Constant which is dictionary key.
	 * @param {*} argumentsForFormatters Arguments which will be handled by formatters.
	 *
	 * @returns {String}
	 */
	// eslint-disable-next-line import/prefer-default-export
	function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {
	  var languageDictionary = (0, _dictionariesManager.getLanguageDictionary)(languageCode);
	
	  if (languageDictionary === null) {
	    return null;
	  }
	
	  var phrasePropositions = languageDictionary[dictionaryKey];
	
	  if ((0, _mixed.isUndefined)(phrasePropositions)) {
	    return null;
	  }
	
	  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);
	
	  if (Array.isArray(formattedPhrase)) {
	    return formattedPhrase[0];
	  }
	
	  return formattedPhrase;
	}
	
	/**
	 * Get formatted phrase from phrases propositions for specified dictionary key.
	 *
	 * @private
	 * @param {Array|string} phrasePropositions List of phrase propositions.
	 * @param {*} argumentsForFormatters Arguments which will be handled by formatters.
	 *
	 * @returns {Array|string}
	 */
	function getFormattedPhrase(phrasePropositions, argumentsForFormatters) {
	  var formattedPhrasePropositions = phrasePropositions;
	
	  (0, _array.arrayEach)((0, _phraseFormatters.getPhraseFormatters)(), function (formatter) {
	    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);
	  });
	
	  return formattedPhrasePropositions;
	}
	
	/***/ }),
	/* 199 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _templateObject = _taggedTemplateLiteral(['Language with code "', '" was not found. You should register particular language \n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.'], ['Language with code "', '" was not found. You should register particular language \n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.']);
	
	exports.extendNotExistingKeys = extendNotExistingKeys;
	exports.createCellHeadersRange = createCellHeadersRange;
	exports.normalizeLanguageCode = normalizeLanguageCode;
	exports.applyLanguageSetting = applyLanguageSetting;
	exports.warnUserAboutLanguageRegistration = warnUserAboutLanguageRegistration;
	
	var _mixed = __webpack_require__(11);
	
	var _object = __webpack_require__(1);
	
	var _console = __webpack_require__(58);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	var _dictionariesManager = __webpack_require__(71);
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	/**
	 * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.
	 *
	 * @param {Object} target An object that will receive the new properties.
	 * @param {Object} extension An object containing additional properties to merge into the target.
	 */
	// TODO: Maybe it should be moved to global helpers? It's changed `extend` function.
	function extendNotExistingKeys(target, extension) {
	  (0, _object.objectEach)(extension, function (value, key) {
	    if ((0, _mixed.isUndefined)(target[key])) {
	      target[key] = value;
	    }
	  });
	
	  return target;
	}
	
	/**
	 * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:
	 *
	 * createCellHeadersRange(2, 7) => `2-7`
	 * createCellHeadersRange(7, 2) => `2-7`
	 * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`
	 * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`
	 *
	 * @param {number} firstRowIndex Index of "first" cell
	 * @param {number} nextRowIndex Index of "next" cell
	 * @param {*} fromValue Value which will represent "first" cell
	 * @param {*} toValue Value which will represent "next" cell
	 * @returns {String} Value representing range i.e. A-Z, 11-15.
	 */
	function createCellHeadersRange(firstRowIndex, nextRowIndex) {
	  var fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;
	  var toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex;
	
	  // Will swap `fromValue` with `toValue` if it's necessary.
	  var from = fromValue,
	      to = toValue;
	
	
	  if (firstRowIndex > nextRowIndex) {
	    var _ref = [to, from];
	    from = _ref[0];
	    to = _ref[1];
	  }
	
	  return from + '-' + to;
	}
	
	/**
	 * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.
	 * For example, when it takes `eN-us` as parameter it return `en-US`
	 *
	 * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.
	 * @returns {String}
	 */
	function normalizeLanguageCode(languageCode) {
	  var languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;
	  var partsOfLanguageCode = languageCodePattern.exec(languageCode);
	
	  if (partsOfLanguageCode) {
	    return partsOfLanguageCode[1].toLowerCase() + '-' + partsOfLanguageCode[2].toUpperCase();
	  }
	
	  return languageCode;
	}
	
	/**
	 * Set proper start language code. User may set language code which is not proper.
	 *
	 * @param {Object} settings Settings object.
	 * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.
	 * @returns {String}
	 */
	function applyLanguageSetting(settings, languageCode) {
	  var normalizedLanguageCode = normalizeLanguageCode(languageCode);
	
	  if ((0, _dictionariesManager.hasLanguageDictionary)(normalizedLanguageCode)) {
	    settings.language = normalizedLanguageCode;
	  } else {
	    settings.language = _dictionariesManager.DEFAULT_LANGUAGE_CODE;
	
	    warnUserAboutLanguageRegistration(languageCode);
	  }
	}
	
	/**
	 *
	 * Warn user if there is no registered language.
	 *
	 * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.
	 */
	function warnUserAboutLanguageRegistration(languageCode) {
	  if ((0, _mixed.isDefined)(languageCode)) {
	    (0, _console.error)((0, _templateLiteralTag.toSingleLine)(_templateObject, languageCode));
	  }
	}
	
	/***/ }),
	/* 200 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.stopObserving = exports.startObserving = exports.isPressedCtrlKey = exports.isPressed = exports._resetState = exports._getRefCount = undefined;
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _unicode = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var eventManager = new _eventManager2.default();
	var pressedKeys = new Set();
	var refCount = 0;
	
	/**
	 * Begins observing keyboard keys states.
	 */
	function startObserving() {
	  if (refCount === 0) {
	    eventManager.addEventListener(document, 'keydown', function (event) {
	      if (!pressedKeys.has(event.keyCode)) {
	        pressedKeys.add(event.keyCode);
	      }
	    });
	    eventManager.addEventListener(document, 'keyup', function (event) {
	      if (pressedKeys.has(event.keyCode)) {
	        pressedKeys.delete(event.keyCode);
	      }
	    });
	    eventManager.addEventListener(document, 'visibilitychange', function () {
	      if (document.hidden) {
	        pressedKeys.clear();
	      }
	    });
	  }
	
	  refCount += 1;
	}
	
	/**
	 * Stops observing keyboard keys states and clear all previously saved states.
	 */
	function stopObserving() {
	  if (refCount > 0) {
	    refCount -= 1;
	  }
	
	  if (refCount === 0) {
	    _resetState();
	  }
	}
	
	/**
	 * Remove all listeners attached to the DOM and clear all previously saved states.
	 */
	function _resetState() {
	  eventManager.clearEvents();
	  pressedKeys.clear();
	  refCount = 0;
	}
	
	/**
	 * Checks if provided keyCode or keyCodes are pressed.
	 *
	 * @param {String} keyCodes The key codes passed as a string defined in helpers/unicode.js file delimited with '|'.
	 * @return {Boolean}
	 */
	function isPressed(keyCodes) {
	  return Array.from(pressedKeys.values()).some(function (_keyCode) {
	    return (0, _unicode.isKey)(_keyCode, keyCodes);
	  });
	}
	
	/**
	 * Checks if ctrl keys are pressed.
	 *
	 * @return {Boolean}
	 */
	function isPressedCtrlKey() {
	  var values = Array.from(pressedKeys.values());
	
	  return values.some(function (_keyCode) {
	    return (0, _unicode.isCtrlMetaKey)(_keyCode);
	  }) && values.every(function (_keyCode) {
	    return !(0, _unicode.isPrintableChar)(_keyCode);
	  });
	}
	
	/**
	 * Returns reference count. Useful for debugging and testing purposes.
	 *
	 * @return {Number}
	 */
	function _getRefCount() {
	  return refCount;
	}
	
	exports._getRefCount = _getRefCount;
	exports._resetState = _resetState;
	exports.isPressed = isPressed;
	exports.isPressedCtrlKey = isPressedCtrlKey;
	exports.startObserving = startObserving;
	exports.stopObserving = stopObserving;
	
	/***/ }),
	/* 201 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.normalizeSelectionFactory = exports.detectSelectionType = exports.Selection = exports.Highlight = exports.handleMouseEvent = undefined;
	
	var _highlight = __webpack_require__(202);
	
	var _highlight2 = _interopRequireDefault(_highlight);
	
	var _selection = __webpack_require__(280);
	
	var _selection2 = _interopRequireDefault(_selection);
	
	var _mouseEventHandler = __webpack_require__(194);
	
	var _utils = __webpack_require__(72);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.handleMouseEvent = _mouseEventHandler.handleMouseEvent;
	exports.Highlight = _highlight2.default;
	exports.Selection = _selection2.default;
	exports.detectSelectionType = _utils.detectSelectionType;
	exports.normalizeSelectionFactory = _utils.normalizeSelectionFactory;
	
	/***/ }),
	/* 202 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.CUSTOM_SELECTION = exports.HEADER_TYPE = exports.FILL_TYPE = exports.CELL_TYPE = exports.AREA_TYPE = exports.ACTIVE_HEADER_TYPE = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _types = __webpack_require__(273);
	
	var _array = __webpack_require__(2);
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ACTIVE_HEADER_TYPE = exports.ACTIVE_HEADER_TYPE = 'active-header';
	var AREA_TYPE = exports.AREA_TYPE = 'area';
	var CELL_TYPE = exports.CELL_TYPE = 'cell';
	var FILL_TYPE = exports.FILL_TYPE = 'fill';
	var HEADER_TYPE = exports.HEADER_TYPE = 'header';
	var CUSTOM_SELECTION = exports.CUSTOM_SELECTION = 'custom-selection';
	
	/**
	 * Highlight class responsible for managing Walkontable Selection classes.
	 *
	 * With Highlight object you can manipulate four different highlight types:
	 *  - `cell` can be added only to a single cell at a time and it defines currently selected cell;
	 *  - `fill` can occur only once and its highlight defines selection of autofill functionality (managed by the plugin with the same name);
	 *  - `areas` can be added to multiple cells at a time. This type highlights selected cell or multiple cells.
	 *    The multiple cells have to be defined as an uninterrupted order (regular shape). Otherwise, the new layer of
	 *    that type should be created to manage not-consecutive selection;
	 *  - `header` can occur multiple times. This type is designed to highlight only headers. Like `area` type it
	 *    can appear with multiple highlights (accessed under different level layers).
	 *
	 * @class Highlight
	 * @util
	 */
	
	var Highlight = function () {
	  function Highlight(options) {
	    _classCallCheck(this, Highlight);
	
	    /**
	     * Options consumed by Highlight class and Walkontable Selection classes.
	     *
	     * @type {Object}
	     */
	    this.options = options;
	    /**
	     * The property which describes which layer level of the visual selection will be modified.
	     * This option is valid only for `area` and `header` highlight types which occurs multiple times on
	     * the table (as a non-consecutive selection).
	     *
	     * An order of the layers is the same as the order of added new non-consecutive selections.
	     *
	     * @type {Number}
	     * @default 0
	     */
	    this.layerLevel = 0;
	    /**
	     * `cell` highlight object which describes attributes for the currently selected cell.
	     * It can only occur only once on the table.
	     *
	     * @type {Selection}
	     */
	    this.cell = (0, _types.createHighlight)(CELL_TYPE, options);
	    /**
	     * `fill` highlight object which describes attributes for the borders for autofill functionality.
	     * It can only occur only once on the table.
	     *
	     * @type {Selection}
	     */
	    this.fill = (0, _types.createHighlight)(FILL_TYPE, options);
	    /**
	     * Collection of the `area` highlights. That objects describes attributes for the borders and selection of
	     * the multiple selected cells. It can occur multiple times on the table.
	     *
	     * @type {Map.<number, Selection>}
	     */
	    this.areas = new Map();
	    /**
	     * Collection of the `header` highlights. That objects describes attributes for the selection of
	     * the multiple selected rows and columns in the table header. It can occur multiple times on the table.
	     *
	     * @type {Map.<number, Selection>}
	     */
	    this.headers = new Map();
	    /**
	     * Collection of the `active-header` highlights. That objects describes attributes for the selection of
	     * the multiple selected rows and columns in the table header. The table headers which have selected all items in
	     * a row will be marked as `active-header`.
	     *
	     * @type {Map.<number, Selection>}
	     */
	    this.activeHeaders = new Map();
	    /**
	     * Collection of the `custom-selection`, holder for example borders added through CustomBorders plugin.
	     *
	     * @type {Selection[]}
	     */
	    this.customSelections = [];
	  }
	
	  /**
	   * Check if highlight cell rendering is disabled for specyfied highlight type.
	   *
	   * @param {String} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.
	   * @return {Boolean}
	   */
	
	
	  _createClass(Highlight, [{
	    key: 'isEnabledFor',
	    value: function isEnabledFor(highlightType) {
	      // Legacy compatibility.
	      var type = highlightType === 'current' ? CELL_TYPE : highlightType;
	      var disableHighlight = this.options.disableHighlight;
	
	      if (typeof disableHighlight === 'string') {
	        disableHighlight = [disableHighlight];
	      }
	
	      return disableHighlight === false || Array.isArray(disableHighlight) && !disableHighlight.includes(type);
	    }
	
	    /**
	     * Set a new layer level to make access to the desire `area` and `header` highlights.
	     *
	     * @param {Number} [level=0] Layer level to use.
	     * @returns {Highlight}
	     */
	
	  }, {
	    key: 'useLayerLevel',
	    value: function useLayerLevel() {
	      var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      this.layerLevel = level;
	
	      return this;
	    }
	
	    /**
	     * Get Walkontable Selection instance created for controlling highlight of the currently selected/edited cell.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'getCell',
	    value: function getCell() {
	      return this.cell;
	    }
	
	    /**
	     * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'getFill',
	    value: function getFill() {
	      return this.fill;
	    }
	
	    /**
	     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
	     * of the multiple selected cells.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'createOrGetArea',
	    value: function createOrGetArea() {
	      var layerLevel = this.layerLevel;
	      var area = void 0;
	
	      if (this.areas.has(layerLevel)) {
	        area = this.areas.get(layerLevel);
	      } else {
	        area = (0, _types.createHighlight)(AREA_TYPE, Object.assign({ layerLevel: layerLevel }, this.options));
	
	        this.areas.set(layerLevel, area);
	      }
	
	      return area;
	    }
	
	    /**
	     * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
	     *
	     * @return {Selection[]}
	     */
	
	  }, {
	    key: 'getAreas',
	    value: function getAreas() {
	      return [].concat(_toConsumableArray(this.areas.values()));
	    }
	
	    /**
	     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
	     * of the multiple selected header cells.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'createOrGetHeader',
	    value: function createOrGetHeader() {
	      var layerLevel = this.layerLevel;
	      var header = void 0;
	
	      if (this.headers.has(layerLevel)) {
	        header = this.headers.get(layerLevel);
	      } else {
	        header = (0, _types.createHighlight)(HEADER_TYPE, Object.assign({}, this.options));
	
	        this.headers.set(layerLevel, header);
	      }
	
	      return header;
	    }
	
	    /**
	     * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
	     *
	     * @return {Selection[]}
	     */
	
	  }, {
	    key: 'getHeaders',
	    value: function getHeaders() {
	      return [].concat(_toConsumableArray(this.headers.values()));
	    }
	
	    /**
	     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
	     * of the multiple selected active header cells.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'createOrGetActiveHeader',
	    value: function createOrGetActiveHeader() {
	      var layerLevel = this.layerLevel;
	      var header = void 0;
	
	      if (this.activeHeaders.has(layerLevel)) {
	        header = this.activeHeaders.get(layerLevel);
	      } else {
	        header = (0, _types.createHighlight)(ACTIVE_HEADER_TYPE, Object.assign({}, this.options));
	
	        this.activeHeaders.set(layerLevel, header);
	      }
	
	      return header;
	    }
	
	    /**
	     * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
	     *
	     * @return {Selection[]}
	     */
	
	  }, {
	    key: 'getActiveHeaders',
	    value: function getActiveHeaders() {
	      return [].concat(_toConsumableArray(this.activeHeaders.values()));
	    }
	
	    /**
	     * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.
	     *
	     * @return {Selection}
	     */
	
	  }, {
	    key: 'getCustomSelections',
	    value: function getCustomSelections() {
	      return [].concat(_toConsumableArray(this.customSelections.values()));
	    }
	
	    /**
	     * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.
	     *
	     * @param {Object} options
	     */
	
	  }, {
	    key: 'addCustomSelection',
	    value: function addCustomSelection(options) {
	      this.customSelections.push((0, _types.createHighlight)(CUSTOM_SELECTION, Object.assign({}, options)));
	    }
	
	    /**
	     * Perform cleaning visual highlights for the whole table.
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.cell.clear();
	      this.fill.clear();
	
	      (0, _array.arrayEach)(this.areas.values(), function (highlight) {
	        return void highlight.clear();
	      });
	      (0, _array.arrayEach)(this.headers.values(), function (highlight) {
	        return void highlight.clear();
	      });
	      (0, _array.arrayEach)(this.activeHeaders.values(), function (highlight) {
	        return void highlight.clear();
	      });
	    }
	
	    /**
	     * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.
	     */
	
	  }, {
	    key: Symbol.iterator,
	    value: function value() {
	      return [this.cell, this.fill].concat(_toConsumableArray(this.areas.values()), _toConsumableArray(this.headers.values()), _toConsumableArray(this.activeHeaders.values()), _toConsumableArray(this.customSelections))[Symbol.iterator]();
	    }
	  }]);
	
	  return Highlight;
	}();
	
	exports.default = Highlight;
	
	/***/ }),
	/* 203 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	var _mixed = __webpack_require__(11);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class SamplesGenerator
	 * @util
	 */
	var SamplesGenerator = function () {
	  _createClass(SamplesGenerator, null, [{
	    key: 'SAMPLE_COUNT',
	
	    /**
	     * Number of samples to take of each value length.
	     *
	     * @type {Number}
	     */
	    get: function get() {
	      return 3;
	    }
	  }]);
	
	  function SamplesGenerator(dataFactory) {
	    _classCallCheck(this, SamplesGenerator);
	
	    /**
	     * Samples prepared for calculations.
	     *
	     * @type {Map}
	     * @default {null}
	     */
	    this.samples = null;
	    /**
	     * Function which give the data to collect samples.
	     *
	     * @type {Function}
	     */
	    this.dataFactory = dataFactory;
	    /**
	     * Custom number of samples to take of each value length.
	     *
	     * @type {Number}
	     * @default {null}
	     */
	    this.customSampleCount = null;
	    /**
	     * `true` if duplicate samples collection should be allowed, `false` otherwise.
	     *
	     * @type {Boolean}
	     * @default {false}
	     */
	    this.allowDuplicates = false;
	  }
	
	  /**
	   * Get the sample count for this instance.
	   *
	   * @returns {Number}
	   */
	
	
	  _createClass(SamplesGenerator, [{
	    key: 'getSampleCount',
	    value: function getSampleCount() {
	      if (this.customSampleCount) {
	        return this.customSampleCount;
	      }
	      return SamplesGenerator.SAMPLE_COUNT;
	    }
	
	    /**
	     * Set the sample count.
	     *
	     * @param {Number} sampleCount Number of samples to be collected.
	     */
	
	  }, {
	    key: 'setSampleCount',
	    value: function setSampleCount(sampleCount) {
	      this.customSampleCount = sampleCount;
	    }
	
	    /**
	     * Set if the generator should accept duplicate values.
	     *
	     * @param {Boolean} allowDuplicates `true` to allow duplicate values.
	     */
	
	  }, {
	    key: 'setAllowDuplicates',
	    value: function setAllowDuplicates(allowDuplicates) {
	      this.allowDuplicates = allowDuplicates;
	    }
	
	    /**
	     * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
	     *
	     * @param {Object|Number} rowRange
	     * @param {Object} colRange
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'generateRowSamples',
	    value: function generateRowSamples(rowRange, colRange) {
	      return this.generateSamples('row', colRange, rowRange);
	    }
	
	    /**
	     * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
	     *
	     * @param {Object} colRange Column index.
	     * @param {Object} rowRange Column index.
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'generateColumnSamples',
	    value: function generateColumnSamples(colRange, rowRange) {
	      return this.generateSamples('col', rowRange, colRange);
	    }
	
	    /**
	     * Generate collection of samples.
	     *
	     * @param {String} type Type to generate. Can be `col` or `row`.
	     * @param {Object} range
	     * @param {Object|Number} specifierRange
	     * @returns {Map}
	     */
	
	  }, {
	    key: 'generateSamples',
	    value: function generateSamples(type, range, specifierRange) {
	      var _this = this;
	
	      var samples = new Map();
	
	      var _ref = typeof specifierRange === 'number' ? { from: specifierRange, to: specifierRange } : specifierRange,
	          from = _ref.from,
	          to = _ref.to;
	
	      (0, _number.rangeEach)(from, to, function (index) {
	        var sample = _this.generateSample(type, range, index);
	
	        samples.set(index, sample);
	      });
	
	      return samples;
	    }
	
	    /**
	     * Generate sample for specified type (`row` or `col`).
	     *
	     * @param {String} type Samples type `row` or `col`.
	     * @param {Object} range
	     * @param {Number} specifierValue
	     * @returns {Map}
	     */
	
	  }, {
	    key: 'generateSample',
	    value: function generateSample(type, range, specifierValue) {
	      var _this2 = this;
	
	      if (type !== 'row' && type !== 'col') {
	        throw new Error('Unsupported sample type');
	      }
	
	      var samples = new Map();
	      var computedKey = type === 'row' ? 'col' : 'row';
	      var sampledValues = [];
	
	      (0, _number.rangeEach)(range.from, range.to, function (index) {
	        var _ref2 = type === 'row' ? _this2.dataFactory(specifierValue, index) : _this2.dataFactory(index, specifierValue),
	            value = _ref2.value,
	            bundleCountSeed = _ref2.bundleCountSeed;
	
	        var hasCustomBundleSeed = bundleCountSeed > 0;
	        var length = void 0;
	
	        if ((0, _object.isObject)(value)) {
	          length = Object.keys(value).length;
	        } else if (Array.isArray(value)) {
	          length = value.length;
	        } else {
	          length = (0, _mixed.stringify)(value).length;
	        }
	
	        if (hasCustomBundleSeed) {
	          length += bundleCountSeed;
	        }
	
	        if (!samples.has(length)) {
	          samples.set(length, {
	            needed: _this2.getSampleCount(),
	            strings: []
	          });
	        }
	        var sample = samples.get(length);
	
	        if (sample.needed) {
	          var duplicate = sampledValues.indexOf(value) > -1;
	
	          if (!duplicate || _this2.allowDuplicates || hasCustomBundleSeed) {
	            sample.strings.push(_defineProperty({ value: value }, computedKey, index));
	            sampledValues.push(value);
	            sample.needed -= 1;
	          }
	        }
	      });
	
	      return samples;
	    }
	  }]);
	
	  return SamplesGenerator;
	}();
	
	exports.default = SamplesGenerator;
	
	/***/ }),
	/* 204 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _number = __webpack_require__(6);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var STATE_INITIALIZED = 0;
	var STATE_BUILT = 1;
	var STATE_APPENDED = 2;
	var UNIT = 'px';
	
	/**
	 * @class
	 * @private
	 */
	
	var BaseUI = function () {
	  function BaseUI(hotInstance) {
	    _classCallCheck(this, BaseUI);
	
	    /**
	     * Instance of Handsontable.
	     *
	     * @type {Core}
	     */
	    this.hot = hotInstance;
	    /**
	     * DOM element representing the ui element.
	     *
	     * @type {HTMLElement}
	     * @private
	     */
	    this._element = null;
	    /**
	     * Flag which determines build state of element.
	     *
	     * @type {Boolean}
	     */
	    this.state = STATE_INITIALIZED;
	  }
	
	  /**
	   * Add created UI elements to table.
	   *
	   * @param {HTMLElement} wrapper Element which are parent for our UI element.
	   */
	
	
	  _createClass(BaseUI, [{
	    key: 'appendTo',
	    value: function appendTo(wrapper) {
	      wrapper.appendChild(this._element);
	
	      this.state = STATE_APPENDED;
	    }
	
	    /**
	     * Method for create UI element. Only create, without append to table.
	     */
	
	  }, {
	    key: 'build',
	    value: function build() {
	      this._element = document.createElement('div');
	      this.state = STATE_BUILT;
	    }
	
	    /**
	     * Method for remove UI element.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.isAppended()) {
	        this._element.parentElement.removeChild(this._element);
	      }
	
	      this._element = null;
	      this.state = STATE_INITIALIZED;
	    }
	
	    /**
	     * Check if UI element are appended.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isAppended',
	    value: function isAppended() {
	      return this.state === STATE_APPENDED;
	    }
	
	    /**
	     * Check if UI element are built.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isBuilt',
	    value: function isBuilt() {
	      return this.state >= STATE_BUILT;
	    }
	
	    /**
	     * Setter for position.
	     *
	     * @param {Number} top New top position of the element.
	     * @param {Number} left New left position of the element.
	     */
	
	  }, {
	    key: 'setPosition',
	    value: function setPosition(top, left) {
	      if ((0, _number.isNumeric)(top)) {
	        this._element.style.top = top + UNIT;
	      }
	      if ((0, _number.isNumeric)(left)) {
	        this._element.style.left = left + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element position.
	     *
	     * @returns {Object} Object contains left and top position of the element.
	     */
	
	  }, {
	    key: 'getPosition',
	    value: function getPosition() {
	      return {
	        top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
	        left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
	      };
	    }
	
	    /**
	     * Setter for the element size.
	     *
	     * @param {Number} width New width of the element.
	     * @param {Number} height New height of the element.
	     */
	
	  }, {
	    key: 'setSize',
	    value: function setSize(width, height) {
	      if ((0, _number.isNumeric)(width)) {
	        this._element.style.width = width + UNIT;
	      }
	      if ((0, _number.isNumeric)(height)) {
	        this._element.style.height = height + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element position.
	     *
	     * @returns {Object} Object contains height and width of the element.
	     */
	
	  }, {
	    key: 'getSize',
	    value: function getSize() {
	      return {
	        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
	        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
	      };
	    }
	
	    /**
	     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
	     *
	     * @param {Number} top New margin top of the element.
	     * @param {Number} left New margin left of the element.
	     */
	
	  }, {
	    key: 'setOffset',
	    value: function setOffset(top, left) {
	      if ((0, _number.isNumeric)(top)) {
	        this._element.style.marginTop = top + UNIT;
	      }
	      if ((0, _number.isNumeric)(left)) {
	        this._element.style.marginLeft = left + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element offset.
	     *
	     * @returns {Object} Object contains top and left offset of the element.
	     */
	
	  }, {
	    key: 'getOffset',
	    value: function getOffset() {
	      return {
	        top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
	        left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
	      };
	    }
	  }]);
	
	  return BaseUI;
	}();
	
	exports.default = BaseUI;
	
	/***/ }),
	/* 205 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var STATE_INITIALIZED = 0;
	var STATE_BUILT = 1;
	var STATE_APPENDED = 2;
	var UNIT = 'px';
	
	/**
	 * @class
	 * @private
	 */
	
	var BaseUI = function () {
	  function BaseUI(hotInstance) {
	    _classCallCheck(this, BaseUI);
	
	    /**
	     * Instance of Handsontable.
	     *
	     * @type {Core}
	     */
	    this.hot = hotInstance;
	    /**
	     * DOM element representing the ui element.
	     *
	     * @type {HTMLElement}
	     * @private
	     */
	    this._element = null;
	    /**
	     * Flag which determines build state of element.
	     *
	     * @type {Boolean}
	     */
	    this.state = STATE_INITIALIZED;
	  }
	
	  /**
	   * Add created UI elements to table.
	   *
	   * @param {HTMLElement} wrapper Element which are parent for our UI element.
	   */
	
	
	  _createClass(BaseUI, [{
	    key: 'appendTo',
	    value: function appendTo(wrapper) {
	      wrapper.appendChild(this._element);
	
	      this.state = STATE_APPENDED;
	    }
	
	    /**
	     * Method for create UI element. Only create, without append to table.
	     */
	
	  }, {
	    key: 'build',
	    value: function build() {
	      this._element = document.createElement('div');
	      this.state = STATE_BUILT;
	    }
	
	    /**
	     * Method for remove UI element.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.isAppended()) {
	        this._element.parentElement.removeChild(this._element);
	      }
	
	      this._element = null;
	      this.state = STATE_INITIALIZED;
	    }
	
	    /**
	     * Check if UI element are appended.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isAppended',
	    value: function isAppended() {
	      return this.state === STATE_APPENDED;
	    }
	
	    /**
	     * Check if UI element are built.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isBuilt',
	    value: function isBuilt() {
	      return this.state >= STATE_BUILT;
	    }
	
	    /**
	     * Setter for position.
	     *
	     * @param {Number} top New top position of the element.
	     * @param {Number} left New left position of the element.
	     */
	
	  }, {
	    key: 'setPosition',
	    value: function setPosition(top, left) {
	      if (top !== void 0) {
	        this._element.style.top = top + UNIT;
	      }
	      if (left !== void 0) {
	        this._element.style.left = left + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element position.
	     *
	     * @returns {Object} Object contains left and top position of the element.
	     */
	
	  }, {
	    key: 'getPosition',
	    value: function getPosition() {
	      return {
	        top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
	        left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
	      };
	    }
	
	    /**
	     * Setter for the element size.
	     *
	     * @param {Number} width New width of the element.
	     * @param {Number} height New height of the element.
	     */
	
	  }, {
	    key: 'setSize',
	    value: function setSize(width, height) {
	      if (width) {
	        this._element.style.width = width + UNIT;
	      }
	      if (height) {
	        this._element.style.height = height + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element position.
	     *
	     * @returns {Object} Object contains height and width of the element.
	     */
	
	  }, {
	    key: 'getSize',
	    value: function getSize() {
	      return {
	        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
	        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
	      };
	    }
	
	    /**
	     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
	     *
	     * @param {Number} top New margin top of the element.
	     * @param {Number} left New margin left of the element.
	     */
	
	  }, {
	    key: 'setOffset',
	    value: function setOffset(top, left) {
	      if (top) {
	        this._element.style.marginTop = top + UNIT;
	      }
	      if (left) {
	        this._element.style.marginLeft = left + UNIT;
	      }
	    }
	
	    /**
	     * Getter for the element offset.
	     *
	     * @returns {Object} Object contains top and left offset of the element.
	     */
	
	  }, {
	    key: 'getOffset',
	    value: function getOffset() {
	      return {
	        top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
	        left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
	      };
	    }
	  }]);
	
	  return BaseUI;
	}();
	
	exports.default = BaseUI;
	
	/***/ }),
	/* 206 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.applySpanProperties = applySpanProperties;
	/**
	 * Apply the `colspan`/`rowspan` properties.
	 *
	 * @param {HTMLElement} TD The soon-to-be-modified cell.
	 * @param {MergedCellCoords} merged cellInfo The merged cell in question.
	 * @param {Number} row Row index.
	 * @param {Number} col Column index.
	 */
	// eslint-disable-next-line import/prefer-default-export
	function applySpanProperties(TD, mergedCellInfo, row, col) {
	  if (mergedCellInfo) {
	    if (mergedCellInfo.row === row && mergedCellInfo.col === col) {
	      TD.setAttribute('rowspan', mergedCellInfo.rowspan.toString());
	      TD.setAttribute('colspan', mergedCellInfo.colspan.toString());
	    } else {
	      TD.removeAttribute('rowspan');
	      TD.removeAttribute('colspan');
	
	      TD.style.display = 'none';
	    }
	  } else {
	    TD.removeAttribute('rowspan');
	    TD.removeAttribute('colspan');
	
	    TD.style.display = '';
	  }
	}
	
	/***/ }),
	/* 207 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	__webpack_require__(98);
	
	__webpack_require__(113);
	
	__webpack_require__(114);
	
	__webpack_require__(118);
	
	__webpack_require__(119);
	
	__webpack_require__(121);
	
	__webpack_require__(124);
	
	__webpack_require__(125);
	
	__webpack_require__(126);
	
	__webpack_require__(127);
	
	__webpack_require__(128);
	
	__webpack_require__(129);
	
	__webpack_require__(130);
	
	__webpack_require__(131);
	
	__webpack_require__(132);
	
	__webpack_require__(133);
	
	__webpack_require__(134);
	
	__webpack_require__(135);
	
	__webpack_require__(136);
	
	__webpack_require__(137);
	
	__webpack_require__(138);
	
	__webpack_require__(139);
	
	__webpack_require__(140);
	
	__webpack_require__(141);
	
	__webpack_require__(143);
	
	__webpack_require__(145);
	
	__webpack_require__(146);
	
	__webpack_require__(147);
	
	__webpack_require__(148);
	
	__webpack_require__(149);
	
	__webpack_require__(150);
	
	__webpack_require__(151);
	
	__webpack_require__(152);
	
	__webpack_require__(153);
	
	__webpack_require__(154);
	
	__webpack_require__(155);
	
	__webpack_require__(156);
	
	__webpack_require__(157);
	
	__webpack_require__(88);
	
	__webpack_require__(158);
	
	__webpack_require__(159);
	
	__webpack_require__(161);
	
	__webpack_require__(162);
	
	__webpack_require__(163);
	
	__webpack_require__(164);
	
	__webpack_require__(165);
	
	__webpack_require__(166);
	
	__webpack_require__(167);
	
	__webpack_require__(169);
	
	__webpack_require__(170);
	
	__webpack_require__(171);
	
	__webpack_require__(173);
	
	__webpack_require__(174);
	
	__webpack_require__(175);
	
	__webpack_require__(226);
	
	__webpack_require__(227);
	
	__webpack_require__(228);
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var _cellTypes = __webpack_require__(89);
	
	var _core = __webpack_require__(90);
	
	var _core2 = _interopRequireDefault(_core);
	
	var _jquery = __webpack_require__(283);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _ghostTable = __webpack_require__(93);
	
	var _ghostTable2 = _interopRequireDefault(_ghostTable);
	
	var _array = __webpack_require__(2);
	
	var arrayHelpers = _interopRequireWildcard(_array);
	
	var _browser = __webpack_require__(39);
	
	var browserHelpers = _interopRequireWildcard(_browser);
	
	var _data = __webpack_require__(92);
	
	var dataHelpers = _interopRequireWildcard(_data);
	
	var _date = __webpack_require__(192);
	
	var dateHelpers = _interopRequireWildcard(_date);
	
	var _feature = __webpack_require__(40);
	
	var featureHelpers = _interopRequireWildcard(_feature);
	
	var _function = __webpack_require__(43);
	
	var functionHelpers = _interopRequireWildcard(_function);
	
	var _mixed = __webpack_require__(11);
	
	var mixedHelpers = _interopRequireWildcard(_mixed);
	
	var _number = __webpack_require__(6);
	
	var numberHelpers = _interopRequireWildcard(_number);
	
	var _object = __webpack_require__(1);
	
	var objectHelpers = _interopRequireWildcard(_object);
	
	var _setting = __webpack_require__(91);
	
	var settingHelpers = _interopRequireWildcard(_setting);
	
	var _string = __webpack_require__(33);
	
	var stringHelpers = _interopRequireWildcard(_string);
	
	var _unicode = __webpack_require__(21);
	
	var unicodeHelpers = _interopRequireWildcard(_unicode);
	
	var _element = __webpack_require__(0);
	
	var domHelpers = _interopRequireWildcard(_element);
	
	var _event = __webpack_require__(13);
	
	var domEventHelpers = _interopRequireWildcard(_event);
	
	var _index = __webpack_require__(284);
	
	var plugins = _interopRequireWildcard(_index);
	
	var _plugins = __webpack_require__(8);
	
	var _defaultSettings = __webpack_require__(197);
	
	var _defaultSettings2 = _interopRequireDefault(_defaultSettings);
	
	var _rootInstance = __webpack_require__(196);
	
	var _i18n = __webpack_require__(198);
	
	var _constants = __webpack_require__(7);
	
	var constants = _interopRequireWildcard(_constants);
	
	var _dictionariesManager = __webpack_require__(71);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Handsontable(rootElement, userSettings) {
	  var instance = new _core2.default(rootElement, userSettings || {}, _rootInstance.rootInstanceSymbol);
	
	  instance.init();
	
	  return instance;
	}
	
	(0, _jquery2.default)(Handsontable);
	
	Handsontable.Core = _core2.default;
	Handsontable.DefaultSettings = _defaultSettings2.default;
	Handsontable.EventManager = _eventManager2.default;
	Handsontable._getListenersCounter = _eventManager.getListenersCounter; // For MemoryLeak tests
	
	Handsontable.buildDate = '11/09/2018 09:55:19';
	Handsontable.packageName = 'handsontable';
	Handsontable.version = '5.0.2';
	
	var baseVersion = '';
	
	if (baseVersion) {
	  Handsontable.baseVersion = baseVersion;
	}
	
	// Export Hooks singleton
	Handsontable.hooks = _pluginHooks2.default.getSingleton();
	
	// TODO: Remove this exports after rewrite tests about this module
	Handsontable.__GhostTable = _ghostTable2.default;
	//
	
	// Export all helpers to the Handsontable object
	var HELPERS = [arrayHelpers, browserHelpers, dataHelpers, dateHelpers, featureHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, settingHelpers, stringHelpers, unicodeHelpers];
	var DOM = [domHelpers, domEventHelpers];
	
	Handsontable.helper = {};
	Handsontable.dom = {};
	
	// Fill general helpers.
	arrayHelpers.arrayEach(HELPERS, function (helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.helper[key] = helper[key];
	    }
	  });
	});
	
	// Fill DOM helpers.
	arrayHelpers.arrayEach(DOM, function (helper) {
	  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {
	    if (key.charAt(0) !== '_') {
	      Handsontable.dom[key] = helper[key];
	    }
	  });
	});
	
	// Export cell types.
	Handsontable.cellTypes = {};
	
	arrayHelpers.arrayEach((0, _cellTypes.getRegisteredCellTypeNames)(), function (cellTypeName) {
	  Handsontable.cellTypes[cellTypeName] = (0, _cellTypes.getCellType)(cellTypeName);
	});
	
	Handsontable.cellTypes.registerCellType = _cellTypes.registerCellType;
	Handsontable.cellTypes.getCellType = _cellTypes.getCellType;
	
	// Export all registered editors from the Handsontable.
	Handsontable.editors = {};
	
	arrayHelpers.arrayEach((0, _editors.getRegisteredEditorNames)(), function (editorName) {
	  Handsontable.editors[stringHelpers.toUpperCaseFirst(editorName) + 'Editor'] = (0, _editors.getEditor)(editorName);
	});
	
	Handsontable.editors.registerEditor = _editors.registerEditor;
	Handsontable.editors.getEditor = _editors.getEditor;
	
	// Export all registered renderers from the Handsontable.
	Handsontable.renderers = {};
	
	arrayHelpers.arrayEach((0, _renderers.getRegisteredRendererNames)(), function (rendererName) {
	  var renderer = (0, _renderers.getRenderer)(rendererName);
	
	  if (rendererName === 'base') {
	    Handsontable.renderers.cellDecorator = renderer;
	  }
	  Handsontable.renderers[stringHelpers.toUpperCaseFirst(rendererName) + 'Renderer'] = renderer;
	});
	
	Handsontable.renderers.registerRenderer = _renderers.registerRenderer;
	Handsontable.renderers.getRenderer = _renderers.getRenderer;
	
	// Export all registered validators from the Handsontable.
	Handsontable.validators = {};
	
	arrayHelpers.arrayEach((0, _validators.getRegisteredValidatorNames)(), function (validatorName) {
	  Handsontable.validators[stringHelpers.toUpperCaseFirst(validatorName) + 'Validator'] = (0, _validators.getValidator)(validatorName);
	});
	
	Handsontable.validators.registerValidator = _validators.registerValidator;
	Handsontable.validators.getValidator = _validators.getValidator;
	
	// Export all registered plugins from the Handsontable.
	Handsontable.plugins = {};
	
	arrayHelpers.arrayEach(Object.getOwnPropertyNames(plugins), function (pluginName) {
	  var plugin = plugins[pluginName];
	
	  if (pluginName === 'Base') {
	    Handsontable.plugins[pluginName + 'Plugin'] = plugin;
	  } else {
	    Handsontable.plugins[pluginName] = plugin;
	  }
	});
	
	Handsontable.plugins.registerPlugin = _plugins.registerPlugin;
	
	Handsontable.languages = {};
	Handsontable.languages.dictionaryKeys = constants;
	Handsontable.languages.getLanguageDictionary = _dictionariesManager.getLanguageDictionary;
	Handsontable.languages.getLanguagesDictionaries = _dictionariesManager.getLanguagesDictionaries;
	Handsontable.languages.registerLanguageDictionary = _dictionariesManager.registerLanguageDictionary;
	
	// Alias to `getTranslatedPhrase` function, for more information check it API.
	Handsontable.languages.getTranslatedPhrase = function () {
	  return _i18n.getTranslatedPhrase.apply(undefined, arguments);
	};
	
	exports.default = Handsontable;
	
	/***/ }),
	/* 208 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP = __webpack_require__(20);
	var anObject = __webpack_require__(18);
	var getKeys = __webpack_require__(35);
	
	module.exports = __webpack_require__(22) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	
	
	/***/ }),
	/* 209 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var create = __webpack_require__(76);
	var descriptor = __webpack_require__(51);
	var setToStringTag = __webpack_require__(53);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(29)(IteratorPrototype, __webpack_require__(12)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	
	
	/***/ }),
	/* 210 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(9);
	var setPrototypeOf = __webpack_require__(112).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};
	
	
	/***/ }),
	/* 211 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(212);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};
	
	
	/***/ }),
	/* 212 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(9);
	var isArray = __webpack_require__(115);
	var SPECIES = __webpack_require__(12)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};
	
	
	/***/ }),
	/* 213 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(18);
	var aFunction = __webpack_require__(63);
	var SPECIES = __webpack_require__(12)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};
	
	
	/***/ }),
	/* 214 */
	/***/ (function(module, exports) {
	
	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};
	
	
	/***/ }),
	/* 215 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(15);
	var macrotask = __webpack_require__(82).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(44)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};
	
	
	/***/ }),
	/* 216 */
	/***/ (function(module, exports) {
	
	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};
	
	
	/***/ }),
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject = __webpack_require__(18);
	var isObject = __webpack_require__(9);
	var newPromiseCapability = __webpack_require__(120);
	
	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};
	
	
	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(15);
	var core = __webpack_require__(37);
	var LIBRARY = __webpack_require__(49);
	var wksExt = __webpack_require__(122);
	var defineProperty = __webpack_require__(20).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};
	
	
	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(35);
	var gOPS = __webpack_require__(69);
	var pIE = __webpack_require__(54);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};
	
	
	/***/ }),
	/* 220 */
	/***/ (function(module, exports) {
	
	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};
	
	
	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(60);
	var defined = __webpack_require__(36);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	
	
	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(18);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};
	
	
	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	
	var toObject = __webpack_require__(31);
	var toAbsoluteIndex = __webpack_require__(61);
	var toLength = __webpack_require__(25);
	
	module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};
	
	
	/***/ }),
	/* 224 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	
	var toObject = __webpack_require__(31);
	var toAbsoluteIndex = __webpack_require__(61);
	var toLength = __webpack_require__(25);
	module.exports = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};
	
	
	/***/ }),
	/* 225 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// all object keys, includes non-enumerable and symbols
	var gOPN = __webpack_require__(84);
	var gOPS = __webpack_require__(69);
	var anObject = __webpack_require__(18);
	var Reflect = __webpack_require__(15).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
	  var keys = gOPN.f(anObject(it));
	  var getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};
	
	
	/***/ }),
	/* 226 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 227 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 228 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 229 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A overlay that renders ALL available rows & columns positioned on top of the original Walkontable instance and all other overlays.
	 * Used for debugging purposes to see if the other overlays (that render only part of the rows & columns) are positioned correctly
	 *
	 * @class DebugOverlay
	 */
	var DebugOverlay = function (_Overlay) {
	  _inherits(DebugOverlay, _Overlay);
	
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function DebugOverlay(wotInstance) {
	    _classCallCheck(this, DebugOverlay);
	
	    var _this = _possibleConstructorReturn(this, (DebugOverlay.__proto__ || Object.getPrototypeOf(DebugOverlay)).call(this, wotInstance));
	
	    _this.clone = _this.makeClone(_base2.default.CLONE_DEBUG);
	    _this.clone.wtTable.holder.style.opacity = 0.4;
	    _this.clone.wtTable.holder.style.textShadow = '0 0 2px #ff0000';
	
	    (0, _element.addClass)(_this.clone.wtTable.holder.parentNode, 'wtDebugVisible');
	    return _this;
	  }
	
	  return DebugOverlay;
	}(_base2.default);
	
	_base2.default.registerOverlay(_base2.default.CLONE_DEBUG, DebugOverlay);
	
	exports.default = DebugOverlay;
	
	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class LeftOverlay
	 */
	var LeftOverlay = function (_Overlay) {
	  _inherits(LeftOverlay, _Overlay);
	
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function LeftOverlay(wotInstance) {
	    _classCallCheck(this, LeftOverlay);
	
	    var _this = _possibleConstructorReturn(this, (LeftOverlay.__proto__ || Object.getPrototypeOf(LeftOverlay)).call(this, wotInstance));
	
	    _this.clone = _this.makeClone(_base2.default.CLONE_LEFT);
	    return _this;
	  }
	
	  /**
	   * Checks if overlay should be fully rendered.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(LeftOverlay, [{
	    key: 'shouldBeRendered',
	    value: function shouldBeRendered() {
	      return !!(this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length);
	    }
	
	    /**
	     * Updates the left overlay position.
	     */
	
	  }, {
	    key: 'resetFixedPosition',
	    value: function resetFixedPosition() {
	      if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	        // removed from DOM
	        return;
	      }
	      var overlayRoot = this.clone.wtTable.holder.parentNode;
	      var headerPosition = 0;
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (this.trimmingContainer === window && (!preventOverflow || preventOverflow !== 'horizontal')) {
	        var box = this.wot.wtTable.hider.getBoundingClientRect();
	        var left = Math.ceil(box.left);
	        var right = Math.ceil(box.right);
	        var finalLeft = void 0;
	        var finalTop = void 0;
	
	        finalTop = this.wot.wtTable.hider.style.top;
	        finalTop = finalTop === '' ? 0 : finalTop;
	
	        if (left < 0 && right - overlayRoot.offsetWidth > 0) {
	          finalLeft = -left;
	        } else {
	          finalLeft = 0;
	        }
	        headerPosition = finalLeft;
	        finalLeft += 'px';
	
	        (0, _element.setOverlayPosition)(overlayRoot, finalLeft, finalTop);
	      } else {
	        headerPosition = this.getScrollPosition();
	        (0, _element.resetCssTransform)(overlayRoot);
	      }
	      this.adjustHeaderBordersPosition(headerPosition);
	      this.adjustElementsSize();
	    }
	
	    /**
	     * Sets the main overlay's horizontal scroll position.
	     *
	     * @param {Number} pos
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'setScrollPosition',
	    value: function setScrollPosition(pos) {
	      var result = false;
	
	      if (this.mainTableScrollableElement === window && window.scrollX !== pos) {
	        window.scrollTo(pos, (0, _element.getWindowScrollTop)());
	        result = true;
	      } else if (this.mainTableScrollableElement.scrollLeft !== pos) {
	        this.mainTableScrollableElement.scrollLeft = pos;
	        result = true;
	      }
	
	      return result;
	    }
	
	    /**
	     * Triggers onScroll hook callback.
	     */
	
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {
	      this.wot.getSetting('onScrollVertically');
	    }
	
	    /**
	     * Calculates total sum cells width.
	     *
	     * @param {Number} from Column index which calculates started from.
	     * @param {Number} to Column index where calculation is finished.
	     * @returns {Number} Width sum.
	     */
	
	  }, {
	    key: 'sumCellSizes',
	    value: function sumCellSizes(from, to) {
	      var defaultColumnWidth = this.wot.wtSettings.defaultColumnWidth;
	      var column = from;
	      var sum = 0;
	
	      while (column < to) {
	        sum += this.wot.wtTable.getStretchedColumnWidth(column) || defaultColumnWidth;
	        column += 1;
	      }
	
	      return sum;
	    }
	
	    /**
	     * Adjust overlay root element, childs and master table element sizes (width, height).
	     *
	     * @param {Boolean} [force=false]
	     */
	
	  }, {
	    key: 'adjustElementsSize',
	    value: function adjustElementsSize() {
	      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      this.updateTrimmingContainer();
	
	      if (this.needFullRender || force) {
	        this.adjustRootElementSize();
	        this.adjustRootChildrenSize();
	
	        if (!force) {
	          this.areElementSizesAdjusted = true;
	        }
	      }
	    }
	
	    /**
	     * Adjust overlay root element size (width and height).
	     */
	
	  }, {
	    key: 'adjustRootElementSize',
	    value: function adjustRootElementSize() {
	      var masterHolder = this.wot.wtTable.holder;
	      var scrollbarHeight = masterHolder.clientHeight === masterHolder.offsetHeight ? 0 : (0, _element.getScrollbarWidth)();
	      var overlayRoot = this.clone.wtTable.holder.parentNode;
	      var overlayRootStyle = overlayRoot.style;
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (this.trimmingContainer !== window || preventOverflow === 'vertical') {
	        var height = this.wot.wtViewport.getWorkspaceHeight() - scrollbarHeight;
	
	        height = Math.min(height, (0, _element.innerHeight)(this.wot.wtTable.wtRootElement));
	
	        overlayRootStyle.height = height + 'px';
	      } else {
	        overlayRootStyle.height = '';
	      }
	
	      this.clone.wtTable.holder.style.height = overlayRootStyle.height;
	
	      var tableWidth = (0, _element.outerWidth)(this.clone.wtTable.TABLE);
	      overlayRootStyle.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	    }
	
	    /**
	     * Adjust overlay root childs size.
	     */
	
	  }, {
	    key: 'adjustRootChildrenSize',
	    value: function adjustRootChildrenSize() {
	      var scrollbarWidth = (0, _element.getScrollbarWidth)();
	
	      this.clone.wtTable.hider.style.height = this.hider.style.height;
	      this.clone.wtTable.holder.style.height = this.clone.wtTable.holder.parentNode.style.height;
	
	      if (scrollbarWidth === 0) {
	        scrollbarWidth = 30;
	      }
	      this.clone.wtTable.holder.style.width = parseInt(this.clone.wtTable.holder.parentNode.style.width, 10) + scrollbarWidth + 'px';
	    }
	
	    /**
	     * Adjust the overlay dimensions and position.
	     */
	
	  }, {
	    key: 'applyToDOM',
	    value: function applyToDOM() {
	      var total = this.wot.getSetting('totalColumns');
	
	      if (!this.areElementSizesAdjusted) {
	        this.adjustElementsSize();
	      }
	      if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	        this.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	      } else if (total === 0) {
	        this.spreader.style.left = '0';
	      } else {
	        throw new Error('Incorrect value of the columnsRenderCalculator');
	      }
	      this.spreader.style.right = '';
	
	      if (this.needFullRender) {
	        this.syncOverlayOffset();
	      }
	    }
	
	    /**
	     * Synchronize calculated top position to an element.
	     */
	
	  }, {
	    key: 'syncOverlayOffset',
	    value: function syncOverlayOffset() {
	      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	        this.clone.wtTable.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	      } else {
	        this.clone.wtTable.spreader.style.top = '';
	      }
	    }
	
	    /**
	     * Scrolls horizontally to a column at the left edge of the viewport.
	     *
	     * @param {Number} sourceCol  Column index which you want to scroll to.
	     * @param {Boolean} [beyondRendered]  if `true`, scrolls according to the bottom edge (top edge is by default).
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollTo',
	    value: function scrollTo(sourceCol, beyondRendered) {
	      var newX = this.getTableParentOffset();
	      var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	      var mainHolder = sourceInstance.wtTable.holder;
	      var scrollbarCompensation = 0;
	
	      if (beyondRendered && mainHolder.offsetWidth !== mainHolder.clientWidth) {
	        scrollbarCompensation = (0, _element.getScrollbarWidth)();
	      }
	      if (beyondRendered) {
	        newX += this.sumCellSizes(0, sourceCol + 1);
	        newX -= this.wot.wtViewport.getViewportWidth();
	      } else {
	        newX += this.sumCellSizes(this.wot.getSetting('fixedColumnsLeft'), sourceCol);
	      }
	
	      newX += scrollbarCompensation;
	
	      return this.setScrollPosition(newX);
	    }
	
	    /**
	     * Gets table parent left position.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getTableParentOffset',
	    value: function getTableParentOffset() {
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	      var offset = 0;
	
	      if (!preventOverflow && this.trimmingContainer === window) {
	        offset = this.wot.wtTable.holderOffset.left;
	      }
	
	      return offset;
	    }
	
	    /**
	     * Gets the main overlay's horizontal scroll position.
	     *
	     * @returns {Number} Main table's vertical scroll position.
	     */
	
	  }, {
	    key: 'getScrollPosition',
	    value: function getScrollPosition() {
	      return (0, _element.getScrollLeft)(this.mainTableScrollableElement);
	    }
	
	    /**
	     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
	     *
	     * @param {Number} position Header X position if trimming container is window or scroll top if not.
	     */
	
	  }, {
	    key: 'adjustHeaderBordersPosition',
	    value: function adjustHeaderBordersPosition(position) {
	      var masterParent = this.wot.wtTable.holder.parentNode;
	      var rowHeaders = this.wot.getSetting('rowHeaders');
	      var fixedColumnsLeft = this.wot.getSetting('fixedColumnsLeft');
	      var totalRows = this.wot.getSetting('totalRows');
	
	      if (totalRows) {
	        (0, _element.removeClass)(masterParent, 'emptyRows');
	      } else {
	        (0, _element.addClass)(masterParent, 'emptyRows');
	      }
	
	      if (fixedColumnsLeft && !rowHeaders.length) {
	        (0, _element.addClass)(masterParent, 'innerBorderLeft');
	      } else if (!fixedColumnsLeft && rowHeaders.length) {
	        var previousState = (0, _element.hasClass)(masterParent, 'innerBorderLeft');
	
	        if (position) {
	          (0, _element.addClass)(masterParent, 'innerBorderLeft');
	        } else {
	          (0, _element.removeClass)(masterParent, 'innerBorderLeft');
	        }
	        if (!previousState && position || previousState && !position) {
	          this.wot.wtOverlays.adjustElementsSize();
	        }
	      }
	    }
	  }]);
	
	  return LeftOverlay;
	}(_base2.default);
	
	_base2.default.registerOverlay(_base2.default.CLONE_LEFT, LeftOverlay);
	
	exports.default = LeftOverlay;
	
	/***/ }),
	/* 231 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TopOverlay
	 */
	var TopOverlay = function (_Overlay) {
	  _inherits(TopOverlay, _Overlay);
	
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function TopOverlay(wotInstance) {
	    _classCallCheck(this, TopOverlay);
	
	    var _this = _possibleConstructorReturn(this, (TopOverlay.__proto__ || Object.getPrototypeOf(TopOverlay)).call(this, wotInstance));
	
	    _this.clone = _this.makeClone(_base2.default.CLONE_TOP);
	    return _this;
	  }
	
	  /**
	   * Checks if overlay should be fully rendered.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(TopOverlay, [{
	    key: 'shouldBeRendered',
	    value: function shouldBeRendered() {
	      return !!(this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length);
	    }
	
	    /**
	     * Updates the top overlay position.
	     */
	
	  }, {
	    key: 'resetFixedPosition',
	    value: function resetFixedPosition() {
	      if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {
	        // removed from DOM
	        return;
	      }
	      var overlayRoot = this.clone.wtTable.holder.parentNode;
	      var headerPosition = 0;
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (this.trimmingContainer === window && (!preventOverflow || preventOverflow !== 'vertical')) {
	        var box = this.wot.wtTable.hider.getBoundingClientRect();
	        var top = Math.ceil(box.top);
	        var bottom = Math.ceil(box.bottom);
	        var finalLeft = void 0;
	        var finalTop = void 0;
	
	        finalLeft = this.wot.wtTable.hider.style.left;
	        finalLeft = finalLeft === '' ? 0 : finalLeft;
	
	        if (top < 0 && bottom - overlayRoot.offsetHeight > 0) {
	          finalTop = -top;
	        } else {
	          finalTop = 0;
	        }
	        headerPosition = finalTop;
	        finalTop += 'px';
	
	        (0, _element.setOverlayPosition)(overlayRoot, finalLeft, finalTop);
	      } else {
	        headerPosition = this.getScrollPosition();
	        (0, _element.resetCssTransform)(overlayRoot);
	      }
	
	      this.adjustHeaderBordersPosition(headerPosition);
	      this.adjustElementsSize();
	    }
	
	    /**
	     * Sets the main overlay's vertical scroll position.
	     *
	     * @param {Number} pos
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'setScrollPosition',
	    value: function setScrollPosition(pos) {
	      var result = false;
	
	      if (this.mainTableScrollableElement === window && window.scrollY !== pos) {
	        window.scrollTo((0, _element.getWindowScrollLeft)(), pos);
	        result = true;
	      } else if (this.mainTableScrollableElement.scrollTop !== pos) {
	        this.mainTableScrollableElement.scrollTop = pos;
	        result = true;
	      }
	
	      return result;
	    }
	
	    /**
	     * Triggers onScroll hook callback.
	     */
	
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {
	      this.wot.getSetting('onScrollHorizontally');
	    }
	
	    /**
	     * Calculates total sum cells height.
	     *
	     * @param {Number} from Row index which calculates started from.
	     * @param {Number} to Row index where calculation is finished.
	     * @returns {Number} Height sum.
	     */
	
	  }, {
	    key: 'sumCellSizes',
	    value: function sumCellSizes(from, to) {
	      var defaultRowHeight = this.wot.wtSettings.settings.defaultRowHeight;
	      var row = from;
	      var sum = 0;
	
	      while (row < to) {
	        var height = this.wot.wtTable.getRowHeight(row);
	
	        sum += height === void 0 ? defaultRowHeight : height;
	        row += 1;
	      }
	
	      return sum;
	    }
	
	    /**
	     * Adjust overlay root element, childs and master table element sizes (width, height).
	     *
	     * @param {Boolean} [force=false]
	     */
	
	  }, {
	    key: 'adjustElementsSize',
	    value: function adjustElementsSize() {
	      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      this.updateTrimmingContainer();
	
	      if (this.needFullRender || force) {
	        this.adjustRootElementSize();
	        this.adjustRootChildrenSize();
	
	        if (!force) {
	          this.areElementSizesAdjusted = true;
	        }
	      }
	    }
	
	    /**
	     * Adjust overlay root element size (width and height).
	     */
	
	  }, {
	    key: 'adjustRootElementSize',
	    value: function adjustRootElementSize() {
	      var masterHolder = this.wot.wtTable.holder;
	      var scrollbarWidth = masterHolder.clientWidth === masterHolder.offsetWidth ? 0 : (0, _element.getScrollbarWidth)();
	      var overlayRoot = this.clone.wtTable.holder.parentNode;
	      var overlayRootStyle = overlayRoot.style;
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (this.trimmingContainer !== window || preventOverflow === 'horizontal') {
	        var width = this.wot.wtViewport.getWorkspaceWidth() - scrollbarWidth;
	
	        width = Math.min(width, (0, _element.innerWidth)(this.wot.wtTable.wtRootElement));
	
	        overlayRootStyle.width = width + 'px';
	      } else {
	        overlayRootStyle.width = '';
	      }
	
	      this.clone.wtTable.holder.style.width = overlayRootStyle.width;
	
	      var tableHeight = (0, _element.outerHeight)(this.clone.wtTable.TABLE);
	      overlayRootStyle.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	    }
	
	    /**
	     * Adjust overlay root childs size.
	     */
	
	  }, {
	    key: 'adjustRootChildrenSize',
	    value: function adjustRootChildrenSize() {
	      var scrollbarWidth = (0, _element.getScrollbarWidth)();
	
	      this.clone.wtTable.hider.style.width = this.hider.style.width;
	      this.clone.wtTable.holder.style.width = this.clone.wtTable.holder.parentNode.style.width;
	
	      if (scrollbarWidth === 0) {
	        scrollbarWidth = 30;
	      }
	      this.clone.wtTable.holder.style.height = parseInt(this.clone.wtTable.holder.parentNode.style.height, 10) + scrollbarWidth + 'px';
	    }
	
	    /**
	     * Adjust the overlay dimensions and position.
	     */
	
	  }, {
	    key: 'applyToDOM',
	    value: function applyToDOM() {
	      var total = this.wot.getSetting('totalRows');
	
	      if (!this.areElementSizesAdjusted) {
	        this.adjustElementsSize();
	      }
	      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {
	        this.spreader.style.top = this.wot.wtViewport.rowsRenderCalculator.startPosition + 'px';
	      } else if (total === 0) {
	        // can happen if there are 0 rows
	        this.spreader.style.top = '0';
	      } else {
	        throw new Error('Incorrect value of the rowsRenderCalculator');
	      }
	      this.spreader.style.bottom = '';
	
	      if (this.needFullRender) {
	        this.syncOverlayOffset();
	      }
	    }
	
	    /**
	     * Synchronize calculated left position to an element.
	     */
	
	  }, {
	    key: 'syncOverlayOffset',
	    value: function syncOverlayOffset() {
	      if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {
	        this.clone.wtTable.spreader.style.left = this.wot.wtViewport.columnsRenderCalculator.startPosition + 'px';
	      } else {
	        this.clone.wtTable.spreader.style.left = '';
	      }
	    }
	
	    /**
	     * Scrolls vertically to a row.
	     *
	     * @param {Number} sourceRow Row index which you want to scroll to.
	     * @param {Boolean} [bottomEdge] if `true`, scrolls according to the bottom edge (top edge is by default).
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'scrollTo',
	    value: function scrollTo(sourceRow, bottomEdge) {
	      var newY = this.getTableParentOffset();
	      var sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;
	      var mainHolder = sourceInstance.wtTable.holder;
	      var scrollbarCompensation = 0;
	
	      if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {
	        scrollbarCompensation = (0, _element.getScrollbarWidth)();
	      }
	
	      if (bottomEdge) {
	        var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');
	        var totalRows = this.wot.getSetting('totalRows');
	
	        newY += this.sumCellSizes(0, sourceRow + 1);
	        newY -= this.wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);
	        // Fix 1 pixel offset when cell is selected
	        newY += 1;
	      } else {
	        newY += this.sumCellSizes(this.wot.getSetting('fixedRowsTop'), sourceRow);
	      }
	      newY += scrollbarCompensation;
	
	      return this.setScrollPosition(newY);
	    }
	
	    /**
	     * Gets table parent top position.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getTableParentOffset',
	    value: function getTableParentOffset() {
	      if (this.mainTableScrollableElement === window) {
	        return this.wot.wtTable.holderOffset.top;
	      }
	      return 0;
	    }
	
	    /**
	     * Gets the main overlay's vertical scroll position.
	     *
	     * @returns {Number} Main table's vertical scroll position.
	     */
	
	  }, {
	    key: 'getScrollPosition',
	    value: function getScrollPosition() {
	      return (0, _element.getScrollTop)(this.mainTableScrollableElement);
	    }
	
	    /**
	     * Redraw borders of selection.
	     *
	     * @param {WalkontableSelection} selection Selection for redraw.
	     */
	
	  }, {
	    key: 'redrawSelectionBorders',
	    value: function redrawSelectionBorders(selection) {
	      if (selection && selection.cellRange) {
	        var border = selection.getBorder(this.wot);
	        var corners = selection.getCorners();
	
	        border.disappear();
	        border.appear(corners);
	      }
	    }
	
	    /**
	     * Redrawing borders of all selections.
	     */
	
	  }, {
	    key: 'redrawAllSelectionsBorders',
	    value: function redrawAllSelectionsBorders() {
	      var _this2 = this;
	
	      var selections = this.wot.selections;
	
	      this.redrawSelectionBorders(selections.getCell());
	
	      (0, _array.arrayEach)(selections.getAreas(), function (area) {
	        _this2.redrawSelectionBorders(area);
	      });
	      this.redrawSelectionBorders(selections.getFill());
	
	      this.wot.wtTable.wot.wtOverlays.leftOverlay.refresh();
	    }
	
	    /**
	     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
	     *
	     * @param {Number} position Header Y position if trimming container is window or scroll top if not.
	     */
	
	  }, {
	    key: 'adjustHeaderBordersPosition',
	    value: function adjustHeaderBordersPosition(position) {
	      var masterParent = this.wot.wtTable.holder.parentNode;
	      var totalColumns = this.wot.getSetting('totalColumns');
	
	      if (totalColumns) {
	        (0, _element.removeClass)(masterParent, 'emptyColumns');
	      } else {
	        (0, _element.addClass)(masterParent, 'emptyColumns');
	      }
	
	      if (this.wot.getSetting('fixedRowsTop') === 0 && this.wot.getSetting('columnHeaders').length > 0) {
	        var previousState = (0, _element.hasClass)(masterParent, 'innerBorderTop');
	
	        if (position || this.wot.getSetting('totalRows') === 0) {
	          (0, _element.addClass)(masterParent, 'innerBorderTop');
	        } else {
	          (0, _element.removeClass)(masterParent, 'innerBorderTop');
	        }
	
	        if (!previousState && position || previousState && !position) {
	          this.wot.wtOverlays.adjustElementsSize();
	
	          // cell borders should be positioned once again,
	          // because we added / removed 1px border from table header
	          this.redrawAllSelectionsBorders();
	        }
	      }
	
	      // nasty workaround for double border in the header, TODO: find a pure-css solution
	      if (this.wot.getSetting('rowHeaders').length === 0) {
	        var secondHeaderCell = this.clone.wtTable.THEAD.querySelectorAll('th:nth-of-type(2)');
	
	        if (secondHeaderCell) {
	          for (var i = 0; i < secondHeaderCell.length; i++) {
	            secondHeaderCell[i].style['border-left-width'] = 0;
	          }
	        }
	      }
	    }
	  }]);
	
	  return TopOverlay;
	}(_base2.default);
	
	_base2.default.registerOverlay(_base2.default.CLONE_TOP, TopOverlay);
	
	exports.default = TopOverlay;
	
	/***/ }),
	/* 232 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _base = __webpack_require__(41);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TopLeftCornerOverlay
	 */
	var TopLeftCornerOverlay = function (_Overlay) {
	  _inherits(TopLeftCornerOverlay, _Overlay);
	
	  /**
	   * @param {Walkontable} wotInstance
	   */
	  function TopLeftCornerOverlay(wotInstance) {
	    _classCallCheck(this, TopLeftCornerOverlay);
	
	    var _this = _possibleConstructorReturn(this, (TopLeftCornerOverlay.__proto__ || Object.getPrototypeOf(TopLeftCornerOverlay)).call(this, wotInstance));
	
	    _this.clone = _this.makeClone(_base2.default.CLONE_TOP_LEFT_CORNER);
	    return _this;
	  }
	
	  /**
	   * Checks if overlay should be fully rendered
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(TopLeftCornerOverlay, [{
	    key: 'shouldBeRendered',
	    value: function shouldBeRendered() {
	      return !!((this.wot.getSetting('fixedRowsTop') || this.wot.getSetting('columnHeaders').length) && (this.wot.getSetting('fixedColumnsLeft') || this.wot.getSetting('rowHeaders').length));
	    }
	
	    /**
	     * Updates the corner overlay position
	     */
	
	  }, {
	    key: 'resetFixedPosition',
	    value: function resetFixedPosition() {
	      this.updateTrimmingContainer();
	
	      if (!this.wot.wtTable.holder.parentNode) {
	        // removed from DOM
	        return;
	      }
	      var overlayRoot = this.clone.wtTable.holder.parentNode;
	      var tableHeight = (0, _element.outerHeight)(this.clone.wtTable.TABLE);
	      var tableWidth = (0, _element.outerWidth)(this.clone.wtTable.TABLE);
	      var preventOverflow = this.wot.getSetting('preventOverflow');
	
	      if (this.trimmingContainer === window) {
	        var box = this.wot.wtTable.hider.getBoundingClientRect();
	        var top = Math.ceil(box.top);
	        var left = Math.ceil(box.left);
	        var bottom = Math.ceil(box.bottom);
	        var right = Math.ceil(box.right);
	        var finalLeft = '0';
	        var finalTop = '0';
	
	        if (!preventOverflow || preventOverflow === 'vertical') {
	          if (left < 0 && right - overlayRoot.offsetWidth > 0) {
	            finalLeft = -left + 'px';
	          }
	        }
	
	        if (!preventOverflow || preventOverflow === 'horizontal') {
	          if (top < 0 && bottom - overlayRoot.offsetHeight > 0) {
	            finalTop = -top + 'px';
	          }
	        }
	        (0, _element.setOverlayPosition)(overlayRoot, finalLeft, finalTop);
	      } else {
	        (0, _element.resetCssTransform)(overlayRoot);
	      }
	      overlayRoot.style.height = (tableHeight === 0 ? tableHeight : tableHeight + 4) + 'px';
	      overlayRoot.style.width = (tableWidth === 0 ? tableWidth : tableWidth + 4) + 'px';
	    }
	  }]);
	
	  return TopLeftCornerOverlay;
	}(_base2.default);
	
	_base2.default.registerOverlay(_base2.default.CLONE_TOP_LEFT_CORNER, TopLeftCornerOverlay);
	
	exports.default = TopLeftCornerOverlay;
	
	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _border = __webpack_require__(189);
	
	var _border2 = _interopRequireDefault(_border);
	
	var _coords = __webpack_require__(56);
	
	var _coords2 = _interopRequireDefault(_coords);
	
	var _range = __webpack_require__(178);
	
	var _range2 = _interopRequireDefault(_range);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Selection
	 */
	var Selection = function () {
	  /**
	   * @param {Object} settings
	   * @param {CellRange} cellRange
	   */
	  function Selection(settings, cellRange) {
	    _classCallCheck(this, Selection);
	
	    this.settings = settings;
	    this.cellRange = cellRange || null;
	    this.instanceBorders = {};
	    this.classNames = [this.settings.className];
	    this.classNameGenerator = this.linearClassNameGenerator(this.settings.className, this.settings.layerLevel);
	  }
	
	  /**
	   * Each Walkontable clone requires it's own border for every selection. This method creates and returns selection
	   * borders per instance
	   *
	   * @param {Walkontable} wotInstance
	   * @returns {Border}
	   */
	
	
	  _createClass(Selection, [{
	    key: 'getBorder',
	    value: function getBorder(wotInstance) {
	      if (!this.instanceBorders[wotInstance.guid]) {
	        this.instanceBorders[wotInstance.guid] = new _border2.default(wotInstance, this.settings);
	      }
	
	      return this.instanceBorders[wotInstance.guid];
	    }
	
	    /**
	     * Checks if selection is empty
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isEmpty',
	    value: function isEmpty() {
	      return this.cellRange === null;
	    }
	
	    /**
	     * Adds a cell coords to the selection
	     *
	     * @param {CellCoords} coords
	     */
	
	  }, {
	    key: 'add',
	    value: function add(coords) {
	      if (this.isEmpty()) {
	        this.cellRange = new _range2.default(coords);
	      } else {
	        this.cellRange.expand(coords);
	      }
	
	      return this;
	    }
	
	    /**
	     * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean
	     * information about success
	     *
	     * @param {CellCoords} oldCoords
	     * @param {CellCoords} newCoords
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'replace',
	    value: function replace(oldCoords, newCoords) {
	      if (!this.isEmpty()) {
	        if (this.cellRange.from.isEqual(oldCoords)) {
	          this.cellRange.from = newCoords;
	
	          return true;
	        }
	        if (this.cellRange.to.isEqual(oldCoords)) {
	          this.cellRange.to = newCoords;
	
	          return true;
	        }
	      }
	
	      return false;
	    }
	
	    /**
	     * Clears selection
	     *
	     * @returns {Selection}
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.cellRange = null;
	
	      return this;
	    }
	
	    /**
	     * Returns the top left (TL) and bottom right (BR) selection coordinates
	     *
	     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`
	     */
	
	  }, {
	    key: 'getCorners',
	    value: function getCorners() {
	      var topLeft = this.cellRange.getTopLeftCorner();
	      var bottomRight = this.cellRange.getBottomRightCorner();
	
	      return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];
	    }
	
	    /**
	     * Adds class name to cell element at given coords
	     *
	     * @param {Walkontable} wotInstance Walkontable instance
	     * @param {Number} sourceRow Cell row coord
	     * @param {Number} sourceColumn Cell column coord
	     * @param {String} className Class name
	     * @param {Boolean} [markIntersections=false] If `true`, linear className generator will be used to add CSS classes
	     *                                            in a continuous way.
	     * @returns {Selection}
	     */
	
	  }, {
	    key: 'addClassAtCoords',
	    value: function addClassAtCoords(wotInstance, sourceRow, sourceColumn, className) {
	      var markIntersections = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	      var TD = wotInstance.wtTable.getCell(new _coords2.default(sourceRow, sourceColumn));
	
	      if ((typeof TD === 'undefined' ? 'undefined' : _typeof(TD)) === 'object') {
	        var cellClassName = className;
	
	        if (markIntersections) {
	          cellClassName = this.classNameGenerator(TD);
	
	          if (!this.classNames.includes(cellClassName)) {
	            this.classNames.push(cellClassName);
	          }
	        }
	
	        (0, _element.addClass)(TD, cellClassName);
	      }
	
	      return this;
	    }
	
	    /**
	     * Generate helper for calculating classNames based on previously added base className.
	     * The generated className is always generated as a continuation of the previous className. For example, when
	     * the currently checked element has 'area-2' className the generated new className will be 'area-3'. When
	     * the element doesn't have any classNames than the base className will be returned ('area');
	     *
	     * @param {String} baseClassName Base className to be used.
	     * @param {Number} layerLevelOwner Layer level which the instance of the Selection belongs to.
	     * @return {Function}
	     */
	
	  }, {
	    key: 'linearClassNameGenerator',
	    value: function linearClassNameGenerator(baseClassName, layerLevelOwner) {
	      // TODO: Make this recursive function Proper Tail Calls (TCO/PTC) friendly.
	      return function calcClassName(element) {
	        var previousIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
	
	        if (layerLevelOwner === 0 || previousIndex === 0) {
	          return baseClassName;
	        }
	
	        var index = previousIndex >= 0 ? previousIndex : layerLevelOwner;
	        var className = baseClassName;
	
	        index -= 1;
	
	        var previousClassName = index === 0 ? baseClassName : baseClassName + '-' + index;
	
	        if ((0, _element.hasClass)(element, previousClassName)) {
	          var currentLayer = index + 1;
	
	          className = baseClassName + '-' + currentLayer;
	        } else {
	          className = calcClassName(element, index);
	        }
	
	        return className;
	      };
	    }
	
	    /**
	     * @param wotInstance
	     */
	
	  }, {
	    key: 'draw',
	    value: function draw(wotInstance) {
	      if (this.isEmpty()) {
	        if (this.settings.border) {
	          this.getBorder(wotInstance).disappear();
	        }
	
	        return;
	      }
	
	      var renderedRows = wotInstance.wtTable.getRenderedRowsCount();
	      var renderedColumns = wotInstance.wtTable.getRenderedColumnsCount();
	      var corners = this.getCorners();
	
	      var _corners = _slicedToArray(corners, 4),
	          topRow = _corners[0],
	          topColumn = _corners[1],
	          bottomRow = _corners[2],
	          bottomColumn = _corners[3];
	
	      for (var column = 0; column < renderedColumns; column += 1) {
	        var sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(column);
	
	        if (sourceCol >= topColumn && sourceCol <= bottomColumn) {
	          var TH = wotInstance.wtTable.getColumnHeader(sourceCol);
	
	          if (TH) {
	            var newClasses = [];
	
	            if (this.settings.highlightHeaderClassName) {
	              newClasses.push(this.settings.highlightHeaderClassName);
	            }
	
	            if (this.settings.highlightColumnClassName) {
	              newClasses.push(this.settings.highlightColumnClassName);
	            }
	
	            (0, _element.addClass)(TH, newClasses);
	          }
	        }
	      }
	
	      for (var row = 0; row < renderedRows; row += 1) {
	        var sourceRow = wotInstance.wtTable.rowFilter.renderedToSource(row);
	
	        if (sourceRow >= topRow && sourceRow <= bottomRow) {
	          var _TH = wotInstance.wtTable.getRowHeader(sourceRow);
	
	          if (_TH) {
	            var _newClasses = [];
	
	            if (this.settings.highlightHeaderClassName) {
	              _newClasses.push(this.settings.highlightHeaderClassName);
	            }
	
	            if (this.settings.highlightRowClassName) {
	              _newClasses.push(this.settings.highlightRowClassName);
	            }
	
	            (0, _element.addClass)(_TH, _newClasses);
	          }
	        }
	
	        for (var _column = 0; _column < renderedColumns; _column += 1) {
	          var _sourceCol = wotInstance.wtTable.columnFilter.renderedToSource(_column);
	
	          if (sourceRow >= topRow && sourceRow <= bottomRow && _sourceCol >= topColumn && _sourceCol <= bottomColumn) {
	            // selected cell
	            if (this.settings.className) {
	              this.addClassAtCoords(wotInstance, sourceRow, _sourceCol, this.settings.className, this.settings.markIntersections);
	            }
	          } else if (sourceRow >= topRow && sourceRow <= bottomRow) {
	            // selection is in this row
	            if (this.settings.highlightRowClassName) {
	              this.addClassAtCoords(wotInstance, sourceRow, _sourceCol, this.settings.highlightRowClassName);
	            }
	          } else if (_sourceCol >= topColumn && _sourceCol <= bottomColumn) {
	            // selection is in this column
	            if (this.settings.highlightColumnClassName) {
	              this.addClassAtCoords(wotInstance, sourceRow, _sourceCol, this.settings.highlightColumnClassName);
	            }
	          }
	
	          var additionalSelectionClass = wotInstance.getSetting('onAfterDrawSelection', sourceRow, _sourceCol, corners, this.settings.layerLevel);
	
	          if (typeof additionalSelectionClass === 'string') {
	            this.addClassAtCoords(wotInstance, sourceRow, _sourceCol, additionalSelectionClass);
	          }
	        }
	      }
	
	      wotInstance.getSetting('onBeforeDrawBorders', corners, this.settings.className);
	
	      if (this.settings.border) {
	        // warning! border.appear modifies corners!
	        this.getBorder(wotInstance).appear(corners);
	      }
	    }
	  }]);
	
	  return Selection;
	}();
	
	exports.default = Selection;
	
	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	/**
	 * autoResize - resizes a DOM element to the width and height of another DOM element
	 *
	 * Copyright 2014, Marcin Warpechowski
	 * Licensed under the MIT license
	 */
	
	function autoResize() {
	  var defaults = {
	    minHeight: 200,
	    maxHeight: 300,
	    minWidth: 100,
	    maxWidth: 300
	  },
	      el,
	      body = document.body,
	      text = document.createTextNode(''),
	      span = document.createElement('SPAN'),
	      observe = function observe(element, event, handler) {
	    element.addEventListener(event, handler, false);
	  },
	      _unObserve = function _unObserve(element, event, handler) {
	    element.removeEventListener(event, handler, false);
	  },
	      resize = function resize(newChar) {
	    var width, scrollHeight;
	
	    if (!newChar) {
	      newChar = "";
	    } else if (!/^[a-zA-Z \.,\\\/\|0-9]$/.test(newChar)) {
	      newChar = ".";
	    }
	
	    if (text.textContent !== void 0) {
	      text.textContent = el.value + newChar;
	    } else {
	      text.data = el.value + newChar; //IE8
	    }
	    span.style.fontSize = getComputedStyle(el).fontSize;
	    span.style.fontFamily = getComputedStyle(el).fontFamily;
	    span.style.whiteSpace = "pre";
	
	    body.appendChild(span);
	    width = span.clientWidth + 2;
	    body.removeChild(span);
	
	    el.style.height = defaults.minHeight + 'px';
	
	    if (defaults.minWidth > width) {
	      el.style.width = defaults.minWidth + 'px';
	    } else if (width > defaults.maxWidth) {
	      el.style.width = defaults.maxWidth + 'px';
	    } else {
	      el.style.width = width + 'px';
	    }
	    scrollHeight = el.scrollHeight ? el.scrollHeight - 1 : 0;
	
	    if (defaults.minHeight > scrollHeight) {
	      el.style.height = defaults.minHeight + 'px';
	    } else if (defaults.maxHeight < scrollHeight) {
	      el.style.height = defaults.maxHeight + 'px';
	      el.style.overflowY = 'visible';
	    } else {
	      el.style.height = scrollHeight + 'px';
	    }
	  },
	      delayedResize = function delayedResize() {
	    window.setTimeout(resize, 0);
	  },
	      extendDefaults = function extendDefaults(config) {
	
	    if (config && config.minHeight) {
	      if (config.minHeight == 'inherit') {
	        defaults.minHeight = el.clientHeight;
	      } else {
	        var minHeight = parseInt(config.minHeight);
	        if (!isNaN(minHeight)) {
	          defaults.minHeight = minHeight;
	        }
	      }
	    }
	
	    if (config && config.maxHeight) {
	      if (config.maxHeight == 'inherit') {
	        defaults.maxHeight = el.clientHeight;
	      } else {
	        var maxHeight = parseInt(config.maxHeight);
	        if (!isNaN(maxHeight)) {
	          defaults.maxHeight = maxHeight;
	        }
	      }
	    }
	
	    if (config && config.minWidth) {
	      if (config.minWidth == 'inherit') {
	        defaults.minWidth = el.clientWidth;
	      } else {
	        var minWidth = parseInt(config.minWidth);
	        if (!isNaN(minWidth)) {
	          defaults.minWidth = minWidth;
	        }
	      }
	    }
	
	    if (config && config.maxWidth) {
	      if (config.maxWidth == 'inherit') {
	        defaults.maxWidth = el.clientWidth;
	      } else {
	        var maxWidth = parseInt(config.maxWidth);
	        if (!isNaN(maxWidth)) {
	          defaults.maxWidth = maxWidth;
	        }
	      }
	    }
	
	    if (!span.firstChild) {
	      span.className = "autoResize";
	      span.style.display = 'inline-block';
	      span.appendChild(text);
	    }
	  },
	      _init = function _init(el_, config, doObserve) {
	    el = el_;
	    extendDefaults(config);
	
	    if (el.nodeName == 'TEXTAREA') {
	      el.style.resize = 'none';
	      el.style.overflowY = '';
	      el.style.height = defaults.minHeight + 'px';
	      el.style.minWidth = defaults.minWidth + 'px';
	      el.style.maxWidth = defaults.maxWidth + 'px';
	      el.style.overflowY = 'hidden';
	    }
	
	    if (doObserve) {
	      observe(el, 'change', resize);
	      observe(el, 'cut', delayedResize);
	      observe(el, 'paste', delayedResize);
	      observe(el, 'drop', delayedResize);
	      observe(el, 'keydown', delayedResize);
	      observe(el, 'focus', resize);
	      observe(el, 'compositionstart', delayedResize);
	      observe(el, 'compositionupdate', delayedResize);
	      observe(el, 'compositionend', delayedResize);
	    }
	
	    resize();
	  };
	
	  function getComputedStyle(element) {
	    return element.currentStyle || document.defaultView.getComputedStyle(element);
	  }
	
	  return {
	    init: function init(el_, config, doObserve) {
	      _init(el_, config, doObserve);
	    },
	    unObserve: function unObserve() {
	      _unObserve(el, 'change', resize);
	      _unObserve(el, 'cut', delayedResize);
	      _unObserve(el, 'paste', delayedResize);
	      _unObserve(el, 'drop', delayedResize);
	      _unObserve(el, 'keydown', delayedResize);
	      _unObserve(el, 'focus', resize);
	      _unObserve(el, 'compositionstart', delayedResize);
	      _unObserve(el, 'compositionupdate', delayedResize);
	      _unObserve(el, 'compositionend', delayedResize);
	    },
	    resize: resize
	  };
	}
	
	if (true) {
	  module.exports = autoResize;
	}
	
	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _baseEditor = __webpack_require__(55);
	
	var _baseEditor2 = _interopRequireDefault(_baseEditor);
	
	var _element = __webpack_require__(0);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @editor CheckboxEditor
	 * @class CheckboxEditor
	 */
	var CheckboxEditor = function (_BaseEditor) {
	  _inherits(CheckboxEditor, _BaseEditor);
	
	  function CheckboxEditor() {
	    _classCallCheck(this, CheckboxEditor);
	
	    return _possibleConstructorReturn(this, (CheckboxEditor.__proto__ || Object.getPrototypeOf(CheckboxEditor)).apply(this, arguments));
	  }
	
	  _createClass(CheckboxEditor, [{
	    key: 'beginEditing',
	    value: function beginEditing(initialValue, event) {
	      // Just some events connected with checkbox editor are delegated here. Some `keydown` events like `enter` and `space` key press
	      // are handled inside `checkboxRenderer`. Some events come here from `editorManager`. Below `if` statement was created by author
	      // for purpose of handling only `doubleclick` event which may be done on a cell with checkbox.
	
	      if (event && event.type === 'mouseup') {
	        var checkbox = this.TD.querySelector('input[type="checkbox"]');
	
	        if (!(0, _element.hasClass)(checkbox, 'htBadValue')) {
	          checkbox.click();
	        }
	      }
	    }
	  }, {
	    key: 'finishEditing',
	    value: function finishEditing() {}
	  }, {
	    key: 'init',
	    value: function init() {}
	  }, {
	    key: 'open',
	    value: function open() {}
	  }, {
	    key: 'close',
	    value: function close() {}
	  }, {
	    key: 'getValue',
	    value: function getValue() {}
	  }, {
	    key: 'setValue',
	    value: function setValue() {}
	  }, {
	    key: 'focus',
	    value: function focus() {}
	  }]);
	
	  return CheckboxEditor;
	}(_baseEditor2.default);
	
	exports.default = CheckboxEditor;
	
	/***/ }),
	/* 236 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _moment = __webpack_require__(57);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _pikaday = __webpack_require__(237);
	
	var _pikaday2 = _interopRequireDefault(_pikaday);
	
	__webpack_require__(238);
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _unicode = __webpack_require__(21);
	
	var _event = __webpack_require__(13);
	
	var _textEditor = __webpack_require__(59);
	
	var _textEditor2 = _interopRequireDefault(_textEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @editor DateEditor
	 * @class DateEditor
	 * @dependencies TextEditor moment pikaday
	 */
	var DateEditor = function (_TextEditor) {
	  _inherits(DateEditor, _TextEditor);
	
	  /**
	   * @param {Core} hotInstance Handsontable instance
	   * @private
	   */
	  function DateEditor(hotInstance) {
	    _classCallCheck(this, DateEditor);
	
	    // TODO: Move this option to general settings
	    var _this = _possibleConstructorReturn(this, (DateEditor.__proto__ || Object.getPrototypeOf(DateEditor)).call(this, hotInstance));
	
	    _this.defaultDateFormat = 'DD/MM/YYYY';
	    _this.isCellEdited = false;
	    _this.parentDestroyed = false;
	    return _this;
	  }
	
	  _createClass(DateEditor, [{
	    key: 'init',
	    value: function init() {
	      var _this2 = this;
	
	      if (typeof _moment2.default !== 'function') {
	        throw new Error('You need to include moment.js to your project.');
	      }
	
	      if (typeof _pikaday2.default !== 'function') {
	        throw new Error('You need to include Pikaday to your project.');
	      }
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'init', this).call(this);
	      this.instance.addHook('afterDestroy', function () {
	        _this2.parentDestroyed = true;
	        _this2.destroyElements();
	      });
	    }
	
	    /**
	     * Create data picker instance
	     */
	
	  }, {
	    key: 'createElements',
	    value: function createElements() {
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'createElements', this).call(this);
	
	      this.datePicker = document.createElement('DIV');
	      this.datePickerStyle = this.datePicker.style;
	      this.datePickerStyle.position = 'absolute';
	      this.datePickerStyle.top = 0;
	      this.datePickerStyle.left = 0;
	      this.datePickerStyle.zIndex = 9999;
	
	      (0, _element.addClass)(this.datePicker, 'htDatepickerHolder');
	      document.body.appendChild(this.datePicker);
	
	      this.$datePicker = new _pikaday2.default(this.getDatePickerConfig());
	      var eventManager = new _eventManager2.default(this);
	
	      /**
	       * Prevent recognizing clicking on datepicker as clicking outside of table
	       */
	      eventManager.addEventListener(this.datePicker, 'mousedown', function (event) {
	        return (0, _event.stopPropagation)(event);
	      });
	      this.hideDatepicker();
	    }
	
	    /**
	     * Destroy data picker instance
	     */
	
	  }, {
	    key: 'destroyElements',
	    value: function destroyElements() {
	      this.$datePicker.destroy();
	    }
	
	    /**
	     * Prepare editor to appear
	     *
	     * @param {Number} row Row index
	     * @param {Number} col Column index
	     * @param {String} prop Property name (passed when datasource is an array of objects)
	     * @param {HTMLTableCellElement} td Table cell element
	     * @param {*} originalValue Original value
	     * @param {Object} cellProperties Object with cell properties ({@see Core#getCellMeta})
	     */
	
	  }, {
	    key: 'prepare',
	    value: function prepare(row, col, prop, td, originalValue, cellProperties) {
	      this._opened = false;
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'prepare', this).call(this, row, col, prop, td, originalValue, cellProperties);
	    }
	
	    /**
	     * Open editor
	     *
	     * @param {Event} [event=null]
	     */
	
	  }, {
	    key: 'open',
	    value: function open() {
	      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'open', this).call(this);
	      this.showDatepicker(event);
	    }
	
	    /**
	     * Close editor
	     */
	
	  }, {
	    key: 'close',
	    value: function close() {
	      var _this3 = this;
	
	      this._opened = false;
	      this.instance._registerTimeout(function () {
	        _this3.instance._refreshBorders();
	      });
	
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'close', this).call(this);
	    }
	
	    /**
	     * @param {Boolean} [isCancelled=false]
	     * @param {Boolean} [ctrlDown=false]
	     */
	
	  }, {
	    key: 'finishEditing',
	    value: function finishEditing() {
	      var isCancelled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var ctrlDown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (isCancelled) {
	        // pressed ESC, restore original value
	        // var value = this.instance.getDataAtCell(this.row, this.col);
	        var value = this.originalValue;
	
	        if (value !== void 0) {
	          this.setValue(value);
	        }
	      }
	      this.hideDatepicker();
	      _get(DateEditor.prototype.__proto__ || Object.getPrototypeOf(DateEditor.prototype), 'finishEditing', this).call(this, isCancelled, ctrlDown);
	    }
	
	    /**
	     * Show data picker
	     *
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'showDatepicker',
	    value: function showDatepicker(event) {
	      this.$datePicker.config(this.getDatePickerConfig());
	
	      var offset = this.TD.getBoundingClientRect();
	      var dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;
	      var datePickerConfig = this.$datePicker.config();
	      var dateStr = void 0;
	      var isMouseDown = this.instance.view.isMouseDown();
	      var isMeta = event ? (0, _unicode.isMetaKey)(event.keyCode) : false;
	
	      this.datePickerStyle.top = window.pageYOffset + offset.top + (0, _element.outerHeight)(this.TD) + 'px';
	      this.datePickerStyle.left = window.pageXOffset + offset.left + 'px';
	
	      this.$datePicker._onInputFocus = function () {};
	      datePickerConfig.format = dateFormat;
	
	      if (this.originalValue) {
	        dateStr = this.originalValue;
	
	        if ((0, _moment2.default)(dateStr, dateFormat, true).isValid()) {
	          this.$datePicker.setMoment((0, _moment2.default)(dateStr, dateFormat), true);
	        }
	
	        // workaround for date/time cells - pikaday resets the cell value to 12:00 AM by default, this will overwrite the value.
	        if (this.getValue() !== this.originalValue) {
	          this.setValue(this.originalValue);
	        }
	
	        if (!isMeta && !isMouseDown) {
	          this.setValue('');
	        }
	      } else if (this.cellProperties.defaultDate) {
	        dateStr = this.cellProperties.defaultDate;
	
	        datePickerConfig.defaultDate = dateStr;
	
	        if ((0, _moment2.default)(dateStr, dateFormat, true).isValid()) {
	          this.$datePicker.setMoment((0, _moment2.default)(dateStr, dateFormat), true);
	        }
	
	        if (!isMeta && !isMouseDown) {
	          this.setValue('');
	        }
	      } else {
	        // if a default date is not defined, set a soft-default-date: display the current day and month in the
	        // datepicker, but don't fill the editor input
	        this.$datePicker.gotoToday();
	      }
	
	      this.datePickerStyle.display = 'block';
	      this.$datePicker.show();
	    }
	
	    /**
	     * Hide data picker
	     */
	
	  }, {
	    key: 'hideDatepicker',
	    value: function hideDatepicker() {
	      this.datePickerStyle.display = 'none';
	      this.$datePicker.hide();
	    }
	
	    /**
	     * Get date picker options.
	     *
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'getDatePickerConfig',
	    value: function getDatePickerConfig() {
	      var _this4 = this;
	
	      var htInput = this.TEXTAREA;
	      var options = {};
	
	      if (this.cellProperties && this.cellProperties.datePickerConfig) {
	        (0, _object.deepExtend)(options, this.cellProperties.datePickerConfig);
	      }
	      var origOnSelect = options.onSelect;
	      var origOnClose = options.onClose;
	
	      options.field = htInput;
	      options.trigger = htInput;
	      options.container = this.datePicker;
	      options.bound = false;
	      options.format = options.format || this.defaultDateFormat;
	      options.reposition = options.reposition || false;
	      options.onSelect = function (value) {
	        var dateStr = value;
	
	        if (!isNaN(dateStr.getTime())) {
	          dateStr = (0, _moment2.default)(dateStr).format(_this4.cellProperties.dateFormat || _this4.defaultDateFormat);
	        }
	        _this4.setValue(dateStr);
	        _this4.hideDatepicker();
	
	        if (origOnSelect) {
	          origOnSelect();
	        }
	      };
	      options.onClose = function () {
	        if (!_this4.parentDestroyed) {
	          _this4.finishEditing(false);
	        }
	        if (origOnClose) {
	          origOnClose();
	        }
	      };
	
	      return options;
	    }
	  }]);
	
	  return DateEditor;
	}(_textEditor2.default);
	
	exports.default = DateEditor;
	
	/***/ }),
	/* 237 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_237__;
	
	/***/ }),
	/* 238 */
	/***/ (function(module, exports) {
	
	
	
	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _autocompleteEditor = __webpack_require__(190);
	
	var _autocompleteEditor2 = _interopRequireDefault(_autocompleteEditor);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @editor DropdownEditor
	 * @class DropdownEditor
	 * @dependencies AutocompleteEditor
	 */
	var DropdownEditor = function (_AutocompleteEditor) {
	  _inherits(DropdownEditor, _AutocompleteEditor);
	
	  function DropdownEditor() {
	    _classCallCheck(this, DropdownEditor);
	
	    return _possibleConstructorReturn(this, (DropdownEditor.__proto__ || Object.getPrototypeOf(DropdownEditor)).apply(this, arguments));
	  }
	
	  _createClass(DropdownEditor, [{
	    key: 'prepare',
	    value: function prepare(row, col, prop, td, originalValue, cellProperties) {
	      _get(DropdownEditor.prototype.__proto__ || Object.getPrototypeOf(DropdownEditor.prototype), 'prepare', this).call(this, row, col, prop, td, originalValue, cellProperties);
	      this.cellProperties.filter = false;
	      this.cellProperties.strict = true;
	    }
	  }]);
	
	  return DropdownEditor;
	}(_autocompleteEditor2.default);
	
	_pluginHooks2.default.getSingleton().add('beforeValidate', function (value, row, col) {
	  var cellMeta = this.getCellMeta(row, this.propToCol(col));
	
	  if (cellMeta.editor === DropdownEditor) {
	    if (cellMeta.strict === void 0) {
	      cellMeta.filter = false;
	      cellMeta.strict = true;
	    }
	  }
	});
	
	exports.default = DropdownEditor;
	
	/***/ }),
	/* 240 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _textEditor = __webpack_require__(59);
	
	var _textEditor2 = _interopRequireDefault(_textEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @editor NumericEditor
	 * @class NumericEditor
	 */
	var NumericEditor = function (_TextEditor) {
	  _inherits(NumericEditor, _TextEditor);
	
	  function NumericEditor() {
	    _classCallCheck(this, NumericEditor);
	
	    return _possibleConstructorReturn(this, (NumericEditor.__proto__ || Object.getPrototypeOf(NumericEditor)).apply(this, arguments));
	  }
	
	  return NumericEditor;
	}(_textEditor2.default);
	
	exports.default = NumericEditor;
	
	/***/ }),
	/* 241 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _element = __webpack_require__(0);
	
	var _textEditor = __webpack_require__(59);
	
	var _textEditor2 = _interopRequireDefault(_textEditor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @editor PasswordEditor
	 * @class PasswordEditor
	 * @dependencies TextEditor
	 */
	var PasswordEditor = function (_TextEditor) {
	  _inherits(PasswordEditor, _TextEditor);
	
	  function PasswordEditor() {
	    _classCallCheck(this, PasswordEditor);
	
	    return _possibleConstructorReturn(this, (PasswordEditor.__proto__ || Object.getPrototypeOf(PasswordEditor)).apply(this, arguments));
	  }
	
	  _createClass(PasswordEditor, [{
	    key: 'createElements',
	    value: function createElements() {
	      _get(PasswordEditor.prototype.__proto__ || Object.getPrototypeOf(PasswordEditor.prototype), 'createElements', this).call(this);
	
	      this.TEXTAREA = document.createElement('input');
	      this.TEXTAREA.setAttribute('type', 'password');
	      this.TEXTAREA.className = 'handsontableInput';
	      this.textareaStyle = this.TEXTAREA.style;
	      this.textareaStyle.width = 0;
	      this.textareaStyle.height = 0;
	
	      (0, _element.empty)(this.TEXTAREA_PARENT);
	      this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
	    }
	  }]);
	
	  return PasswordEditor;
	}(_textEditor2.default);
	
	exports.default = PasswordEditor;
	
	/***/ }),
	/* 242 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _element = __webpack_require__(0);
	
	var _event = __webpack_require__(13);
	
	var _unicode = __webpack_require__(21);
	
	var _baseEditor = __webpack_require__(55);
	
	var _baseEditor2 = _interopRequireDefault(_baseEditor);
	
	var _object = __webpack_require__(1);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SelectEditor = _baseEditor2.default.prototype.extend();
	
	/**
	 * @private
	 * @editor SelectEditor
	 * @class SelectEditor
	 */
	SelectEditor.prototype.init = function () {
	  this.select = document.createElement('SELECT');
	  (0, _element.addClass)(this.select, 'htSelectEditor');
	  this.select.style.display = 'none';
	  this.instance.rootElement.appendChild(this.select);
	  this.registerHooks();
	};
	
	SelectEditor.prototype.registerHooks = function () {
	  var _this = this;
	
	  this.instance.addHook('afterScrollHorizontally', function () {
	    return _this.refreshDimensions();
	  });
	  this.instance.addHook('afterScrollVertically', function () {
	    return _this.refreshDimensions();
	  });
	  this.instance.addHook('afterColumnResize', function () {
	    return _this.refreshDimensions();
	  });
	  this.instance.addHook('afterRowResize', function () {
	    return _this.refreshDimensions();
	  });
	};
	
	SelectEditor.prototype.prepare = function () {
	  var _this2 = this;
	
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  _baseEditor2.default.prototype.prepare.apply(this, args);
	
	  var selectOptions = this.cellProperties.selectOptions;
	  var options = void 0;
	
	  if (typeof selectOptions === 'function') {
	    options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));
	  } else {
	    options = this.prepareOptions(selectOptions);
	  }
	
	  (0, _element.empty)(this.select);
	
	  (0, _object.objectEach)(options, function (value, key) {
	    var optionElement = document.createElement('OPTION');
	    optionElement.value = key;
	    (0, _element.fastInnerHTML)(optionElement, value);
	    _this2.select.appendChild(optionElement);
	  });
	};
	
	SelectEditor.prototype.prepareOptions = function (optionsToPrepare) {
	  var preparedOptions = {};
	
	  if (Array.isArray(optionsToPrepare)) {
	    for (var i = 0, len = optionsToPrepare.length; i < len; i++) {
	      preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];
	    }
	  } else if ((typeof optionsToPrepare === 'undefined' ? 'undefined' : _typeof(optionsToPrepare)) === 'object') {
	    preparedOptions = optionsToPrepare;
	  }
	
	  return preparedOptions;
	};
	
	SelectEditor.prototype.getValue = function () {
	  return this.select.value;
	};
	
	SelectEditor.prototype.setValue = function (value) {
	  this.select.value = value;
	};
	
	var onBeforeKeyDown = function onBeforeKeyDown(event) {
	  var instance = this;
	  var editor = instance.getActiveEditor();
	  var previousOptionIndex = editor.select.selectedIndex - 1;
	  var nextOptionIndex = editor.select.selectedIndex + 1;
	
	  switch (event.keyCode) {
	    case _unicode.KEY_CODES.ARROW_UP:
	      if (previousOptionIndex >= 0) {
	        editor.select[previousOptionIndex].selected = true;
	      }
	
	      (0, _event.stopImmediatePropagation)(event);
	      event.preventDefault();
	      break;
	
	    case _unicode.KEY_CODES.ARROW_DOWN:
	      if (nextOptionIndex <= editor.select.length - 1) {
	        editor.select[nextOptionIndex].selected = true;
	      }
	
	      (0, _event.stopImmediatePropagation)(event);
	      event.preventDefault();
	      break;
	
	    default:
	      break;
	  }
	};
	
	SelectEditor.prototype.open = function () {
	  this._opened = true;
	  this.refreshDimensions();
	  this.select.style.display = '';
	  this.instance.addHook('beforeKeyDown', onBeforeKeyDown);
	};
	
	SelectEditor.prototype.close = function () {
	  this._opened = false;
	  this.select.style.display = 'none';
	  this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	};
	
	SelectEditor.prototype.focus = function () {
	  this.select.focus();
	};
	
	SelectEditor.prototype.refreshValue = function () {
	  var sourceData = this.instance.getSourceDataAtCell(this.row, this.prop);
	  this.originalValue = sourceData;
	
	  this.setValue(sourceData);
	  this.refreshDimensions();
	};
	
	SelectEditor.prototype.refreshDimensions = function () {
	  if (this.state !== _baseEditor.EditorState.EDITING) {
	    return;
	  }
	  this.TD = this.getEditedCell();
	
	  // TD is outside of the viewport.
	  if (!this.TD) {
	    this.close();
	
	    return;
	  }
	  var currentOffset = (0, _element.offset)(this.TD);
	  var containerOffset = (0, _element.offset)(this.instance.rootElement);
	  var scrollableContainer = (0, _element.getScrollableElement)(this.TD);
	  var editorSection = this.checkEditorSection();
	  var width = (0, _element.outerWidth)(this.TD) + 1;
	  var height = (0, _element.outerHeight)(this.TD) + 1;
	  var editTop = currentOffset.top - containerOffset.top - 1 - (scrollableContainer.scrollTop || 0);
	  var editLeft = currentOffset.left - containerOffset.left - 1 - (scrollableContainer.scrollLeft || 0);
	  var cssTransformOffset = void 0;
	
	  switch (editorSection) {
	    case 'top':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'left':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'top-left-corner':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom-left-corner':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      break;
	    case 'bottom':
	      cssTransformOffset = (0, _element.getCssTransform)(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode);
	      break;
	    default:
	      break;
	  }
	  if (this.instance.getSelectedLast()[0] === 0) {
	    editTop += 1;
	  }
	
	  if (this.instance.getSelectedLast()[1] === 0) {
	    editLeft += 1;
	  }
	
	  var selectStyle = this.select.style;
	
	  if (cssTransformOffset && cssTransformOffset !== -1) {
	    selectStyle[cssTransformOffset[0]] = cssTransformOffset[1];
	  } else {
	    (0, _element.resetCssTransform)(this.select);
	  }
	  var cellComputedStyle = (0, _element.getComputedStyle)(this.TD);
	
	  if (parseInt(cellComputedStyle.borderTopWidth, 10) > 0) {
	    height -= 1;
	  }
	  if (parseInt(cellComputedStyle.borderLeftWidth, 10) > 0) {
	    width -= 1;
	  }
	
	  selectStyle.height = height + 'px';
	  selectStyle.minWidth = width + 'px';
	  selectStyle.top = editTop + 'px';
	  selectStyle.left = editLeft + 'px';
	  selectStyle.margin = '0px';
	};
	
	SelectEditor.prototype.getEditedCell = function () {
	  var editorSection = this.checkEditorSection();
	  var editedCell = void 0;
	
	  switch (editorSection) {
	    case 'top':
	      editedCell = this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 101;
	      break;
	    case 'corner':
	      editedCell = this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 103;
	      break;
	    case 'left':
	      editedCell = this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({
	        row: this.row,
	        col: this.col
	      });
	      this.select.style.zIndex = 102;
	      break;
	    default:
	      editedCell = this.instance.getCell(this.row, this.col);
	      this.select.style.zIndex = '';
	      break;
	  }
	
	  return editedCell !== -1 && editedCell !== -2 ? editedCell : void 0;
	};
	
	exports.default = SelectEditor;
	
	/***/ }),
	/* 243 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	function cellDecorator(instance, TD, row, col, prop, value, cellProperties) {
	  var classesToAdd = [];
	  var classesToRemove = [];
	
	  if (cellProperties.className) {
	    if (TD.className) {
	      TD.className = TD.className + ' ' + cellProperties.className;
	    } else {
	      TD.className = cellProperties.className;
	    }
	  }
	
	  if (cellProperties.readOnly) {
	    classesToAdd.push(cellProperties.readOnlyCellClassName);
	  }
	
	  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {
	    classesToAdd.push(cellProperties.invalidCellClassName);
	  } else {
	    classesToRemove.push(cellProperties.invalidCellClassName);
	  }
	
	  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {
	    classesToAdd.push(cellProperties.noWordWrapClassName);
	  }
	
	  if (!value && cellProperties.placeholder) {
	    classesToAdd.push(cellProperties.placeholderCellClassName);
	  }
	
	  (0, _element.removeClass)(TD, classesToRemove);
	  (0, _element.addClass)(TD, classesToAdd);
	} /**
	   * Adds appropriate CSS class to table cell, based on cellProperties
	   */
	exports.default = cellDecorator;
	
	/***/ }),
	/* 244 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _src = __webpack_require__(4);
	
	var _index = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var clonableWRAPPER = document.createElement('DIV');
	clonableWRAPPER.className = 'htAutocompleteWrapper';
	
	var clonableARROW = document.createElement('DIV');
	clonableARROW.className = 'htAutocompleteArrow';
	// workaround for https://github.com/handsontable/handsontable/issues/1946
	// this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
	clonableARROW.appendChild(document.createTextNode(String.fromCharCode(9660)));
	
	/**
	 * Autocomplete renderer
	 *
	 * @private
	 * @renderer AutocompleteRenderer
	 * @param {Object} instance Handsontable instance
	 * @param {Element} TD Table cell where to render
	 * @param {Number} row
	 * @param {Number} col
	 * @param {String|Number} prop Row object property name
	 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)
	 * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)
	 */
	function autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var rendererType = cellProperties.allowHtml ? 'html' : 'text';
	  var ARROW = clonableARROW.cloneNode(true); // this is faster than createElement
	
	  for (var _len = arguments.length, args = Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {
	    args[_key - 7] = arguments[_key];
	  }
	
	  (0, _index.getRenderer)(rendererType).apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));
	
	  if (!TD.firstChild) {
	    // http://jsperf.com/empty-node-if-needed
	    // otherwise empty fields appear borderless in demo/renderers.html (IE)
	    TD.appendChild(document.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946
	    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
	  }
	
	  TD.insertBefore(ARROW, TD.firstChild);
	  (0, _element.addClass)(TD, 'htAutocomplete');
	
	  if (!instance.acArrowListener) {
	    var eventManager = new _eventManager2.default(instance);
	
	    // not very elegant but easy and fast
	    instance.acArrowListener = function (event) {
	      if ((0, _element.hasClass)(event.target, 'htAutocompleteArrow')) {
	        instance.view.wt.getSetting('onCellDblClick', null, new _src.CellCoords(row, col), TD);
	      }
	    };
	
	    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener);
	
	    // We need to unbind the listener after the table has been destroyed
	    instance.addHookOnce('afterDestroy', function () {
	      eventManager.destroy();
	    });
	  }
	}
	
	exports.default = autocompleteRenderer;
	
	/***/ }),
	/* 245 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _string = __webpack_require__(33);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _unicode = __webpack_require__(21);
	
	var _function = __webpack_require__(43);
	
	var _event = __webpack_require__(13);
	
	var _index = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isListeningKeyDownEvent = new WeakMap();
	var isCheckboxListenerAdded = new WeakMap();
	var BAD_VALUE_CLASS = 'htBadValue';
	
	/**
	 * Checkbox renderer
	 *
	 * @private
	 * @param {Object} instance Handsontable instance
	 * @param {Element} TD Table cell where to render
	 * @param {Number} row
	 * @param {Number} col
	 * @param {String|Number} prop Row object property name
	 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)
	 * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)
	 */
	function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  for (var _len = arguments.length, args = Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {
	    args[_key - 7] = arguments[_key];
	  }
	
	  (0, _index.getRenderer)('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));
	  registerEvents(instance);
	
	  var input = createInput();
	  var labelOptions = cellProperties.label;
	  var badValue = false;
	
	  if (typeof cellProperties.checkedTemplate === 'undefined') {
	    cellProperties.checkedTemplate = true;
	  }
	  if (typeof cellProperties.uncheckedTemplate === 'undefined') {
	    cellProperties.uncheckedTemplate = false;
	  }
	
	  (0, _element.empty)(TD); // TODO identify under what circumstances this line can be removed
	
	  if (value === cellProperties.checkedTemplate || (0, _string.equalsIgnoreCase)(value, cellProperties.checkedTemplate)) {
	    input.checked = true;
	  } else if (value === cellProperties.uncheckedTemplate || (0, _string.equalsIgnoreCase)(value, cellProperties.uncheckedTemplate)) {
	    input.checked = false;
	  } else if (value === null) {
	    // default value
	    (0, _element.addClass)(input, 'noValue');
	  } else {
	    input.style.display = 'none';
	    (0, _element.addClass)(input, BAD_VALUE_CLASS);
	    badValue = true;
	  }
	
	  input.setAttribute('data-row', row);
	  input.setAttribute('data-col', col);
	
	  if (!badValue && labelOptions) {
	    var labelText = '';
	
	    if (labelOptions.value) {
	      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;
	    } else if (labelOptions.property) {
	      labelText = instance.getDataAtRowProp(row, labelOptions.property);
	    }
	    var label = createLabel(labelText);
	
	    if (labelOptions.position === 'before') {
	      label.appendChild(input);
	    } else {
	      label.insertBefore(input, label.firstChild);
	    }
	    input = label;
	  }
	
	  TD.appendChild(input);
	
	  if (badValue) {
	    TD.appendChild(document.createTextNode('#bad-value#'));
	  }
	
	  if (!isListeningKeyDownEvent.has(instance)) {
	    isListeningKeyDownEvent.set(instance, true);
	    instance.addHook('beforeKeyDown', onBeforeKeyDown);
	  }
	
	  /**
	   * On before key down DOM listener.
	   *
	   * @private
	   * @param {Event} event
	   */
	  function onBeforeKeyDown(event) {
	    var toggleKeys = 'SPACE|ENTER';
	    var switchOffKeys = 'DELETE|BACKSPACE';
	    var isKeyCode = (0, _function.partial)(_unicode.isKey, event.keyCode);
	
	    if (isKeyCode(toggleKeys + '|' + switchOffKeys) && !(0, _event.isImmediatePropagationStopped)(event)) {
	      eachSelectedCheckboxCell(function () {
	        (0, _event.stopImmediatePropagation)(event);
	        event.preventDefault();
	      });
	    }
	    if (isKeyCode(toggleKeys)) {
	      changeSelectedCheckboxesState();
	    }
	    if (isKeyCode(switchOffKeys)) {
	      changeSelectedCheckboxesState(true);
	    }
	  }
	
	  /**
	   * Change checkbox checked property
	   *
	   * @private
	   * @param {Boolean} [uncheckCheckbox=false]
	   */
	  function changeSelectedCheckboxesState() {
	    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var selRange = instance.getSelectedRangeLast();
	
	    if (!selRange) {
	      return;
	    }
	
	    var _selRange$getTopLeftC = selRange.getTopLeftCorner(),
	        startRow = _selRange$getTopLeftC.row,
	        startColumn = _selRange$getTopLeftC.col;
	
	    var _selRange$getBottomRi = selRange.getBottomRightCorner(),
	        endRow = _selRange$getBottomRi.row,
	        endColumn = _selRange$getBottomRi.col;
	
	    var changes = [];
	
	    for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {
	      for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {
	        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);
	
	        if (cachedCellProperties.type !== 'checkbox') {
	          return;
	        }
	
	        /* eslint-disable no-continue */
	        if (cachedCellProperties.readOnly === true) {
	          continue;
	        }
	
	        if (typeof cachedCellProperties.checkedTemplate === 'undefined') {
	          cachedCellProperties.checkedTemplate = true;
	        }
	        if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {
	          cachedCellProperties.uncheckedTemplate = false;
	        }
	
	        var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);
	
	        if (uncheckCheckbox === false) {
	          if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {
	            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);
	          } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {
	            changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);
	          }
	        } else {
	          changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);
	        }
	      }
	    }
	
	    if (changes.length > 0) {
	      instance.setDataAtCell(changes);
	    }
	  }
	
	  /**
	   * Call callback for each found selected cell with checkbox type.
	   *
	   * @private
	   * @param {Function} callback
	   */
	  function eachSelectedCheckboxCell(callback) {
	    var selRange = instance.getSelectedRangeLast();
	
	    if (!selRange) {
	      return;
	    }
	    var topLeft = selRange.getTopLeftCorner();
	    var bottomRight = selRange.getBottomRightCorner();
	
	    for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {
	      for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {
	        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);
	
	        if (cachedCellProperties.type !== 'checkbox') {
	          return;
	        }
	
	        var cell = instance.getCell(visualRow, visualColumn);
	
	        if (cell === null || cell === void 0) {
	          callback(visualRow, visualColumn, cachedCellProperties);
	        } else {
	          var checkboxes = cell.querySelectorAll('input[type=checkbox]');
	
	          if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {
	            callback(checkboxes);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Register checkbox listeners.
	 *
	 * @param {Handsontable} instance Handsontable instance.
	 * @returns {EventManager}
	 */
	function registerEvents(instance) {
	  var eventManager = isCheckboxListenerAdded.get(instance);
	
	  if (!eventManager) {
	    eventManager = new _eventManager2.default(instance);
	    eventManager.addEventListener(instance.rootElement, 'click', function (event) {
	      return onClick(event, instance);
	    });
	    eventManager.addEventListener(instance.rootElement, 'mouseup', function (event) {
	      return onMouseUp(event, instance);
	    });
	    eventManager.addEventListener(instance.rootElement, 'change', function (event) {
	      return onChange(event, instance);
	    });
	
	    isCheckboxListenerAdded.set(instance, eventManager);
	  }
	
	  return eventManager;
	}
	
	/**
	 * Create input element.
	 *
	 * @returns {Node}
	 */
	function createInput() {
	  var input = document.createElement('input');
	
	  input.className = 'htCheckboxRendererInput';
	  input.type = 'checkbox';
	  input.setAttribute('autocomplete', 'off');
	  input.setAttribute('tabindex', '-1');
	
	  return input.cloneNode(false);
	}
	
	/**
	 * Create label element.
	 *
	 * @returns {Node}
	 */
	function createLabel(text) {
	  var label = document.createElement('label');
	
	  label.className = 'htCheckboxRendererLabel';
	  label.appendChild(document.createTextNode(text));
	
	  return label.cloneNode(true);
	}
	
	/**
	 * `mouseup` callback.
	 *
	 * @private
	 * @param {Event} event `mouseup` event.
	 * @param {Object} instance Handsontable instance.
	 */
	function onMouseUp(event, instance) {
	  if (!isCheckboxInput(event.target)) {
	    return;
	  }
	  setTimeout(instance.listen, 10);
	}
	
	/**
	 * `click` callback.
	 *
	 * @private
	 * @param {Event} event `click` event.
	 * @param {Object} instance Handsontable instance.
	 */
	function onClick(event, instance) {
	  if (!isCheckboxInput(event.target)) {
	    return false;
	  }
	
	  var row = parseInt(event.target.getAttribute('data-row'), 10);
	  var col = parseInt(event.target.getAttribute('data-col'), 10);
	  var cellProperties = instance.getCellMeta(row, col);
	
	  if (cellProperties.readOnly) {
	    event.preventDefault();
	  }
	}
	
	/**
	 * `change` callback.
	 *
	 * @param {Event} event `change` event.
	 * @param {Object} instance Handsontable instance.
	 * @param {Object} cellProperties Reference to cell properties.
	 * @returns {Boolean}
	 */
	function onChange(event, instance) {
	  if (!isCheckboxInput(event.target)) {
	    return false;
	  }
	
	  var row = parseInt(event.target.getAttribute('data-row'), 10);
	  var col = parseInt(event.target.getAttribute('data-col'), 10);
	  var cellProperties = instance.getCellMeta(row, col);
	
	  if (!cellProperties.readOnly) {
	    var newCheckboxValue = null;
	
	    if (event.target.checked) {
	      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;
	    } else {
	      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;
	    }
	
	    instance.setDataAtCell(row, col, newCheckboxValue);
	  }
	}
	
	/**
	 * Check if the provided element is the checkbox input.
	 *
	 * @private
	 * @param {HTMLElement} element The element in question.
	 * @returns {Boolean}
	 */
	function isCheckboxInput(element) {
	  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';
	}
	
	exports.default = checkboxRenderer;
	
	/***/ }),
	/* 246 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _index = __webpack_require__(14);
	
	/**
	 * @private
	 * @renderer HtmlRenderer
	 * @param instance
	 * @param TD
	 * @param row
	 * @param col
	 * @param prop
	 * @param value
	 * @param cellProperties
	 */
	function htmlRenderer(instance, TD, row, col, prop, value) {
	  for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
	    args[_key - 6] = arguments[_key];
	  }
	
	  (0, _index.getRenderer)('base').apply(this, [instance, TD, row, col, prop, value].concat(args));
	
	  (0, _element.fastInnerHTML)(TD, value === null || value === void 0 ? '' : value);
	}
	
	exports.default = htmlRenderer;
	
	/***/ }),
	/* 247 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _numbro = __webpack_require__(248);
	
	var _numbro2 = _interopRequireDefault(_numbro);
	
	var _index = __webpack_require__(14);
	
	var _number = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Numeric cell renderer
	 *
	 * @private
	 * @renderer NumericRenderer
	 * @dependencies numbro
	 * @param {Object} instance Handsontable instance
	 * @param {Element} TD Table cell where to render
	 * @param {Number} row
	 * @param {Number} col
	 * @param {String|Number} prop Row object property name
	 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)
	 * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)
	 */
	function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  var newValue = value;
	
	  if ((0, _number.isNumeric)(newValue)) {
	    var numericFormat = cellProperties.numericFormat;
	    var cellCulture = numericFormat && numericFormat.culture || '-';
	    var cellFormatPattern = numericFormat && numericFormat.pattern;
	    var className = cellProperties.className || '';
	    var classArr = className.length ? className.split(' ') : [];
	
	    if (typeof cellCulture !== 'undefined' && !_numbro2.default.languages()[cellCulture]) {
	      var shortTag = cellCulture.replace('-', '');
	      var langData = _numbro2.default.allLanguages ? _numbro2.default.allLanguages[cellCulture] : _numbro2.default[shortTag];
	
	      if (langData) {
	        _numbro2.default.registerLanguage(langData);
	      }
	    }
	
	    _numbro2.default.setLanguage(cellCulture);
	
	    newValue = (0, _numbro2.default)(newValue).format(cellFormatPattern || '0');
	
	    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {
	      classArr.push('htRight');
	    }
	
	    if (classArr.indexOf('htNumeric') < 0) {
	      classArr.push('htNumeric');
	    }
	
	    cellProperties.className = classArr.join(' ');
	  }
	
	  (0, _index.getRenderer)('text')(instance, TD, row, col, prop, newValue, cellProperties);
	}
	
	exports.default = numericRenderer;
	
	/***/ }),
	/* 248 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_248__;
	
	/***/ }),
	/* 249 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _index = __webpack_require__(14);
	
	var _number = __webpack_require__(6);
	
	/**
	 * @private
	 * @renderer PasswordRenderer
	 * @param instance
	 * @param TD
	 * @param row
	 * @param col
	 * @param prop
	 * @param value
	 * @param cellProperties
	 */
	function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  for (var _len = arguments.length, args = Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {
	    args[_key - 7] = arguments[_key];
	  }
	
	  (0, _index.getRenderer)('text').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));
	
	  var hashLength = cellProperties.hashLength || TD.innerHTML.length;
	  var hashSymbol = cellProperties.hashSymbol || '*';
	
	  var hash = '';
	
	  (0, _number.rangeEach)(hashLength - 1, function () {
	    hash += hashSymbol;
	  });
	  (0, _element.fastInnerHTML)(TD, hash);
	}
	
	exports.default = passwordRenderer;
	
	/***/ }),
	/* 250 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _element = __webpack_require__(0);
	
	var _mixed = __webpack_require__(11);
	
	var _index = __webpack_require__(14);
	
	/**
	 * Default text renderer
	 *
	 * @private
	 * @renderer TextRenderer
	 * @param {Object} instance Handsontable instance
	 * @param {Element} TD Table cell where to render
	 * @param {Number} row
	 * @param {Number} col
	 * @param {String|Number} prop Row object property name
	 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)
	 * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)
	 */
	function textRenderer(instance, TD, row, col, prop, value, cellProperties) {
	  for (var _len = arguments.length, args = Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {
	    args[_key - 7] = arguments[_key];
	  }
	
	  (0, _index.getRenderer)('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));
	  var escaped = value;
	
	  if (!escaped && cellProperties.placeholder) {
	    escaped = cellProperties.placeholder;
	  }
	
	  escaped = (0, _mixed.stringify)(escaped);
	
	  if (!instance.getSettings().trimWhitespace) {
	    escaped = escaped.replace(/ /g, String.fromCharCode(160));
	  }
	
	  if (cellProperties.rendererTemplate) {
	    (0, _element.empty)(TD);
	    var TEMPLATE = document.createElement('TEMPLATE');
	    TEMPLATE.setAttribute('bind', '{{}}');
	    TEMPLATE.innerHTML = cellProperties.rendererTemplate;
	    HTMLTemplateElement.decorate(TEMPLATE);
	    TEMPLATE.model = instance.getSourceDataAtRow(row);
	    TD.appendChild(TEMPLATE);
	  } else {
	    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
	    (0, _element.fastInnerText)(TD, escaped);
	  }
	}
	
	exports.default = textRenderer;
	
	/***/ }),
	/* 251 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = autocompleteValidator;
	/**
	 * Autocomplete cell validator.
	 *
	 * @private
	 * @validator AutocompleteValidator
	 * @param {*} value - Value of edited cell
	 * @param {Function} callback - Callback called with validation result
	 */
	function autocompleteValidator(value, callback) {
	  var valueToValidate = value;
	
	  if (valueToValidate === null || valueToValidate === void 0) {
	    valueToValidate = '';
	  }
	
	  if (this.allowEmpty && valueToValidate === '') {
	    callback(true);
	
	    return;
	  }
	
	  if (this.strict && this.source) {
	    if (typeof this.source === 'function') {
	      this.source(valueToValidate, process(valueToValidate, callback));
	    } else {
	      process(valueToValidate, callback)(this.source);
	    }
	  } else {
	    callback(true);
	  }
	}
	
	/**
	 * Function responsible for validation of autocomplete value.
	 *
	 * @param {*} value - Value of edited cell
	 * @param {Function} callback - Callback called with validation result
	 */
	function process(value, callback) {
	  var originalVal = value;
	
	  return function (source) {
	    var found = false;
	
	    for (var s = 0, slen = source.length; s < slen; s++) {
	      if (originalVal === source[s]) {
	        found = true; // perfect match
	        break;
	      }
	    }
	
	    callback(found);
	  };
	}
	
	/***/ }),
	/* 252 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = dateValidator;
	exports.correctFormat = correctFormat;
	
	var _moment = __webpack_require__(57);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _date = __webpack_require__(192);
	
	var _editors = __webpack_require__(17);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Date cell validator
	 *
	 * @private
	 * @validator DateValidator
	 * @dependencies moment
	 * @param {*} value - Value of edited cell
	 * @param {Function} callback - Callback called with validation result
	 */
	function dateValidator(value, callback) {
	  var dateEditor = (0, _editors.getEditorInstance)('date', this.instance);
	  var valueToValidate = value;
	  var valid = true;
	
	  if (valueToValidate === null || valueToValidate === void 0) {
	    valueToValidate = '';
	  }
	  var isValidDate = (0, _moment2.default)(new Date(valueToValidate)).isValid() || (0, _moment2.default)(valueToValidate, dateEditor.defaultDateFormat).isValid();
	  // is it in the specified format
	  var isValidFormat = (0, _moment2.default)(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();
	
	  if (this.allowEmpty && valueToValidate === '') {
	    isValidDate = true;
	    isValidFormat = true;
	  }
	  if (!isValidDate) {
	    valid = false;
	  }
	  if (!isValidDate && isValidFormat) {
	    valid = true;
	  }
	
	  if (isValidDate && !isValidFormat) {
	    if (this.correctFormat === true) {
	      // if format correction is enabled
	      var correctedValue = correctFormat(valueToValidate, this.dateFormat);
	      var row = this.instance.runHooks('unmodifyRow', this.row);
	      var column = this.instance.runHooks('unmodifyCol', this.col);
	
	      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');
	      valid = true;
	    } else {
	      valid = false;
	    }
	  }
	
	  callback(valid);
	}
	
	/**
	 * Format the given string using moment.js' format feature
	 *
	 * @param {String} value
	 * @param {String} dateFormat
	 * @returns {String}
	 */
	function correctFormat(value, dateFormat) {
	  var dateFromDate = (0, _moment2.default)((0, _date.getNormalizedDate)(value));
	  var dateFromMoment = (0, _moment2.default)(value, dateFormat);
	  var isAlphanumeric = value.search(/[A-z]/g) > -1;
	  var date = void 0;
	
	  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {
	    date = dateFromDate;
	  } else {
	    date = dateFromMoment;
	  }
	
	  return date.format(dateFormat);
	}
	
	/***/ }),
	/* 253 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = numericValidator;
	/**
	 * Numeric cell validator
	 *
	 * @private
	 * @validator NumericValidator
	 * @param {*} value - Value of edited cell
	 * @param {*} callback - Callback called with validation result
	 */
	function numericValidator(value, callback) {
	  var valueToValidate = value;
	
	  if (valueToValidate === null || valueToValidate === void 0) {
	    valueToValidate = '';
	  }
	  if (this.allowEmpty && valueToValidate === '') {
	    callback(true);
	  } else if (valueToValidate === '') {
	    callback(false);
	  } else {
	    callback(/^-?\d*(\.|,)?\d*$/.test(valueToValidate));
	  }
	}
	
	/***/ }),
	/* 254 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = timeValidator;
	
	var _moment = __webpack_require__(57);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Formats which are correctly parsed to time (supported by momentjs)
	var STRICT_FORMATS = ['YYYY-MM-DDTHH:mm:ss.SSSZ', 'X', // Unix timestamp
	'x' // Unix ms timestamp
	];
	
	/**
	 * Time cell validator
	 *
	 * @private
	 * @validator TimeValidator
	 * @dependencies moment
	 * @param {*} value - Value of edited cell
	 * @param {Function} callback - Callback called with validation result
	 */
	function timeValidator(value, callback) {
	  var timeFormat = this.timeFormat || 'h:mm:ss a';
	  var valid = true;
	  var valueToValidate = value;
	
	  if (valueToValidate === null) {
	    valueToValidate = '';
	  }
	
	  valueToValidate = /^\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;
	
	  var twoDigitValue = /^\d{1,2}$/.test(valueToValidate);
	
	  if (twoDigitValue) {
	    valueToValidate += ':00';
	  }
	
	  var date = (0, _moment2.default)(valueToValidate, STRICT_FORMATS, true).isValid() ? (0, _moment2.default)(valueToValidate) : (0, _moment2.default)(valueToValidate, timeFormat);
	  var isValidTime = date.isValid();
	
	  // is it in the specified format
	  var isValidFormat = (0, _moment2.default)(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;
	
	  if (this.allowEmpty && valueToValidate === '') {
	    isValidTime = true;
	    isValidFormat = true;
	  }
	  if (!isValidTime) {
	    valid = false;
	  }
	  if (!isValidTime && isValidFormat) {
	    valid = true;
	  }
	  if (isValidTime && !isValidFormat) {
	    if (this.correctFormat === true) {
	      // if format correction is enabled
	      var correctedValue = date.format(timeFormat);
	      var row = this.instance.runHooks('unmodifyRow', this.row);
	      var column = this.instance.runHooks('unmodifyCol', this.col);
	
	      this.instance.setDataAtCell(row, column, correctedValue, 'timeValidator');
	      valid = true;
	    } else {
	      valid = false;
	    }
	  }
	
	  callback(valid);
	}
	
	/***/ }),
	/* 255 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var CELL_TYPE = 'autocomplete';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  renderer: (0, _renderers.getRenderer)(CELL_TYPE),
	  validator: (0, _validators.getValidator)(CELL_TYPE)
	};
	
	/***/ }),
	/* 256 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var CELL_TYPE = 'checkbox';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  renderer: (0, _renderers.getRenderer)(CELL_TYPE)
	};
	
	/***/ }),
	/* 257 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var CELL_TYPE = 'date';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  // displays small gray arrow on right side of the cell
	  renderer: (0, _renderers.getRenderer)('autocomplete'),
	  validator: (0, _validators.getValidator)(CELL_TYPE)
	};
	
	/***/ }),
	/* 258 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var CELL_TYPE = 'dropdown';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  // displays small gray arrow on right side of the cell
	  renderer: (0, _renderers.getRenderer)('autocomplete'),
	  validator: (0, _validators.getValidator)('autocomplete')
	};
	
	/***/ }),
	/* 259 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var CELL_TYPE = 'handsontable';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  // displays small gray arrow on right side of the cell
	  renderer: (0, _renderers.getRenderer)('autocomplete')
	};
	
	/***/ }),
	/* 260 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var CELL_TYPE = 'numeric';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  renderer: (0, _renderers.getRenderer)(CELL_TYPE),
	  validator: (0, _validators.getValidator)(CELL_TYPE),
	  dataType: 'number'
	};
	
	/***/ }),
	/* 261 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var CELL_TYPE = 'password';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  renderer: (0, _renderers.getRenderer)(CELL_TYPE),
	  copyable: false
	};
	
	/***/ }),
	/* 262 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var CELL_TYPE = 'text';
	
	exports.default = {
	  editor: (0, _editors.getEditor)(CELL_TYPE),
	  renderer: (0, _renderers.getRenderer)(CELL_TYPE)
	};
	
	/***/ }),
	/* 263 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _editors = __webpack_require__(17);
	
	var _renderers = __webpack_require__(14);
	
	var _validators = __webpack_require__(34);
	
	var CELL_TYPE = 'time';
	
	exports.default = {
	  editor: (0, _editors.getEditor)('text'),
	  // displays small gray arrow on right side of the cell
	  renderer: (0, _renderers.getRenderer)('text'),
	  validator: (0, _validators.getValidator)(CELL_TYPE)
	};
	
	/***/ }),
	/* 264 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _SheetClip = __webpack_require__(193);
	
	var _SheetClip2 = _interopRequireDefault(_SheetClip);
	
	var _data = __webpack_require__(92);
	
	var _setting = __webpack_require__(91);
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _interval = __webpack_require__(265);
	
	var _interval2 = _interopRequireDefault(_interval);
	
	var _number = __webpack_require__(6);
	
	var _multiMap = __webpack_require__(266);
	
	var _multiMap2 = _interopRequireDefault(_multiMap);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Utility class that gets and saves data from/to the data source using mapping of columns numbers to object property names
	 * @todo refactor arguments of methods getRange, getText to be numbers (not objects)
	 * @todo remove priv, GridSettings from object constructor
	 *
	 * @param {Object} instance Instance of Handsontable
	 * @param {*} priv
	 * @param {*} GridSettings Grid settings
	 * @util
	 * @class DataMap
	 */
	function DataMap(instance, priv, GridSettings) {
	  var _this = this;
	
	  this.instance = instance;
	  this.priv = priv;
	  this.GridSettings = GridSettings;
	  this.dataSource = this.instance.getSettings().data;
	  this.cachedLength = null;
	  this.skipCache = false;
	  this.latestSourceRowsCount = 0;
	
	  if (this.dataSource && this.dataSource[0]) {
	    this.duckSchema = this.recursiveDuckSchema(this.dataSource[0]);
	  } else {
	    this.duckSchema = {};
	  }
	  this.createMap();
	  this.interval = _interval2.default.create(function () {
	    return _this.clearLengthCache();
	  }, '15fps');
	
	  this.instance.addHook('skipLengthCache', function (delay) {
	    return _this.onSkipLengthCache(delay);
	  });
	  this.onSkipLengthCache(500);
	}
	
	DataMap.prototype.DESTINATION_RENDERER = 1;
	DataMap.prototype.DESTINATION_CLIPBOARD_GENERATOR = 2;
	
	/**
	 * @param {Object|Array} object
	 * @returns {Object|Array}
	 */
	DataMap.prototype.recursiveDuckSchema = function (object) {
	  return (0, _object.duckSchema)(object);
	};
	
	/**
	 * @param {Object} schema
	 * @param {Number} lastCol
	 * @param {Number} parent
	 * @returns {Number}
	 */
	DataMap.prototype.recursiveDuckColumns = function (schema, lastCol, parent) {
	  var _this2 = this;
	
	  var lastColumn = lastCol;
	  var propertyParent = parent;
	  var prop = void 0;
	
	  if (typeof lastColumn === 'undefined') {
	    lastColumn = 0;
	    propertyParent = '';
	  }
	  if ((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) === 'object' && !Array.isArray(schema)) {
	    (0, _object.objectEach)(schema, function (value, key) {
	      if (value === null) {
	        prop = propertyParent + key;
	        _this2.colToPropCache.push(prop);
	        _this2.propToColCache.set(prop, lastColumn);
	
	        lastColumn += 1;
	      } else {
	        lastColumn = _this2.recursiveDuckColumns(value, lastColumn, key + '.');
	      }
	    });
	  }
	
	  return lastColumn;
	};
	
	DataMap.prototype.createMap = function () {
	  var i = void 0;
	  var schema = this.getSchema();
	
	  if (typeof schema === 'undefined') {
	    throw new Error('trying to create `columns` definition but you didn\'t provide `schema` nor `data`');
	  }
	
	  this.colToPropCache = [];
	  this.propToColCache = new _multiMap2.default();
	
	  var columns = this.instance.getSettings().columns;
	
	  if (columns) {
	    var maxCols = this.instance.getSettings().maxCols;
	    var columnsLen = Math.min(maxCols, columns.length);
	    var filteredIndex = 0;
	    var columnsAsFunc = false;
	    var schemaLen = (0, _object.deepObjectSize)(schema);
	
	    if (typeof columns === 'function') {
	      columnsLen = schemaLen > 0 ? schemaLen : this.instance.countSourceCols();
	      columnsAsFunc = true;
	    }
	
	    for (i = 0; i < columnsLen; i++) {
	      var column = columnsAsFunc ? columns(i) : columns[i];
	
	      if ((0, _object.isObject)(column)) {
	        if (typeof column.data !== 'undefined') {
	          var index = columnsAsFunc ? filteredIndex : i;
	          this.colToPropCache[index] = column.data;
	          this.propToColCache.set(column.data, index);
	        }
	
	        filteredIndex += 1;
	      }
	    }
	  } else {
	    this.recursiveDuckColumns(schema);
	  }
	};
	
	/**
	 * Returns property name that corresponds with the given column index.
	 *
	 * @param {Number} col Visual column index.
	 * @returns {Number} Physical column index.
	 */
	DataMap.prototype.colToProp = function (col) {
	  var physicalColumn = this.instance.runHooks('modifyCol', col);
	
	  if (!isNaN(physicalColumn) && this.colToPropCache && typeof this.colToPropCache[physicalColumn] !== 'undefined') {
	    return this.colToPropCache[physicalColumn];
	  }
	
	  return physicalColumn;
	};
	
	/**
	 * @param {Object} prop
	 * @fires Hooks#modifyCol
	 * @returns {*}
	 */
	DataMap.prototype.propToCol = function (prop) {
	  var col = void 0;
	
	  if (typeof this.propToColCache.get(prop) === 'undefined') {
	    col = prop;
	  } else {
	    col = this.propToColCache.get(prop);
	  }
	  col = this.instance.runHooks('unmodifyCol', col);
	
	  return col;
	};
	
	/**
	 * @returns {Object}
	 */
	DataMap.prototype.getSchema = function () {
	  var schema = this.instance.getSettings().dataSchema;
	
	  if (schema) {
	    if (typeof schema === 'function') {
	      return schema();
	    }
	    return schema;
	  }
	
	  return this.duckSchema;
	};
	
	/**
	 * Creates row at the bottom of the data array.
	 *
	 * @param {Number} [index] Physical index of the row before which the new row will be inserted.
	 * @param {Number} [amount=1] An amount of rows to add.
	 * @param {String} [source] Source of method call.
	 * @fires Hooks#afterCreateRow
	 * @returns {Number} Returns number of created rows.
	 */
	DataMap.prototype.createRow = function (index) {
	  var _this3 = this;
	
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var source = arguments[2];
	
	  var numberOfCreatedRows = 0;
	  var rowIndex = index;
	
	  if (typeof rowIndex !== 'number' || rowIndex >= this.instance.countSourceRows()) {
	    rowIndex = this.instance.countSourceRows();
	  }
	
	  var continueProcess = this.instance.runHooks('beforeCreateRow', rowIndex, amount, source);
	
	  if (continueProcess === false) {
	    return 0;
	  }
	
	  var maxRows = this.instance.getSettings().maxRows;
	  var columnCount = this.instance.countCols();
	
	  var _loop = function _loop() {
	    var row = null;
	
	    if (_this3.instance.dataType === 'array') {
	      if (_this3.instance.getSettings().dataSchema) {
	        // Clone template array
	        row = (0, _object.deepClone)(_this3.getSchema());
	      } else {
	        row = [];
	        /* eslint-disable no-loop-func */
	        (0, _number.rangeEach)(columnCount - 1, function () {
	          return row.push(null);
	        });
	      }
	    } else if (_this3.instance.dataType === 'function') {
	      row = _this3.instance.getSettings().dataSchema(rowIndex);
	    } else {
	      row = {};
	      (0, _object.deepExtend)(row, _this3.getSchema());
	    }
	
	    if (rowIndex === _this3.instance.countSourceRows()) {
	      _this3.dataSource.push(row);
	    } else {
	      _this3.spliceData(rowIndex, 0, row);
	    }
	
	    numberOfCreatedRows += 1;
	  };
	
	  while (numberOfCreatedRows < amount && this.instance.countSourceRows() < maxRows) {
	    _loop();
	  }
	
	  this.instance.runHooks('afterCreateRow', rowIndex, numberOfCreatedRows, source);
	  this.instance.forceFullRender = true; // used when data was changed
	
	  return numberOfCreatedRows;
	};
	
	/**
	 * Creates col at the right of the data array.
	 *
	 * @param {Number} [index] Visual index of the column before which the new column will be inserted
	 * @param {Number} [amount=1] An amount of columns to add.
	 * @param {String} [source] Source of method call.
	 * @fires Hooks#afterCreateCol
	 * @returns {Number} Returns number of created columns
	 */
	DataMap.prototype.createCol = function (index) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var source = arguments[2];
	
	  if (!this.instance.isColumnModificationAllowed()) {
	    throw new Error('Cannot create new column. When data source in an object, ' + 'you can only have as much columns as defined in first data row, data schema or in the \'columns\' setting.' + 'If you want to be able to add new columns, you have to use array datasource.');
	  }
	  var rlen = this.instance.countSourceRows();
	  var data = this.dataSource;
	  var countColumns = this.instance.countCols();
	  var columnIndex = typeof index !== 'number' || index >= countColumns ? countColumns : index;
	  var constructor = void 0;
	  var numberOfCreatedCols = 0;
	  var currentIndex = void 0;
	
	  this.instance.runHooks('beforeCreateCol', columnIndex, amount, source);
	
	  currentIndex = columnIndex;
	
	  var maxCols = this.instance.getSettings().maxCols;
	  while (numberOfCreatedCols < amount && this.instance.countCols() < maxCols) {
	    constructor = (0, _setting.columnFactory)(this.GridSettings, this.priv.columnsSettingConflicts);
	
	    if (typeof columnIndex !== 'number' || columnIndex >= this.instance.countCols()) {
	      if (rlen > 0) {
	        for (var r = 0; r < rlen; r++) {
	          if (typeof data[r] === 'undefined') {
	            data[r] = [];
	          }
	          data[r].push(null);
	        }
	      } else {
	        data.push([null]);
	      }
	      // Add new column constructor
	      this.priv.columnSettings.push(constructor);
	    } else {
	      for (var _row = 0; _row < rlen; _row++) {
	        data[_row].splice(currentIndex, 0, null);
	      }
	      // Add new column constructor at given index
	      this.priv.columnSettings.splice(currentIndex, 0, constructor);
	    }
	
	    numberOfCreatedCols += 1;
	    currentIndex += 1;
	  }
	
	  this.instance.runHooks('afterCreateCol', columnIndex, numberOfCreatedCols, source);
	  this.instance.forceFullRender = true; // used when data was changed
	
	  return numberOfCreatedCols;
	};
	
	/**
	 * Removes row from the data array.
	 *
	 * @param {Number} [index] Visual index of the row to be removed. If not provided, the last row will be removed
	 * @param {Number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed
	 * @param {String} [source] Source of method call.
	 * @fires Hooks#beforeRemoveRow
	 * @fires Hooks#afterRemoveRow
	 */
	DataMap.prototype.removeRow = function (index) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var source = arguments[2];
	
	  var rowIndex = typeof index !== 'number' ? -amount : index;
	  var rowsAmount = this.instance.runHooks('modifyRemovedAmount', amount, rowIndex);
	
	  rowIndex = (this.instance.countSourceRows() + rowIndex) % this.instance.countSourceRows();
	
	  var logicRows = this.visualRowsToPhysical(rowIndex, rowsAmount);
	  var actionWasNotCancelled = this.instance.runHooks('beforeRemoveRow', rowIndex, rowsAmount, logicRows, source);
	
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	
	  var data = this.dataSource;
	  var newData = this.filterData(rowIndex, rowsAmount);
	
	  if (newData) {
	    data.length = 0;
	    Array.prototype.push.apply(data, newData);
	  }
	
	  this.instance.runHooks('afterRemoveRow', rowIndex, rowsAmount, logicRows, source);
	
	  this.instance.forceFullRender = true; // used when data was changed
	};
	
	/**
	 * Removes column from the data array.
	 *
	 * @param {Number} [index] Visual index of the column to be removed. If not provided, the last column will be removed
	 * @param {Number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed
	 * @param {String} [source] Source of method call.
	 * @fires Hooks#beforeRemoveCol
	 * @fires Hooks#afterRemoveCol
	 */
	DataMap.prototype.removeCol = function (index) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var source = arguments[2];
	
	  if (this.instance.dataType === 'object' || this.instance.getSettings().columns) {
	    throw new Error('cannot remove column with object data source or columns option specified');
	  }
	  var columnIndex = typeof index !== 'number' ? -amount : index;
	
	  columnIndex = (this.instance.countCols() + columnIndex) % this.instance.countCols();
	
	  var logicColumns = this.visualColumnsToPhysical(columnIndex, amount);
	  var descendingLogicColumns = logicColumns.slice(0).sort(function (a, b) {
	    return b - a;
	  });
	  var actionWasNotCancelled = this.instance.runHooks('beforeRemoveCol', columnIndex, amount, logicColumns, source);
	
	  if (actionWasNotCancelled === false) {
	    return;
	  }
	
	  var isTableUniform = true;
	  var removedColumnsCount = descendingLogicColumns.length;
	  var data = this.dataSource;
	
	  for (var c = 0; c < removedColumnsCount; c++) {
	    if (isTableUniform && logicColumns[0] !== logicColumns[c] - c) {
	      isTableUniform = false;
	    }
	  }
	
	  if (isTableUniform) {
	    for (var r = 0, rlen = this.instance.countSourceRows(); r < rlen; r++) {
	      data[r].splice(logicColumns[0], amount);
	    }
	  } else {
	    for (var _r = 0, _rlen = this.instance.countSourceRows(); _r < _rlen; _r++) {
	      for (var _c = 0; _c < removedColumnsCount; _c++) {
	        data[_r].splice(descendingLogicColumns[_c], 1);
	      }
	    }
	
	    for (var _c2 = 0; _c2 < removedColumnsCount; _c2++) {
	      this.priv.columnSettings.splice(logicColumns[_c2], 1);
	    }
	  }
	
	  this.instance.runHooks('afterRemoveCol', columnIndex, amount, logicColumns, source);
	
	  this.instance.forceFullRender = true; // used when data was changed
	};
	
	/**
	 * Add/Removes data from the column.
	 *
	 * @param {Number} col Physical index of column in which do you want to do splice
	 * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end
	 * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed
	 * @param {Array} [elements]
	 * @returns {Array} Returns removed portion of columns
	 */
	DataMap.prototype.spliceCol = function (col, index, amount) {
	  var colData = this.instance.getDataAtCol(col);
	  var removed = colData.slice(index, index + amount);
	  var after = colData.slice(index + amount);
	
	  for (var _len = arguments.length, elements = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    elements[_key - 3] = arguments[_key];
	  }
	
	  (0, _array.extendArray)(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null); // add null in place of removed elements
	    i += 1;
	  }
	  (0, _array.to2dArray)(elements);
	  this.instance.populateFromArray(index, col, elements, null, null, 'spliceCol');
	
	  return removed;
	};
	
	/**
	 * Add/Removes data from the row.
	 *
	 * @param {Number} row Physical index of row in which do you want to do splice
	 * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
	 * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
	 * @param {Array} [elements]
	 * @returns {Array} Returns removed portion of rows
	 */
	DataMap.prototype.spliceRow = function (row, index, amount) {
	  var rowData = this.instance.getSourceDataAtRow(row);
	  var removed = rowData.slice(index, index + amount);
	  var after = rowData.slice(index + amount);
	
	  for (var _len2 = arguments.length, elements = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	    elements[_key2 - 3] = arguments[_key2];
	  }
	
	  (0, _array.extendArray)(elements, after);
	  var i = 0;
	  while (i < amount) {
	    elements.push(null); // add null in place of removed elements
	    i += 1;
	  }
	  this.instance.populateFromArray(row, index, [elements], null, null, 'spliceRow');
	
	  return removed;
	};
	
	/**
	 * Add/remove row(s) to/from the data source.
	 *
	 * @param {Number} index Physical index of the element to remove.
	 * @param {Number} amount Number of rows to add/remove.
	 * @param {Object} element Row to add.
	 */
	DataMap.prototype.spliceData = function (index, amount, element) {
	  var continueSplicing = this.instance.runHooks('beforeDataSplice', index, amount, element);
	
	  if (continueSplicing !== false) {
	    this.dataSource.splice(index, amount, element);
	  }
	};
	
	/**
	 * Filter unwanted data elements from the data source.
	 *
	 * @param {Number} index Visual index of the element to remove.
	 * @param {Number} amount Number of rows to add/remove.
	 * @returns {Array}
	 */
	DataMap.prototype.filterData = function (index, amount) {
	  var physicalRows = this.visualRowsToPhysical(index, amount);
	  var continueSplicing = this.instance.runHooks('beforeDataFilter', index, amount, physicalRows);
	
	  if (continueSplicing !== false) {
	    var newData = this.dataSource.filter(function (row, rowIndex) {
	      return physicalRows.indexOf(rowIndex) === -1;
	    });
	
	    return newData;
	  }
	};
	
	/**
	 * Returns single value from the data array.
	 *
	 * @param {Number} row Visual row index.
	 * @param {Number} prop
	 */
	DataMap.prototype.get = function (row, prop) {
	  var physicalRow = this.instance.runHooks('modifyRow', row);
	
	  var dataRow = this.dataSource[physicalRow];
	  // TODO: To remove, use 'modifyData' hook instead (see below)
	  var modifiedRowData = this.instance.runHooks('modifyRowData', physicalRow);
	
	  dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;
	  //
	
	  var value = null;
	
	  // try to get value under property `prop` (includes dot)
	  if (dataRow && dataRow.hasOwnProperty && (0, _object.hasOwnProperty)(dataRow, prop)) {
	    value = dataRow[prop];
	  } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = dataRow;
	
	    if (!out) {
	      return null;
	    }
	    for (var i = 0, ilen = sliced.length; i < ilen; i++) {
	      out = out[sliced[i]];
	
	      if (typeof out === 'undefined') {
	        return null;
	      }
	    }
	    value = out;
	  } else if (typeof prop === 'function') {
	    /**
	     *  allows for interacting with complex structures, for example
	     *  d3/jQuery getter/setter properties:
	     *
	     *    {columns: [{
	     *      data: function(row, value){
	     *        if(arguments.length === 1){
	     *          return row.property();
	     *        }
	     *        row.property(value);
	     *      }
	     *    }]}
	     */
	    value = prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0]);
	  }
	
	  if (this.instance.hasHook('modifyData')) {
	    var valueHolder = (0, _object.createObjectPropListener)(value);
	
	    this.instance.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'get');
	
	    if (valueHolder.isTouched()) {
	      value = valueHolder.value;
	    }
	  }
	
	  return value;
	};
	
	var copyableLookup = (0, _data.cellMethodLookupFactory)('copyable', false);
	
	/**
	 * Returns single value from the data array (intended for clipboard copy to an external application).
	 *
	 * @param {Number} row Physical row index.
	 * @param {Number} prop
	 * @returns {String}
	 */
	DataMap.prototype.getCopyable = function (row, prop) {
	  if (copyableLookup.call(this.instance, row, this.propToCol(prop))) {
	    return this.get(row, prop);
	  }
	  return '';
	};
	
	/**
	 * Saves single value to the data array.
	 *
	 * @param {Number} row Visual row index.
	 * @param {Number} prop
	 * @param {String} value
	 * @param {String} [source] Source of hook runner.
	 */
	DataMap.prototype.set = function (row, prop, value, source) {
	  var physicalRow = this.instance.runHooks('modifyRow', row, source || 'datamapGet');
	  var newValue = value;
	  var dataRow = this.dataSource[physicalRow];
	  // TODO: To remove, use 'modifyData' hook instead (see below)
	  var modifiedRowData = this.instance.runHooks('modifyRowData', physicalRow);
	
	  dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;
	  //
	
	  if (this.instance.hasHook('modifyData')) {
	    var valueHolder = (0, _object.createObjectPropListener)(newValue);
	
	    this.instance.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'set');
	
	    if (valueHolder.isTouched()) {
	      newValue = valueHolder.value;
	    }
	  }
	
	  // try to set value under property `prop` (includes dot)
	  if (dataRow && dataRow.hasOwnProperty && (0, _object.hasOwnProperty)(dataRow, prop)) {
	    dataRow[prop] = newValue;
	  } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {
	    var sliced = prop.split('.');
	    var out = dataRow;
	    var i = 0;
	    var ilen = void 0;
	
	    for (i = 0, ilen = sliced.length - 1; i < ilen; i++) {
	      if (typeof out[sliced[i]] === 'undefined') {
	        out[sliced[i]] = {};
	      }
	      out = out[sliced[i]];
	    }
	    out[sliced[i]] = newValue;
	  } else if (typeof prop === 'function') {
	    /* see the `function` handler in `get` */
	    prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0], newValue);
	  } else {
	    dataRow[prop] = newValue;
	  }
	};
	
	/**
	 * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.
	 * The trick is, the physical row id (stored in settings.data) is not necessary the same
	 * as the visual (displayed) row id (e.g. when sorting is applied).
	 *
	 * @param {Number} index Visual row index.
	 * @param {Number} amount
	 * @fires Hooks#modifyRow
	 * @returns {Number}
	 */
	DataMap.prototype.visualRowsToPhysical = function (index, amount) {
	  var totalRows = this.instance.countSourceRows();
	  var logicRows = [];
	  var physicRow = (totalRows + index) % totalRows;
	  var rowsToRemove = amount;
	  var row = void 0;
	
	  while (physicRow < totalRows && rowsToRemove) {
	    row = this.instance.runHooks('modifyRow', physicRow);
	    logicRows.push(row);
	
	    rowsToRemove -= 1;
	    physicRow += 1;
	  }
	
	  return logicRows;
	};
	
	/**
	 *
	 * @param index Visual column index.
	 * @param amount
	 * @returns {Array}
	 */
	DataMap.prototype.visualColumnsToPhysical = function (index, amount) {
	  var totalCols = this.instance.countCols();
	  var physicalCol = (totalCols + index) % totalCols;
	  var visualCols = [];
	  var colsToRemove = amount;
	
	  while (physicalCol < totalCols && colsToRemove) {
	    var col = this.instance.runHooks('modifyCol', physicalCol);
	
	    visualCols.push(col);
	
	    colsToRemove -= 1;
	    physicalCol += 1;
	  }
	
	  return visualCols;
	};
	
	/**
	 * Clears the data array.
	 */
	DataMap.prototype.clear = function () {
	  for (var r = 0; r < this.instance.countSourceRows(); r++) {
	    for (var c = 0; c < this.instance.countCols(); c++) {
	      this.set(r, this.colToProp(c), '');
	    }
	  }
	};
	
	/**
	 * Clear cached data length.
	 */
	DataMap.prototype.clearLengthCache = function () {
	  this.cachedLength = null;
	};
	
	/**
	 * Get data length.
	 *
	 * @returns {Number}
	 */
	DataMap.prototype.getLength = function () {
	  var _this4 = this;
	
	  var maxRowsFromSettings = this.instance.getSettings().maxRows;
	  var maxRows = void 0;
	
	  if (maxRowsFromSettings < 0 || maxRowsFromSettings === 0) {
	    maxRows = 0;
	  } else {
	    maxRows = maxRowsFromSettings || Infinity;
	  }
	
	  var length = this.instance.countSourceRows();
	
	  if (this.instance.hasHook('modifyRow')) {
	    var reValidate = this.skipCache;
	
	    this.interval.start();
	    if (length !== this.latestSourceRowsCount) {
	      reValidate = true;
	    }
	
	    this.latestSourceRowsCount = length;
	    if (this.cachedLength === null || reValidate) {
	      (0, _number.rangeEach)(length - 1, function (row) {
	        var physicalRow = _this4.instance.runHooks('modifyRow', row);
	
	        if (physicalRow === null) {
	          length -= 1;
	        }
	      });
	      this.cachedLength = length;
	    } else {
	      length = this.cachedLength;
	    }
	  } else {
	    this.interval.stop();
	  }
	
	  return Math.min(length, maxRows);
	};
	
	/**
	 * Returns the data array.
	 *
	 * @returns {Array}
	 */
	DataMap.prototype.getAll = function () {
	  var start = {
	    row: 0,
	    col: 0
	  };
	
	  var end = {
	    row: Math.max(this.instance.countSourceRows() - 1, 0),
	    col: Math.max(this.instance.countCols() - 1, 0)
	  };
	
	  if (start.row - end.row === 0 && !this.instance.countSourceRows()) {
	    return [];
	  }
	
	  return this.getRange(start, end, DataMap.prototype.DESTINATION_RENDERER);
	};
	
	/**
	 * Returns data range as array.
	 *
	 * @param {Object} [start] Start selection position. Visual indexes.
	 * @param {Object} [end] End selection position. Visual indexes.
	 * @param {Number} destination Destination of datamap.get
	 * @returns {Array}
	 */
	DataMap.prototype.getRange = function (start, end, destination) {
	  var output = [];
	  var r = void 0;
	  var c = void 0;
	  var row = void 0;
	
	  var maxRows = this.instance.getSettings().maxRows;
	  var maxCols = this.instance.getSettings().maxCols;
	
	  if (maxRows === 0 || maxCols === 0) {
	    return [];
	  }
	
	  var getFn = destination === this.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;
	
	  var rlen = Math.min(Math.max(maxRows - 1, 0), Math.max(start.row, end.row));
	  var clen = Math.min(Math.max(maxCols - 1, 0), Math.max(start.col, end.col));
	
	  for (r = Math.min(start.row, end.row); r <= rlen; r++) {
	    row = [];
	    var physicalRow = this.instance.runHooks('modifyRow', r);
	
	    for (c = Math.min(start.col, end.col); c <= clen; c++) {
	
	      if (physicalRow === null) {
	        break;
	      }
	      row.push(getFn.call(this, r, this.colToProp(c)));
	    }
	    if (physicalRow !== null) {
	      output.push(row);
	    }
	  }
	
	  return output;
	};
	
	/**
	 * Return data as text (tab separated columns).
	 *
	 * @param {Object} [start] Start selection position. Visual indexes.
	 * @param {Object} [end] End selection position. Visual indexes.
	 * @returns {String}
	 */
	DataMap.prototype.getText = function (start, end) {
	  return _SheetClip2.default.stringify(this.getRange(start, end, this.DESTINATION_RENDERER));
	};
	
	/**
	 * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).
	 *
	 * @param {Object} [start] Start selection position. Visual indexes.
	 * @param {Object} [end] End selection position. Visual indexes.
	 * @returns {String}
	 */
	DataMap.prototype.getCopyableText = function (start, end) {
	  return _SheetClip2.default.stringify(this.getRange(start, end, this.DESTINATION_CLIPBOARD_GENERATOR));
	};
	
	/**
	 * `skipLengthCache` callback.
	 * @private
	 * @param {Number} delay Time of the delay in milliseconds.
	 */
	DataMap.prototype.onSkipLengthCache = function (delay) {
	  var _this5 = this;
	
	  this.skipCache = true;
	  setTimeout(function () {
	    _this5.skipCache = false;
	  }, delay);
	};
	
	/**
	 * Destroy instance.
	 */
	DataMap.prototype.destroy = function () {
	  this.interval.stop();
	
	  this.interval = null;
	  this.instance = null;
	  this.priv = null;
	  this.GridSettings = null;
	  this.dataSource = null;
	  this.cachedLength = null;
	  this.duckSchema = null;
	};
	
	exports.default = DataMap;
	
	/***/ }),
	/* 265 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.parseDelay = parseDelay;
	
	var _feature = __webpack_require__(40);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Interval
	 * @util
	 */
	var Interval = function () {
	  _createClass(Interval, null, [{
	    key: 'create',
	    value: function create(func, delay) {
	      return new Interval(func, delay);
	    }
	  }]);
	
	  function Interval(func, delay) {
	    var _this = this;
	
	    _classCallCheck(this, Interval);
	
	    /**
	     * Animation frame request id.
	     *
	     * @type {Number}
	     */
	    this.timer = null;
	    /**
	     * Function to invoke repeatedly.
	     *
	     * @type {Function}
	     */
	    this.func = func;
	    /**
	     * Number of milliseconds that function should wait before next call.
	     */
	    this.delay = parseDelay(delay);
	    /**
	     * Flag which indicates if interval object was stopped.
	     *
	     * @type {Boolean}
	     * @default true
	     */
	    this.stopped = true;
	    /**
	     * Interval time (in milliseconds) of the last callback call.
	     *
	     * @private
	     * @type {Number}
	     */
	    this._then = null;
	    /**
	     * Bounded function `func`.
	     *
	     * @private
	     * @type {Function}
	     */
	    this._callback = function () {
	      return _this.__callback();
	    };
	  }
	
	  /**
	   * Start loop.
	   *
	   * @returns {Interval}
	   */
	
	
	  _createClass(Interval, [{
	    key: 'start',
	    value: function start() {
	      if (this.stopped) {
	        this._then = Date.now();
	        this.stopped = false;
	        this.timer = (0, _feature.requestAnimationFrame)(this._callback);
	      }
	
	      return this;
	    }
	
	    /**
	     * Stop looping.
	     *
	     * @returns {Interval}
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	      if (!this.stopped) {
	        this.stopped = true;
	        (0, _feature.cancelAnimationFrame)(this.timer);
	        this.timer = null;
	      }
	
	      return this;
	    }
	
	    /**
	     * Loop callback, fired on every animation frame.
	     *
	     * @private
	     */
	
	  }, {
	    key: '__callback',
	    value: function __callback() {
	      this.timer = (0, _feature.requestAnimationFrame)(this._callback);
	
	      if (this.delay) {
	        var now = Date.now();
	        var elapsed = now - this._then;
	
	        if (elapsed > this.delay) {
	          this._then = now - elapsed % this.delay;
	          this.func();
	        }
	      } else {
	        this.func();
	      }
	    }
	  }]);
	
	  return Interval;
	}();
	
	exports.default = Interval;
	
	/**
	 * Convert delay from string format to milliseconds.
	 *
	 * @param {Number|String} delay
	 * @returns {Number}
	 */
	
	function parseDelay(delay) {
	  var result = delay;
	
	  if (typeof result === 'string' && /fps$/.test(result)) {
	    result = 1000 / parseInt(result.replace('fps', '') || 0, 10);
	  }
	
	  return result;
	}
	
	/***/ }),
	/* 266 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function MultiMap() {
	  var map = {
	    arrayMap: [],
	    weakMap: new WeakMap()
	  };
	
	  return {
	    get: function get(key) {
	      if (canBeAnArrayMapKey(key)) {
	        return map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        return map.weakMap.get(key);
	      }
	    },
	    set: function set(key, value) {
	      if (canBeAnArrayMapKey(key)) {
	        map.arrayMap[key] = value;
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.set(key, value);
	      } else {
	        throw new Error('Invalid key type');
	      }
	    },
	    delete: function _delete(key) {
	      if (canBeAnArrayMapKey(key)) {
	        delete map.arrayMap[key];
	      } else if (canBeAWeakMapKey(key)) {
	        map.weakMap.delete(key);
	      }
	    }
	  };
	
	  function canBeAnArrayMapKey(obj) {
	    return obj !== null && !isNaNSymbol(obj) && (typeof obj === 'string' || typeof obj === 'number');
	  }
	
	  function canBeAWeakMapKey(obj) {
	    return obj !== null && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function');
	  }
	
	  function isNaNSymbol(obj) {
	    /* eslint-disable no-self-compare */
	    return obj !== obj; // NaN === NaN is always false
	  }
	}
	
	exports.default = MultiMap;
	
	/***/ }),
	/* 267 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	var _unicode = __webpack_require__(21);
	
	var _event = __webpack_require__(13);
	
	var _editors = __webpack_require__(17);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _baseEditor = __webpack_require__(55);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function EditorManager(instance, priv, selection) {
	  var _this = this;
	  var eventManager = new _eventManager2.default(instance);
	  var destroyed = false;
	  var lock = false;
	  var activeEditor = void 0;
	
	  function moveSelectionAfterEnter(shiftKey) {
	    var enterMoves = typeof priv.settings.enterMoves === 'function' ? priv.settings.enterMoves(event) : priv.settings.enterMoves;
	
	    if (shiftKey) {
	      // move selection up
	      selection.transformStart(-enterMoves.row, -enterMoves.col);
	    } else {
	      // move selection down (add a new row if needed)
	      selection.transformStart(enterMoves.row, enterMoves.col, true);
	    }
	  }
	
	  function moveSelectionUp(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(-1, 0);
	    } else {
	      selection.transformStart(-1, 0);
	    }
	  }
	
	  function moveSelectionDown(shiftKey) {
	    if (shiftKey) {
	      // expanding selection down with shift
	      selection.transformEnd(1, 0);
	    } else {
	      selection.transformStart(1, 0);
	    }
	  }
	
	  function moveSelectionRight(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, 1);
	    } else {
	      selection.transformStart(0, 1);
	    }
	  }
	
	  function moveSelectionLeft(shiftKey) {
	    if (shiftKey) {
	      selection.transformEnd(0, -1);
	    } else {
	      selection.transformStart(0, -1);
	    }
	  }
	
	  function onKeyDown(event) {
	    if (!instance.isListening()) {
	      return;
	    }
	    instance.runHooks('beforeKeyDown', event);
	
	    // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished
	    // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.
	    if (destroyed || event.keyCode === 229) {
	      return;
	    }
	    if ((0, _event.isImmediatePropagationStopped)(event)) {
	      return;
	    }
	    priv.lastKeyCode = event.keyCode;
	
	    if (!selection.isSelected()) {
	      return;
	    }
	    // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
	    var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	
	    if (activeEditor && !activeEditor.isWaiting()) {
	      if (!(0, _unicode.isMetaKey)(event.keyCode) && !(0, _unicode.isCtrlMetaKey)(event.keyCode) && !ctrlDown && !_this.isEditorOpened()) {
	        _this.openEditor('', event);
	
	        return;
	      }
	    }
	    var rangeModifier = event.shiftKey ? selection.setRangeEnd : selection.setRangeStart;
	    var tabMoves = void 0;
	
	    switch (event.keyCode) {
	      case _unicode.KEY_CODES.A:
	        if (!_this.isEditorOpened() && ctrlDown) {
	          instance.selectAll();
	
	          event.preventDefault();
	          (0, _event.stopPropagation)(event);
	        }
	        break;
	
	      case _unicode.KEY_CODES.ARROW_UP:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	        moveSelectionUp(event.shiftKey);
	
	        event.preventDefault();
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.ARROW_DOWN:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	
	        moveSelectionDown(event.shiftKey);
	
	        event.preventDefault();
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.ARROW_RIGHT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	
	        moveSelectionRight(event.shiftKey);
	
	        event.preventDefault();
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.ARROW_LEFT:
	        if (_this.isEditorOpened() && !activeEditor.isWaiting()) {
	          _this.closeEditorAndSaveChanges(ctrlDown);
	        }
	
	        moveSelectionLeft(event.shiftKey);
	
	        event.preventDefault();
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.TAB:
	        tabMoves = typeof priv.settings.tabMoves === 'function' ? priv.settings.tabMoves(event) : priv.settings.tabMoves;
	
	        if (event.shiftKey) {
	          // move selection left
	          selection.transformStart(-tabMoves.row, -tabMoves.col);
	        } else {
	          // move selection right (add a new column if needed)
	          selection.transformStart(tabMoves.row, tabMoves.col, true);
	        }
	        event.preventDefault();
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.BACKSPACE:
	      case _unicode.KEY_CODES.DELETE:
	        instance.emptySelectedCells();
	        _this.prepareEditor();
	        event.preventDefault();
	        break;
	
	      case _unicode.KEY_CODES.F2:
	        /* F2 */
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	        _this.openEditor(null, event);
	
	        event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'
	        break;
	
	      case _unicode.KEY_CODES.ENTER:
	        /* return/enter */
	        if (_this.isEditorOpened()) {
	
	          if (activeEditor && activeEditor.state !== _baseEditor.EditorState.WAITING) {
	            _this.closeEditorAndSaveChanges(ctrlDown);
	          }
	          moveSelectionAfterEnter(event.shiftKey);
	        } else if (instance.getSettings().enterBeginsEditing) {
	          if (activeEditor) {
	            activeEditor.enableFullEditMode();
	          }
	          _this.openEditor(null, event);
	        } else {
	          moveSelectionAfterEnter(event.shiftKey);
	        }
	        event.preventDefault(); // don't add newline to field
	        (0, _event.stopImmediatePropagation)(event); // required by HandsontableEditor
	        break;
	
	      case _unicode.KEY_CODES.ESCAPE:
	        if (_this.isEditorOpened()) {
	          _this.closeEditorAndRestoreOriginalValue(ctrlDown);
	
	          activeEditor.focus();
	        }
	        event.preventDefault();
	        break;
	
	      case _unicode.KEY_CODES.HOME:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier.call(selection, new _src.CellCoords(0, selection.selectedRange.current().from.col));
	        } else {
	          rangeModifier.call(selection, new _src.CellCoords(selection.selectedRange.current().from.row, 0));
	        }
	        event.preventDefault(); // don't scroll the window
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.END:
	        if (event.ctrlKey || event.metaKey) {
	          rangeModifier.call(selection, new _src.CellCoords(instance.countRows() - 1, selection.selectedRange.current().from.col));
	        } else {
	          rangeModifier.call(selection, new _src.CellCoords(selection.selectedRange.current().from.row, instance.countCols() - 1));
	        }
	        event.preventDefault(); // don't scroll the window
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.PAGE_UP:
	        selection.transformStart(-instance.countVisibleRows(), 0);
	        event.preventDefault(); // don't page up the window
	        (0, _event.stopPropagation)(event);
	        break;
	
	      case _unicode.KEY_CODES.PAGE_DOWN:
	        selection.transformStart(instance.countVisibleRows(), 0);
	        event.preventDefault(); // don't page down the window
	        (0, _event.stopPropagation)(event);
	        break;
	      default:
	        break;
	    }
	  }
	
	  function init() {
	    instance.addHook('afterDocumentKeyDown', onKeyDown);
	
	    eventManager.addEventListener(document.documentElement, 'keydown', function (event) {
	      if (!destroyed) {
	        instance.runHooks('afterDocumentKeyDown', event);
	      }
	    });
	
	    // Open editor when text composition is started (IME editor)
	    eventManager.addEventListener(document.documentElement, 'compositionstart', function (event) {
	      if (!destroyed && activeEditor && !activeEditor.isOpened() && instance.isListening()) {
	        _this.openEditor('', event);
	      }
	    });
	
	    function onDblClick(event, coords, elem) {
	      // may be TD or TH
	      if (elem.nodeName === 'TD') {
	        if (activeEditor) {
	          activeEditor.enableFullEditMode();
	        }
	        _this.openEditor(null, event);
	      }
	    }
	    instance.view.wt.update('onCellDblClick', onDblClick);
	  }
	
	  /**
	  * Lock the editor from being prepared and closed. Locking the editor prevents its closing and
	  * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.
	  *
	  * @function lockEditor
	  * @memberof! Handsontable.EditorManager#
	   */
	  this.lockEditor = function () {
	    lock = true;
	  };
	
	  /**
	  * Unlock the editor from being prepared and closed. This method restores the original behavior of
	  * the editors where for every new selection its instances are closed.
	  *
	  * @function unlockEditor
	  * @memberof! Handsontable.EditorManager#
	   */
	  this.unlockEditor = function () {
	    lock = false;
	  };
	
	  /**
	   * Destroy current editor, if exists.
	   *
	   * @function destroyEditor
	   * @memberof! Handsontable.EditorManager#
	   * @param {Boolean} revertOriginal
	   */
	  this.destroyEditor = function (revertOriginal) {
	    if (!lock) {
	      this.closeEditor(revertOriginal);
	    }
	  };
	
	  /**
	   * Get active editor.
	   *
	   * @function getActiveEditor
	   * @memberof! Handsontable.EditorManager#
	   * @returns {*}
	   */
	  this.getActiveEditor = function () {
	    return activeEditor;
	  };
	
	  /**
	   * Prepare text input to be displayed at given grid cell.
	   *
	   * @function prepareEditor
	   * @memberof! Handsontable.EditorManager#
	   */
	  this.prepareEditor = function () {
	    if (lock) {
	      return;
	    }
	
	    if (activeEditor && activeEditor.isWaiting()) {
	      this.closeEditor(false, false, function (dataSaved) {
	        if (dataSaved) {
	          _this.prepareEditor();
	        }
	      });
	
	      return;
	    }
	
	    var row = instance.selection.selectedRange.current().highlight.row;
	    var col = instance.selection.selectedRange.current().highlight.col;
	    var prop = instance.colToProp(col);
	    var td = instance.getCell(row, col);
	    var originalValue = instance.getSourceDataAtCell(instance.runHooks('modifyRow', row), col);
	    var cellProperties = instance.getCellMeta(row, col);
	    var editorClass = instance.getCellEditor(cellProperties);
	
	    if (editorClass) {
	      activeEditor = (0, _editors.getEditorInstance)(editorClass, instance);
	      activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);
	    } else {
	      activeEditor = void 0;
	    }
	  };
	
	  /**
	   * Check is editor is opened/showed.
	   *
	   * @function isEditorOpened
	   * @memberof! Handsontable.EditorManager#
	   * @returns {Boolean}
	   */
	  this.isEditorOpened = function () {
	    return activeEditor && activeEditor.isOpened();
	  };
	
	  /**
	   * Open editor with initial value.
	   *
	   * @function openEditor
	   * @memberof! Handsontable.EditorManager#
	   * @param {null|String} newInitialValue new value from which editor will start if handled property it's not the `null`.
	   * @param {DOMEvent} event
	   */
	  this.openEditor = function (newInitialValue, event) {
	    if (!activeEditor) {
	      return;
	    }
	
	    var readOnly = activeEditor.cellProperties.readOnly;
	
	    if (readOnly) {
	      // move the selection after opening the editor with ENTER key
	      if (event && event.keyCode === _unicode.KEY_CODES.ENTER) {
	        moveSelectionAfterEnter();
	      }
	    } else {
	      activeEditor.beginEditing(newInitialValue, event);
	    }
	  };
	
	  /**
	   * Close editor, finish editing cell.
	   *
	   * @function closeEditor
	   * @memberof! Handsontable.EditorManager#
	   * @param {Boolean} restoreOriginalValue
	   * @param {Boolean} [ctrlDown]
	   * @param {Function} [callback]
	   */
	  this.closeEditor = function (restoreOriginalValue, ctrlDown, callback) {
	    if (activeEditor) {
	      activeEditor.finishEditing(restoreOriginalValue, ctrlDown, callback);
	    } else if (callback) {
	      callback(false);
	    }
	  };
	
	  /**
	   * Close editor and save changes.
	   *
	   * @function closeEditorAndSaveChanges
	   * @memberof! Handsontable.EditorManager#
	   * @param {Boolean} ctrlDown
	   */
	  this.closeEditorAndSaveChanges = function (ctrlDown) {
	    return this.closeEditor(false, ctrlDown);
	  };
	
	  /**
	   * Close editor and restore original value.
	   *
	   * @function closeEditorAndRestoreOriginalValue
	   * @memberof! Handsontable.EditorManager#
	   * @param {Boolean} ctrlDown
	   */
	  this.closeEditorAndRestoreOriginalValue = function (ctrlDown) {
	    return this.closeEditor(true, ctrlDown);
	  };
	
	  /**
	   * Destroy the instance.
	   */
	  this.destroy = function () {
	    destroyed = true;
	  };
	
	  init();
	}
	
	var instances = new WeakMap();
	
	EditorManager.getInstance = function (hotInstance, hotSettings, selection, datamap) {
	  var editorManager = instances.get(hotInstance);
	
	  if (!editorManager) {
	    editorManager = new EditorManager(hotInstance, hotSettings, selection, datamap);
	    instances.set(hotInstance, editorManager);
	  }
	
	  return editorManager;
	};
	
	exports.default = EditorManager;
	
	/***/ }),
	/* 268 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _element = __webpack_require__(0);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _event = __webpack_require__(13);
	
	var _src = __webpack_require__(4);
	
	var _src2 = _interopRequireDefault(_src);
	
	var _mouseEventHandler = __webpack_require__(194);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Cross-platform helper to clear text selection.
	 */
	var clearTextSelection = function clearTextSelection() {
	  // http://stackoverflow.com/questions/3169786/clear-text-selection-with-javascript
	  if (window.getSelection) {
	    if (window.getSelection().empty) {
	      // Chrome
	      window.getSelection().empty();
	    } else if (window.getSelection().removeAllRanges) {
	      // Firefox
	      window.getSelection().removeAllRanges();
	    }
	  } else if (document.selection) {
	    // IE?
	    document.selection.empty();
	  }
	};
	
	/**
	 * Handsontable TableView constructor
	 * @param {Object} instance
	 */
	function TableView(instance) {
	  var _this = this;
	
	  var that = this;
	
	  this.eventManager = new _eventManager2.default(instance);
	  this.instance = instance;
	  this.settings = instance.getSettings();
	  this.selectionMouseDown = false;
	
	  var originalStyle = instance.rootElement.getAttribute('style');
	
	  if (originalStyle) {
	    instance.rootElement.setAttribute('data-originalstyle', originalStyle); // needed to retrieve original style in jsFiddle link generator in HT examples. may be removed in future versions
	  }
	
	  (0, _element.addClass)(instance.rootElement, 'handsontable');
	
	  var table = document.createElement('TABLE');
	  (0, _element.addClass)(table, 'htCore');
	
	  if (instance.getSettings().tableClassName) {
	    (0, _element.addClass)(table, instance.getSettings().tableClassName);
	  }
	  this.THEAD = document.createElement('THEAD');
	  table.appendChild(this.THEAD);
	  this.TBODY = document.createElement('TBODY');
	  table.appendChild(this.TBODY);
	
	  instance.table = table;
	
	  instance.container.insertBefore(table, instance.container.firstChild);
	
	  this.eventManager.addEventListener(instance.rootElement, 'mousedown', function (event) {
	    _this.selectionMouseDown = true;
	
	    if (!that.isTextSelectionAllowed(event.target)) {
	      clearTextSelection();
	      event.preventDefault();
	      window.focus(); // make sure that window that contains HOT is active. Important when HOT is in iframe.
	    }
	  });
	  this.eventManager.addEventListener(instance.rootElement, 'mouseup', function () {
	    _this.selectionMouseDown = false;
	  });
	  this.eventManager.addEventListener(instance.rootElement, 'mousemove', function (event) {
	    if (_this.selectionMouseDown && !that.isTextSelectionAllowed(event.target)) {
	      // Clear selection only when fragmentSelection is enabled, otherwise clearing selection breakes the IME editor.
	      if (_this.settings.fragmentSelection) {
	        clearTextSelection();
	      }
	      event.preventDefault();
	    }
	  });
	
	  this.eventManager.addEventListener(document.documentElement, 'keyup', function (event) {
	    if (instance.selection.isInProgress() && !event.shiftKey) {
	      instance.selection.finish();
	    }
	  });
	
	  var isMouseDown = void 0;
	  this.isMouseDown = function () {
	    return isMouseDown;
	  };
	
	  this.eventManager.addEventListener(document.documentElement, 'mouseup', function (event) {
	    if (instance.selection.isInProgress() && (0, _event.isLeftClick)(event)) {
	      // is left mouse button
	      instance.selection.finish();
	    }
	
	    isMouseDown = false;
	
	    if ((0, _element.isOutsideInput)(document.activeElement) || !instance.selection.isSelected() && !(0, _event.isRightClick)(event)) {
	      instance.unlisten();
	    }
	  });
	
	  this.eventManager.addEventListener(document.documentElement, 'contextmenu', function (event) {
	    if (instance.selection.isInProgress() && (0, _event.isRightClick)(event)) {
	      instance.selection.finish();
	
	      isMouseDown = false;
	    }
	  });
	
	  this.eventManager.addEventListener(document.documentElement, 'touchend', function () {
	    if (instance.selection.isInProgress()) {
	      instance.selection.finish();
	    }
	  });
	
	  this.eventManager.addEventListener(document.documentElement, 'mousedown', function (event) {
	    var originalTarget = event.target;
	    var eventX = event.x || event.clientX;
	    var eventY = event.y || event.clientY;
	    var next = event.target;
	
	    if (isMouseDown || !instance.rootElement) {
	      return; // it must have been started in a cell
	    }
	
	    // immediate click on "holder" means click on the right side of vertical scrollbar
	    if (next === instance.view.wt.wtTable.holder) {
	      var scrollbarWidth = (0, _element.getScrollbarWidth)();
	
	      if (document.elementFromPoint(eventX + scrollbarWidth, eventY) !== instance.view.wt.wtTable.holder || document.elementFromPoint(eventX, eventY + scrollbarWidth) !== instance.view.wt.wtTable.holder) {
	        return;
	      }
	    } else {
	      while (next !== document.documentElement) {
	        if (next === null) {
	          if (event.isTargetWebComponent) {
	            break;
	          }
	          // click on something that was a row but now is detached (possibly because your click triggered a rerender)
	          return;
	        }
	        if (next === instance.rootElement) {
	          // click inside container
	          return;
	        }
	        next = next.parentNode;
	      }
	    }
	
	    // function did not return until here, we have an outside click!
	
	    var outsideClickDeselects = typeof that.settings.outsideClickDeselects === 'function' ? that.settings.outsideClickDeselects(originalTarget) : that.settings.outsideClickDeselects;
	
	    if (outsideClickDeselects) {
	      instance.deselectCell();
	    } else {
	      instance.destroyEditor(false, false);
	    }
	  });
	
	  this.eventManager.addEventListener(table, 'selectstart', function (event) {
	    if (that.settings.fragmentSelection || (0, _element.isInput)(event.target)) {
	      return;
	    }
	    // https://github.com/handsontable/handsontable/issues/160
	    // Prevent text from being selected when performing drag down.
	    event.preventDefault();
	  });
	
	  var walkontableConfig = {
	    debug: function debug() {
	      return that.settings.debug;
	    },
	    externalRowCalculator: this.instance.getPlugin('autoRowSize') && this.instance.getPlugin('autoRowSize').isEnabled(),
	    table: table,
	    preventOverflow: function preventOverflow() {
	      return _this.settings.preventOverflow;
	    },
	    stretchH: function stretchH() {
	      return that.settings.stretchH;
	    },
	    data: instance.getDataAtCell,
	    totalRows: function totalRows() {
	      return instance.countRows();
	    },
	    totalColumns: function totalColumns() {
	      return instance.countCols();
	    },
	    fixedColumnsLeft: function fixedColumnsLeft() {
	      return that.settings.fixedColumnsLeft;
	    },
	    fixedRowsTop: function fixedRowsTop() {
	      return that.settings.fixedRowsTop;
	    },
	    fixedRowsBottom: function fixedRowsBottom() {
	      return that.settings.fixedRowsBottom;
	    },
	    minSpareRows: function minSpareRows() {
	      return that.settings.minSpareRows;
	    },
	    renderAllRows: that.settings.renderAllRows,
	    rowHeaders: function rowHeaders() {
	      var headerRenderers = [];
	
	      if (instance.hasRowHeaders()) {
	        headerRenderers.push(function (row, TH) {
	          return that.appendRowHeader(row, TH);
	        });
	      }
	
	      instance.runHooks('afterGetRowHeaderRenderers', headerRenderers);
	
	      return headerRenderers;
	    },
	    columnHeaders: function columnHeaders() {
	      var headerRenderers = [];
	
	      if (instance.hasColHeaders()) {
	        headerRenderers.push(function (column, TH) {
	          that.appendColHeader(column, TH);
	        });
	      }
	
	      instance.runHooks('afterGetColumnHeaderRenderers', headerRenderers);
	
	      return headerRenderers;
	    },
	    columnWidth: instance.getColWidth,
	    rowHeight: instance.getRowHeight,
	    cellRenderer: function cellRenderer(row, col, TD) {
	      var cellProperties = that.instance.getCellMeta(row, col);
	      var prop = that.instance.colToProp(col);
	      var value = that.instance.getDataAtRowProp(row, prop);
	
	      if (that.instance.hasHook('beforeValueRender')) {
	        value = that.instance.runHooks('beforeValueRender', value, cellProperties);
	      }
	
	      that.instance.runHooks('beforeRenderer', TD, row, col, prop, value, cellProperties);
	      that.instance.getCellRenderer(cellProperties)(that.instance, TD, row, col, prop, value, cellProperties);
	      that.instance.runHooks('afterRenderer', TD, row, col, prop, value, cellProperties);
	    },
	
	    selections: that.instance.selection.highlight,
	    hideBorderOnMouseDownOver: function hideBorderOnMouseDownOver() {
	      return that.settings.fragmentSelection;
	    },
	    onCellMouseDown: function onCellMouseDown(event, coords, TD, wt) {
	      var blockCalculations = {
	        row: false,
	        column: false,
	        cell: false
	      };
	
	      instance.listen();
	
	      that.activeWt = wt;
	      isMouseDown = true;
	
	      instance.runHooks('beforeOnCellMouseDown', event, coords, TD, blockCalculations);
	
	      if ((0, _event.isImmediatePropagationStopped)(event)) {
	        return;
	      }
	
	      (0, _mouseEventHandler.handleMouseEvent)(event, {
	        coords: coords,
	        selection: instance.selection,
	        controller: blockCalculations
	      });
	
	      instance.runHooks('afterOnCellMouseDown', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellContextMenu: function onCellContextMenu(event, coords, TD, wt) {
	      that.activeWt = wt;
	      isMouseDown = false;
	
	      if (instance.selection.isInProgress()) {
	        instance.selection.finish();
	      }
	
	      instance.runHooks('beforeOnCellContextMenu', event, coords, TD);
	
	      if ((0, _event.isImmediatePropagationStopped)(event)) {
	        return;
	      }
	
	      instance.runHooks('afterOnCellContextMenu', event, coords, TD);
	
	      that.activeWt = that.wt;
	    },
	    onCellMouseOut: function onCellMouseOut(event, coords, TD, wt) {
	      that.activeWt = wt;
	      instance.runHooks('beforeOnCellMouseOut', event, coords, TD);
	
	      if ((0, _event.isImmediatePropagationStopped)(event)) {
	        return;
	      }
	
	      instance.runHooks('afterOnCellMouseOut', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellMouseOver: function onCellMouseOver(event, coords, TD, wt) {
	      var blockCalculations = {
	        row: false,
	        column: false,
	        cell: false
	      };
	
	      that.activeWt = wt;
	
	      instance.runHooks('beforeOnCellMouseOver', event, coords, TD, blockCalculations);
	
	      if ((0, _event.isImmediatePropagationStopped)(event)) {
	        return;
	      }
	
	      if (isMouseDown) {
	        (0, _mouseEventHandler.handleMouseEvent)(event, {
	          coords: coords,
	          selection: instance.selection,
	          controller: blockCalculations
	        });
	      }
	
	      instance.runHooks('afterOnCellMouseOver', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellMouseUp: function onCellMouseUp(event, coords, TD, wt) {
	      that.activeWt = wt;
	      instance.runHooks('beforeOnCellMouseUp', event, coords, TD);
	
	      instance.runHooks('afterOnCellMouseUp', event, coords, TD);
	      that.activeWt = that.wt;
	    },
	    onCellCornerMouseDown: function onCellCornerMouseDown(event) {
	      event.preventDefault();
	      instance.runHooks('afterOnCellCornerMouseDown', event);
	    },
	    onCellCornerDblClick: function onCellCornerDblClick(event) {
	      event.preventDefault();
	      instance.runHooks('afterOnCellCornerDblClick', event);
	    },
	    beforeDraw: function beforeDraw(force, skipRender) {
	      that.beforeRender(force, skipRender);
	    },
	    onDraw: function onDraw(force) {
	      that.onDraw(force);
	    },
	    onScrollVertically: function onScrollVertically() {
	      instance.runHooks('afterScrollVertically');
	    },
	    onScrollHorizontally: function onScrollHorizontally() {
	      instance.runHooks('afterScrollHorizontally');
	    },
	
	    onBeforeRemoveCellClassNames: function onBeforeRemoveCellClassNames() {
	      return instance.runHooks('beforeRemoveCellClassNames');
	    },
	    onAfterDrawSelection: function onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {
	      return instance.runHooks('afterDrawSelection', currentRow, currentColumn, cornersOfSelection, layerLevel);
	    },
	    onBeforeDrawBorders: function onBeforeDrawBorders(corners, borderClassName) {
	      instance.runHooks('beforeDrawBorders', corners, borderClassName);
	    },
	    onBeforeTouchScroll: function onBeforeTouchScroll() {
	      instance.runHooks('beforeTouchScroll');
	    },
	    onAfterMomentumScroll: function onAfterMomentumScroll() {
	      instance.runHooks('afterMomentumScroll');
	    },
	
	    onBeforeStretchingColumnWidth: function onBeforeStretchingColumnWidth(stretchedWidth, column) {
	      return instance.runHooks('beforeStretchingColumnWidth', stretchedWidth, column);
	    },
	    onModifyRowHeaderWidth: function onModifyRowHeaderWidth(rowHeaderWidth) {
	      return instance.runHooks('modifyRowHeaderWidth', rowHeaderWidth);
	    },
	    onModifyGetCellCoords: function onModifyGetCellCoords(row, column, topmost) {
	      return instance.runHooks('modifyGetCellCoords', row, column, topmost);
	    },
	    viewportRowCalculatorOverride: function viewportRowCalculatorOverride(calc) {
	      var rows = instance.countRows();
	      var viewportOffset = that.settings.viewportRowRenderingOffset;
	
	      if (viewportOffset === 'auto' && that.settings.fixedRowsTop) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startRow = Math.max(calc.startRow - viewportOffset, 0);
	        calc.endRow = Math.min(calc.endRow + viewportOffset, rows - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startRow + calc.endRow - calc.startRow;
	        var offset = Math.ceil(center / rows * 12);
	
	        calc.startRow = Math.max(calc.startRow - offset, 0);
	        calc.endRow = Math.min(calc.endRow + offset, rows - 1);
	      }
	      instance.runHooks('afterViewportRowCalculatorOverride', calc);
	    },
	    viewportColumnCalculatorOverride: function viewportColumnCalculatorOverride(calc) {
	      var cols = instance.countCols();
	      var viewportOffset = that.settings.viewportColumnRenderingOffset;
	
	      if (viewportOffset === 'auto' && that.settings.fixedColumnsLeft) {
	        viewportOffset = 10;
	      }
	      if (typeof viewportOffset === 'number') {
	        calc.startColumn = Math.max(calc.startColumn - viewportOffset, 0);
	        calc.endColumn = Math.min(calc.endColumn + viewportOffset, cols - 1);
	      }
	      if (viewportOffset === 'auto') {
	        var center = calc.startColumn + calc.endColumn - calc.startColumn;
	        var offset = Math.ceil(center / cols * 12);
	
	        calc.startRow = Math.max(calc.startColumn - offset, 0);
	        calc.endColumn = Math.min(calc.endColumn + offset, cols - 1);
	      }
	      instance.runHooks('afterViewportColumnCalculatorOverride', calc);
	    },
	
	    rowHeaderWidth: function rowHeaderWidth() {
	      return that.settings.rowHeaderWidth;
	    },
	    columnHeaderHeight: function columnHeaderHeight() {
	      var columnHeaderHeight = instance.runHooks('modifyColumnHeaderHeight');
	      return that.settings.columnHeaderHeight || columnHeaderHeight;
	    }
	  };
	
	  instance.runHooks('beforeInitWalkontable', walkontableConfig);
	
	  this.wt = new _src2.default(walkontableConfig);
	  this.activeWt = this.wt;
	
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'mousedown', function (event) {
	    // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      (0, _event.stopPropagation)(event);
	    }
	  });
	
	  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'contextmenu', function (event) {
	    // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar
	    if (event.target === that.wt.wtTable.spreader && event.which === 3) {
	      (0, _event.stopPropagation)(event);
	    }
	  });
	
	  this.eventManager.addEventListener(document.documentElement, 'click', function () {
	    if (that.settings.observeDOMVisibility) {
	      if (that.wt.drawInterrupted) {
	        that.instance.forceFullRender = true;
	        that.render();
	      }
	    }
	  });
	}
	
	TableView.prototype.isTextSelectionAllowed = function (el) {
	  if ((0, _element.isInput)(el)) {
	    return true;
	  }
	  var isChildOfTableBody = (0, _element.isChildOf)(el, this.instance.view.wt.wtTable.spreader);
	
	  if (this.settings.fragmentSelection === true && isChildOfTableBody) {
	    return true;
	  }
	  if (this.settings.fragmentSelection === 'cell' && this.isSelectedOnlyCell() && isChildOfTableBody) {
	    return true;
	  }
	  if (!this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell()) {
	    return true;
	  }
	
	  return false;
	};
	
	/**
	 * Check if selected only one cell.
	 *
	 * @returns {Boolean}
	 */
	TableView.prototype.isSelectedOnlyCell = function () {
	  var _ref = this.instance.getSelectedLast() || [],
	      _ref2 = _slicedToArray(_ref, 4),
	      row = _ref2[0],
	      col = _ref2[1],
	      rowEnd = _ref2[2],
	      colEnd = _ref2[3];
	
	  return row !== void 0 && row === rowEnd && col === colEnd;
	};
	
	TableView.prototype.isCellEdited = function () {
	  var activeEditor = this.instance.getActiveEditor();
	
	  return activeEditor && activeEditor.isOpened();
	};
	
	TableView.prototype.beforeRender = function (force, skipRender) {
	  if (force) {
	    // this.instance.forceFullRender = did Handsontable request full render?
	    this.instance.runHooks('beforeRender', this.instance.forceFullRender, skipRender);
	  }
	};
	
	TableView.prototype.onDraw = function (force) {
	  if (force) {
	    // this.instance.forceFullRender = did Handsontable request full render?
	    this.instance.runHooks('afterRender', this.instance.forceFullRender);
	  }
	};
	
	TableView.prototype.render = function () {
	  this.wt.draw(!this.instance.forceFullRender);
	  this.instance.forceFullRender = false;
	  this.instance.renderCall = false;
	};
	
	/**
	 * Returns td object given coordinates
	 *
	 * @param {CellCoords} coords
	 * @param {Boolean} topmost
	 */
	TableView.prototype.getCellAtCoords = function (coords, topmost) {
	  var td = this.wt.getCell(coords, topmost);
	
	  if (td < 0) {
	    // there was an exit code (cell is out of bounds)
	    return null;
	  }
	
	  return td;
	};
	
	/**
	 * Scroll viewport to a cell.
	 *
	 * @param {CellCoords} coords
	 * @param {Boolean} [snapToTop]
	 * @param {Boolean} [snapToRight]
	 * @param {Boolean} [snapToBottom]
	 * @param {Boolean} [snapToLeft]
	 * @returns {Boolean}
	 */
	TableView.prototype.scrollViewport = function (coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {
	  return this.wt.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);
	};
	
	/**
	 * Scroll viewport to a column.
	 *
	 * @param {Number} column Visual column index.
	 * @param {Boolean} [snapToLeft]
	 * @param {Boolean} [snapToRight]
	 * @returns {Boolean}
	 */
	TableView.prototype.scrollViewportHorizontally = function (column, snapToRight, snapToLeft) {
	  return this.wt.scrollViewportHorizontally(column, snapToRight, snapToLeft);
	};
	
	/**
	 * Scroll viewport to a row.
	 *
	 * @param {Number} row Visual row index.
	 * @param {Boolean} [snapToTop]
	 * @param {Boolean} [snapToBottom]
	 * @returns {Boolean}
	 */
	TableView.prototype.scrollViewportVertically = function (row, snapToTop, snapToBottom) {
	  return this.wt.scrollViewportVertically(row, snapToTop, snapToBottom);
	};
	
	/**
	 * Append row header to a TH element
	 * @param row
	 * @param TH
	 */
	TableView.prototype.appendRowHeader = function (row, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	
	    if (!(0, _element.hasClass)(container, 'relative')) {
	      (0, _element.empty)(TH);
	      this.appendRowHeader(row, TH);
	
	      return;
	    }
	    this.updateCellHeader(container.querySelector('.rowHeader'), row, this.instance.getRowHeader);
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	
	    div.className = 'relative';
	    span.className = 'rowHeader';
	    this.updateCellHeader(span, row, this.instance.getRowHeader);
	
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	
	  this.instance.runHooks('afterGetRowHeader', row, TH);
	};
	
	/**
	 * Append column header to a TH element
	 * @param col
	 * @param TH
	 */
	TableView.prototype.appendColHeader = function (col, TH) {
	  if (TH.firstChild) {
	    var container = TH.firstChild;
	
	    if ((0, _element.hasClass)(container, 'relative')) {
	      this.updateCellHeader(container.querySelector('.colHeader'), col, this.instance.getColHeader);
	    } else {
	      (0, _element.empty)(TH);
	      this.appendColHeader(col, TH);
	    }
	  } else {
	    var div = document.createElement('div');
	    var span = document.createElement('span');
	
	    div.className = 'relative';
	    span.className = 'colHeader';
	    this.updateCellHeader(span, col, this.instance.getColHeader);
	
	    div.appendChild(span);
	    TH.appendChild(div);
	  }
	
	  this.instance.runHooks('afterGetColHeader', col, TH);
	};
	
	/**
	 * Update header cell content
	 *
	 * @since 0.15.0-beta4
	 * @param {HTMLElement} element Element to update
	 * @param {Number} index Row index or column index
	 * @param {Function} content Function which should be returns content for this cell
	 */
	TableView.prototype.updateCellHeader = function (element, index, content) {
	  var renderedIndex = index;
	  var parentOverlay = this.wt.wtOverlays.getParentOverlay(element) || this.wt;
	
	  // prevent wrong calculations from SampleGenerator
	  if (element.parentNode) {
	    if ((0, _element.hasClass)(element, 'colHeader')) {
	      renderedIndex = parentOverlay.wtTable.columnFilter.sourceToRendered(index);
	    } else if ((0, _element.hasClass)(element, 'rowHeader')) {
	      renderedIndex = parentOverlay.wtTable.rowFilter.sourceToRendered(index);
	    }
	  }
	
	  if (renderedIndex > -1) {
	    (0, _element.fastInnerHTML)(element, content(index));
	  } else {
	    // workaround for https://github.com/handsontable/handsontable/issues/1946
	    (0, _element.fastInnerText)(element, String.fromCharCode(160));
	    (0, _element.addClass)(element, 'cornerHeader');
	  }
	};
	
	/**
	 * Given a element's left position relative to the viewport, returns maximum element width until the right
	 * edge of the viewport (before scrollbar)
	 *
	 * @param {Number} leftOffset
	 * @return {Number}
	 */
	TableView.prototype.maximumVisibleElementWidth = function (leftOffset) {
	  var workspaceWidth = this.wt.wtViewport.getWorkspaceWidth();
	  var maxWidth = workspaceWidth - leftOffset;
	  return maxWidth > 0 ? maxWidth : 0;
	};
	
	/**
	 * Given a element's top position relative to the viewport, returns maximum element height until the bottom
	 * edge of the viewport (before scrollbar)
	 *
	 * @param {Number} topOffset
	 * @return {Number}
	 */
	TableView.prototype.maximumVisibleElementHeight = function (topOffset) {
	  var workspaceHeight = this.wt.wtViewport.getWorkspaceHeight();
	  var maxHeight = workspaceHeight - topOffset;
	  return maxHeight > 0 ? maxHeight : 0;
	};
	
	TableView.prototype.mainViewIsActive = function () {
	  return this.wt === this.activeWt;
	};
	
	TableView.prototype.destroy = function () {
	  this.wt.destroy();
	  this.eventManager.destroy();
	};
	
	exports.default = TableView;
	
	/***/ }),
	/* 269 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _number = __webpack_require__(6);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class DataSource
	 * @private
	 */
	var DataSource = function () {
	  function DataSource(hotInstance) {
	    var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	    _classCallCheck(this, DataSource);
	
	    /**
	     * Instance of Handsontable.
	     *
	     * @type {Handsontable}
	     */
	    this.hot = hotInstance;
	    /**
	     * Data source
	     *
	     * @type {Array}
	     */
	    this.data = dataSource;
	    /**
	     * Type of data source.
	     *
	     * @type {String}
	     * @default 'array'
	     */
	    this.dataType = 'array';
	
	    this.colToProp = function () {};
	    this.propToCol = function () {};
	  }
	
	  /**
	   * Get all data.
	   *
	   * @param {Boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
	   *                                  in another format.
	   * @returns {Array}
	   */
	
	
	  _createClass(DataSource, [{
	    key: 'getData',
	    value: function getData() {
	      var toArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      var result = this.data;
	
	      if (toArray) {
	        result = this.getByRange({ row: 0, col: 0 }, { row: Math.max(this.countRows() - 1, 0), col: Math.max(this.countColumns() - 1, 0) }, true);
	      }
	
	      return result;
	    }
	
	    /**
	     * Set new data source.
	     *
	     * @param data {Array}
	     */
	
	  }, {
	    key: 'setData',
	    value: function setData(data) {
	      this.data = data;
	    }
	
	    /**
	     * Returns array of column values from the data source. `column` is the index of the row in the data source.
	     *
	     * @param {Number} column Visual column index.
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getAtColumn',
	    value: function getAtColumn(column) {
	      var _this = this;
	
	      var result = [];
	
	      (0, _array.arrayEach)(this.data, function (row) {
	        var property = _this.colToProp(column);
	        var value = void 0;
	
	        if (typeof property === 'string') {
	          value = (0, _object.getProperty)(row, property);
	        } else if (typeof property === 'function') {
	          value = property(row);
	        } else {
	          value = row[property];
	        }
	
	        result.push(value);
	      });
	
	      return result;
	    }
	
	    /**
	     * Returns a single row of the data (array or object, depending on what you have). `row` is the index of the row in the data source.
	     *
	     * @param {Number} row Physical row index.
	     * @returns {Array|Object}
	     */
	
	  }, {
	    key: 'getAtRow',
	    value: function getAtRow(row) {
	      return this.data[row];
	    }
	
	    /**
	     * Returns a single value from the data.
	     *
	     * @param {Number} row Physical row index.
	     * @param {Number} column Visual column index.
	     * @returns {*}
	     */
	
	  }, {
	    key: 'getAtCell',
	    value: function getAtCell(row, column) {
	      var result = null;
	
	      var modifyRowData = this.hot.runHooks('modifyRowData', row);
	
	      var dataRow = isNaN(modifyRowData) ? modifyRowData : this.data[row];
	
	      if (dataRow) {
	        var prop = this.colToProp(column);
	
	        if (typeof prop === 'string') {
	          result = (0, _object.getProperty)(dataRow, prop);
	        } else if (typeof prop === 'function') {
	          result = prop(this.data.slice(row, row + 1)[0]);
	        } else {
	          result = dataRow[prop];
	        }
	      }
	
	      return result;
	    }
	
	    /**
	     * Returns source data by passed range.
	     *
	     * @param {Object} start Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
	     * @param {Object} end Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
	     * @param {Boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
	     *                                  in another format.
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getByRange',
	    value: function getByRange(start, end) {
	      var _this2 = this;
	
	      var toArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	      var startRow = Math.min(start.row, end.row);
	      var startCol = Math.min(start.col, end.col);
	      var endRow = Math.max(start.row, end.row);
	      var endCol = Math.max(start.col, end.col);
	      var result = [];
	
	      (0, _number.rangeEach)(startRow, endRow, function (currentRow) {
	        var row = _this2.getAtRow(currentRow);
	        var newRow = void 0;
	
	        if (_this2.dataType === 'array') {
	          newRow = row.slice(startCol, endCol + 1);
	        } else if (_this2.dataType === 'object') {
	          newRow = toArray ? [] : {};
	
	          (0, _number.rangeEach)(startCol, endCol, function (column) {
	            var prop = _this2.colToProp(column);
	
	            if (toArray) {
	              newRow.push(row[prop]);
	            } else {
	              newRow[prop] = row[prop];
	            }
	          });
	        }
	
	        result.push(newRow);
	      });
	
	      return result;
	    }
	
	    /**
	     * Count number of rows.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'countRows',
	    value: function countRows() {
	      return Array.isArray(this.data) ? this.data.length : 0;
	    }
	
	    /**
	     * Count number of columns.
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'countColumns',
	    value: function countColumns() {
	      var result = 0;
	
	      if (Array.isArray(this.data)) {
	        if (this.dataType === 'array') {
	          result = this.data[0].length;
	        } else if (this.dataType === 'object') {
	          result = Object.keys(this.data[0]).length;
	        }
	      }
	
	      return result;
	    }
	
	    /**
	     * Destroy instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.data = null;
	      this.hot = null;
	    }
	  }]);
	
	  return DataSource;
	}();
	
	exports.default = DataSource;
	
	/***/ }),
	/* 270 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _dictionary;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
	                                                                                                                                                                                                                   * @preserve
	                                                                                                                                                                                                                   * Authors: Handsoncode
	                                                                                                                                                                                                                   * Last updated: Nov 15, 2017
	                                                                                                                                                                                                                   *
	                                                                                                                                                                                                                   * Description: Definition file for English - United States language-country.
	                                                                                                                                                                                                                   */
	
	
	var dictionary = (_dictionary = {
	  languageCode: 'en-US'
	}, _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ROW_ABOVE, 'Insert row above'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ROW_BELOW, 'Insert row below'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_INSERT_LEFT, 'Insert column left'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_INSERT_RIGHT, 'Insert column right'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_REMOVE_ROW, ['Remove row', 'Remove rows']), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_REMOVE_COLUMN, ['Remove column', 'Remove columns']), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_UNDO, 'Undo'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_REDO, 'Redo'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_READ_ONLY, 'Read only'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_CLEAR_COLUMN, 'Clear column'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT, 'Alignment'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT, 'Left'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER, 'Center'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT, 'Right'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY, 'Justify'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP, 'Top'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE, 'Middle'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM, 'Bottom'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_FREEZE_COLUMN, 'Freeze column'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN, 'Unfreeze column'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_BORDERS, 'Borders'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_BORDERS_TOP, 'Top'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_BORDERS_RIGHT, 'Right'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM, 'Bottom'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_BORDERS_LEFT, 'Left'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_REMOVE_BORDERS, 'Remove border(s)'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_ADD_COMMENT, 'Add comment'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_EDIT_COMMENT, 'Edit comment'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_REMOVE_COMMENT, 'Delete comment'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT, 'Read-only comment'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_MERGE_CELLS, 'Merge cells'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_UNMERGE_CELLS, 'Unmerge cells'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_COPY, 'Copy'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_CUT, 'Cut'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD, 'Insert child row'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD, 'Detach from parent'), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_HIDE_COLUMN, ['Hide column', 'Hide columns']), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_SHOW_COLUMN, ['Show column', 'Show columns']), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_HIDE_ROW, ['Hide row', 'Hide rows']), _defineProperty(_dictionary, C.CONTEXTMENU_ITEMS_SHOW_ROW, ['Show row', 'Show rows']), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_NONE, 'None'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_EMPTY, 'Is empty'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_NOT_EMPTY, 'Is not empty'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_EQUAL, 'Is equal to'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_NOT_EQUAL, 'Is not equal to'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_BEGINS_WITH, 'Begins with'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_ENDS_WITH, 'Ends with'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_CONTAINS, 'Contains'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_NOT_CONTAIN, 'Does not contain'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_GREATER_THAN, 'Greater than'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL, 'Greater than or equal to'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_LESS_THAN, 'Less than'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL, 'Less than or equal to'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_BETWEEN, 'Is between'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_NOT_BETWEEN, 'Is not between'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_AFTER, 'After'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_BEFORE, 'Before'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_TODAY, 'Today'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_TOMORROW, 'Tomorrow'), _defineProperty(_dictionary, C.FILTERS_CONDITIONS_YESTERDAY, 'Yesterday'), _defineProperty(_dictionary, C.FILTERS_VALUES_BLANK_CELLS, 'Blank cells'), _defineProperty(_dictionary, C.FILTERS_DIVS_FILTER_BY_CONDITION, 'Filter by condition'), _defineProperty(_dictionary, C.FILTERS_DIVS_FILTER_BY_VALUE, 'Filter by value'), _defineProperty(_dictionary, C.FILTERS_LABELS_CONJUNCTION, 'And'), _defineProperty(_dictionary, C.FILTERS_LABELS_DISJUNCTION, 'Or'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_SELECT_ALL, 'Select all'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_CLEAR, 'Clear'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_OK, 'OK'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_CANCEL, 'Cancel'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_PLACEHOLDER_SEARCH, 'Search'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_PLACEHOLDER_VALUE, 'Value'), _defineProperty(_dictionary, C.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE, 'Second value'), _dictionary);
	
	exports.default = dictionary;
	
	/***/ }),
	/* 271 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.getPhraseFormatters = exports.registerPhraseFormatter = undefined;
	exports.register = register;
	exports.getAll = getAll;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _pluralize = __webpack_require__(272);
	
	var _pluralize2 = _interopRequireDefault(_pluralize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _staticRegister = (0, _staticRegister3.default)('phraseFormatters'),
	    registerGloballyPhraseFormatter = _staticRegister.register,
	    getGlobalPhraseFormatters = _staticRegister.getValues;
	
	/**
	 * Register phrase formatter.
	 *
	 * @param {String} name Name of formatter.
	 * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.
	 */
	
	
	function register(name, formatterFn) {
	  registerGloballyPhraseFormatter(name, formatterFn);
	}
	
	/**
	 * Get all registered previously formatters.
	 *
	 * @returns {Array}
	 */
	function getAll() {
	  return getGlobalPhraseFormatters();
	}
	
	exports.registerPhraseFormatter = register;
	exports.getPhraseFormatters = getAll;
	
	
	register('pluralize', _pluralize2.default);
	
	/***/ }),
	/* 272 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = pluralize;
	/**
	 * Try to choose plural form from available phrase propositions.
	 *
	 * @param {Array} phrasePropositions List of phrases propositions.
	 * @param {number} pluralForm Number determining which phrase form should be used.
	 *
	 * @returns {String|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.
	 */
	function pluralize(phrasePropositions, pluralForm) {
	  var isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);
	
	  if (isPluralizable) {
	    return phrasePropositions[pluralForm];
	  }
	
	  return phrasePropositions;
	}
	
	/***/ }),
	/* 273 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.createHighlight = undefined;
	
	var _staticRegister2 = __webpack_require__(38);
	
	var _staticRegister3 = _interopRequireDefault(_staticRegister2);
	
	var _activeHeader = __webpack_require__(274);
	
	var _activeHeader2 = _interopRequireDefault(_activeHeader);
	
	var _area = __webpack_require__(275);
	
	var _area2 = _interopRequireDefault(_area);
	
	var _cell = __webpack_require__(276);
	
	var _cell2 = _interopRequireDefault(_cell);
	
	var _customSelection = __webpack_require__(277);
	
	var _customSelection2 = _interopRequireDefault(_customSelection);
	
	var _fill = __webpack_require__(278);
	
	var _fill2 = _interopRequireDefault(_fill);
	
	var _header = __webpack_require__(279);
	
	var _header2 = _interopRequireDefault(_header);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _staticRegister = (0, _staticRegister3.default)('highlight/types'),
	    register = _staticRegister.register,
	    getItem = _staticRegister.getItem; /* eslint-disable import/prefer-default-export */
	
	
	register('active-header', _activeHeader2.default);
	register('area', _area2.default);
	register('cell', _cell2.default);
	register('custom-selection', _customSelection2.default);
	register('fill', _fill2.default);
	register('header', _header2.default);
	
	function createHighlight(highlightType, options) {
	  return getItem(highlightType)(options);
	}
	
	exports.createHighlight = createHighlight;
	
	/***/ }),
	/* 274 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * @return {Selection}
	 */
	function createHighlight(_ref) {
	  var activeHeaderClassName = _ref.activeHeaderClassName;
	
	  var s = new _src.Selection({
	    highlightHeaderClassName: activeHeaderClassName
	  });
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 275 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * Creates the new instance of Selection responsible for highlighting area of the selected multiple cells.
	 *
	 * @return {Selection}
	 */
	function createHighlight(_ref) {
	  var layerLevel = _ref.layerLevel,
	      areaCornerVisible = _ref.areaCornerVisible;
	
	  var s = new _src.Selection({
	    className: 'area',
	    markIntersections: true,
	    layerLevel: Math.min(layerLevel, 7),
	    border: {
	      width: 1,
	      color: '#4b89ff',
	      cornerVisible: areaCornerVisible
	    }
	  });
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 276 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * Creates the new instance of Selection responsible for highlighting currently selected cell. This type of selection
	 * can present on the table only one at the time.
	 *
	 * @return {Selection}
	 */
	function createHighlight(_ref) {
	  var cellCornerVisible = _ref.cellCornerVisible;
	
	  var s = new _src.Selection({
	    className: 'current',
	    border: {
	      width: 2,
	      color: '#4b89ff',
	      cornerVisible: cellCornerVisible
	    }
	  });
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 277 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * Creates the new instance of Selection responsible for highlighting currently selected cell. This type of selection
	 * can present on the table only one at the time.
	 *
	 * @return {Selection}
	 */
	function createHighlight(_ref) {
	  var border = _ref.border,
	      cellRange = _ref.cellRange;
	
	  var s = new _src.Selection(border, cellRange);
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 278 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * Creates the new instance of Selection, responsible for highlighting cells which are covered by fill handle
	 * functionality. This type of selection can present on the table only one at the time.
	 *
	 * @return {Selection}
	 */
	function createHighlight() {
	  var s = new _src.Selection({
	    className: 'fill',
	    border: {
	      width: 1,
	      color: '#ff0000'
	    }
	  });
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 279 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _src = __webpack_require__(4);
	
	/**
	 * Creates the new instance of Selection, responsible for highlighting row and column headers. This type of selection
	 * can occur multiple times.
	 *
	 * @return {Selection}
	 */
	function createHighlight(_ref) {
	  var headerClassName = _ref.headerClassName,
	      rowClassName = _ref.rowClassName,
	      columnClassName = _ref.columnClassName;
	
	  var s = new _src.Selection({
	    className: 'highlight',
	    highlightHeaderClassName: headerClassName,
	    highlightRowClassName: rowClassName,
	    highlightColumnClassName: columnClassName
	  });
	
	  return s;
	}
	
	exports.default = createHighlight;
	
	/***/ }),
	/* 280 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _templateObject = _taggedTemplateLiteral(['Unsupported format of the selection ranges was passed. To select cells pass \n        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd, columnEnd/columnPropEnd]]) \n        or as an array of CellRange objects.'], ['Unsupported format of the selection ranges was passed. To select cells pass \n        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd, columnEnd/columnPropEnd]]) \n        or as an array of CellRange objects.']);
	
	var _highlight = __webpack_require__(202);
	
	var _highlight2 = _interopRequireDefault(_highlight);
	
	var _range = __webpack_require__(281);
	
	var _range2 = _interopRequireDefault(_range);
	
	var _src = __webpack_require__(4);
	
	var _keyStateObserver = __webpack_require__(200);
	
	var _object = __webpack_require__(1);
	
	var _mixed = __webpack_require__(11);
	
	var _array = __webpack_require__(2);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	var _transformation = __webpack_require__(282);
	
	var _transformation2 = _interopRequireDefault(_transformation);
	
	var _utils = __webpack_require__(72);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Selection
	 * @util
	 */
	var Selection = function () {
	  function Selection(settings, tableProps) {
	    var _this = this;
	
	    _classCallCheck(this, Selection);
	
	    /**
	     * Handsontable settings instance.
	     *
	     * @type {GridSettings}
	     */
	    this.settings = settings;
	    /**
	     * An additional object with dynamically defined properties which describes table state.
	     *
	     * @type {Object}
	     */
	    this.tableProps = tableProps;
	    /**
	     * The flag which determines if the selection is in progress.
	     *
	     * @type {Boolean}
	     */
	    this.inProgress = false;
	    /**
	     * The flag indicates that selection was performed by clicking the corner overlay.
	     *
	     * @type {Boolean}
	     */
	    this.selectedByCorner = false;
	    /**
	     * The collection of the selection layer levels where the whole row was selected using the row header.
	     *
	     * @type {Set.<Number>}
	     */
	    this.selectedByRowHeader = new Set();
	    /**
	     * The collection of the selection layer levels where the whole column was selected using the column header.
	     *
	     * @type {Set.<Number>}
	     */
	    this.selectedByColumnHeader = new Set();
	    /**
	     * Selection data layer.
	     *
	     * @type {SelectionRange}
	     */
	    this.selectedRange = new _range2.default();
	    /**
	     * Visualization layer.
	     *
	     * @type {Highlight}
	     */
	    this.highlight = new _highlight2.default({
	      headerClassName: settings.currentHeaderClassName,
	      activeHeaderClassName: settings.activeHeaderClassName,
	      rowClassName: settings.currentRowClassName,
	      columnClassName: settings.currentColClassName,
	      disableHighlight: this.settings.disableVisualSelection,
	      cellCornerVisible: function cellCornerVisible() {
	        return _this.isCellCornerVisible.apply(_this, arguments);
	      },
	      areaCornerVisible: function areaCornerVisible() {
	        return _this.isAreaCornerVisible.apply(_this, arguments);
	      }
	    });
	    /**
	     * The module for modifying coordinates.
	     *
	     * @type {Transformation}
	     */
	    this.transformation = new _transformation2.default(this.selectedRange, {
	      countRows: function countRows() {
	        return _this.tableProps.countRows();
	      },
	      countCols: function countCols() {
	        return _this.tableProps.countCols();
	      },
	      fixedRowsBottom: function fixedRowsBottom() {
	        return settings.fixedRowsBottom;
	      },
	      minSpareRows: function minSpareRows() {
	        return settings.minSpareRows;
	      },
	      minSpareCols: function minSpareCols() {
	        return settings.minSpareCols;
	      },
	      autoWrapRow: function autoWrapRow() {
	        return settings.autoWrapRow;
	      },
	      autoWrapCol: function autoWrapCol() {
	        return settings.autoWrapCol;
	      }
	    });
	
	    this.transformation.addLocalHook('beforeTransformStart', function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['beforeModifyTransformStart'].concat(args));
	    });
	    this.transformation.addLocalHook('afterTransformStart', function () {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['afterModifyTransformStart'].concat(args));
	    });
	    this.transformation.addLocalHook('beforeTransformEnd', function () {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['beforeModifyTransformEnd'].concat(args));
	    });
	    this.transformation.addLocalHook('afterTransformEnd', function () {
	      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['afterModifyTransformEnd'].concat(args));
	    });
	    this.transformation.addLocalHook('insertRowRequire', function () {
	      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['insertRowRequire'].concat(args));
	    });
	    this.transformation.addLocalHook('insertColRequire', function () {
	      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }
	
	      return _this.runLocalHooks.apply(_this, ['insertColRequire'].concat(args));
	    });
	  }
	
	  /**
	   * Get data layer for current selection.
	   *
	   * @return {SelectionRange}
	   */
	
	
	  _createClass(Selection, [{
	    key: 'getSelectedRange',
	    value: function getSelectedRange() {
	      return this.selectedRange;
	    }
	
	    /**
	     * Indicate that selection process began. It sets internaly `.inProgress` property to `true`.
	     */
	
	  }, {
	    key: 'begin',
	    value: function begin() {
	      this.inProgress = true;
	    }
	
	    /**
	     * Indicate that selection process finished. It sets internaly `.inProgress` property to `false`.
	     */
	
	  }, {
	    key: 'finish',
	    value: function finish() {
	      this.runLocalHooks('afterSelectionFinished', Array.from(this.selectedRange));
	      this.inProgress = false;
	    }
	
	    /**
	     * Check if the process of selecting the cell/cells is in progress.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isInProgress',
	    value: function isInProgress() {
	      return this.inProgress;
	    }
	
	    /**
	     * Starts selection range on given coordinate object.
	     *
	     * @param {CellCoords} coords Visual coords.
	     * @param {Boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
	     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
	     *                                      the default trigger will be used (isPressedCtrlKey() helper).
	     * @param {Boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the
	     *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.
	     */
	
	  }, {
	    key: 'setRangeStart',
	    value: function setRangeStart(coords, multipleSelection) {
	      var fragment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	      var isMultipleMode = this.settings.selectionMode === 'multiple';
	      var isMultipleSelection = (0, _mixed.isUndefined)(multipleSelection) ? (0, _keyStateObserver.isPressedCtrlKey)() : multipleSelection;
	      var isRowNegative = coords.row < 0;
	      var isColumnNegative = coords.col < 0;
	      var selectedByCorner = isRowNegative && isColumnNegative;
	
	      if (isRowNegative) {
	        coords.row = 0;
	      }
	      if (isColumnNegative) {
	        coords.col = 0;
	      }
	
	      this.selectedByCorner = selectedByCorner;
	      this.runLocalHooks('beforeSetRangeStart' + (fragment ? 'Only' : ''), coords);
	
	      if (!isMultipleMode || isMultipleMode && !isMultipleSelection && (0, _mixed.isUndefined)(multipleSelection)) {
	        this.selectedRange.clear();
	      }
	
	      this.selectedRange.add(coords);
	
	      if (this.getLayerLevel() === 0) {
	        this.selectedByRowHeader.clear();
	        this.selectedByColumnHeader.clear();
	      }
	
	      if (!selectedByCorner && isColumnNegative) {
	        this.selectedByRowHeader.add(this.getLayerLevel());
	      }
	      if (!selectedByCorner && isRowNegative) {
	        this.selectedByColumnHeader.add(this.getLayerLevel());
	      }
	
	      if (!fragment) {
	        this.setRangeEnd(coords);
	      }
	    }
	
	    /**
	     * Starts selection range on given coordinate object.
	     *
	     * @param {CellCoords} coords Visual coords.
	     * @param {Boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
	     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
	     *                                      the default trigger will be used (isPressedCtrlKey() helper).
	     */
	
	  }, {
	    key: 'setRangeStartOnly',
	    value: function setRangeStartOnly(coords, multipleSelection) {
	      this.setRangeStart(coords, multipleSelection, true);
	    }
	
	    /**
	     * Ends selection range on given coordinate object.
	     *
	     * @param {CellCoords} coords Visual coords.
	     */
	
	  }, {
	    key: 'setRangeEnd',
	    value: function setRangeEnd(coords) {
	      if (this.selectedRange.isEmpty()) {
	        return;
	      }
	
	      this.runLocalHooks('beforeSetRangeEnd', coords);
	      this.begin();
	
	      var cellRange = this.selectedRange.current();
	
	      if (this.settings.selectionMode !== 'single') {
	        cellRange.setTo(new _src.CellCoords(coords.row, coords.col));
	      }
	
	      // Set up current selection.
	      this.highlight.getCell().clear();
	
	      if (this.highlight.isEnabledFor(_highlight.CELL_TYPE)) {
	        this.highlight.getCell().add(this.selectedRange.current().highlight);
	      }
	
	      var layerLevel = this.getLayerLevel();
	
	      // If the next layer level is lower than previous then clear all area and header highlights. This is the
	      // indication that the new selection is performing.
	      if (layerLevel < this.highlight.layerLevel) {
	        (0, _array.arrayEach)(this.highlight.getAreas(), function (highlight) {
	          return void highlight.clear();
	        });
	        (0, _array.arrayEach)(this.highlight.getHeaders(), function (highlight) {
	          return void highlight.clear();
	        });
	        (0, _array.arrayEach)(this.highlight.getActiveHeaders(), function (highlight) {
	          return void highlight.clear();
	        });
	      }
	
	      this.highlight.useLayerLevel(layerLevel);
	
	      var areaHighlight = this.highlight.createOrGetArea();
	      var headerHighlight = this.highlight.createOrGetHeader();
	      var activeHeaderHighlight = this.highlight.createOrGetActiveHeader();
	
	      areaHighlight.clear();
	      headerHighlight.clear();
	      activeHeaderHighlight.clear();
	
	      if (this.highlight.isEnabledFor(_highlight.AREA_TYPE) && (this.isMultiple() || layerLevel >= 1)) {
	        areaHighlight.add(cellRange.from).add(cellRange.to);
	
	        if (layerLevel === 1) {
	          // For single cell selection in the same layer, we do not create area selection to prevent blue background.
	          // When non-consecutive selection is performed we have to add that missing area selection to the previous layer
	          // based on previous coordinates. It only occurs when the previous selection wasn't select multiple cells.
	          this.highlight.useLayerLevel(layerLevel - 1).createOrGetArea().add(this.selectedRange.previous().from);
	
	          this.highlight.useLayerLevel(layerLevel);
	        }
	      }
	
	      if (this.highlight.isEnabledFor(_highlight.HEADER_TYPE)) {
	        if (this.settings.selectionMode === 'single') {
	          headerHighlight.add(cellRange.highlight);
	        } else {
	          headerHighlight.add(cellRange.from).add(cellRange.to);
	        }
	      }
	
	      if (this.isSelectedByRowHeader()) {
	        var isRowSelected = this.tableProps.countCols() === cellRange.getWidth();
	
	        // Make sure that the whole row is selected (in case where selectionMode is set to 'single')
	        if (isRowSelected) {
	          activeHeaderHighlight.add(new _src.CellCoords(cellRange.from.row, -1)).add(new _src.CellCoords(cellRange.to.row, -1));
	        }
	      }
	
	      if (this.isSelectedByColumnHeader()) {
	        var isColumnSelected = this.tableProps.countRows() === cellRange.getHeight();
	
	        // Make sure that the whole column is selected (in case where selectionMode is set to 'single')
	        if (isColumnSelected) {
	          activeHeaderHighlight.add(new _src.CellCoords(-1, cellRange.from.col)).add(new _src.CellCoords(-1, cellRange.to.col));
	        }
	      }
	
	      this.runLocalHooks('afterSetRangeEnd', coords);
	    }
	
	    /**
	     * Returns information if we have a multiselection. This method check multiselection only on the latest layer of
	     * the selection.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isMultiple',
	    value: function isMultiple() {
	      var isMultipleListener = (0, _object.createObjectPropListener)(!this.selectedRange.current().isSingle());
	
	      this.runLocalHooks('afterIsMultipleSelection', isMultipleListener);
	
	      return isMultipleListener.value;
	    }
	
	    /**
	     * Selects cell relative to the current cell (if possible).
	     *
	     * @param {Number} rowDelta Rows number to move, value can be passed as negative number.
	     * @param {Number} colDelta Columns number to move, value can be passed as negative number.
	     * @param {Boolean} force If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
	     *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
	     */
	
	  }, {
	    key: 'transformStart',
	    value: function transformStart(rowDelta, colDelta, force) {
	      this.setRangeStart(this.transformation.transformStart(rowDelta, colDelta, force));
	    }
	
	    /**
	     * Sets selection end cell relative to the current selection end cell (if possible).
	     *
	     * @param {Number} rowDelta Rows number to move, value can be passed as negative number.
	     * @param {Number} colDelta Columns number to move, value can be passed as negative number.
	     */
	
	  }, {
	    key: 'transformEnd',
	    value: function transformEnd(rowDelta, colDelta) {
	      this.setRangeEnd(this.transformation.transformEnd(rowDelta, colDelta));
	    }
	
	    /**
	     * Returns currently used layer level.
	     *
	     * @return {Number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.
	     */
	
	  }, {
	    key: 'getLayerLevel',
	    value: function getLayerLevel() {
	      return this.selectedRange.size() - 1;
	    }
	
	    /**
	     * Returns `true` if currently there is a selection on the screen, `false` otherwise.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSelected',
	    value: function isSelected() {
	      return !this.selectedRange.isEmpty();
	    }
	
	    /**
	     * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`
	     * argument is passed then only that layer will be checked. Otherwise, it checks if any row header
	     * was clicked on any selection layer level.
	     *
	     * @param {Number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isSelectedByRowHeader',
	    value: function isSelectedByRowHeader() {
	      var layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();
	
	      return layerLevel === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(layerLevel);
	    }
	
	    /**
	     * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`
	     * argument is passed then only that layer will be checked. Otherwise, it checks if any column header
	     * was clicked on any selection layer level.
	     *
	     * @param {Number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isSelectedByColumnHeader',
	    value: function isSelectedByColumnHeader() {
	      var layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();
	
	      return layerLevel === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(layerLevel);
	    }
	
	    /**
	     * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.
	     *
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isSelectedByAnyHeader',
	    value: function isSelectedByAnyHeader() {
	      return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1);
	    }
	
	    /**
	     * Returns `true` if the selection was applied by clicking on the left-top corner overlay.
	     *
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isSelectedByCorner',
	    value: function isSelectedByCorner() {
	      return this.selectedByCorner;
	    }
	
	    /**
	     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
	     * the coords object is within selection range.
	     *
	     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'inInSelection',
	    value: function inInSelection(coords) {
	      return this.selectedRange.includes(coords);
	    }
	
	    /**
	     * Returns `true` if the cell corner should be visible.
	     *
	     * @private
	     * @return {Boolean} `true` if the corner element has to be visible, `false` otherwise.
	     */
	
	  }, {
	    key: 'isCellCornerVisible',
	    value: function isCellCornerVisible() {
	      return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();
	    }
	
	    /**
	     * Returns `true` if the area corner should be visible.
	     *
	     * @param {Number} layerLevel The layer level.
	     * @return {Boolean} `true` if the corner element has to be visible, `false` otherwise.
	     */
	
	  }, {
	    key: 'isAreaCornerVisible',
	    value: function isAreaCornerVisible(layerLevel) {
	      if (Number.isInteger(layerLevel) && layerLevel !== this.getLayerLevel()) {
	        return false;
	      }
	
	      return this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();
	    }
	
	    /**
	     * Clear the selection by resetting the collected ranges and highlights.
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.selectedRange.clear();
	      this.highlight.clear();
	    }
	
	    /**
	     * Deselects all selected cells.
	     */
	
	  }, {
	    key: 'deselect',
	    value: function deselect() {
	      if (!this.isSelected()) {
	        return;
	      }
	
	      this.inProgress = false;
	      this.clear();
	      this.runLocalHooks('afterDeselect');
	    }
	
	    /**
	     * Select all cells.
	     */
	
	  }, {
	    key: 'selectAll',
	    value: function selectAll() {
	      this.clear();
	      this.setRangeStart(new _src.CellCoords(-1, -1));
	      this.selectedByRowHeader.add(this.getLayerLevel());
	      this.selectedByColumnHeader.add(this.getLayerLevel());
	      this.setRangeEnd(new _src.CellCoords(this.tableProps.countRows() - 1, this.tableProps.countCols() - 1));
	    }
	
	    /**
	     * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
	     * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such
	     * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.
	     * If the passed ranges have another format the exception will be thrown.
	     *
	     * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.
	     * @return {Boolean} Returns `true` if selection was successful, `false` otherwise.
	     */
	
	  }, {
	    key: 'selectCells',
	    value: function selectCells(selectionRanges) {
	      var _this2 = this;
	
	      var selectionType = (0, _utils.detectSelectionType)(selectionRanges);
	
	      if (selectionType === _utils.SELECTION_TYPE_EMPTY) {
	        return false;
	      } else if (selectionType === _utils.SELECTION_TYPE_UNRECOGNIZED) {
	        throw new Error((0, _templateLiteralTag.toSingleLine)(_templateObject));
	      }
	
	      var selectionSchemaNormalizer = (0, _utils.normalizeSelectionFactory)(selectionType, {
	        propToCol: function propToCol(prop) {
	          return _this2.tableProps.propToCol(prop);
	        },
	        keepDirection: true
	      });
	      var countRows = this.tableProps.countRows();
	      var countCols = this.tableProps.countCols();
	
	      // Check if every layer of the coordinates are valid.
	      var isValid = !selectionRanges.some(function (selection) {
	        var _selectionSchemaNorma = selectionSchemaNormalizer(selection),
	            _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),
	            rowStart = _selectionSchemaNorma2[0],
	            columnStart = _selectionSchemaNorma2[1],
	            rowEnd = _selectionSchemaNorma2[2],
	            columnEnd = _selectionSchemaNorma2[3];
	
	        var _isValid = (0, _utils.isValidCoord)(rowStart, countRows) && (0, _utils.isValidCoord)(columnStart, countCols) && (0, _utils.isValidCoord)(rowEnd, countRows) && (0, _utils.isValidCoord)(columnEnd, countCols);
	
	        return !_isValid;
	      });
	
	      if (isValid) {
	        this.clear();
	
	        (0, _array.arrayEach)(selectionRanges, function (selection) {
	          var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),
	              _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 4),
	              rowStart = _selectionSchemaNorma4[0],
	              columnStart = _selectionSchemaNorma4[1],
	              rowEnd = _selectionSchemaNorma4[2],
	              columnEnd = _selectionSchemaNorma4[3];
	
	          _this2.setRangeStartOnly(new _src.CellCoords(rowStart, columnStart), false);
	          _this2.setRangeEnd(new _src.CellCoords(rowEnd, columnEnd));
	          _this2.finish();
	        });
	      }
	
	      return isValid;
	    }
	
	    /**
	     * Select column specified by `startColumn` visual index or column property or a range of columns finishing at `endColumn`.
	     *
	     * @param {Number|String} startColumn Visual column index or column property from which the selection starts.
	     * @param {Number|String} [endColumn] Visual column index or column property from to the selection finishes.
	     * @returns {Boolean} Returns `true` if selection was successful, `false` otherwise.
	     */
	
	  }, {
	    key: 'selectColumns',
	    value: function selectColumns(startColumn) {
	      var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;
	
	      var start = typeof startColumn === 'string' ? this.tableProps.propToCol(startColumn) : startColumn;
	      var end = typeof endColumn === 'string' ? this.tableProps.propToCol(endColumn) : endColumn;
	
	      var countCols = this.tableProps.countCols();
	      var isValid = (0, _utils.isValidCoord)(start, countCols) && (0, _utils.isValidCoord)(end, countCols);
	
	      if (isValid) {
	        this.setRangeStartOnly(new _src.CellCoords(-1, start));
	        this.setRangeEnd(new _src.CellCoords(this.tableProps.countRows() - 1, end));
	        this.finish();
	      }
	
	      return isValid;
	    }
	
	    /**
	     * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
	     *
	     * @param {Number} startRow Visual row index from which the selection starts.
	     * @param {Number} [endRow] Visual row index from to the selection finishes.
	     * @returns {Boolean} Returns `true` if selection was successful, `false` otherwise.
	     */
	
	  }, {
	    key: 'selectRows',
	    value: function selectRows(startRow) {
	      var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;
	
	      var countRows = this.tableProps.countRows();
	      var isValid = (0, _utils.isValidCoord)(startRow, countRows) && (0, _utils.isValidCoord)(endRow, countRows);
	
	      if (isValid) {
	        this.setRangeStartOnly(new _src.CellCoords(startRow, -1));
	        this.setRangeEnd(new _src.CellCoords(endRow, this.tableProps.countCols() - 1));
	        this.finish();
	      }
	
	      return isValid;
	    }
	  }]);
	
	  return Selection;
	}();
	
	(0, _object.mixin)(Selection, _localHooks2.default);
	
	exports.default = Selection;
	
	/***/ }),
	/* 281 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _src = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The SelectionRange class is a simple CellRanges collection designed for easy manipulation of the multiple
	 * consecutive and non-consecutive selections.
	 *
	 * @class SelectionRange
	 * @util
	 */
	var SelectionRange = function () {
	  function SelectionRange() {
	    _classCallCheck(this, SelectionRange);
	
	    /**
	     * List of all CellRanges added to the class instance.
	     *
	     * @type {CellRange[]}
	     */
	    this.ranges = [];
	  }
	
	  /**
	   * Check if selected range is empty.
	   *
	   * @return {Boolean}
	   */
	
	
	  _createClass(SelectionRange, [{
	    key: 'isEmpty',
	    value: function isEmpty() {
	      return this.size() === 0;
	    }
	
	    /**
	     * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`
	     * to the collection.
	     *
	     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
	     * @returns {SelectionRange}
	     */
	
	  }, {
	    key: 'set',
	    value: function set(coords) {
	      this.clear();
	      this.ranges.push(new _src.CellRange(coords));
	
	      return this;
	    }
	
	    /**
	     * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.
	     *
	     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
	     * @returns {SelectionRange}
	     */
	
	  }, {
	    key: 'add',
	    value: function add(coords) {
	      this.ranges.push(new _src.CellRange(coords));
	
	      return this;
	    }
	
	    /**
	     * Get last added coordinates from ranges, it returns a CellRange instance.
	     *
	     * @return {CellRange|undefined}
	     */
	
	  }, {
	    key: 'current',
	    value: function current() {
	      return this.peekByIndex(0);
	    }
	
	    /**
	     * Get previously added coordinates from ranges, it returns a CellRange instance.
	     *
	     * @return {CellRange|undefined}
	     */
	
	  }, {
	    key: 'previous',
	    value: function previous() {
	      return this.peekByIndex(-1);
	    }
	
	    /**
	     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
	     * the coords object is within selection range.
	     *
	     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'includes',
	    value: function includes(coords) {
	      return this.ranges.some(function (cellRange) {
	        return cellRange.includes(coords);
	      });
	    }
	
	    /**
	     * Clear collection.
	     *
	     * @return {SelectionRange}
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.ranges.length = 0;
	
	      return this;
	    }
	
	    /**
	     * Get count of added all coordinates added to the selection.
	     *
	     * @return {Number}
	     */
	
	  }, {
	    key: 'size',
	    value: function size() {
	      return this.ranges.length;
	    }
	
	    /**
	     * Peek the coordinates based on the offset where that coordinate resides in the collection.
	     *
	     * @param {Number} [offset=0] An offset where the coordinate will be retrieved from.
	     * @return {CellRange|undefined}
	     */
	
	  }, {
	    key: 'peekByIndex',
	    value: function peekByIndex() {
	      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      var rangeIndex = this.size() + offset - 1;
	      var cellRange = void 0;
	
	      if (rangeIndex >= 0) {
	        cellRange = this.ranges[rangeIndex];
	      }
	
	      return cellRange;
	    }
	  }, {
	    key: Symbol.iterator,
	    value: function value() {
	      return this.ranges[Symbol.iterator]();
	    }
	  }]);
	
	  return SelectionRange;
	}();
	
	exports.default = SelectionRange;
	
	/***/ }),
	/* 282 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _src = __webpack_require__(4);
	
	var _object = __webpack_require__(1);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Transformation class implements algorithms for transforming coordinates based on current settings
	 * passed to the Handsontable.
	 *
	 * Transformation is always applied relative to the current selection.
	 *
	 * @class Transformation
	 * @util
	 */
	var Transformation = function () {
	  function Transformation(range, options) {
	    _classCallCheck(this, Transformation);
	
	    /**
	     * Instance of the SelectionRange, holder for coordinates applied to the table.
	     *
	     * @type {SelectionRange}
	     */
	    this.range = range;
	    /**
	     * Additional options which define the state of the settings which can infer transformation.
	     *
	     * @type {Object}
	     */
	    this.options = options;
	  }
	
	  /**
	   * Selects cell relative to current cell (if possible).
	   *
	   * @param {Number} rowDelta Rows number to move, value can be passed as negative number.
	   * @param {Number} colDelta Columns number to move, value can be passed as negative number.
	   * @param {Boolean} force If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
	   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
	   * @returns {CellCoords}
	   */
	
	
	  _createClass(Transformation, [{
	    key: 'transformStart',
	    value: function transformStart(rowDelta, colDelta, force) {
	      var delta = new _src.CellCoords(rowDelta, colDelta);
	
	      this.runLocalHooks('beforeTransformStart', delta);
	
	      var totalRows = this.options.countRows();
	      var totalCols = this.options.countCols();
	      var fixedRowsBottom = this.options.fixedRowsBottom();
	      var minSpareRows = this.options.minSpareRows();
	      var minSpareCols = this.options.minSpareCols();
	      var autoWrapRow = this.options.autoWrapRow();
	      var autoWrapCol = this.options.autoWrapCol();
	      var highlightCoords = this.range.current().highlight;
	
	      if (highlightCoords.row + rowDelta > totalRows - 1) {
	        if (force && minSpareRows > 0 && !(fixedRowsBottom && highlightCoords.row >= totalRows - fixedRowsBottom - 1)) {
	          this.runLocalHooks('insertRowRequire', totalRows);
	          totalRows = this.options.countRows();
	        } else if (autoWrapCol) {
	          delta.row = 1 - totalRows;
	          delta.col = highlightCoords.col + delta.col === totalCols - 1 ? 1 - totalCols : 1;
	        }
	      } else if (autoWrapCol && highlightCoords.row + delta.row < 0 && highlightCoords.col + delta.col >= 0) {
	        delta.row = totalRows - 1;
	        delta.col = highlightCoords.col + delta.col === 0 ? totalCols - 1 : -1;
	      }
	
	      if (highlightCoords.col + delta.col > totalCols - 1) {
	        if (force && minSpareCols > 0) {
	          this.runLocalHooks('insertColRequire', totalCols);
	          totalCols = this.options.countCols();
	        } else if (autoWrapRow) {
	          delta.row = highlightCoords.row + delta.row === totalRows - 1 ? 1 - totalRows : 1;
	          delta.col = 1 - totalCols;
	        }
	      } else if (autoWrapRow && highlightCoords.col + delta.col < 0 && highlightCoords.row + delta.row >= 0) {
	        delta.row = highlightCoords.row + delta.row === 0 ? totalRows - 1 : -1;
	        delta.col = totalCols - 1;
	      }
	
	      var coords = new _src.CellCoords(highlightCoords.row + delta.row, highlightCoords.col + delta.col);
	      var rowTransformDir = 0;
	      var colTransformDir = 0;
	
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      this.runLocalHooks('afterTransformStart', coords, rowTransformDir, colTransformDir);
	
	      return coords;
	    }
	
	    /**
	     * Sets selection end cell relative to current selection end cell (if possible).
	     *
	     * @param {Number} rowDelta Rows number to move, value can be passed as negative number.
	     * @param {Number} colDelta Columns number to move, value can be passed as negative number.
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'transformEnd',
	    value: function transformEnd(rowDelta, colDelta) {
	      var delta = new _src.CellCoords(rowDelta, colDelta);
	
	      this.runLocalHooks('beforeTransformEnd', delta);
	
	      var totalRows = this.options.countRows();
	      var totalCols = this.options.countCols();
	      var cellRange = this.range.current();
	      var coords = new _src.CellCoords(cellRange.to.row + delta.row, cellRange.to.col + delta.col);
	      var rowTransformDir = 0;
	      var colTransformDir = 0;
	
	      if (coords.row < 0) {
	        rowTransformDir = -1;
	        coords.row = 0;
	      } else if (coords.row > 0 && coords.row >= totalRows) {
	        rowTransformDir = 1;
	        coords.row = totalRows - 1;
	      }
	
	      if (coords.col < 0) {
	        colTransformDir = -1;
	        coords.col = 0;
	      } else if (coords.col > 0 && coords.col >= totalCols) {
	        colTransformDir = 1;
	        coords.col = totalCols - 1;
	      }
	      this.runLocalHooks('afterTransformEnd', coords, rowTransformDir, colTransformDir);
	
	      return coords;
	    }
	  }]);
	
	  return Transformation;
	}();
	
	(0, _object.mixin)(Transformation, _localHooks2.default);
	
	exports.default = Transformation;
	
	/***/ }),
	/* 283 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = jQueryWrapper;
	function jQueryWrapper(Handsontable) {
	  var jQuery = typeof window === 'undefined' ? false : window.jQuery;
	
	  if (!jQuery) {
	    return;
	  }
	
	  jQuery.fn.handsontable = function (action) {
	    var $this = this.first(); // Use only first element from list
	    var instance = $this.data('handsontable');
	
	    // Init case
	    if (typeof action !== 'string') {
	      var userSettings = action || {};
	
	      if (instance) {
	        instance.updateSettings(userSettings);
	      } else {
	        instance = new Handsontable.Core($this[0], userSettings);
	        $this.data('handsontable', instance);
	        instance.init();
	      }
	
	      return $this;
	    }
	
	    var output = void 0;
	
	    // Action case
	    if (instance) {
	      if (typeof instance[action] !== 'undefined') {
	        var _instance$action;
	
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }
	
	        output = (_instance$action = instance[action]).call.apply(_instance$action, [instance].concat(args));
	
	        if (action === 'destroy') {
	          $this.removeData();
	        }
	      } else {
	        throw new Error('Handsontable do not provide action: ' + action);
	      }
	    }
	
	    return output;
	  };
	}
	
	/***/ }),
	/* 284 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.Base = exports.UndoRedo = exports.TouchScroll = exports.Search = exports.PersistentState = exports.ObserveChanges = exports.MultipleSelectionHandles = exports.MergeCells = exports.ManualRowResize = exports.ManualRowMove = exports.ManualColumnResize = exports.ManualColumnMove = exports.ManualColumnFreeze = exports.DragToScroll = exports.CustomBorders = exports.CopyPaste = exports.ContextMenu = exports.Comments = exports.ColumnSorting = exports.AutoRowSize = exports.AutoFill = exports.AutoColumnSize = undefined;
	
	var _persistentState = __webpack_require__(285);
	
	var _persistentState2 = _interopRequireDefault(_persistentState);
	
	var _autoColumnSize = __webpack_require__(287);
	
	var _autoColumnSize2 = _interopRequireDefault(_autoColumnSize);
	
	var _autofill = __webpack_require__(288);
	
	var _autofill2 = _interopRequireDefault(_autofill);
	
	var _autoRowSize = __webpack_require__(290);
	
	var _autoRowSize2 = _interopRequireDefault(_autoRowSize);
	
	var _columnSorting = __webpack_require__(291);
	
	var _columnSorting2 = _interopRequireDefault(_columnSorting);
	
	var _comments = __webpack_require__(298);
	
	var _comments2 = _interopRequireDefault(_comments);
	
	var _contextMenu = __webpack_require__(302);
	
	var _contextMenu2 = _interopRequireDefault(_contextMenu);
	
	var _copyPaste = __webpack_require__(319);
	
	var _copyPaste2 = _interopRequireDefault(_copyPaste);
	
	var _customBorders = __webpack_require__(326);
	
	var _customBorders2 = _interopRequireDefault(_customBorders);
	
	var _dragToScroll = __webpack_require__(333);
	
	var _dragToScroll2 = _interopRequireDefault(_dragToScroll);
	
	var _manualColumnFreeze = __webpack_require__(334);
	
	var _manualColumnFreeze2 = _interopRequireDefault(_manualColumnFreeze);
	
	var _manualColumnMove = __webpack_require__(338);
	
	var _manualColumnMove2 = _interopRequireDefault(_manualColumnMove);
	
	var _manualColumnResize = __webpack_require__(343);
	
	var _manualColumnResize2 = _interopRequireDefault(_manualColumnResize);
	
	var _manualRowMove = __webpack_require__(344);
	
	var _manualRowMove2 = _interopRequireDefault(_manualRowMove);
	
	var _manualRowResize = __webpack_require__(349);
	
	var _manualRowResize2 = _interopRequireDefault(_manualRowResize);
	
	var _mergeCells = __webpack_require__(350);
	
	var _mergeCells2 = _interopRequireDefault(_mergeCells);
	
	var _multipleSelectionHandles = __webpack_require__(356);
	
	var _multipleSelectionHandles2 = _interopRequireDefault(_multipleSelectionHandles);
	
	var _observeChanges = __webpack_require__(357);
	
	var _observeChanges2 = _interopRequireDefault(_observeChanges);
	
	var _search = __webpack_require__(361);
	
	var _search2 = _interopRequireDefault(_search);
	
	var _touchScroll = __webpack_require__(362);
	
	var _touchScroll2 = _interopRequireDefault(_touchScroll);
	
	var _undoRedo = __webpack_require__(363);
	
	var _undoRedo2 = _interopRequireDefault(_undoRedo);
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.AutoColumnSize = _autoColumnSize2.default;
	exports.AutoFill = _autofill2.default;
	exports.AutoRowSize = _autoRowSize2.default;
	exports.ColumnSorting = _columnSorting2.default;
	exports.Comments = _comments2.default;
	exports.ContextMenu = _contextMenu2.default;
	exports.CopyPaste = _copyPaste2.default;
	exports.CustomBorders = _customBorders2.default;
	exports.DragToScroll = _dragToScroll2.default;
	exports.ManualColumnFreeze = _manualColumnFreeze2.default;
	exports.ManualColumnMove = _manualColumnMove2.default;
	exports.ManualColumnResize = _manualColumnResize2.default;
	exports.ManualRowMove = _manualRowMove2.default;
	exports.ManualRowResize = _manualRowResize2.default;
	exports.MergeCells = _mergeCells2.default;
	exports.MultipleSelectionHandles = _multipleSelectionHandles2.default;
	exports.ObserveChanges = _observeChanges2.default;
	exports.PersistentState = _persistentState2.default;
	exports.Search = _search2.default;
	exports.TouchScroll = _touchScroll2.default;
	exports.UndoRedo = _undoRedo2.default;
	exports.Base = _base2.default;
	
	/***/ }),
	/* 285 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _storage = __webpack_require__(286);
	
	var _storage2 = _interopRequireDefault(_storage);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('persistentStateSave');
	_pluginHooks2.default.getSingleton().register('persistentStateLoad');
	_pluginHooks2.default.getSingleton().register('persistentStateReset');
	
	/**
	 * @plugin PersistentState
	 *
	 * @description
	 * Save the state of column sorting, column positions and column sizes in local storage to preserve table state
	 * between page reloads.
	 *
	 * In order to enable data storage mechanism, {@link Options#persistentState} option must be set to `true`.
	 *
	 * When persistentState is enabled it exposes 3 hooks:
	 * - {@link Hooks#persistentStateSave} - Saves value under given key in browser local storage.
	 * - {@link Hooks#persistentStateLoad} - Loads value, saved under given key, from browser local storage. The loaded
	 * value will be saved in `saveTo.value`.
	 * - {@link Hooks#persistentStateReset} - Clears the value saved under key. If no key is given, all values associated
	 * with table will be cleared.
	 */
	
	var PersistentState = function (_BasePlugin) {
	  _inherits(PersistentState, _BasePlugin);
	
	  function PersistentState(hotInstance) {
	    _classCallCheck(this, PersistentState);
	
	    /**
	     * Instance of {@link Storage}.
	     *
	     * @private
	     * @type {Storage}
	     */
	    var _this = _possibleConstructorReturn(this, (PersistentState.__proto__ || Object.getPrototypeOf(PersistentState)).call(this, hotInstance));
	
	    _this.storage = void 0;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link PersistentState#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(PersistentState, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().persistentState;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      if (!this.storage) {
	        this.storage = new _storage2.default(this.hot.rootElement.id);
	      }
	
	      this.addHook('persistentStateSave', function (key, value) {
	        return _this2.saveValue(key, value);
	      });
	      this.addHook('persistentStateLoad', function (key, saveTo) {
	        return _this2.loadValue(key, saveTo);
	      });
	      this.addHook('persistentStateReset', function () {
	        return _this2.resetValue();
	      });
	
	      _get(PersistentState.prototype.__proto__ || Object.getPrototypeOf(PersistentState.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.storage = void 0;
	
	      _get(PersistentState.prototype.__proto__ || Object.getPrototypeOf(PersistentState.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(PersistentState.prototype.__proto__ || Object.getPrototypeOf(PersistentState.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Loads the value from local storage.
	     *
	     * @param {String} key Storage key.
	     * @param {Object} saveTo Saved value from local storage.
	     */
	
	  }, {
	    key: 'loadValue',
	    value: function loadValue(key, saveTo) {
	      saveTo.value = this.storage.loadValue(key);
	    }
	
	    /**
	     * Saves the data to local storage.
	     *
	     * @param {String} key Storage key.
	     * @param {Mixed} value Value to save.
	     */
	
	  }, {
	    key: 'saveValue',
	    value: function saveValue(key, value) {
	      this.storage.saveValue(key, value);
	    }
	
	    /**
	     * Resets the data or all data from local storage.
	     *
	     * @param {String} key [optional] Storage key.
	     */
	
	  }, {
	    key: 'resetValue',
	    value: function resetValue(key) {
	      if (typeof key === 'undefined') {
	        this.storage.resetAll();
	      } else {
	        this.storage.reset(key);
	      }
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(PersistentState.prototype.__proto__ || Object.getPrototypeOf(PersistentState.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return PersistentState;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('persistentState', PersistentState);
	
	exports.default = PersistentState;
	
	/***/ }),
	/* 286 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _array = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Storage
	 * @plugin PersistentState
	 */
	var Storage = function () {
	  function Storage(prefix) {
	    _classCallCheck(this, Storage);
	
	    /**
	     * Prefix for key (id element).
	     *
	     * @type {String}
	     */
	    this.prefix = prefix;
	
	    /**
	     * Saved keys.
	     *
	     * @type {Array}
	     */
	    this.savedKeys = [];
	    this.loadSavedKeys();
	  }
	
	  /**
	   * Save data to localStorage.
	   *
	   * @param {String} key Key string.
	   * @param {Mixed} value Value to save.
	   */
	
	
	  _createClass(Storage, [{
	    key: 'saveValue',
	    value: function saveValue(key, value) {
	      window.localStorage.setItem(this.prefix + '_' + key, JSON.stringify(value));
	
	      if (this.savedKeys.indexOf(key) === -1) {
	        this.savedKeys.push(key);
	        this.saveSavedKeys();
	      }
	    }
	
	    /**
	     * Load data from localStorage.
	     *
	     * @param {String} key Key string.
	     * @param {Object} defaultValue Object containing the loaded data.
	     *
	     * @returns {}
	     */
	
	  }, {
	    key: 'loadValue',
	    value: function loadValue(key, defaultValue) {
	      var itemKey = typeof key === 'undefined' ? defaultValue : key;
	      var value = window.localStorage.getItem(this.prefix + '_' + itemKey);
	
	      return value === null ? void 0 : JSON.parse(value);
	    }
	
	    /**
	     * Reset given data from localStorage.
	     *
	     * @param {String} key Key string.
	     */
	
	  }, {
	    key: 'reset',
	    value: function reset(key) {
	      window.localStorage.removeItem(this.prefix + '_' + key);
	    }
	
	    /**
	     * Reset all data from localStorage.
	     *
	     */
	
	  }, {
	    key: 'resetAll',
	    value: function resetAll() {
	      var _this = this;
	
	      (0, _array.arrayEach)(this.savedKeys, function (value, index) {
	        window.localStorage.removeItem(_this.prefix + '_' + _this.savedKeys[index]);
	      });
	
	      this.clearSavedKeys();
	    }
	
	    /**
	     * Load and save all keys from localStorage.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'loadSavedKeys',
	    value: function loadSavedKeys() {
	      var keysJSON = window.localStorage.getItem(this.prefix + '__persistentStateKeys');
	      var keys = typeof keysJSON === 'string' ? JSON.parse(keysJSON) : void 0;
	
	      this.savedKeys = keys || [];
	    }
	
	    /**
	     * Save saved key in localStorage.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'saveSavedKeys',
	    value: function saveSavedKeys() {
	      window.localStorage.setItem(this.prefix + '__persistentStateKeys', JSON.stringify(this.savedKeys));
	    }
	
	    /**
	     * Clear saved key from localStorage.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'clearSavedKeys',
	    value: function clearSavedKeys() {
	      this.savedKeys.length = 0;
	      this.saveSavedKeys();
	    }
	  }]);
	
	  return Storage;
	}();
	
	exports.default = Storage;
	
	/***/ }),
	/* 287 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _array = __webpack_require__(2);
	
	var _feature = __webpack_require__(40);
	
	var _element = __webpack_require__(0);
	
	var _ghostTable = __webpack_require__(93);
	
	var _ghostTable2 = _interopRequireDefault(_ghostTable);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	var _plugins = __webpack_require__(8);
	
	var _samplesGenerator = __webpack_require__(203);
	
	var _samplesGenerator2 = _interopRequireDefault(_samplesGenerator);
	
	var _string = __webpack_require__(33);
	
	var _src = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var privatePool = new WeakMap();
	
	/**
	 * @plugin AutoColumnSize
	 *
	 * @description
	 * This plugin allows to set column widths based on their widest cells.
	 *
	 * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).
	 * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to
	 * resize the columns accordingly.
	 * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.
	 *
	 * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and
	 * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous
	 * operations don't block the browser UI.
	 *
	 * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:
	 * ```js
	 * // as a number (300 columns in sync, rest async)
	 * autoColumnSize: {syncLimit: 300},
	 *
	 * // as a string (percent)
	 * autoColumnSize: {syncLimit: '40%'},
	 * ```
	 *
	 * To configure this plugin see {@link Options#autoColumnSize}.
	 *
	 * @example
	 * ```js
	 * const hot = new Handsontable(document.getElementById('example'), {
	 *   date: getData(),
	 *   autoColumnSize: true
	 * });
	 * // Access to plugin instance:
	 * const plugin = hot.getPlugin('autoColumnSize');
	 *
	 * plugin.getColumnWidth(4);
	 *
	 * if (plugin.isEnabled()) {
	 *   // code...
	 * }
	 * ```
	 */
	
	var AutoColumnSize = function (_BasePlugin) {
	  _inherits(AutoColumnSize, _BasePlugin);
	
	  _createClass(AutoColumnSize, null, [{
	    key: 'CALCULATION_STEP',
	    get: function get() {
	      return 50;
	    }
	  }, {
	    key: 'SYNC_CALCULATION_LIMIT',
	    get: function get() {
	      return 50;
	    }
	  }]);
	
	  function AutoColumnSize(hotInstance) {
	    _classCallCheck(this, AutoColumnSize);
	
	    var _this = _possibleConstructorReturn(this, (AutoColumnSize.__proto__ || Object.getPrototypeOf(AutoColumnSize)).call(this, hotInstance));
	
	    privatePool.set(_this, {
	      /**
	       * Cached column header names. It is used to diff current column headers with previous state and detect which
	       * columns width should be updated.
	       *
	       * @private
	       * @type {Array}
	       */
	      cachedColumnHeaders: []
	    });
	    /**
	     * Cached columns widths.
	     *
	     * @type {Number[]}
	     */
	    _this.widths = [];
	    /**
	     * Instance of {@link GhostTable} for rows and columns size calculations.
	     *
	     * @private
	     * @type {GhostTable}
	     */
	    _this.ghostTable = new _ghostTable2.default(_this.hot);
	    /**
	     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.
	     *
	     * @private
	     * @type {SamplesGenerator}
	     */
	    _this.samplesGenerator = new _samplesGenerator2.default(function (row, column) {
	      var cellMeta = _this.hot.getCellMeta(row, column);
	      var cellValue = '';
	
	      if (!cellMeta.spanned) {
	        cellValue = _this.hot.getDataAtCell(row, column);
	      }
	
	      var bundleCountSeed = 0;
	
	      if (cellMeta.label) {
	        var _cellMeta$label = cellMeta.label,
	            labelValue = _cellMeta$label.value,
	            labelProperty = _cellMeta$label.property;
	
	        var labelText = '';
	
	        if (labelValue) {
	          labelText = typeof labelValue === 'function' ? labelValue(row, column, _this.hot.colToProp(column), cellValue) : labelValue;
	        } else if (labelProperty) {
	          labelText = _this.hot.getDataAtRowProp(row, labelProperty);
	        }
	
	        bundleCountSeed = labelText.length;
	      }
	
	      return { value: cellValue, bundleCountSeed: bundleCountSeed };
	    });
	    /**
	     * `true` only if the first calculation was performed
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.firstCalculation = true;
	    /**
	     * `true` if the size calculation is in progress.
	     *
	     * @type {Boolean}
	     */
	    _this.inProgress = false;
	
	    // moved to constructor to allow auto-sizing the columns when the plugin is disabled
	    _this.addHook('beforeColumnResize', function (col, size, isDblClick) {
	      return _this.onBeforeColumnResize(col, size, isDblClick);
	    });
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(AutoColumnSize, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      var setting = this.hot.getSettings().autoColumnSize;
	
	      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {
	        this.ghostTable.setSetting('useHeaders', setting.useHeaders);
	      }
	
	      this.setSamplingOptions();
	
	      this.addHook('afterLoadData', function () {
	        return _this2.onAfterLoadData();
	      });
	      this.addHook('beforeChange', function (changes) {
	        return _this2.onBeforeChange(changes);
	      });
	
	      this.addHook('beforeRender', function (force) {
	        return _this2.onBeforeRender(force);
	      });
	      this.addHook('modifyColWidth', function (width, col) {
	        return _this2.getColumnWidth(col, width);
	      });
	      this.addHook('afterInit', function () {
	        return _this2.onAfterInit();
	      });
	      _get(AutoColumnSize.prototype.__proto__ || Object.getPrototypeOf(AutoColumnSize.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      var changedColumns = this.findColumnsWhereHeaderWasChanged();
	
	      if (changedColumns.length) {
	        this.clearCache(changedColumns);
	      }
	      _get(AutoColumnSize.prototype.__proto__ || Object.getPrototypeOf(AutoColumnSize.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(AutoColumnSize.prototype.__proto__ || Object.getPrototypeOf(AutoColumnSize.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Calculates a columns width.
	     *
	     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.
	     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.
	     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
	     */
	
	  }, {
	    key: 'calculateColumnsWidth',
	    value: function calculateColumnsWidth() {
	      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { from: 0, to: this.hot.countCols() - 1 };
	
	      var _this3 = this;
	
	      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { from: 0, to: this.hot.countRows() - 1 };
	      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	      var columnsRange = typeof colRange === 'number' ? { from: colRange, to: colRange } : colRange;
	      var rowsRange = typeof rowRange === 'number' ? { from: rowRange, to: rowRange } : rowRange;
	
	      (0, _number.rangeEach)(columnsRange.from, columnsRange.to, function (col) {
	        if (force || _this3.widths[col] === void 0 && !_this3.hot._getColWidthFromSettings(col)) {
	          var samples = _this3.samplesGenerator.generateColumnSamples(col, rowsRange);
	
	          (0, _array.arrayEach)(samples, function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2),
	                column = _ref2[0],
	                sample = _ref2[1];
	
	            return _this3.ghostTable.addColumn(column, sample);
	          });
	        }
	      });
	
	      if (this.ghostTable.columns.length) {
	        this.ghostTable.getWidths(function (col, width) {
	          _this3.widths[col] = width;
	        });
	        this.ghostTable.clean();
	      }
	    }
	
	    /**
	     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
	     * To retrieve width for specyfied column use {@link AutoColumnSize#getColumnWidth} method.
	     *
	     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.
	     */
	
	  }, {
	    key: 'calculateAllColumnsWidth',
	    value: function calculateAllColumnsWidth() {
	      var _this4 = this;
	
	      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { from: 0, to: this.hot.countRows() - 1 };
	
	      var current = 0;
	      var length = this.hot.countCols() - 1;
	      var timer = null;
	
	      this.inProgress = true;
	
	      var loop = function loop() {
	        // When hot was destroyed after calculating finished cancel frame
	        if (!_this4.hot) {
	          (0, _feature.cancelAnimationFrame)(timer);
	          _this4.inProgress = false;
	
	          return;
	        }
	
	        _this4.calculateColumnsWidth({
	          from: current,
	          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)
	        }, rowRange);
	
	        current = current + AutoColumnSize.CALCULATION_STEP + 1;
	
	        if (current < length) {
	          timer = (0, _feature.requestAnimationFrame)(loop);
	        } else {
	          (0, _feature.cancelAnimationFrame)(timer);
	          _this4.inProgress = false;
	
	          // @TODO Should call once per render cycle, currently fired separately in different plugins
	          _this4.hot.view.wt.wtOverlays.adjustElementsSize(true);
	          // tmp
	          if (_this4.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	            _this4.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	          }
	        }
	      };
	      // sync
	      if (this.firstCalculation && this.getSyncCalculationLimit()) {
	        this.calculateColumnsWidth({ from: 0, to: this.getSyncCalculationLimit() }, rowRange);
	        this.firstCalculation = false;
	        current = this.getSyncCalculationLimit() + 1;
	      }
	      // async
	      if (current < length) {
	        loop();
	      } else {
	        this.inProgress = false;
	      }
	    }
	
	    /**
	     * Sets the sampling options.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setSamplingOptions',
	    value: function setSamplingOptions() {
	      var setting = this.hot.getSettings().autoColumnSize;
	      var samplingRatio = setting && (0, _object.hasOwnProperty)(setting, 'samplingRatio') ? this.hot.getSettings().autoColumnSize.samplingRatio : void 0;
	      var allowSampleDuplicates = setting && (0, _object.hasOwnProperty)(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoColumnSize.allowSampleDuplicates : void 0;
	
	      if (samplingRatio && !isNaN(samplingRatio)) {
	        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
	      }
	
	      if (allowSampleDuplicates) {
	        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);
	      }
	    }
	
	    /**
	     * Recalculates all columns width (overwrite cache values).
	     */
	
	  }, {
	    key: 'recalculateAllColumnsWidth',
	    value: function recalculateAllColumnsWidth() {
	      if (this.hot.view && (0, _element.isVisible)(this.hot.view.wt.wtTable.TABLE)) {
	        this.clearCache();
	        this.calculateAllColumnsWidth();
	      }
	    }
	
	    /**
	     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
	     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getSyncCalculationLimit',
	    value: function getSyncCalculationLimit() {
	      /* eslint-disable no-bitwise */
	      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;
	      var colsLimit = this.hot.countCols() - 1;
	
	      if ((0, _object.isObject)(this.hot.getSettings().autoColumnSize)) {
	        limit = this.hot.getSettings().autoColumnSize.syncLimit;
	
	        if ((0, _string.isPercentValue)(limit)) {
	          limit = (0, _number.valueAccordingPercent)(colsLimit, limit);
	        } else {
	          // Force to Number
	          limit >>= 0;
	        }
	      }
	
	      return Math.min(limit, colsLimit);
	    }
	
	    /**
	     * Gets the calculated column width.
	     *
	     * @param {Number} column Column index.
	     * @param {Number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
	     * @param {Boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getColumnWidth',
	    value: function getColumnWidth(column) {
	      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;
	      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	      var width = defaultWidth;
	
	      if (width === void 0) {
	        width = this.widths[column];
	
	        if (keepMinimum && typeof width === 'number') {
	          width = Math.max(width, _src.ViewportColumnsCalculator.DEFAULT_WIDTH);
	        }
	      }
	
	      return width;
	    }
	
	    /**
	     * Gets the first visible column.
	     *
	     * @returns {Number} Returns column index or -1 if table is not rendered.
	     */
	
	  }, {
	    key: 'getFirstVisibleColumn',
	    value: function getFirstVisibleColumn() {
	      var wot = this.hot.view.wt;
	
	      if (wot.wtViewport.columnsVisibleCalculator) {
	        return wot.wtTable.getFirstVisibleColumn();
	      }
	      if (wot.wtViewport.columnsRenderCalculator) {
	        return wot.wtTable.getFirstRenderedColumn();
	      }
	
	      return -1;
	    }
	
	    /**
	     * Gets the last visible column.
	     *
	     * @returns {Number} Returns column index or -1 if table is not rendered.
	     */
	
	  }, {
	    key: 'getLastVisibleColumn',
	    value: function getLastVisibleColumn() {
	      var wot = this.hot.view.wt;
	
	      if (wot.wtViewport.columnsVisibleCalculator) {
	        return wot.wtTable.getLastVisibleColumn();
	      }
	      if (wot.wtViewport.columnsRenderCalculator) {
	        return wot.wtTable.getLastRenderedColumn();
	      }
	
	      return -1;
	    }
	
	    /**
	     * Collects all columns which titles has been changed in comparison to the previous state.
	     *
	     * @private
	     * @returns {Array} It returns an array of physical column indexes.
	     */
	
	  }, {
	    key: 'findColumnsWhereHeaderWasChanged',
	    value: function findColumnsWhereHeaderWasChanged() {
	      var columnHeaders = this.hot.getColHeader();
	
	      var _privatePool$get = privatePool.get(this),
	          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;
	
	      var changedColumns = (0, _array.arrayReduce)(columnHeaders, function (acc, columnTitle, physicalColumn) {
	        var cachedColumnsLength = cachedColumnHeaders.length;
	
	        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {
	          acc.push(physicalColumn);
	        }
	        if (cachedColumnsLength - 1 < physicalColumn) {
	          cachedColumnHeaders.push(columnTitle);
	        } else {
	          cachedColumnHeaders[physicalColumn] = columnTitle;
	        }
	
	        return acc;
	      }, []);
	
	      return changedColumns;
	    }
	
	    /**
	     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
	     * Otherwise whole cache will be cleared.
	     *
	     * @param {Number[]} [columns] List of physical column indexes to clear.
	     */
	
	  }, {
	    key: 'clearCache',
	    value: function clearCache() {
	      var _this5 = this;
	
	      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	      if (columns.length) {
	        (0, _array.arrayEach)(columns, function (physicalIndex) {
	          _this5.widths[physicalIndex] = void 0;
	        });
	      } else {
	        this.widths.length = 0;
	      }
	    }
	
	    /**
	     * Checks if all widths were calculated. If not then return `true` (need recalculate).
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isNeedRecalculate',
	    value: function isNeedRecalculate() {
	      return !!(0, _array.arrayFilter)(this.widths, function (item) {
	        return item === void 0;
	      }).length;
	    }
	
	    /**
	     * On before render listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onBeforeRender',
	    value: function onBeforeRender() {
	      var force = this.hot.renderCall;
	      var rowsCount = this.hot.countRows();
	
	      // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)
	      if (!rowsCount) {
	        return;
	      }
	
	      this.calculateColumnsWidth({ from: this.getFirstVisibleColumn(), to: this.getLastVisibleColumn() }, void 0, force);
	
	      if (this.isNeedRecalculate() && !this.inProgress) {
	        this.calculateAllColumnsWidth();
	      }
	    }
	
	    /**
	     * On after load data listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterLoadData',
	    value: function onAfterLoadData() {
	      var _this6 = this;
	
	      if (this.hot.view) {
	        this.recalculateAllColumnsWidth();
	      } else {
	        // first load - initialization
	        setTimeout(function () {
	          if (_this6.hot) {
	            _this6.recalculateAllColumnsWidth();
	          }
	        }, 0);
	      }
	    }
	
	    /**
	     * On before change listener.
	     *
	     * @private
	     * @param {Array} changes
	     */
	
	  }, {
	    key: 'onBeforeChange',
	    value: function onBeforeChange(changes) {
	      var _this7 = this;
	
	      var changedColumns = (0, _array.arrayMap)(changes, function (_ref3) {
	        var _ref4 = _slicedToArray(_ref3, 2),
	            column = _ref4[1];
	
	        return _this7.hot.propToCol(column);
	      });
	
	      this.clearCache(changedColumns);
	    }
	
	    /**
	     * On before column resize listener.
	     *
	     * @private
	     * @param {Number} col
	     * @param {Number} size
	     * @param {Boolean} isDblClick
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'onBeforeColumnResize',
	    value: function onBeforeColumnResize(col, size, isDblClick) {
	      var newSize = size;
	
	      if (isDblClick) {
	        this.calculateColumnsWidth(col, void 0, true);
	
	        newSize = this.getColumnWidth(col, void 0, false);
	      }
	
	      return newSize;
	    }
	
	    /**
	     * On after Handsontable init fill plugin with all necessary values.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterInit',
	    value: function onAfterInit() {
	      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.ghostTable.clean();
	      _get(AutoColumnSize.prototype.__proto__ || Object.getPrototypeOf(AutoColumnSize.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return AutoColumnSize;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('autoColumnSize', AutoColumnSize);
	
	exports.default = AutoColumnSize;
	
	/***/ }),
	/* 288 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _element = __webpack_require__(0);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _plugins = __webpack_require__(8);
	
	var _src = __webpack_require__(4);
	
	var _utils = __webpack_require__(289);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('modifyAutofillRange');
	_pluginHooks2.default.getSingleton().register('beforeAutofill');
	
	var INSERT_ROW_ALTER_ACTION_NAME = 'insert_row';
	var INTERVAL_FOR_ADDING_ROW = 200;
	
	/**
	 * This plugin provides "drag-down" and "copy-down" functionalities, both operated using the small square in the right
	 * bottom of the cell selection.
	 *
	 * "Drag-down" expands the value of the selected cells to the neighbouring cells when you drag the small square in the corner.
	 *
	 * "Copy-down" copies the value of the selection to all empty cells below when you double click the small square.
	 *
	 * @class Autofill
	 * @plugin Autofill
	 */
	
	var Autofill = function (_BasePlugin) {
	  _inherits(Autofill, _BasePlugin);
	
	  function Autofill(hotInstance) {
	    _classCallCheck(this, Autofill);
	
	    /**
	     * Event manager instance.
	     *
	     * @private
	     * @type {EventManager}
	     */
	    var _this = _possibleConstructorReturn(this, (Autofill.__proto__ || Object.getPrototypeOf(Autofill)).call(this, hotInstance));
	
	    _this.eventManager = new _eventManager2.default(_this);
	    /**
	     * Specifies if adding new row started.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.addingStarted = false;
	    /**
	     * Specifies if there was mouse down on the cell corner.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.mouseDownOnCellCorner = false;
	    /**
	     * Specifies if mouse was dragged outside Handsontable.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.mouseDragOutside = false;
	    /**
	     * Specifies how many cell levels were dragged using the handle.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.handleDraggedCells = 0;
	    /**
	     * Specifies allowed directions of drag (`'horizontal'` or '`vertical`').
	     *
	     * @private
	     * @type {String[]}
	     */
	    _this.directions = [];
	    /**
	     * Specifies if can insert new rows if needed.
	     *
	     * @type {Boolean}
	     */
	    _this.autoInsertRow = false;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the Handsontable settings.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(Autofill, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().fillHandle;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.mapSettings();
	      this.registerEvents();
	
	      this.addHook('afterOnCellCornerMouseDown', function (event) {
	        return _this2.onAfterCellCornerMouseDown(event);
	      });
	      this.addHook('afterOnCellCornerDblClick', function (event) {
	        return _this2.onCellCornerDblClick(event);
	      });
	      this.addHook('beforeOnCellMouseOver', function (event, coords) {
	        return _this2.onBeforeCellMouseOver(coords);
	      });
	
	      _get(Autofill.prototype.__proto__ || Object.getPrototypeOf(Autofill.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	      _get(Autofill.prototype.__proto__ || Object.getPrototypeOf(Autofill.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.clearMappedSettings();
	      _get(Autofill.prototype.__proto__ || Object.getPrototypeOf(Autofill.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Gets selection data
	     *
	     * @private
	     * @returns {Array} Array with the data.
	     */
	
	  }, {
	    key: 'getSelectionData',
	    value: function getSelectionData() {
	      var selRange = {
	        from: this.hot.getSelectedRangeLast().from,
	        to: this.hot.getSelectedRangeLast().to
	      };
	
	      return this.hot.getData(selRange.from.row, selRange.from.col, selRange.to.row, selRange.to.col);
	    }
	
	    /**
	     * Try to apply fill values to the area in fill border, omitting the selection border.
	     *
	     * @private
	     * @returns {Boolean} reports if fill was applied.
	     *
	     * @fires Hooks#modifyAutofillRange
	     * @fires Hooks#beforeAutofill
	     */
	
	  }, {
	    key: 'fillIn',
	    value: function fillIn() {
	      if (this.hot.selection.highlight.getFill().isEmpty()) {
	        return false;
	      }
	
	      var cornersOfSelectionAndDragAreas = this.hot.selection.highlight.getFill().getCorners();
	
	      this.resetSelectionOfDraggedArea();
	
	      var cornersOfSelectedCells = this.getCornersOfSelectedCells();
	      cornersOfSelectionAndDragAreas = this.hot.runHooks('modifyAutofillRange', cornersOfSelectionAndDragAreas, cornersOfSelectedCells);
	
	      var _getDragDirectionAndR = (0, _utils.getDragDirectionAndRange)(cornersOfSelectedCells, cornersOfSelectionAndDragAreas),
	          directionOfDrag = _getDragDirectionAndR.directionOfDrag,
	          startOfDragCoords = _getDragDirectionAndR.startOfDragCoords,
	          endOfDragCoords = _getDragDirectionAndR.endOfDragCoords;
	
	      if (startOfDragCoords && startOfDragCoords.row > -1 && startOfDragCoords.col > -1) {
	        var selectionData = this.getSelectionData();
	
	        this.hot.runHooks('beforeAutofill', startOfDragCoords, endOfDragCoords, selectionData);
	
	        var deltas = (0, _utils.getDeltas)(startOfDragCoords, endOfDragCoords, selectionData, directionOfDrag);
	        var fillData = selectionData;
	
	        if (['up', 'left'].indexOf(directionOfDrag) > -1) {
	          fillData = [];
	
	          var dragLength = null;
	          var fillOffset = null;
	
	          if (directionOfDrag === 'up') {
	            dragLength = endOfDragCoords.row - startOfDragCoords.row + 1;
	            fillOffset = dragLength % selectionData.length;
	
	            for (var i = 0; i < dragLength; i++) {
	              fillData.push(selectionData[(i + (selectionData.length - fillOffset)) % selectionData.length]);
	            }
	          } else {
	            dragLength = endOfDragCoords.col - startOfDragCoords.col + 1;
	            fillOffset = dragLength % selectionData[0].length;
	
	            for (var _i = 0; _i < selectionData.length; _i++) {
	              fillData.push([]);
	              for (var j = 0; j < dragLength; j++) {
	                fillData[_i].push(selectionData[_i][(j + (selectionData[_i].length - fillOffset)) % selectionData[_i].length]);
	              }
	            }
	          }
	        }
	
	        this.hot.populateFromArray(startOfDragCoords.row, startOfDragCoords.col, fillData, endOfDragCoords.row, endOfDragCoords.col, this.pluginName + '.fill', null, directionOfDrag, deltas);
	
	        this.setSelection(cornersOfSelectionAndDragAreas);
	      } else {
	        // reset to avoid some range bug
	        this.hot._refreshBorders();
	      }
	
	      return true;
	    }
	
	    /**
	     * Reduces the selection area if the handle was dragged outside of the table or on headers.
	     *
	     * @private
	     * @param {CellCoords} coords indexes of selection corners.
	     * @returns {CellCoords}
	     */
	
	  }, {
	    key: 'reduceSelectionAreaIfNeeded',
	    value: function reduceSelectionAreaIfNeeded(coords) {
	      if (coords.row < 0) {
	        coords.row = 0;
	      }
	
	      if (coords.col < 0) {
	        coords.col = 0;
	      }
	      return coords;
	    }
	
	    /**
	     * Gets the coordinates of the drag & drop borders.
	     *
	     * @private
	     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getCoordsOfDragAndDropBorders',
	    value: function getCoordsOfDragAndDropBorders(coordsOfSelection) {
	      var topLeftCorner = this.hot.getSelectedRangeLast().getTopLeftCorner();
	      var bottomRightCorner = this.hot.getSelectedRangeLast().getBottomRightCorner();
	      var coords = void 0;
	
	      if (this.directions.includes(_utils.DIRECTIONS.vertical) && (bottomRightCorner.row < coordsOfSelection.row || topLeftCorner.row > coordsOfSelection.row)) {
	        coords = new _src.CellCoords(coordsOfSelection.row, bottomRightCorner.col);
	      } else if (this.directions.includes(_utils.DIRECTIONS.horizontal)) {
	        coords = new _src.CellCoords(bottomRightCorner.row, coordsOfSelection.col);
	      } else {
	        // wrong direction
	        return;
	      }
	
	      return this.reduceSelectionAreaIfNeeded(coords);
	    }
	
	    /**
	     * Show the fill border.
	     *
	     * @private
	     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
	     */
	
	  }, {
	    key: 'showBorder',
	    value: function showBorder(coordsOfSelection) {
	      var coordsOfDragAndDropBorders = this.getCoordsOfDragAndDropBorders(coordsOfSelection);
	
	      if (coordsOfDragAndDropBorders) {
	        this.redrawBorders(coordsOfDragAndDropBorders);
	      }
	    }
	
	    /**
	     * Add new row
	     *
	     * @private
	     */
	
	  }, {
	    key: 'addRow',
	    value: function addRow() {
	      var _this3 = this;
	
	      this.hot._registerTimeout(setTimeout(function () {
	        _this3.hot.alter(INSERT_ROW_ALTER_ACTION_NAME, void 0, 1, _this3.pluginName + '.fill');
	
	        _this3.addingStarted = false;
	      }, INTERVAL_FOR_ADDING_ROW));
	    }
	
	    /**
	     * Add new rows if they are needed to continue auto-filling values.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'addNewRowIfNeeded',
	    value: function addNewRowIfNeeded() {
	      if (this.hot.selection.highlight.getFill().cellRange && this.addingStarted === false && this.autoInsertRow) {
	        var cornersOfSelectedCells = this.hot.getSelectedLast();
	        var cornersOfSelectedDragArea = this.hot.selection.highlight.getFill().getCorners();
	        var nrOfTableRows = this.hot.countRows();
	
	        if (cornersOfSelectedCells[2] < nrOfTableRows - 1 && cornersOfSelectedDragArea[2] === nrOfTableRows - 1) {
	          this.addingStarted = true;
	
	          this.addRow();
	        }
	      }
	    }
	
	    /**
	     * Get corners of selected cells.
	     *
	     * @private
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getCornersOfSelectedCells',
	    value: function getCornersOfSelectedCells() {
	      if (this.hot.selection.isMultiple()) {
	        return this.hot.selection.highlight.createOrGetArea().getCorners();
	      }
	      return this.hot.selection.highlight.getCell().getCorners();
	    }
	
	    /**
	     * Get index of last adjacent filled in row
	     *
	     * @private
	     * @param {Array} cornersOfSelectedCells indexes of selection corners.
	     * @returns {Number} gives number greater than or equal to zero when selection adjacent can be applied.
	     * or -1 when selection adjacent can't be applied
	     */
	
	  }, {
	    key: 'getIndexOfLastAdjacentFilledInRow',
	    value: function getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells) {
	      var data = this.hot.getData();
	      var nrOfTableRows = this.hot.countRows();
	      var lastFilledInRowIndex = void 0;
	
	      for (var rowIndex = cornersOfSelectedCells[2] + 1; rowIndex < nrOfTableRows; rowIndex++) {
	        for (var columnIndex = cornersOfSelectedCells[1]; columnIndex <= cornersOfSelectedCells[3]; columnIndex++) {
	          var dataInCell = data[rowIndex][columnIndex];
	
	          if (dataInCell) {
	            return -1;
	          }
	        }
	
	        var dataInNextLeftCell = data[rowIndex][cornersOfSelectedCells[1] - 1];
	        var dataInNextRightCell = data[rowIndex][cornersOfSelectedCells[3] + 1];
	
	        if (!!dataInNextLeftCell || !!dataInNextRightCell) {
	          lastFilledInRowIndex = rowIndex;
	        }
	      }
	
	      return lastFilledInRowIndex;
	    }
	
	    /**
	     * Adds a selection from the start area to the specific row index.
	     *
	     * @private
	     * @param {Array} selectStartArea selection area from which we start to create more comprehensive selection.
	     * @param {Number} rowIndex
	     */
	
	  }, {
	    key: 'addSelectionFromStartAreaToSpecificRowIndex',
	    value: function addSelectionFromStartAreaToSpecificRowIndex(selectStartArea, rowIndex) {
	      this.hot.selection.highlight.getFill().clear().add(new _src.CellCoords(selectStartArea[0], selectStartArea[1])).add(new _src.CellCoords(rowIndex, selectStartArea[3]));
	    }
	
	    /**
	     * Sets selection based on passed corners.
	     *
	     * @private
	     * @param {Array} cornersOfArea
	     */
	
	  }, {
	    key: 'setSelection',
	    value: function setSelection(cornersOfArea) {
	      var _hot;
	
	      (_hot = this.hot).selectCell.apply(_hot, _toConsumableArray(cornersOfArea).concat([false, false]));
	    }
	
	    /**
	     * Try to select cells down to the last row in the left column and then returns if selection was applied.
	     *
	     * @private
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'selectAdjacent',
	    value: function selectAdjacent() {
	      var cornersOfSelectedCells = this.getCornersOfSelectedCells();
	      var lastFilledInRowIndex = this.getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells);
	
	      if (lastFilledInRowIndex === -1 || lastFilledInRowIndex === void 0) {
	        return false;
	      }
	
	      this.addSelectionFromStartAreaToSpecificRowIndex(cornersOfSelectedCells, lastFilledInRowIndex);
	
	      return true;
	    }
	
	    /**
	     * Resets selection of dragged area.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'resetSelectionOfDraggedArea',
	    value: function resetSelectionOfDraggedArea() {
	      this.handleDraggedCells = 0;
	
	      this.hot.selection.highlight.getFill().clear();
	    }
	
	    /**
	     * Redraws borders.
	     *
	     * @private
	     * @param {CellCoords} coords `CellCoords` coord object.
	     */
	
	  }, {
	    key: 'redrawBorders',
	    value: function redrawBorders(coords) {
	      this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(coords);
	
	      this.hot.view.render();
	    }
	
	    /**
	     * Get if mouse was dragged outside.
	     *
	     * @private
	     * @param {MouseEvent} event `mousemove` event properties.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'getIfMouseWasDraggedOutside',
	    value: function getIfMouseWasDraggedOutside(event) {
	      var tableBottom = (0, _element.offset)(this.hot.table).top - (window.pageYOffset || document.documentElement.scrollTop) + (0, _element.outerHeight)(this.hot.table);
	      var tableRight = (0, _element.offset)(this.hot.table).left - (window.pageXOffset || document.documentElement.scrollLeft) + (0, _element.outerWidth)(this.hot.table);
	
	      return event.clientY > tableBottom && event.clientX <= tableRight;
	    }
	
	    /**
	     * Bind the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this4 = this;
	
	      this.eventManager.addEventListener(document.documentElement, 'mouseup', function () {
	        return _this4.onMouseUp();
	      });
	      this.eventManager.addEventListener(document.documentElement, 'mousemove', function (event) {
	        return _this4.onMouseMove(event);
	      });
	    }
	
	    /**
	     * On cell corner double click callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onCellCornerDblClick',
	    value: function onCellCornerDblClick() {
	      var selectionApplied = this.selectAdjacent();
	
	      if (selectionApplied) {
	        this.fillIn();
	      }
	    }
	
	    /**
	     * On after cell corner mouse down listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterCellCornerMouseDown',
	    value: function onAfterCellCornerMouseDown() {
	      this.handleDraggedCells = 1;
	      this.mouseDownOnCellCorner = true;
	    }
	
	    /**
	     * On before cell mouse over listener.
	     *
	     * @private
	     * @param {CellCoords} coords `CellCoords` coord object.
	     */
	
	  }, {
	    key: 'onBeforeCellMouseOver',
	    value: function onBeforeCellMouseOver(coords) {
	      if (this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells) {
	        this.handleDraggedCells += 1;
	
	        this.showBorder(coords);
	        this.addNewRowIfNeeded();
	      }
	    }
	
	    /**
	     * On mouse up listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      if (this.handleDraggedCells) {
	        if (this.handleDraggedCells > 1) {
	          this.fillIn();
	        }
	
	        this.handleDraggedCells = 0;
	        this.mouseDownOnCellCorner = false;
	      }
	    }
	
	    /**
	     * On mouse move listener.
	     *
	     * @private
	     * @param {MouseEvent} event `mousemove` event properties.
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var mouseWasDraggedOutside = this.getIfMouseWasDraggedOutside(event);
	
	      if (this.addingStarted === false && this.handleDraggedCells > 0 && mouseWasDraggedOutside) {
	        this.mouseDragOutside = true;
	        this.addingStarted = true;
	      } else {
	        this.mouseDragOutside = false;
	      }
	
	      if (this.mouseDragOutside && this.autoInsertRow) {
	        this.addRow();
	      }
	    }
	
	    /**
	     * Clears mapped settings.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'clearMappedSettings',
	    value: function clearMappedSettings() {
	      this.directions.length = 0;
	      this.autoInsertRow = false;
	    }
	
	    /**
	     * Map settings.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'mapSettings',
	    value: function mapSettings() {
	      var mappedSettings = (0, _utils.getMappedFillHandleSetting)(this.hot.getSettings().fillHandle);
	      this.directions = mappedSettings.directions;
	      this.autoInsertRow = mappedSettings.autoInsertRow;
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(Autofill.prototype.__proto__ || Object.getPrototypeOf(Autofill.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return Autofill;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('autofill', Autofill);
	
	exports.default = Autofill;
	
	/***/ }),
	/* 289 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.DIRECTIONS = undefined;
	exports.getDeltas = getDeltas;
	exports.getDragDirectionAndRange = getDragDirectionAndRange;
	exports.getMappedFillHandleSetting = getMappedFillHandleSetting;
	
	var _object = __webpack_require__(1);
	
	var _mixed = __webpack_require__(11);
	
	var _src = __webpack_require__(4);
	
	var DIRECTIONS = exports.DIRECTIONS = {
	  horizontal: 'horizontal',
	  vertical: 'vertical'
	};
	
	/**
	 * Get deltas array.
	 *
	 * @param {CellCoords} start
	 * @param {CellCoords} end
	 * @param {Array} data
	 * @param {String} direction
	 * @returns {Array}
	 */
	function getDeltas(start, end, data, direction) {
	  var rowsLength = data.length;
	  var columnsLength = data ? data[0].length : 0;
	  var deltas = [];
	  var diffRow = end.row - start.row;
	  var diffCol = end.col - start.col;
	
	  if (['down', 'up'].indexOf(direction) !== -1) {
	    var arr = [];
	
	    for (var col = 0; col <= diffCol; col++) {
	      var startValue = parseInt(data[0][col], 10);
	      var endValue = parseInt(data[rowsLength - 1][col], 10);
	      var delta = (direction === 'down' ? endValue - startValue : startValue - endValue) / (rowsLength - 1) || 0;
	
	      arr.push(delta);
	    }
	
	    deltas.push(arr);
	  }
	
	  if (['right', 'left'].indexOf(direction) !== -1) {
	    for (var row = 0; row <= diffRow; row++) {
	      var _startValue = parseInt(data[row][0], 10);
	      var _endValue = parseInt(data[row][columnsLength - 1], 10);
	      var _delta = (direction === 'right' ? _endValue - _startValue : _startValue - _endValue) / (columnsLength - 1) || 0;
	
	      deltas.push([_delta]);
	    }
	  }
	
	  return deltas;
	}
	
	/**
	 * Get direction between positions and cords of selections difference (drag area)
	 *
	 * @param {Array} startSelection
	 * @param {Array} endSelection
	 * @returns {{direction: String, start: CellCoords, end: CellCoords}}
	 */
	function getDragDirectionAndRange(startSelection, endSelection) {
	  var startOfDragCoords = void 0;
	  var endOfDragCoords = void 0;
	  var directionOfDrag = void 0;
	
	  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {
	    directionOfDrag = 'left';
	
	    startOfDragCoords = new _src.CellCoords(endSelection[0], endSelection[1]);
	    endOfDragCoords = new _src.CellCoords(endSelection[2], startSelection[1] - 1);
	  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {
	    directionOfDrag = 'right';
	
	    startOfDragCoords = new _src.CellCoords(endSelection[0], startSelection[3] + 1);
	    endOfDragCoords = new _src.CellCoords(endSelection[2], endSelection[3]);
	  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {
	    directionOfDrag = 'up';
	
	    startOfDragCoords = new _src.CellCoords(endSelection[0], endSelection[1]);
	    endOfDragCoords = new _src.CellCoords(startSelection[0] - 1, endSelection[3]);
	  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {
	    directionOfDrag = 'down';
	
	    startOfDragCoords = new _src.CellCoords(startSelection[2] + 1, endSelection[1]);
	    endOfDragCoords = new _src.CellCoords(endSelection[2], endSelection[3]);
	  }
	
	  return {
	    directionOfDrag: directionOfDrag,
	    startOfDragCoords: startOfDragCoords,
	    endOfDragCoords: endOfDragCoords
	  };
	}
	
	/**
	 * Get mapped FillHandle setting containing information about
	 * allowed FillHandle directions and if allowed is automatic insertion of rows on drag
	 *
	 * @param {Boolean|Object} fillHandle property of Handsontable settings
	 * @returns {{directions: Array, autoInsertRow: Boolean}} object allowing access to information
	 * about FillHandle in more useful way
	 */
	function getMappedFillHandleSetting(fillHandle) {
	  var mappedSettings = {};
	
	  if (fillHandle === true) {
	    mappedSettings.directions = Object.keys(DIRECTIONS);
	    mappedSettings.autoInsertRow = true;
	  } else if ((0, _object.isObject)(fillHandle)) {
	    if ((0, _mixed.isDefined)(fillHandle.autoInsertRow)) {
	
	      // autoInsertRow for horizontal direction will be always false
	
	      if (fillHandle.direction === DIRECTIONS.horizontal) {
	        mappedSettings.autoInsertRow = false;
	      } else {
	        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;
	      }
	    } else {
	      mappedSettings.autoInsertRow = false;
	    }
	
	    if ((0, _mixed.isDefined)(fillHandle.direction)) {
	      mappedSettings.directions = [fillHandle.direction];
	    } else {
	      mappedSettings.directions = Object.keys(DIRECTIONS);
	    }
	  } else if (typeof fillHandle === 'string') {
	    mappedSettings.directions = [fillHandle];
	    mappedSettings.autoInsertRow = true;
	  } else {
	    mappedSettings.directions = [];
	    mappedSettings.autoInsertRow = false;
	  }
	
	  return mappedSettings;
	}
	
	/***/ }),
	/* 290 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _array = __webpack_require__(2);
	
	var _feature = __webpack_require__(40);
	
	var _element = __webpack_require__(0);
	
	var _ghostTable = __webpack_require__(93);
	
	var _ghostTable2 = _interopRequireDefault(_ghostTable);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	var _plugins = __webpack_require__(8);
	
	var _samplesGenerator = __webpack_require__(203);
	
	var _samplesGenerator2 = _interopRequireDefault(_samplesGenerator);
	
	var _string = __webpack_require__(33);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @plugin AutoRowSize
	 *
	 * @description
	 * This plugin allows to set row heights based on their highest cells.
	 *
	 * By default, the plugin is declared as `undefined`, which makes it disabled (same as if it was declared as `false`).
	 * Enabling this plugin may decrease the overall table performance, as it needs to calculate the heights of all cells to
	 * resize the rows accordingly.
	 * If you experience problems with the performance, try turning this feature off and declaring the row heights manually.
	 *
	 * Row height calculations are divided into sync and async part. Each of this parts has their own advantages and
	 * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous
	 * operations don't block the browser UI.
	 *
	 * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:
	 * ```js
	 * // as a number (300 columns in sync, rest async)
	 * autoRowSize: {syncLimit: 300},
	 *
	 * // as a string (percent)
	 * autoRowSize: {syncLimit: '40%'},
	 *
	 * // allow sample duplication
	 * autoRowSize: {syncLimit: '40%', allowSampleDuplicates: true},
	 * ```
	 *
	 * You can also use the `allowSampleDuplicates` option to allow sampling duplicate values when calculating the row
	 * height. __Note__, that this might have a negative impact on performance.
	 *
	 * To configure this plugin see {@link Options#autoRowSize}.
	 *
	 * @example
	 *
	 * ```js
	 * const hot = new Handsontable(document.getElementById('example'), {
	 *   date: getData(),
	 *   autoRowSize: true
	 * });
	 * // Access to plugin instance:
	 * const plugin = hot.getPlugin('autoRowSize');
	 *
	 * plugin.getRowHeight(4);
	 *
	 * if (plugin.isEnabled()) {
	 *   // code...
	 * }
	 * ```
	 */
	var AutoRowSize = function (_BasePlugin) {
	  _inherits(AutoRowSize, _BasePlugin);
	
	  _createClass(AutoRowSize, null, [{
	    key: 'CALCULATION_STEP',
	    get: function get() {
	      return 50;
	    }
	  }, {
	    key: 'SYNC_CALCULATION_LIMIT',
	    get: function get() {
	      return 500;
	    }
	  }]);
	
	  function AutoRowSize(hotInstance) {
	    _classCallCheck(this, AutoRowSize);
	
	    /**
	     * Cached rows heights.
	     *
	     * @type {Number[]}
	     */
	    var _this = _possibleConstructorReturn(this, (AutoRowSize.__proto__ || Object.getPrototypeOf(AutoRowSize)).call(this, hotInstance));
	
	    _this.heights = [];
	    /**
	     * Instance of {@link GhostTable} for rows and columns size calculations.
	     *
	     * @private
	     * @type {GhostTable}
	     */
	    _this.ghostTable = new _ghostTable2.default(_this.hot);
	    /**
	     * Instance of {@link SamplesGenerator} for generating samples necessary for rows height calculations.
	     *
	     * @private
	     * @type {SamplesGenerator}
	     */
	    _this.samplesGenerator = new _samplesGenerator2.default(function (row, col) {
	      var cellValue = void 0;
	
	      if (row >= 0) {
	        cellValue = _this.hot.getDataAtCell(row, col);
	      } else if (row === -1) {
	        cellValue = _this.hot.getColHeader(col);
	      }
	
	      return { value: cellValue };
	    });
	    /**
	     * `true` if only the first calculation was performed.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.firstCalculation = true;
	    /**
	     * `true` if the size calculation is in progress.
	     *
	     * @type {Boolean}
	     */
	    _this.inProgress = false;
	
	    // moved to constructor to allow auto-sizing the rows when the plugin is disabled
	    _this.addHook('beforeRowResize', function (row, size, isDblClick) {
	      return _this.onBeforeRowResize(row, size, isDblClick);
	    });
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(AutoRowSize, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().autoRowSize === true || (0, _object.isObject)(this.hot.getSettings().autoRowSize);
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.setSamplingOptions();
	
	      this.addHook('afterLoadData', function () {
	        return _this2.onAfterLoadData();
	      });
	      this.addHook('beforeChange', function (changes) {
	        return _this2.onBeforeChange(changes);
	      });
	      this.addHook('beforeColumnMove', function () {
	        return _this2.recalculateAllRowsHeight();
	      });
	      this.addHook('beforeColumnResize', function () {
	        return _this2.recalculateAllRowsHeight();
	      });
	      this.addHook('beforeColumnSort', function () {
	        return _this2.clearCache();
	      });
	      this.addHook('beforeRender', function (force) {
	        return _this2.onBeforeRender(force);
	      });
	      this.addHook('beforeRowMove', function (rowStart, rowEnd) {
	        return _this2.onBeforeRowMove(rowStart, rowEnd);
	      });
	      this.addHook('modifyRowHeight', function (height, row) {
	        return _this2.getRowHeight(row, height);
	      });
	      this.addHook('modifyColumnHeaderHeight', function () {
	        return _this2.getColumnHeaderHeight();
	      });
	      _get(AutoRowSize.prototype.__proto__ || Object.getPrototypeOf(AutoRowSize.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(AutoRowSize.prototype.__proto__ || Object.getPrototypeOf(AutoRowSize.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Calculate a given rows height.
	     *
	     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.
	     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.
	     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
	     */
	
	  }, {
	    key: 'calculateRowsHeight',
	    value: function calculateRowsHeight() {
	      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { from: 0, to: this.hot.countRows() - 1 };
	
	      var _this3 = this;
	
	      var colRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { from: 0, to: this.hot.countCols() - 1 };
	      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	      var rowsRange = typeof rowRange === 'number' ? { from: rowRange, to: rowRange } : rowRange;
	      var columnsRange = typeof colRange === 'number' ? { from: colRange, to: colRange } : colRange;
	
	      if (this.hot.getColHeader(0) !== null) {
	        var samples = this.samplesGenerator.generateRowSamples(-1, columnsRange);
	
	        this.ghostTable.addColumnHeadersRow(samples.get(-1));
	      }
	
	      (0, _number.rangeEach)(rowsRange.from, rowsRange.to, function (row) {
	        // For rows we must calculate row height even when user had set height value manually.
	        // We can shrink column but cannot shrink rows!
	        if (force || _this3.heights[row] === void 0) {
	          var _samples = _this3.samplesGenerator.generateRowSamples(row, columnsRange);
	
	          (0, _array.arrayEach)(_samples, function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2),
	                rowIndex = _ref2[0],
	                sample = _ref2[1];
	
	            return _this3.ghostTable.addRow(rowIndex, sample);
	          });
	        }
	      });
	      if (this.ghostTable.rows.length) {
	        this.ghostTable.getHeights(function (row, height) {
	          _this3.heights[row] = height;
	        });
	        this.ghostTable.clean();
	      }
	    }
	
	    /**
	     * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
	     * To retrieve height for specyfied row use {@link AutoRowSize#getRowHeight} method.
	     *
	     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.
	     */
	
	  }, {
	    key: 'calculateAllRowsHeight',
	    value: function calculateAllRowsHeight() {
	      var _this4 = this;
	
	      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { from: 0, to: this.hot.countCols() - 1 };
	
	      var current = 0;
	      var length = this.hot.countRows() - 1;
	      var timer = null;
	
	      this.inProgress = true;
	
	      var loop = function loop() {
	        // When hot was destroyed after calculating finished cancel frame
	        if (!_this4.hot) {
	          (0, _feature.cancelAnimationFrame)(timer);
	          _this4.inProgress = false;
	
	          return;
	        }
	        _this4.calculateRowsHeight({ from: current, to: Math.min(current + AutoRowSize.CALCULATION_STEP, length) }, colRange);
	        current = current + AutoRowSize.CALCULATION_STEP + 1;
	
	        if (current < length) {
	          timer = (0, _feature.requestAnimationFrame)(loop);
	        } else {
	          (0, _feature.cancelAnimationFrame)(timer);
	          _this4.inProgress = false;
	
	          // @TODO Should call once per render cycle, currently fired separately in different plugins
	          _this4.hot.view.wt.wtOverlays.adjustElementsSize(true);
	          // tmp
	          if (_this4.hot.view.wt.wtOverlays.leftOverlay.needFullRender) {
	            _this4.hot.view.wt.wtOverlays.leftOverlay.clone.draw();
	          }
	        }
	      };
	      // sync
	      if (this.firstCalculation && this.getSyncCalculationLimit()) {
	        this.calculateRowsHeight({ from: 0, to: this.getSyncCalculationLimit() }, colRange);
	        this.firstCalculation = false;
	        current = this.getSyncCalculationLimit() + 1;
	      }
	      // async
	      if (current < length) {
	        loop();
	      } else {
	        this.inProgress = false;
	        this.hot.view.wt.wtOverlays.adjustElementsSize(false);
	      }
	    }
	
	    /**
	     * Sets the sampling options.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setSamplingOptions',
	    value: function setSamplingOptions() {
	      var setting = this.hot.getSettings().autoRowSize;
	      var samplingRatio = setting && (0, _object.hasOwnProperty)(setting, 'samplingRatio') ? this.hot.getSettings().autoRowSize.samplingRatio : void 0;
	      var allowSampleDuplicates = setting && (0, _object.hasOwnProperty)(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoRowSize.allowSampleDuplicates : void 0;
	
	      if (samplingRatio && !isNaN(samplingRatio)) {
	        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
	      }
	
	      if (allowSampleDuplicates) {
	        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);
	      }
	    }
	
	    /**
	     * Recalculates all rows height (overwrite cache values).
	     */
	
	  }, {
	    key: 'recalculateAllRowsHeight',
	    value: function recalculateAllRowsHeight() {
	      if ((0, _element.isVisible)(this.hot.view.wt.wtTable.TABLE)) {
	        this.clearCache();
	        this.calculateAllRowsHeight();
	      }
	    }
	
	    /**
	     * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
	     * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
	     *
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getSyncCalculationLimit',
	    value: function getSyncCalculationLimit() {
	      /* eslint-disable no-bitwise */
	      var limit = AutoRowSize.SYNC_CALCULATION_LIMIT;
	      var rowsLimit = this.hot.countRows() - 1;
	
	      if ((0, _object.isObject)(this.hot.getSettings().autoRowSize)) {
	        limit = this.hot.getSettings().autoRowSize.syncLimit;
	
	        if ((0, _string.isPercentValue)(limit)) {
	          limit = (0, _number.valueAccordingPercent)(rowsLimit, limit);
	        } else {
	          // Force to Number
	          limit >>= 0;
	        }
	      }
	
	      return Math.min(limit, rowsLimit);
	    }
	
	    /**
	     * Gets the calculated row height.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} [defaultHeight] Default row height. It will be picked up if no calculated height found.
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getRowHeight',
	    value: function getRowHeight(row) {
	      var defaultHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;
	
	      var height = defaultHeight;
	
	      if (this.heights[row] !== void 0 && this.heights[row] > (defaultHeight || 0)) {
	        height = this.heights[row];
	      }
	
	      return height;
	    }
	
	    /**
	     * Get the calculated column header height.
	     *
	     * @returns {Number|undefined}
	     */
	
	  }, {
	    key: 'getColumnHeaderHeight',
	    value: function getColumnHeaderHeight() {
	      return this.heights[-1];
	    }
	
	    /**
	     * Get the first visible row.
	     *
	     * @returns {Number} Returns row index or -1 if table is not rendered.
	     */
	
	  }, {
	    key: 'getFirstVisibleRow',
	    value: function getFirstVisibleRow() {
	      var wot = this.hot.view.wt;
	
	      if (wot.wtViewport.rowsVisibleCalculator) {
	        return wot.wtTable.getFirstVisibleRow();
	      }
	      if (wot.wtViewport.rowsRenderCalculator) {
	        return wot.wtTable.getFirstRenderedRow();
	      }
	
	      return -1;
	    }
	
	    /**
	     * Gets the last visible row.
	     *
	     * @returns {Number} Returns row index or -1 if table is not rendered.
	     */
	
	  }, {
	    key: 'getLastVisibleRow',
	    value: function getLastVisibleRow() {
	      var wot = this.hot.view.wt;
	
	      if (wot.wtViewport.rowsVisibleCalculator) {
	        return wot.wtTable.getLastVisibleRow();
	      }
	      if (wot.wtViewport.rowsRenderCalculator) {
	        return wot.wtTable.getLastRenderedRow();
	      }
	
	      return -1;
	    }
	
	    /**
	     * Clears cached heights.
	     */
	
	  }, {
	    key: 'clearCache',
	    value: function clearCache() {
	      this.heights.length = 0;
	      this.heights[-1] = void 0;
	    }
	
	    /**
	     * Clears cache by range.
	     *
	     * @param {Object|Number} range Row index or an object with `from` and `to` properties which define row range.
	     */
	
	  }, {
	    key: 'clearCacheByRange',
	    value: function clearCacheByRange(range) {
	      var _this5 = this;
	
	      var _ref3 = typeof range === 'number' ? { from: range, to: range } : range,
	          from = _ref3.from,
	          to = _ref3.to;
	
	      (0, _number.rangeEach)(Math.min(from, to), Math.max(from, to), function (row) {
	        _this5.heights[row] = void 0;
	      });
	    }
	
	    /**
	     * Checks if all heights were calculated. If not then return `true` (need recalculate).
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isNeedRecalculate',
	    value: function isNeedRecalculate() {
	      return !!(0, _array.arrayFilter)(this.heights, function (item) {
	        return item === void 0;
	      }).length;
	    }
	
	    /**
	     * On before render listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onBeforeRender',
	    value: function onBeforeRender() {
	      var force = this.hot.renderCall;
	      var fixedRowsBottom = this.hot.getSettings().fixedRowsBottom;
	
	      this.calculateRowsHeight({ from: this.getFirstVisibleRow(), to: this.getLastVisibleRow() }, void 0, force);
	
	      // Calculate rows height synchronously for bottom overlay
	      if (fixedRowsBottom) {
	        var totalRows = this.hot.countRows() - 1;
	        this.calculateRowsHeight({ from: totalRows - fixedRowsBottom, to: totalRows });
	      }
	
	      if (this.isNeedRecalculate() && !this.inProgress) {
	        this.calculateAllRowsHeight();
	      }
	    }
	
	    /**
	     * On before row move listener.
	     *
	     * @private
	     * @param {Number} from Row index where was grabbed.
	     * @param {Number} to Destination row index.
	     */
	
	  }, {
	    key: 'onBeforeRowMove',
	    value: function onBeforeRowMove(from, to) {
	      this.clearCacheByRange({ from: from, to: to });
	      this.calculateAllRowsHeight();
	    }
	
	    /**
	     * On before row resize listener.
	     *
	     * @private
	     * @param {Number} row
	     * @param {Number} size
	     * @param {Boolean} isDblClick
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'onBeforeRowResize',
	    value: function onBeforeRowResize(row, size, isDblClick) {
	      var newSize = size;
	
	      if (isDblClick) {
	        this.calculateRowsHeight(row, void 0, true);
	
	        newSize = this.getRowHeight(row);
	      }
	
	      return newSize;
	    }
	
	    /**
	     * On after load data listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterLoadData',
	    value: function onAfterLoadData() {
	      var _this6 = this;
	
	      if (this.hot.view) {
	        this.recalculateAllRowsHeight();
	      } else {
	        // first load - initialization
	        setTimeout(function () {
	          if (_this6.hot) {
	            _this6.recalculateAllRowsHeight();
	          }
	        }, 0);
	      }
	    }
	
	    /**
	     * On before change listener.
	     *
	     * @private
	     * @param {Array} changes
	     */
	
	  }, {
	    key: 'onBeforeChange',
	    value: function onBeforeChange(changes) {
	      var range = null;
	
	      if (changes.length === 1) {
	        range = changes[0][0];
	      } else if (changes.length > 1) {
	        range = {
	          from: changes[0][0],
	          to: changes[changes.length - 1][0]
	        };
	      }
	      if (range !== null) {
	        this.clearCacheByRange(range);
	      }
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.ghostTable.clean();
	      _get(AutoRowSize.prototype.__proto__ || Object.getPrototypeOf(AutoRowSize.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return AutoRowSize;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('autoRowSize', AutoRowSize);
	
	exports.default = AutoRowSize;
	
	/***/ }),
	/* 291 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _mixed = __webpack_require__(11);
	
	var _utils = __webpack_require__(73);
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _mergeSort = __webpack_require__(295);
	
	var _mergeSort2 = _interopRequireDefault(_mergeSort);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _rowsMapper = __webpack_require__(297);
	
	var _rowsMapper2 = _interopRequireDefault(_rowsMapper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('beforeColumnSort');
	_pluginHooks2.default.getSingleton().register('afterColumnSort');
	
	var HEADER_CLASS_SORTING = 'columnSorting';
	var HEADER_CLASS_ASC_SORT = 'ascending';
	var HEADER_CLASS_DESC_SORT = 'descending';
	
	var ASC_SORT_STATE = 'asc';
	var DESC_SORT_STATE = 'desc';
	var NONE_SORT_STATE = 'none';
	
	/**
	 * @plugin ColumnSorting
	 *
	 * @description
	 * This plugin sorts the view by a column (but does not sort the data source!). To enable the plugin, set the
	 * {@link Options#columnSorting} property to an object defining the initial sorting order (see the example below).
	 *
	 * @example
	 * ```js
	 * // as boolean
	 * columnSorting: true
	 *
	 * // as a object with initial order (sort ascending column at index 2)
	 * columnSorting: {
	 *  column: 2,
	 *  sortOrder: 'asc', // 'asc' = ascending, 'desc' = descending, 'none' = original order
	 *  sortEmptyCells: true // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table
	 * }
	 * ```
	 * @dependencies ObserveChanges moment
	 */
	
	var ColumnSorting = function (_BasePlugin) {
	  _inherits(ColumnSorting, _BasePlugin);
	
	  function ColumnSorting(hotInstance) {
	    _classCallCheck(this, ColumnSorting);
	
	    /**
	     * TODO: It could be refactored, it's cache which store information about value of `sortIndicator` property
	     * inside meta of first cell from particular column.
	     *
	     * @private
	     * @type {Array}
	     */
	    var _this2 = _possibleConstructorReturn(this, (ColumnSorting.__proto__ || Object.getPrototypeOf(ColumnSorting)).call(this, hotInstance));
	
	    _this2.sortIndicators = [];
	    /**
	     * Physical index of last sorted column.
	     *
	     * @type {Number}
	     */
	    _this2.sortColumn = void 0;
	    /**
	     * Order of last sorting. For `asc` ascending order, for `desc` descending order, for `none` the original order.
	     *
	     * @type {String}
	     */
	    _this2.sortOrder = NONE_SORT_STATE;
	    /**
	     * Sorting empty cells.
	     *
	     * @type {Boolean}
	     */
	    _this2.sortEmptyCells = false;
	    /**
	     * Object containing visual row indexes mapped to data source indexes.
	     *
	     * @private
	     * @type {RowsMapper}
	     */
	    _this2.rowsMapper = new _rowsMapper2.default(_this2);
	    /**
	     * It blocks the plugin translation, this flag is checked inside `onModifyRow` listener.
	     *
	     * @private
	     * @type {boolean}
	     */
	    _this2.blockPluginTranslation = true;
	    return _this2;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ColumnSorting, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().columnSorting;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this3 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.setPluginOptions();
	
	      if ((0, _mixed.isUndefined)(this.hot.getSettings().observeChanges)) {
	        this.enableObserveChangesPlugin();
	      }
	
	      this.addHook('afterTrimRow', function () {
	        return _this3.sortByPresetColumnAndOrder();
	      });
	      this.addHook('afterUntrimRow', function () {
	        return _this3.sortByPresetColumnAndOrder();
	      });
	      this.addHook('modifyRow', function (row, source) {
	        return _this3.onModifyRow(row, source);
	      });
	      this.addHook('unmodifyRow', function (row, source) {
	        return _this3.onUnmodifyRow(row, source);
	      });
	      this.addHook('afterUpdateSettings', function () {
	        return _this3.onAfterUpdateSettings();
	      });
	      this.addHook('afterGetColHeader', function (column, TH) {
	        return _this3.onAfterGetColHeader(column, TH);
	      });
	      this.addHook('afterOnCellMouseDown', function (event, target) {
	        return _this3.onAfterOnCellMouseDown(event, target);
	      });
	      this.addHook('afterCreateRow', function (index, amount) {
	        return _this3.onAfterCreateRow(index, amount);
	      });
	      this.addHook('afterRemoveRow', function (index, amount) {
	        return _this3.onAfterRemoveRow(index, amount);
	      });
	      this.addHook('afterInit', function () {
	        return _this3.sortBySettings();
	      });
	      this.addHook('afterLoadData', function () {
	        _this3.rowsMapper.clearMap();
	
	        if (_this3.hot.view) {
	          _this3.sortBySettings();
	        }
	      });
	      if (this.hot.view) {
	        this.sortBySettings();
	      }
	      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Sorts the table by chosen column and order.
	     *
	     * @param {Number} column Visual column index.
	     * @param {String} [order] Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
	     *
	     * @fires Hooks#beforeColumnSort
	     * @fires Hooks#afterColumnSort
	     */
	
	  }, {
	    key: 'sort',
	    value: function sort(column) {
	      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getNextOrderState(column);
	
	      if ((0, _mixed.isUndefined)(column)) {
	        return;
	      }
	
	      var allowSorting = this.hot.runHooks('beforeColumnSort', column, order);
	
	      if (allowSorting === false) {
	        return;
	      }
	
	      this.sortColumn = this.hot.toPhysicalColumn(column);
	      this.sortOrder = order;
	
	      this.sortByPresetColumnAndOrder();
	      this.updateSortIndicator();
	
	      this.hot.runHooks('afterColumnSort', column, order);
	
	      this.hot.render();
	      this.hot.view.wt.draw(true);
	
	      this.saveSortingState();
	    }
	
	    /**
	     * Get new order state for particular column. The states queue looks as follows: 'asc' -> 'desc' -> 'none' -> 'asc'
	     *
	     * @param {Number} column Visual column index.
	     * @returns {String} Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
	     */
	
	  }, {
	    key: 'getNextOrderState',
	    value: function getNextOrderState(column) {
	      var physicalColumn = this.hot.toPhysicalColumn(column);
	
	      if (this.sortColumn === physicalColumn) {
	        if (this.sortOrder === DESC_SORT_STATE) {
	          return NONE_SORT_STATE;
	        } else if (this.sortOrder === ASC_SORT_STATE) {
	          return DESC_SORT_STATE;
	        }
	      }
	
	      return ASC_SORT_STATE;
	    }
	
	    /**
	     * Checks if any column is in a sorted state.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSorted',
	    value: function isSorted() {
	      return this.isEnabled() && this.sortOrder !== NONE_SORT_STATE;
	    }
	
	    /**
	     * Saves the sorting state. To use this method the {@link Options#persistentState} option has to be enabled.
	     *
	     * @fires Hooks#persistentStateSave
	     * @fires Hooks#columnSorting
	     */
	
	  }, {
	    key: 'saveSortingState',
	    value: function saveSortingState() {
	      var sortingState = {};
	
	      if ((0, _mixed.isDefined)(this.sortColumn)) {
	        sortingState.sortColumn = this.sortColumn;
	      }
	
	      if ((0, _mixed.isDefined)(this.sortOrder)) {
	        sortingState.sortOrder = this.sortOrder;
	      }
	
	      if ((0, _object.hasOwnProperty)(sortingState, 'sortColumn') || (0, _object.hasOwnProperty)(sortingState, 'sortOrder')) {
	        this.hot.runHooks('persistentStateSave', 'columnSorting', sortingState);
	      }
	    }
	
	    /**
	     * Loads the sorting state. To use this method the {@link Options#persistentState} option has to be enabled.
	     *
	     * @returns {*} Previously saved sorting state.
	     *
	     * @fires Hooks#persistentStateLoad
	     */
	
	  }, {
	    key: 'loadSortingState',
	    value: function loadSortingState() {
	      var storedState = {};
	      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedState);
	
	      return storedState.value;
	    }
	
	    /**
	     * Enables the ObserveChanges plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'enableObserveChangesPlugin',
	    value: function enableObserveChangesPlugin() {
	      var _this = this;
	
	      this.hot._registerTimeout(setTimeout(function () {
	        _this.hot.updateSettings({
	          observeChanges: true
	        });
	      }, 0));
	    }
	
	    /**
	     * Performs the sorting using a stable sort function.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'sortByPresetColumnAndOrder',
	    value: function sortByPresetColumnAndOrder() {
	      if (this.sortOrder === NONE_SORT_STATE) {
	        this.rowsMapper.clearMap();
	
	        return;
	      }
	
	      var indexesWithData = [];
	      var visualColumn = this.hot.toVisualColumn(this.sortColumn);
	      var columnMeta = this.hot.getCellMeta(0, visualColumn);
	      var sortFunction = (0, _utils.getSortFunctionForColumn)(columnMeta);
	      var numberOfRows = this.hot.countRows();
	      var settings = this.hot.getSettings();
	      var numberOfSortedRows = void 0;
	
	      // `maxRows` option doesn't take into account `minSpareRows` option in specific situation.
	      if (settings.maxRows <= numberOfRows) {
	        numberOfSortedRows = settings.maxRows;
	      } else {
	        numberOfSortedRows = numberOfRows - settings.minSpareRows;
	      }
	
	      if ((0, _mixed.isUndefined)(columnMeta.columnSorting.sortEmptyCells)) {
	        columnMeta.columnSorting = { sortEmptyCells: this.sortEmptyCells };
	      }
	
	      // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` listener - we check the `blockPluginTranslation` flag
	      // (we just want to get data not already modified by `columnSorting` plugin translation).
	      this.blockPluginTranslation = true;
	
	      for (var visualIndex = 0; visualIndex < numberOfSortedRows; visualIndex += 1) {
	        indexesWithData.push([visualIndex, this.hot.getDataAtCell(visualIndex, visualColumn)]);
	      }
	
	      (0, _mergeSort2.default)(indexesWithData, sortFunction(this.sortOrder, columnMeta));
	
	      // Append spareRows
	      for (var _visualIndex = indexesWithData.length; _visualIndex < numberOfRows; _visualIndex += 1) {
	        indexesWithData.push([_visualIndex, this.hot.getDataAtCell(_visualIndex, visualColumn)]);
	      }
	
	      // The blockade of the indices translation is released.
	      this.blockPluginTranslation = false;
	
	      // Save all indexes to arrayMapper, a completely new sequence is set by the plugin
	      this.rowsMapper._arrayMap = indexesWithData.map(function (indexWithData) {
	        return indexWithData[0];
	      });
	    }
	
	    /**
	     * Updates indicator states.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'updateSortIndicator',
	    value: function updateSortIndicator() {
	      if (this.sortOrder === NONE_SORT_STATE) {
	        return;
	      }
	
	      var visualColumn = this.hot.toVisualColumn(this.sortColumn);
	      var columnMeta = this.hot.getCellMeta(0, visualColumn);
	
	      this.sortIndicators[this.sortColumn] = columnMeta.sortIndicator;
	    }
	
	    /**
	     * Sets options by passed settings
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setPluginOptions',
	    value: function setPluginOptions() {
	      var columnSorting = this.hot.getSettings().columnSorting;
	
	      if ((0, _object.isObject)(columnSorting)) {
	        this.sortEmptyCells = columnSorting.sortEmptyCells || false;
	      } else {
	        this.sortEmptyCells = false;
	      }
	    }
	
	    /**
	     * `modifyRow` hook callback. Translates visual row index to the sorted row index.
	     *
	     * @private
	     * @param {Number} row Visual Row index.
	     * @returns {Number} Physical row index.
	     */
	
	  }, {
	    key: 'onModifyRow',
	    value: function onModifyRow(row, source) {
	      var physicalRow = row;
	
	      if (this.blockPluginTranslation === false && source !== this.pluginName) {
	        var rowInMapper = this.rowsMapper.getValueByIndex(physicalRow);
	        physicalRow = rowInMapper === null ? physicalRow : rowInMapper;
	      }
	
	      return physicalRow;
	    }
	
	    /**
	     * Translates sorted row index to visual row index.
	     *
	     * @private
	     * @param {Number} row Physical row index.
	     * @returns {Number} Visual row index.
	     */
	
	  }, {
	    key: 'onUnmodifyRow',
	    value: function onUnmodifyRow(row, source) {
	      var visualRow = row;
	
	      if (this.blockPluginTranslation === false && source !== this.pluginName) {
	        visualRow = this.rowsMapper.getIndexByValue(visualRow);
	      }
	
	      return visualRow;
	    }
	
	    /**
	     * `onAfterGetColHeader` callback. Adds column sorting css classes to clickable headers.
	     *
	     * @private
	     * @param {Number} column Visual column index.
	     * @param {Element} TH TH HTML element.
	     */
	
	  }, {
	    key: 'onAfterGetColHeader',
	    value: function onAfterGetColHeader(column, TH) {
	      if (column < 0 || !TH.parentNode) {
	        return false;
	      }
	
	      var headerLink = TH.querySelector('.colHeader');
	      var TRs = TH.parentNode.parentNode.childNodes;
	      var addedClasses = [];
	      var removedClassess = [HEADER_CLASS_DESC_SORT, HEADER_CLASS_ASC_SORT];
	      var physicalColumn = this.hot.toPhysicalColumn(column);
	      var headerLevel = Array.prototype.indexOf.call(TRs, TH.parentNode);
	      headerLevel -= TRs.length;
	
	      if (!headerLink) {
	        return;
	      }
	
	      if (this.hot.getSettings().columnSorting && column >= 0 && headerLevel === -1) {
	        addedClasses.push(HEADER_CLASS_SORTING);
	      }
	
	      if (this.sortIndicators[physicalColumn]) {
	        if (physicalColumn === this.sortColumn) {
	          if (this.sortOrder === ASC_SORT_STATE) {
	            addedClasses.push(HEADER_CLASS_ASC_SORT);
	          } else if (this.sortOrder === DESC_SORT_STATE) {
	            addedClasses.push(HEADER_CLASS_DESC_SORT);
	          }
	        }
	      }
	
	      var notAddedThenClasses = removedClassess.filter(function (removedClass) {
	        return addedClasses.includes(removedClass) === false;
	      });
	
	      (0, _element.removeClass)(headerLink, notAddedThenClasses);
	      (0, _element.addClass)(headerLink, addedClasses);
	    }
	
	    /**
	     * afterUpdateSettings callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterUpdateSettings',
	    value: function onAfterUpdateSettings() {
	      this.sortBySettings();
	    }
	
	    /**
	     * Sort the table by provided configuration.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'sortBySettings',
	    value: function sortBySettings() {
	      var sortingSettings = this.hot.getSettings().columnSorting;
	      var loadedSortingState = this.loadSortingState();
	      var sortingColumn = void 0;
	      var sortingOrder = void 0;
	
	      if ((0, _mixed.isUndefined)(loadedSortingState)) {
	        sortingColumn = sortingSettings.column;
	        sortingOrder = sortingSettings.sortOrder;
	      } else {
	        sortingColumn = loadedSortingState.sortColumn;
	        sortingOrder = loadedSortingState.sortOrder;
	      }
	
	      if (typeof sortingColumn === 'number') {
	        this.sort(sortingColumn, sortingOrder);
	      }
	    }
	
	    /**
	     * `afterCreateRow` callback. Updates the sorting state after a row have been created.
	     *
	     * @private
	     * @param {Number} index Visual index of the created row.
	     * @param {Number} amount Amount of created rows.
	     */
	
	  }, {
	    key: 'onAfterCreateRow',
	    value: function onAfterCreateRow(index, amount) {
	      this.rowsMapper.shiftItems(index, amount);
	    }
	
	    /**
	     * `afterRemoveRow` hook callback.
	     *
	     * @private
	     * @param {Number} removedRows Visual indexes of the removed row.
	     * @param {Number} amount  Amount of removed rows.
	     */
	
	  }, {
	    key: 'onAfterRemoveRow',
	    value: function onAfterRemoveRow(removedRows, amount) {
	      this.rowsMapper.unshiftItems(removedRows, amount);
	    }
	
	    /**
	     * `onAfterOnCellMouseDown` hook callback.
	     *
	     * @private
	     * @param {Event} event Event which are provided by hook.
	     * @param {CellCoords} coords Visual coords of the selected cell.
	     */
	
	  }, {
	    key: 'onAfterOnCellMouseDown',
	    value: function onAfterOnCellMouseDown(event, coords) {
	      if (coords.row >= 0) {
	        return;
	      }
	
	      if ((0, _element.hasClass)(event.realTarget, HEADER_CLASS_SORTING)) {
	        this.sort(coords.col);
	      }
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.rowsMapper.destroy();
	
	      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return ColumnSorting;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('columnSorting', ColumnSorting);
	
	exports.default = ColumnSorting;
	
	/***/ }),
	/* 292 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = dateSort;
	
	var _moment = __webpack_require__(57);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _mixed = __webpack_require__(11);
	
	var _utils = __webpack_require__(73);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Date sorting algorithm
	 *
	 * @param {String} sortOrder Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
	 * @param {Object} columnMeta Column meta object.
	 * @returns {Function} The compare function.
	 */
	function dateSort(sortOrder, columnMeta) {
	  // We are soring array of arrays. Single array is in form [rowIndex, ...value]. We compare just values, stored at second index of array.
	  return function (_ref, _ref2) {
	    var _ref4 = _slicedToArray(_ref, 2),
	        value = _ref4[1];
	
	    var _ref3 = _slicedToArray(_ref2, 2),
	        nextValue = _ref3[1];
	
	    var sortEmptyCells = columnMeta.columnSorting.sortEmptyCells;
	
	    if (value === nextValue) {
	      return _utils.DO_NOT_SWAP;
	    }
	
	    if ((0, _mixed.isEmpty)(value)) {
	      if ((0, _mixed.isEmpty)(nextValue)) {
	        // Two empty values
	        return _utils.DO_NOT_SWAP;
	      }
	
	      // Just fist value is empty and `sortEmptyCells` option was set
	      if (sortEmptyCells) {
	        return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	      }
	
	      return _utils.FIRST_AFTER_SECOND;
	    }
	
	    if ((0, _mixed.isEmpty)(nextValue)) {
	      // Just second value is empty and `sortEmptyCells` option was set
	      if (sortEmptyCells) {
	        return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	      }
	
	      return _utils.FIRST_BEFORE_SECOND;
	    }
	
	    var dateFormat = columnMeta.dateFormat;
	    var firstDate = (0, _moment2.default)(value, dateFormat);
	    var nextDate = (0, _moment2.default)(nextValue, dateFormat);
	
	    if (!firstDate.isValid()) {
	      return _utils.FIRST_AFTER_SECOND;
	    }
	
	    if (!nextDate.isValid()) {
	      return _utils.FIRST_BEFORE_SECOND;
	    }
	
	    if (nextDate.isAfter(firstDate)) {
	      return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	    }
	
	    if (nextDate.isBefore(firstDate)) {
	      return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	    }
	
	    return _utils.DO_NOT_SWAP;
	  };
	}
	
	/***/ }),
	/* 293 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = defaultSort;
	
	var _mixed = __webpack_require__(11);
	
	var _utils = __webpack_require__(73);
	
	/**
	 * Default sorting algorithm.
	 *
	 * @param {String} sortOrder Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
	 * @param {Object} columnMeta Column meta object.
	 * @returns {Function} The compare function.
	 */
	function defaultSort(sortOrder, columnMeta) {
	  // We are sorting array of arrays. Single array is in form [rowIndex, ...value]. We compare just values, stored at second index of array.
	  return function (_ref, _ref2) {
	    var _ref4 = _slicedToArray(_ref, 2),
	        firstValue = _ref4[1];
	
	    var _ref3 = _slicedToArray(_ref2, 2),
	        secondValue = _ref3[1];
	
	    var sortEmptyCells = columnMeta.columnSorting.sortEmptyCells;
	
	    var value = firstValue;
	    var nextValue = secondValue;
	
	    if (typeof value === 'string') {
	      value = value.toLowerCase();
	    }
	
	    if (typeof nextValue === 'string') {
	      nextValue = nextValue.toLowerCase();
	    }
	
	    if (value === nextValue) {
	      return _utils.DO_NOT_SWAP;
	    }
	
	    if ((0, _mixed.isEmpty)(value)) {
	      if ((0, _mixed.isEmpty)(nextValue)) {
	        // Two empty values
	        return _utils.DO_NOT_SWAP;
	      }
	
	      // Just fist value is empty and `sortEmptyCells` option was set
	      if (sortEmptyCells) {
	        return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	      }
	
	      return _utils.FIRST_AFTER_SECOND;
	    }
	
	    if ((0, _mixed.isEmpty)(nextValue)) {
	      // Just second value is empty and `sortEmptyCells` option was set
	      if (sortEmptyCells) {
	        return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	      }
	
	      return _utils.FIRST_BEFORE_SECOND;
	    }
	
	    if (isNaN(value) && !isNaN(nextValue)) {
	      return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	    } else if (!isNaN(value) && isNaN(nextValue)) {
	      return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	    } else if (!(isNaN(value) || isNaN(nextValue))) {
	      value = parseFloat(value);
	      nextValue = parseFloat(nextValue);
	    }
	
	    if (value < nextValue) {
	      return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	    }
	
	    if (value > nextValue) {
	      return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	    }
	
	    return _utils.DO_NOT_SWAP;
	  };
	}
	
	/***/ }),
	/* 294 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = numericSort;
	
	var _mixed = __webpack_require__(11);
	
	var _utils = __webpack_require__(73);
	
	/**
	 * Numeric sorting algorithm.
	 *
	 * @param {String} sortOrder Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
	 * @param {Object} columnMeta Column meta object.
	 * @returns {Function} The compare function.
	 */
	function numericSort(sortOrder, columnMeta) {
	  // We are soring array of arrays. Single array is in form [rowIndex, ...value]. We compare just values, stored at second index of array.
	  return function (_ref, _ref2) {
	    var _ref4 = _slicedToArray(_ref, 2),
	        value = _ref4[1];
	
	    var _ref3 = _slicedToArray(_ref2, 2),
	        nextValue = _ref3[1];
	
	    var sortEmptyCells = columnMeta.columnSorting.sortEmptyCells;
	    var parsedFirstValue = parseFloat(value);
	    var parsedSecondValue = parseFloat(nextValue);
	
	    // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined
	    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {
	      return _utils.DO_NOT_SWAP;
	    }
	
	    if (sortEmptyCells) {
	      if ((0, _mixed.isEmpty)(value)) {
	        return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	      }
	
	      if ((0, _mixed.isEmpty)(nextValue)) {
	        return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	      }
	    }
	
	    if (isNaN(parsedFirstValue)) {
	      return _utils.FIRST_AFTER_SECOND;
	    }
	
	    if (isNaN(parsedSecondValue)) {
	      return _utils.FIRST_BEFORE_SECOND;
	    }
	
	    if (parsedFirstValue < parsedSecondValue) {
	      return sortOrder === 'asc' ? _utils.FIRST_BEFORE_SECOND : _utils.FIRST_AFTER_SECOND;
	    } else if (parsedFirstValue > parsedSecondValue) {
	      return sortOrder === 'asc' ? _utils.FIRST_AFTER_SECOND : _utils.FIRST_BEFORE_SECOND;
	    }
	
	    return _utils.DO_NOT_SWAP;
	  };
	}
	
	/***/ }),
	/* 295 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = mergeSort;
	
	var _linkedList = __webpack_require__(296);
	
	var _linkedList2 = _interopRequireDefault(_linkedList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Refactored implementation of mergeSort (part of javascript-algorithms project) by Github users:
	 * mgechev, AndriiHeonia and lekkas (part of javascript-algorithms project - all project contributors
	 * at repository website)
	 *
	 * Link to repository: https://github.com/mgechev/javascript-algorithms
	 */
	
	/**
	 * Specifies a function that defines the sort order. The array is sorted according to each
	 * character's Unicode code point value, according to the string conversion of each element.
	 *
	 * @param a {*} first compared element.
	 * @param b {*} second compared element.
	 * @returns {Number}
	 */
	var defaultCompareFunction = function defaultCompareFunction(a, b) {
	  // sort lexically
	
	  var firstValue = a.toString();
	  var secondValue = b.toString();
	
	  if (firstValue === secondValue) {
	    return 0;
	  } else if (firstValue < secondValue) {
	    return -1;
	  }
	
	  return 1;
	};
	
	/**
	 * Mergesort method which is recursively called for sorting the input array.
	 *
	 * @param {Array} array The array which should be sorted.
	 * @param {Function} compareFunction Compares two items in an array. If compareFunction is not supplied,
	 * elements are sorted by converting them to strings and comparing strings in Unicode code point order.
	 * @param {Number} startIndex Left side of the subarray.
	 * @param {Number} endIndex Right side of the subarray.
	 * @returns {Array} Array with sorted subarray.
	 */
	function mergeSort(array) {
	  var compareFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCompareFunction;
	  var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	  var endIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length;
	
	  if (Math.abs(endIndex - startIndex) <= 1) {
	    return [];
	  }
	
	  var middleIndex = Math.ceil((startIndex + endIndex) / 2);
	
	  mergeSort(array, compareFunction, startIndex, middleIndex);
	  mergeSort(array, compareFunction, middleIndex, endIndex);
	
	  return merge(array, compareFunction, startIndex, middleIndex, endIndex);
	}
	
	/**
	 * Devides and sort merges two subarrays of given array
	 *
	 * @param {Array} array The array which subarrays should be sorted.
	 * @param {Number} startIndex The start of the first subarray.
	 *   This subarray is with end middle - 1.
	 * @param {Number} middleIndex The start of the second array.
	 * @param {Number} endIndex end - 1 is the end of the second array.
	 * @returns {Array} The array with sorted subarray.
	 */
	function merge(array, compareFunction, startIndex, middleIndex, endIndex) {
	  var leftElements = new _linkedList2.default();
	  var rightElements = new _linkedList2.default();
	  var leftSize = middleIndex - startIndex;
	  var rightSize = endIndex - middleIndex;
	  var maxSize = Math.max(leftSize, rightSize);
	  var size = endIndex - startIndex;
	
	  for (var _i = 0; _i < maxSize; _i += 1) {
	    if (_i < leftSize) {
	      leftElements.push(array[startIndex + _i]);
	    }
	
	    if (_i < rightSize) {
	      rightElements.push(array[middleIndex + _i]);
	    }
	  }
	
	  var i = 0;
	
	  while (i < size) {
	    if (leftElements.first && rightElements.first) {
	      if (compareFunction(leftElements.first.data, rightElements.first.data) > 0) {
	        array[startIndex + i] = rightElements.shift().data;
	      } else {
	        array[startIndex + i] = leftElements.shift().data;
	      }
	    } else if (leftElements.first) {
	
	      array[startIndex + i] = leftElements.shift().data;
	    } else {
	
	      array[startIndex + i] = rightElements.shift().data;
	    }
	
	    i += 1;
	  }
	
	  return array;
	}
	
	/***/ }),
	/* 296 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Refactored implementation of LinkedList (part of javascript-algorithms project) by Github users:
	 * mgechev, AndriiHeonia, Microfed and Jakeh (part of javascript-algorithms project - all project contributors
	 * at repository website)
	 *
	 * Link to repository: https://github.com/mgechev/javascript-algorithms
	 */
	
	/**
	 * Linked list node.
	 *
	 * @class NodeStructure
	 * @util
	 */
	var NodeStructure = function NodeStructure(data) {
	  _classCallCheck(this, NodeStructure);
	
	  /**
	   * Data of the node.
	   * @member {Object}
	   */
	  this.data = data;
	  /**
	   * Next node.
	   * @member {NodeStructure}
	   */
	  this.next = null;
	  /**
	   * Previous node.
	   * @member {NodeStructure}
	   */
	  this.prev = null;
	};
	
	/**
	 * Linked list.
	 *
	 * @class LinkedList
	 * @util
	 */
	
	
	var LinkedList = function () {
	  function LinkedList() {
	    _classCallCheck(this, LinkedList);
	
	    this.first = null;
	    this.last = null;
	  }
	
	  /**
	   * Add data to the end of linked list.
	   *
	   * @param {Object} data Data which should be added.
	   */
	
	
	  _createClass(LinkedList, [{
	    key: "push",
	    value: function push(data) {
	      var node = new NodeStructure(data);
	
	      if (this.first === null) {
	        this.first = node;
	        this.last = node;
	      } else {
	        var temp = this.last;
	
	        this.last = node;
	        node.prev = temp;
	        temp.next = node;
	      }
	    }
	
	    /**
	     * Add data to the beginning of linked list.
	     *
	     * @param {Object} data Data which should be added.
	     */
	
	  }, {
	    key: "unshift",
	    value: function unshift(data) {
	      var node = new NodeStructure(data);
	
	      if (this.first === null) {
	        this.first = node;
	        this.last = node;
	      } else {
	        var temp = this.first;
	
	        this.first = node;
	        node.next = temp;
	        temp.prev = node;
	      }
	    }
	
	    /**
	     * In order traversal of the linked list.
	     *
	     * @param {Function} callback Callback which should be executed on each node.
	     */
	
	  }, {
	    key: "inorder",
	    value: function inorder(callback) {
	      var temp = this.first;
	
	      while (temp) {
	        callback(temp);
	        temp = temp.next;
	      }
	    }
	
	    /**
	     * Remove data from the linked list.
	     *
	     * @param {Object} data Data which should be removed.
	     * @returns {Boolean} Returns true if data has been removed.
	     */
	
	  }, {
	    key: "remove",
	    value: function remove(data) {
	      if (this.first === null) {
	        return false;
	      }
	
	      var temp = this.first;
	      var next = void 0;
	      var prev = void 0;
	
	      while (temp) {
	        if (temp.data === data) {
	          next = temp.next;
	          prev = temp.prev;
	
	          if (next) {
	            next.prev = prev;
	          }
	
	          if (prev) {
	            prev.next = next;
	          }
	
	          if (temp === this.first) {
	            this.first = next;
	          }
	
	          if (temp === this.last) {
	            this.last = prev;
	          }
	
	          return true;
	        }
	
	        temp = temp.next;
	      }
	
	      return false;
	    }
	
	    /**
	     * Check if linked list contains cycle.
	     *
	     * @returns {Boolean} Returns true if linked list contains cycle.
	     */
	
	  }, {
	    key: "hasCycle",
	    value: function hasCycle() {
	      var fast = this.first;
	      var slow = this.first;
	
	      while (true) {
	        if (fast === null) {
	          return false;
	        }
	
	        fast = fast.next;
	
	        if (fast === null) {
	          return false;
	        }
	
	        fast = fast.next;
	        slow = slow.next;
	
	        if (fast === slow) {
	          return true;
	        }
	      }
	    }
	
	    /**
	     * Return last node from the linked list.
	     *
	     * @returns {NodeStructure} Last node.
	     */
	
	  }, {
	    key: "pop",
	    value: function pop() {
	      if (this.last === null) {
	        return null;
	      }
	
	      var temp = this.last;
	      this.last = this.last.prev;
	
	      return temp;
	    }
	
	    /**
	     * Return first node from the linked list.
	     *
	     * @returns {NodeStructure} First node.
	     */
	
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.first === null) {
	        return null;
	      }
	
	      var temp = this.first;
	      this.first = this.first.next;
	
	      return temp;
	    }
	
	    /**
	     * Reverses the linked list recursively
	     */
	
	  }, {
	    key: "recursiveReverse",
	    value: function recursiveReverse() {
	      function inverse(current, next) {
	        if (!next) {
	          return;
	        }
	        inverse(next, next.next);
	        next.next = current;
	      }
	
	      if (!this.first) {
	        return;
	      }
	
	      inverse(this.first, this.first.next);
	
	      this.first.next = null;
	      var temp = this.first;
	      this.first = this.last;
	      this.last = temp;
	    }
	
	    /**
	     * Reverses the linked list iteratively
	     */
	
	  }, {
	    key: "reverse",
	    value: function reverse() {
	      if (!this.first || !this.first.next) {
	        return;
	      }
	
	      var current = this.first.next;
	      var prev = this.first;
	      var temp = void 0;
	
	      while (current) {
	        temp = current.next;
	        current.next = prev;
	        prev.prev = current;
	        prev = current;
	        current = temp;
	      }
	
	      this.first.next = null;
	      this.last.prev = null;
	      temp = this.first;
	      this.first = prev;
	      this.last = temp;
	    }
	  }]);
	
	  return LinkedList;
	}();
	
	exports.NodeStructure = NodeStructure;
	exports.default = LinkedList;
	
	/***/ }),
	/* 297 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _arrayMapper = __webpack_require__(94);
	
	var _arrayMapper2 = _interopRequireDefault(_arrayMapper);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class RowsMapper
	 * @plugin ColumnSorting
	 */
	var RowsMapper = function () {
	  function RowsMapper(columnSorting) {
	    _classCallCheck(this, RowsMapper);
	
	    /**
	     * Instance of ColumnSorting plugin.
	     *
	     * @type {ColumnSorting}
	     */
	    this.columnSorting = columnSorting;
	  }
	
	  /**
	   * Reset current map array and create new one.
	   *
	   * @param {Number} [length] Custom generated map length.
	   */
	
	
	  _createClass(RowsMapper, [{
	    key: 'createMap',
	    value: function createMap(length) {
	      var _this = this;
	
	      var originLength = length === void 0 ? this._arrayMap.length : length;
	
	      this._arrayMap.length = 0;
	
	      (0, _number.rangeEach)(originLength - 1, function (itemIndex) {
	        _this._arrayMap[itemIndex] = itemIndex;
	      });
	    }
	
	    /**
	     * Destroy class.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this._arrayMap = null;
	    }
	  }]);
	
	  return RowsMapper;
	}();
	
	(0, _object.mixin)(RowsMapper, _arrayMapper2.default);
	
	exports.default = RowsMapper;
	
	/***/ }),
	/* 298 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _element = __webpack_require__(0);
	
	var _object = __webpack_require__(1);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _src = __webpack_require__(4);
	
	var _plugins = __webpack_require__(8);
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _commentEditor = __webpack_require__(299);
	
	var _commentEditor2 = _interopRequireDefault(_commentEditor);
	
	var _utils = __webpack_require__(19);
	
	var _displaySwitch = __webpack_require__(300);
	
	var _displaySwitch2 = _interopRequireDefault(_displaySwitch);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	__webpack_require__(301);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var privatePool = new WeakMap();
	var META_COMMENT = 'comment';
	var META_COMMENT_VALUE = 'value';
	var META_STYLE = 'style';
	var META_READONLY = 'readOnly';
	
	/**
	 * @plugin Comments
	 *
	 * @description
	 * This plugin allows setting and managing cell comments by either an option in the context menu or with the use of
	 * the API.
	 *
	 * To enable the plugin, you'll need to set the comments property of the config object to `true`:
	 * ```js
	 * comments: true
	 * ```
	 *
	 * or an object with extra predefined plugin config:
	 *
	 * ```js
	 * comments: {
	 *   displayDelay: 1000
	 * }
	 * ```
	 *
	 * To add comments at the table initialization, define the `comment` property in the `cell` config array as in an example below.
	 *
	 * @example
	 *
	 * ```js
	 * const hot = new Handsontable(document.getElementById('example'), {
	 *   date: getData(),
	 *   comments: true,
	 *   cell: [
	 *     {row: 1, col: 1, comment: {value: 'Foo'}},
	 *     {row: 2, col: 2, comment: {value: 'Bar'}}
	 *   ]
	 * });
	 *
	 * // Access to the Comments plugin instance:
	 * const commentsPlugin = hot.getPlugin('comments');
	 *
	 * // Manage comments programmatically:
	 * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');
	 * commentsPlugin.showAtCell(1, 6);
	 * commentsPlugin.removeCommentAtCell(1, 6);
	 *
	 * // You can also set range once and use proper methods:
	 * commentsPlugin.setRange({from: {row: 1, col: 6}});
	 * commentsPlugin.setComment('Comment contents');
	 * commentsPlugin.show();
	 * commentsPlugin.removeComment();
	 * ```
	 */
	
	var Comments = function (_BasePlugin) {
	  _inherits(Comments, _BasePlugin);
	
	  function Comments(hotInstance) {
	    _classCallCheck(this, Comments);
	
	    /**
	     * Instance of {@link CommentEditor}.
	     *
	     * @private
	     * @type {CommentEditor}
	     */
	    var _this = _possibleConstructorReturn(this, (Comments.__proto__ || Object.getPrototypeOf(Comments)).call(this, hotInstance));
	
	    _this.editor = null;
	    /**
	     * Instance of {@link DisplaySwitch}.
	     *
	     * @private
	     * @type {DisplaySwitch}
	     */
	    _this.displaySwitch = null;
	    /**
	     * Instance of {@link EventManager}.
	     *
	     * @private
	     * @type {EventManager}
	     */
	    _this.eventManager = null;
	    /**
	     * Current cell range, an object with `from` property, with `row` and `col` properties (e.q. `{from: {row: 1, col: 6}}`).
	     *
	     * @type {Object}
	     */
	    _this.range = {};
	    /**
	     * @private
	     * @type {Boolean}
	     */
	    _this.mouseDown = false;
	    /**
	     * @private
	     * @type {Boolean}
	     */
	    _this.contextMenuEvent = false;
	    /**
	     * @private
	     * @type {*}
	     */
	    _this.timer = null;
	
	    privatePool.set(_this, {
	      tempEditorDimensions: {},
	      cellBelowCursor: null
	    });
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link Comments#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(Comments, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().comments;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      if (!this.editor) {
	        this.editor = new _commentEditor2.default();
	      }
	
	      if (!this.eventManager) {
	        this.eventManager = new _eventManager2.default(this);
	      }
	
	      if (!this.displaySwitch) {
	        this.displaySwitch = new _displaySwitch2.default(this.getDisplayDelaySetting());
	      }
	
	      this.addHook('afterContextMenuDefaultOptions', function (options) {
	        return _this2.addToContextMenu(options);
	      });
	      this.addHook('afterRenderer', function (TD, row, col, prop, value, cellProperties) {
	        return _this2.onAfterRenderer(TD, cellProperties);
	      });
	      this.addHook('afterScrollHorizontally', function () {
	        return _this2.hide();
	      });
	      this.addHook('afterScrollVertically', function () {
	        return _this2.hide();
	      });
	      this.addHook('afterBeginEditing', function () {
	        return _this2.onAfterBeginEditing();
	      });
	
	      this.displaySwitch.addLocalHook('hide', function () {
	        return _this2.hide();
	      });
	      this.displaySwitch.addLocalHook('show', function (row, col) {
	        return _this2.showAtCell(row, col);
	      });
	
	      this.registerListeners();
	
	      _get(Comments.prototype.__proto__ || Object.getPrototypeOf(Comments.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	      _get(Comments.prototype.__proto__ || Object.getPrototypeOf(Comments.prototype), 'updatePlugin', this).call(this);
	
	      this.displaySwitch.updateDelay(this.getDisplayDelaySetting());
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(Comments.prototype.__proto__ || Object.getPrototypeOf(Comments.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Registers all necessary DOM listeners.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerListeners',
	    value: function registerListeners() {
	      var _this3 = this;
	
	      this.eventManager.addEventListener(document, 'mouseover', function (event) {
	        return _this3.onMouseOver(event);
	      });
	      this.eventManager.addEventListener(document, 'mousedown', function (event) {
	        return _this3.onMouseDown(event);
	      });
	      this.eventManager.addEventListener(document, 'mouseup', function () {
	        return _this3.onMouseUp();
	      });
	      this.eventManager.addEventListener(this.editor.getInputElement(), 'blur', function () {
	        return _this3.onEditorBlur();
	      });
	      this.eventManager.addEventListener(this.editor.getInputElement(), 'mousedown', function (event) {
	        return _this3.onEditorMouseDown(event);
	      });
	      this.eventManager.addEventListener(this.editor.getInputElement(), 'mouseup', function (event) {
	        return _this3.onEditorMouseUp(event);
	      });
	    }
	
	    /**
	     * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
	     *
	     * @param {Object} range Object with `from` property, each with `row` and `col` properties.
	     */
	
	  }, {
	    key: 'setRange',
	    value: function setRange(range) {
	      this.range = range;
	    }
	
	    /**
	     * Clears the currently selected cell.
	     */
	
	  }, {
	    key: 'clearRange',
	    value: function clearRange() {
	      this.range = {};
	    }
	
	    /**
	     * Checks if the event target is a cell containing a comment.
	     *
	     * @private
	     * @param {Event} event DOM event
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'targetIsCellWithComment',
	    value: function targetIsCellWithComment(event) {
	      var closestCell = (0, _element.closest)(event.target, 'TD', 'TBODY');
	
	      return !!(closestCell && (0, _element.hasClass)(closestCell, 'htCommentCell') && (0, _element.closest)(closestCell, [this.hot.rootElement]));
	    }
	
	    /**
	     * Checks if the event target is a comment textarea.
	     *
	     * @private
	     * @param {Event} event DOM event.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'targetIsCommentTextArea',
	    value: function targetIsCommentTextArea(event) {
	      return this.editor.getInputElement() === event.target;
	    }
	
	    /**
	     * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
	     *
	     * @param {String} value Comment contents.
	     */
	
	  }, {
	    key: 'setComment',
	    value: function setComment(value) {
	      if (!this.range.from) {
	        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	      }
	      var editorValue = this.editor.getValue();
	      var comment = '';
	
	      if (value !== null && value !== void 0) {
	        comment = value;
	      } else if (editorValue !== null && editorValue !== void 0) {
	        comment = editorValue;
	      }
	
	      var row = this.range.from.row;
	      var col = this.range.from.col;
	
	      this.updateCommentMeta(row, col, _defineProperty({}, META_COMMENT_VALUE, comment));
	      this.hot.render();
	    }
	
	    /**
	     * Sets a comment for a specified cell.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {String} value Comment contents.
	     */
	
	  }, {
	    key: 'setCommentAtCell',
	    value: function setCommentAtCell(row, column, value) {
	      this.setRange({
	        from: new _src.CellCoords(row, column)
	      });
	      this.setComment(value);
	    }
	
	    /**
	     * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
	     *
	     * @param {Boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
	     */
	
	  }, {
	    key: 'removeComment',
	    value: function removeComment() {
	      var forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	      if (!this.range.from) {
	        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	      }
	
	      this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT, void 0);
	
	      if (forceRender) {
	        this.hot.render();
	      }
	
	      this.hide();
	    }
	
	    /**
	     * Removes a comment from a specified cell.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {Boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
	     */
	
	  }, {
	    key: 'removeCommentAtCell',
	    value: function removeCommentAtCell(row, column) {
	      var forceRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	      this.setRange({
	        from: new _src.CellCoords(row, column)
	      });
	      this.removeComment(forceRender);
	    }
	
	    /**
	     * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
	     *
	     * @returns {String|undefined} Returns a content of the comment.
	     */
	
	  }, {
	    key: 'getComment',
	    value: function getComment() {
	      var row = this.range.from.row;
	      var column = this.range.from.col;
	
	      return this.getCommentMeta(row, column, META_COMMENT_VALUE);
	    }
	
	    /**
	     * Gets comment from a cell at the provided coordinates.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @returns {String|undefined} Returns a content of the comment.
	     */
	
	  }, {
	    key: 'getCommentAtCell',
	    value: function getCommentAtCell(row, column) {
	      return this.getCommentMeta(row, column, META_COMMENT_VALUE);
	    }
	
	    /**
	     * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
	     *
	     * @returns {Boolean} Returns `true` if comment editor was shown.
	     */
	
	  }, {
	    key: 'show',
	    value: function show() {
	      if (!this.range.from) {
	        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
	      }
	      var meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
	
	      this.refreshEditor(true);
	      this.editor.setValue(meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : null || '');
	
	      if (this.editor.hidden) {
	        this.editor.show();
	      }
	
	      return true;
	    }
	
	    /**
	     * Shows comment editor according to cell coordinates.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @returns {Boolean} Returns `true` if comment editor was shown.
	     */
	
	  }, {
	    key: 'showAtCell',
	    value: function showAtCell(row, column) {
	      this.setRange({
	        from: new _src.CellCoords(row, column)
	      });
	
	      return this.show();
	    }
	
	    /**
	     * Hides the comment editor.
	     */
	
	  }, {
	    key: 'hide',
	    value: function hide() {
	      if (!this.editor.hidden) {
	        this.editor.hide();
	      }
	    }
	
	    /**
	     * Refreshes comment editor position and styling.
	     *
	     * @param {Boolean} [force=false] If `true` then recalculation will be forced.
	     */
	
	  }, {
	    key: 'refreshEditor',
	    value: function refreshEditor() {
	      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      if (!force && (!this.range.from || !this.editor.isVisible())) {
	        return;
	      }
	      var scrollableElement = (0, _element.getScrollableElement)(this.hot.view.wt.wtTable.TABLE);
	      var TD = this.hot.view.wt.wtTable.getCell(this.range.from);
	      var row = this.range.from.row;
	      var column = this.range.from.col;
	      var cellOffset = (0, _element.offset)(TD);
	      var lastColWidth = this.hot.view.wt.wtTable.getStretchedColumnWidth(column);
	      var cellTopOffset = cellOffset.top < 0 ? 0 : cellOffset.top;
	      var cellLeftOffset = cellOffset.left;
	
	      if (this.hot.view.wt.wtViewport.hasVerticalScroll() && scrollableElement !== window) {
	        cellTopOffset -= this.hot.view.wt.wtOverlays.topOverlay.getScrollPosition();
	      }
	
	      if (this.hot.view.wt.wtViewport.hasHorizontalScroll() && scrollableElement !== window) {
	        cellLeftOffset -= this.hot.view.wt.wtOverlays.leftOverlay.getScrollPosition();
	      }
	
	      var x = cellLeftOffset + lastColWidth;
	      var y = cellTopOffset;
	
	      var commentStyle = this.getCommentMeta(row, column, META_STYLE);
	      var readOnly = this.getCommentMeta(row, column, META_READONLY);
	
	      if (commentStyle) {
	        this.editor.setSize(commentStyle.width, commentStyle.height);
	      } else {
	        this.editor.resetSize();
	      }
	
	      this.editor.setReadOnlyState(readOnly);
	
	      this.editor.setPosition(x, y);
	    }
	
	    /**
	     * Checks if there is a comment for selected range.
	     *
	     * @private
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'checkSelectionCommentsConsistency',
	    value: function checkSelectionCommentsConsistency() {
	      var selected = this.hot.getSelectedRangeLast();
	
	      if (!selected) {
	        return false;
	      }
	      var hasComment = false;
	      var cell = selected.from; // IN EXCEL THERE IS COMMENT ONLY FOR TOP LEFT CELL IN SELECTION
	
	      if (this.getCommentMeta(cell.row, cell.col, META_COMMENT_VALUE)) {
	        hasComment = true;
	      }
	
	      return hasComment;
	    }
	
	    /**
	     * Sets or update the comment-related cell meta.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {Object} metaObject Object defining all the comment-related meta information.
	     */
	
	  }, {
	    key: 'updateCommentMeta',
	    value: function updateCommentMeta(row, column, metaObject) {
	      var oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];
	      var newComment = void 0;
	
	      if (oldComment) {
	        newComment = (0, _object.deepClone)(oldComment);
	        (0, _object.deepExtend)(newComment, metaObject);
	      } else {
	        newComment = metaObject;
	      }
	
	      this.hot.setCellMeta(row, column, META_COMMENT, newComment);
	    }
	
	    /**
	     * Gets the comment related meta information.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {String} property Cell meta property.
	     * @returns {Mixed}
	     */
	
	  }, {
	    key: 'getCommentMeta',
	    value: function getCommentMeta(row, column, property) {
	      var cellMeta = this.hot.getCellMeta(row, column);
	
	      if (!cellMeta[META_COMMENT]) {
	        return void 0;
	      }
	
	      return cellMeta[META_COMMENT][property];
	    }
	
	    /**
	     * `mousedown` event callback.
	     *
	     * @private
	     * @param {MouseEvent} event The `mousedown` event.
	     */
	
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(event) {
	      this.mouseDown = true;
	
	      if (!this.hot.view || !this.hot.view.wt) {
	        return;
	      }
	
	      if (!this.contextMenuEvent && !this.targetIsCommentTextArea(event)) {
	        var eventCell = (0, _element.closest)(event.target, 'TD', 'TBODY');
	        var coordinates = null;
	
	        if (eventCell) {
	          coordinates = this.hot.view.wt.wtTable.getCoords(eventCell);
	        }
	
	        if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {
	          this.hide();
	        }
	      }
	      this.contextMenuEvent = false;
	    }
	
	    /**
	     * `mouseover` event callback.
	     *
	     * @private
	     * @param {MouseEvent} event The `mouseover` event.
	     */
	
	  }, {
	    key: 'onMouseOver',
	    value: function onMouseOver(event) {
	      var priv = privatePool.get(this);
	
	      priv.cellBelowCursor = document.elementFromPoint(event.clientX, event.clientY);
	
	      if (this.mouseDown || this.editor.isFocused() || (0, _element.hasClass)(event.target, 'wtBorder') || priv.cellBelowCursor !== event.target || !this.editor) {
	        return;
	      }
	
	      if (this.targetIsCellWithComment(event)) {
	        var coordinates = this.hot.view.wt.wtTable.getCoords(event.target);
	        var range = {
	          from: new _src.CellCoords(coordinates.row, coordinates.col)
	        };
	
	        this.displaySwitch.show(range);
	      } else if ((0, _element.isChildOf)(event.target, document) && !this.targetIsCommentTextArea(event)) {
	        this.displaySwitch.hide();
	      }
	    }
	
	    /**
	     * `mouseup` event callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      this.mouseDown = false;
	    }
	
	    /** *
	     * The `afterRenderer` hook callback..
	     *
	     * @private
	     * @param {HTMLTableCellElement} TD The rendered `TD` element.
	     * @param {Object} cellProperties The rendered cell's property object.
	     */
	
	  }, {
	    key: 'onAfterRenderer',
	    value: function onAfterRenderer(TD, cellProperties) {
	      if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {
	        (0, _element.addClass)(TD, cellProperties.commentedCellClassName);
	      }
	    }
	
	    /**
	     * `blur` event callback for the comment editor.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onEditorBlur',
	    value: function onEditorBlur() {
	      this.setComment();
	    }
	
	    /**
	     * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.
	     *
	     * @private
	     * @param {MouseEvent} event The `mousedown` event.
	     */
	
	  }, {
	    key: 'onEditorMouseDown',
	    value: function onEditorMouseDown(event) {
	      var priv = privatePool.get(this);
	
	      priv.tempEditorDimensions = {
	        width: (0, _element.outerWidth)(event.target),
	        height: (0, _element.outerHeight)(event.target)
	      };
	    }
	
	    /**
	     * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.
	     *
	     * @private
	     * @param {MouseEvent} event The `mouseup` event.
	     */
	
	  }, {
	    key: 'onEditorMouseUp',
	    value: function onEditorMouseUp(event) {
	      var priv = privatePool.get(this);
	      var currentWidth = (0, _element.outerWidth)(event.target);
	      var currentHeight = (0, _element.outerHeight)(event.target);
	
	      if (currentWidth !== priv.tempEditorDimensions.width + 1 || currentHeight !== priv.tempEditorDimensions.height + 2) {
	        this.updateCommentMeta(this.range.from.row, this.range.from.col, _defineProperty({}, META_STYLE, {
	          width: currentWidth,
	          height: currentHeight
	        }));
	      }
	    }
	
	    /**
	     * Context Menu's "Add comment" callback. Results in showing the comment editor.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onContextMenuAddComment',
	    value: function onContextMenuAddComment() {
	      var _this4 = this;
	
	      this.displaySwitch.cancelHiding();
	      var coords = this.hot.getSelectedRangeLast();
	
	      this.contextMenuEvent = true;
	      this.setRange({
	        from: coords.from
	      });
	      this.show();
	      setTimeout(function () {
	        if (_this4.hot) {
	          _this4.hot.deselectCell();
	          _this4.editor.focus();
	        }
	      }, 10);
	    }
	
	    /**
	     * Context Menu's "remove comment" callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onContextMenuRemoveComment',
	    value: function onContextMenuRemoveComment() {
	      var _hot$getSelectedRange = this.hot.getSelectedRangeLast(),
	          from = _hot$getSelectedRange.from,
	          to = _hot$getSelectedRange.to;
	
	      this.contextMenuEvent = true;
	
	      for (var i = from.row; i <= to.row; i++) {
	        for (var j = from.col; j <= to.col; j++) {
	          this.removeCommentAtCell(i, j, false);
	        }
	      }
	
	      this.hot.render();
	    }
	
	    /**
	     * Context Menu's "make comment read-only" callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onContextMenuMakeReadOnly',
	    value: function onContextMenuMakeReadOnly() {
	      var _hot$getSelectedRange2 = this.hot.getSelectedRangeLast(),
	          from = _hot$getSelectedRange2.from,
	          to = _hot$getSelectedRange2.to;
	
	      this.contextMenuEvent = true;
	
	      for (var i = from.row; i <= to.row; i++) {
	        for (var j = from.col; j <= to.col; j++) {
	          var currentState = !!this.getCommentMeta(i, j, META_READONLY);
	
	          this.updateCommentMeta(i, j, _defineProperty({}, META_READONLY, !currentState));
	        }
	      }
	    }
	
	    /**
	     * Add Comments plugin options to the Context Menu.
	     *
	     * @private
	     * @param {Object} defaultOptions
	     */
	
	  }, {
	    key: 'addToContextMenu',
	    value: function addToContextMenu(defaultOptions) {
	      var _this5 = this;
	
	      defaultOptions.items.push({
	        name: '---------'
	      }, {
	        key: 'commentsAddEdit',
	        name: function name() {
	          if (_this5.checkSelectionCommentsConsistency()) {
	            return _this5.hot.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_EDIT_COMMENT);
	          }
	
	          return _this5.hot.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ADD_COMMENT);
	        },
	        callback: function callback() {
	          return _this5.onContextMenuAddComment();
	        },
	        disabled: function disabled() {
	          return !(this.getSelectedLast() && !this.selection.isSelectedByCorner());
	        }
	      }, {
	        key: 'commentsRemove',
	        name: function name() {
	          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_COMMENT);
	        },
	
	        callback: function callback() {
	          return _this5.onContextMenuRemoveComment();
	        },
	        disabled: function disabled() {
	          return _this5.hot.selection.isSelectedByCorner();
	        }
	      }, {
	        key: 'commentsReadOnly',
	        name: function name() {
	          var _this6 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT);
	          var hasProperty = (0, _utils.checkSelectionConsistency)(this.getSelectedRangeLast(), function (row, col) {
	            var readOnlyProperty = _this6.getCellMeta(row, col)[META_COMMENT];
	            if (readOnlyProperty) {
	              readOnlyProperty = readOnlyProperty[META_READONLY];
	            }
	
	            if (readOnlyProperty) {
	              return true;
	            }
	          });
	
	          if (hasProperty) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	
	        callback: function callback() {
	          return _this5.onContextMenuMakeReadOnly();
	        },
	        disabled: function disabled() {
	          return _this5.hot.selection.isSelectedByCorner() || !_this5.checkSelectionCommentsConsistency();
	        }
	      });
	    }
	
	    /**
	     * Get `displayDelay` setting of comment plugin.
	     *
	     * @private
	     * @returns {Number|undefined}
	     */
	
	  }, {
	    key: 'getDisplayDelaySetting',
	    value: function getDisplayDelaySetting() {
	      var commentSetting = this.hot.getSettings().comments;
	
	      if ((0, _object.isObject)(commentSetting)) {
	        return commentSetting.displayDelay;
	      }
	
	      return void 0;
	    }
	
	    /**
	     * `afterBeginEditing` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterBeginEditing',
	    value: function onAfterBeginEditing() {
	      this.hide();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.editor) {
	        this.editor.destroy();
	      }
	
	      if (this.displaySwitch) {
	        this.displaySwitch.destroy();
	      }
	
	      _get(Comments.prototype.__proto__ || Object.getPrototypeOf(Comments.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return Comments;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('comments', Comments);
	
	exports.default = Comments;
	
	/***/ }),
	/* 299 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Comment editor for the Comments plugin.
	 *
	 * @class CommentEditor
	 * @plugin Comments
	 */
	var CommentEditor = function () {
	  _createClass(CommentEditor, null, [{
	    key: 'CLASS_EDITOR_CONTAINER',
	    get: function get() {
	      return 'htCommentsContainer';
	    }
	  }, {
	    key: 'CLASS_EDITOR',
	    get: function get() {
	      return 'htComments';
	    }
	  }, {
	    key: 'CLASS_INPUT',
	    get: function get() {
	      return 'htCommentTextArea';
	    }
	  }, {
	    key: 'CLASS_CELL',
	    get: function get() {
	      return 'htCommentCell';
	    }
	  }]);
	
	  function CommentEditor() {
	    _classCallCheck(this, CommentEditor);
	
	    this.editor = this.createEditor();
	    this.editorStyle = this.editor.style;
	
	    this.hidden = true;
	
	    this.hide();
	  }
	
	  /**
	   * Set position of the comments editor according to the  provided x and y coordinates.
	   *
	   * @param {Number} x X position (in pixels).
	   * @param {Number} y Y position (in pixels).
	   */
	
	
	  _createClass(CommentEditor, [{
	    key: 'setPosition',
	    value: function setPosition(x, y) {
	      this.editorStyle.left = x + 'px';
	      this.editorStyle.top = y + 'px';
	    }
	
	    /**
	     * Set the editor size according to the provided arguments.
	     *
	     * @param {Number} width Width in pixels.
	     * @param {Number} height Height in pixels.
	     */
	
	  }, {
	    key: 'setSize',
	    value: function setSize(width, height) {
	      if (width && height) {
	        var input = this.getInputElement();
	
	        input.style.width = width + 'px';
	        input.style.height = height + 'px';
	      }
	    }
	
	    /**
	     * Reset the editor size to its initial state.
	     */
	
	  }, {
	    key: 'resetSize',
	    value: function resetSize() {
	      var input = this.getInputElement();
	
	      input.style.width = '';
	      input.style.height = '';
	    }
	
	    /**
	     * Set the read-only state for the comments editor.
	     *
	     * @param {Boolean} state The new read only state.
	     */
	
	  }, {
	    key: 'setReadOnlyState',
	    value: function setReadOnlyState(state) {
	      var input = this.getInputElement();
	
	      input.readOnly = state;
	    }
	
	    /**
	     * Show the comments editor.
	     */
	
	  }, {
	    key: 'show',
	    value: function show() {
	      this.editorStyle.display = 'block';
	      this.hidden = false;
	    }
	
	    /**
	     * Hide the comments editor.
	     */
	
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.editorStyle.display = 'none';
	      this.hidden = true;
	    }
	
	    /**
	     * Checks if the editor is visible.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isVisible',
	    value: function isVisible() {
	      return this.editorStyle.display === 'block';
	    }
	
	    /**
	     * Set the comment value.
	     *
	     * @param {String} [value] The value to use.
	     */
	
	  }, {
	    key: 'setValue',
	    value: function setValue() {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	      var comment = value || '';
	
	      this.getInputElement().value = comment;
	    }
	
	    /**
	     * Get the comment value.
	     *
	     * @returns {String}
	     */
	
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.getInputElement().value;
	    }
	
	    /**
	     * Checks if the comment input element is focused.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isFocused',
	    value: function isFocused() {
	      return document.activeElement === this.getInputElement();
	    }
	
	    /**
	     * Focus the comments input element.
	     */
	
	  }, {
	    key: 'focus',
	    value: function focus() {
	      this.getInputElement().focus();
	    }
	
	    /**
	     * Create the `textarea` to be used as a comments editor.
	     *
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createEditor',
	    value: function createEditor() {
	      var editor = document.createElement('div');
	      var textArea = document.createElement('textarea');
	      var container = document.querySelector('.' + CommentEditor.CLASS_EDITOR_CONTAINER);
	
	      if (!container) {
	        container = document.createElement('div');
	        (0, _element.addClass)(container, CommentEditor.CLASS_EDITOR_CONTAINER);
	        document.body.appendChild(container);
	      }
	
	      (0, _element.addClass)(editor, CommentEditor.CLASS_EDITOR);
	      (0, _element.addClass)(textArea, CommentEditor.CLASS_INPUT);
	
	      editor.appendChild(textArea);
	      container.appendChild(editor);
	
	      return editor;
	    }
	
	    /**
	     * Get the input element.
	     *
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'getInputElement',
	    value: function getInputElement() {
	      return this.editor.querySelector('.' + CommentEditor.CLASS_INPUT);
	    }
	
	    /**
	     * Destroy the comments editor.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.editor.parentNode.removeChild(this.editor);
	      this.editor = null;
	      this.editorStyle = null;
	    }
	  }]);
	
	  return CommentEditor;
	}();
	
	exports.default = CommentEditor;
	
	/***/ }),
	/* 300 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _function = __webpack_require__(43);
	
	var _object = __webpack_require__(1);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DEFAULT_DISPLAY_DELAY = 250;
	var DEFAULT_HIDE_DELAY = 250;
	
	/**
	 * Display switch for the Comments plugin. Manages the time of delayed displaying / hiding comments.
	 *
	 * @class DisplaySwitch
	 * @plugin Comments
	 */
	
	var DisplaySwitch = function () {
	  function DisplaySwitch(displayDelay) {
	    _classCallCheck(this, DisplaySwitch);
	
	    /**
	     * Flag to determine if comment can be showed or hidden. State `true` mean that last performed action
	     * was an attempt to show comment element. State `false` mean that it was attempt to hide comment element.
	     *
	     * @type {Boolean}
	     */
	    this.wasLastActionShow = true;
	    /**
	     * Show comment after predefined delay. It keeps reference to immutable `debounce` function.
	     *
	     * @type {Function}
	     */
	    this.showDebounced = null;
	    /**
	     * Reference to timer, run by `setTimeout`, which is hiding comment
	     *
	     * @type {Number}
	     */
	    this.hidingTimer = null;
	
	    this.updateDelay(displayDelay);
	  }
	
	  /**
	   * Responsible for hiding comment after proper delay.
	   */
	
	
	  _createClass(DisplaySwitch, [{
	    key: 'hide',
	    value: function hide() {
	      var _this = this;
	
	      this.wasLastActionShow = false;
	
	      this.hidingTimer = setTimeout(function () {
	        if (_this.wasLastActionShow === false) {
	          _this.runLocalHooks('hide');
	        }
	      }, DEFAULT_HIDE_DELAY);
	    }
	
	    /**
	     * Responsible for showing comment after proper delay.
	     *
	     * @param {Object} range Coordinates of selected cell.
	     */
	
	  }, {
	    key: 'show',
	    value: function show(range) {
	      this.wasLastActionShow = true;
	      this.showDebounced(range);
	    }
	
	    /**
	     * Cancel hiding comment.
	     */
	
	  }, {
	    key: 'cancelHiding',
	    value: function cancelHiding() {
	      this.wasLastActionShow = true;
	
	      clearTimeout(this.hidingTimer);
	      this.hidingTimer = null;
	    }
	
	    /**
	     * Update the switch settings.
	     *
	     * @param {Number} displayDelay Delay of showing the comments (in milliseconds).
	     */
	
	  }, {
	    key: 'updateDelay',
	    value: function updateDelay() {
	      var _this2 = this;
	
	      var displayDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DISPLAY_DELAY;
	
	      this.showDebounced = (0, _function.debounce)(function (range) {
	        if (_this2.wasLastActionShow) {
	          _this2.runLocalHooks('show', range.from.row, range.from.col);
	        }
	      }, displayDelay);
	    }
	
	    /**
	     * Destroy the switcher.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.clearLocalHooks();
	    }
	  }]);
	
	  return DisplaySwitch;
	}();
	
	(0, _object.mixin)(DisplaySwitch, _localHooks2.default);
	
	exports.default = DisplaySwitch;
	
	/***/ }),
	/* 301 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 302 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _array = __webpack_require__(2);
	
	var _commandExecutor2 = __webpack_require__(303);
	
	var _commandExecutor3 = _interopRequireDefault(_commandExecutor2);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _itemsFactory = __webpack_require__(304);
	
	var _itemsFactory2 = _interopRequireDefault(_itemsFactory);
	
	var _menu = __webpack_require__(316);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _plugins = __webpack_require__(8);
	
	var _event = __webpack_require__(13);
	
	var _element = __webpack_require__(0);
	
	var _predefinedItems = __webpack_require__(96);
	
	__webpack_require__(318);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('afterContextMenuDefaultOptions');
	_pluginHooks2.default.getSingleton().register('beforeContextMenuShow');
	_pluginHooks2.default.getSingleton().register('afterContextMenuShow');
	_pluginHooks2.default.getSingleton().register('afterContextMenuHide');
	_pluginHooks2.default.getSingleton().register('afterContextMenuExecute');
	
	/**
	 * @description
	 * This plugin creates the Handsontable Context Menu. It allows to create a new row or column at any place in the
	 * grid among [other features](http://docs.handsontable.com/demo-context-menu.html).
	 * Possible values:
	 * * `true` (to enable default options),
	 * * `false` (to disable completely)
	 *
	 * or array of any available strings:
	 * * `'row_above'`
	 * * `'row_below'`
	 * * `'col_left'`
	 * * `'col_right'`
	 * * `'remove_row'`
	 * * `'remove_col'`
	 * * `'undo'`
	 * * `'redo'`
	 * * `'make_read_only'`
	 * * `'alignment'`
	 * * `'---------'` (menu item separator)
	 * * `'borders'` (with {@link Options#customBorders} turned on)
	 * * `'commentsAddEdit'` (with {@link Options#comments} turned on)
	 * * `'commentsRemove'` (with {@link Options#comments} turned on)
	 *
	 * See [the context menu demo](http://docs.handsontable.com/demo-context-menu.html) for examples.
	 *
	 * @example
	 * ```js
	 * // as a boolean
	 * contextMenu: true
	 * // as a array
	 * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo']
	 * ```
	 *
	 * @plugin ContextMenu
	 */
	
	var ContextMenu = function (_BasePlugin) {
	  _inherits(ContextMenu, _BasePlugin);
	
	  _createClass(ContextMenu, null, [{
	    key: 'DEFAULT_ITEMS',
	
	    /**
	     * Context menu default items order when `contextMenu` options is set as `true`.
	     *
	     * @returns {String[]}
	     */
	    get: function get() {
	      return [_predefinedItems.ROW_ABOVE, _predefinedItems.ROW_BELOW, _predefinedItems.SEPARATOR, _predefinedItems.COLUMN_LEFT, _predefinedItems.COLUMN_RIGHT, _predefinedItems.SEPARATOR, _predefinedItems.REMOVE_ROW, _predefinedItems.REMOVE_COLUMN, _predefinedItems.SEPARATOR, _predefinedItems.UNDO, _predefinedItems.REDO, _predefinedItems.SEPARATOR, _predefinedItems.READ_ONLY, _predefinedItems.SEPARATOR, _predefinedItems.ALIGNMENT];
	    }
	  }]);
	
	  function ContextMenu(hotInstance) {
	    _classCallCheck(this, ContextMenu);
	
	    /**
	     * Instance of {@link EventManager}.
	     *
	     * @private
	     * @type {EventManager}
	     */
	    var _this = _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this, hotInstance));
	
	    _this.eventManager = new _eventManager2.default(_this);
	    /**
	     * Instance of {@link CommandExecutor}.
	     *
	     * @private
	     * @type {CommandExecutor}
	     */
	    _this.commandExecutor = new _commandExecutor3.default(_this.hot);
	    /**
	     * Instance of {@link ItemsFactory}.
	     *
	     * @private
	     * @type {ItemsFactory}
	     */
	    _this.itemsFactory = null;
	    /**
	     * Instance of {@link Menu}.
	     *
	     * @private
	     * @type {Menu}
	     */
	    _this.menu = null;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ContextMenu#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ContextMenu, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().contextMenu;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	      this.itemsFactory = new _itemsFactory2.default(this.hot, ContextMenu.DEFAULT_ITEMS);
	
	      var settings = this.hot.getSettings().contextMenu;
	      var predefinedItems = {
	        items: this.itemsFactory.getItems(settings)
	      };
	
	      if (typeof settings.callback === 'function') {
	        this.commandExecutor.setCommonCallback(settings.callback);
	      }
	      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), 'enablePlugin', this).call(this);
	
	      var delayedInitialization = function delayedInitialization() {
	        if (!_this2.hot) {
	          return;
	        }
	
	        _this2.hot.runHooks('afterContextMenuDefaultOptions', predefinedItems);
	
	        _this2.itemsFactory.setPredefinedItems(predefinedItems.items);
	        var menuItems = _this2.itemsFactory.getItems(settings);
	
	        _this2.menu = new _menu2.default(_this2.hot, {
	          className: 'htContextMenu',
	          keepInViewport: true
	        });
	        _this2.hot.runHooks('beforeContextMenuSetItems', menuItems);
	
	        _this2.menu.setMenuItems(menuItems);
	
	        _this2.menu.addLocalHook('beforeOpen', function () {
	          return _this2.onMenuBeforeOpen();
	        });
	        _this2.menu.addLocalHook('afterOpen', function () {
	          return _this2.onMenuAfterOpen();
	        });
	        _this2.menu.addLocalHook('afterClose', function () {
	          return _this2.onMenuAfterClose();
	        });
	        _this2.menu.addLocalHook('executeCommand', function () {
	          var _executeCommand;
	
	          for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	            params[_key] = arguments[_key];
	          }
	
	          return (_executeCommand = _this2.executeCommand).call.apply(_executeCommand, [_this2].concat(params));
	        });
	
	        _this2.addHook('afterOnCellContextMenu', function (event) {
	          return _this2.onAfterOnCellContextMenu(event);
	        });
	
	        // Register all commands. Predefined and added by user or by plugins
	        (0, _array.arrayEach)(menuItems, function (command) {
	          return _this2.commandExecutor.registerCommand(command.key, command);
	        });
	      };
	
	      this.callOnPluginsReady(function () {
	        if (_this2.isPluginsReady) {
	          setTimeout(delayedInitialization, 0);
	        } else {
	          delayedInitialization();
	        }
	      });
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.close();
	
	      if (this.menu) {
	        this.menu.destroy();
	        this.menu = null;
	      }
	      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Opens menu and re-position it based on the passed coordinates.
	     *
	     * @param {Object|Event} position An object with `pageX` and `pageY` properties which contains values relative to
	     *                                the top left of the fully rendered content area in the browser or with `clientX`
	     *                                and `clientY`  properties which contains values relative to the upper left edge
	     *                                of the content area (the viewport) of the browser window. This object is structurally
	     *                                compatible with native mouse event so it can be used either.
	     */
	
	  }, {
	    key: 'open',
	    value: function open(event) {
	      if (!this.menu) {
	        return;
	      }
	      this.menu.open();
	      this.menu.setPosition({
	        top: parseInt((0, _event.pageY)(event), 10) - (0, _element.getWindowScrollTop)(),
	        left: parseInt((0, _event.pageX)(event), 10) - (0, _element.getWindowScrollLeft)()
	      });
	
	      // ContextMenu is not detected HotTableEnv correctly because is injected outside hot-table
	      this.menu.hotMenu.isHotTableEnv = this.hot.isHotTableEnv;
	      // Handsontable.eventManager.isHotTableEnv = this.hot.isHotTableEnv;
	    }
	
	    /**
	     * Closes the menu.
	     */
	
	  }, {
	    key: 'close',
	    value: function close() {
	      if (!this.menu) {
	        return;
	      }
	      this.menu.close();
	    }
	
	    /**
	     * Execute context menu command.
	     *
	     * You can execute all predefined commands:
	     *  * `'row_above'` - Insert row above
	     *  * `'row_below'` - Insert row below
	     *  * `'col_left'` - Insert column left
	     *  * `'col_right'` - Insert column right
	     *  * `'clear_column'` - Clear selected column
	     *  * `'remove_row'` - Remove row
	     *  * `'remove_col'` - Remove column
	     *  * `'undo'` - Undo last action
	     *  * `'redo'` - Redo last action
	     *  * `'make_read_only'` - Make cell read only
	     *  * `'alignment:left'` - Alignment to the left
	     *  * `'alignment:top'` - Alignment to the top
	     *  * `'alignment:right'` - Alignment to the right
	     *  * `'alignment:bottom'` - Alignment to the bottom
	     *  * `'alignment:middle'` - Alignment to the middle
	     *  * `'alignment:center'` - Alignment to the center (justify)
	     *
	     * Or you can execute command registered in settings where `key` is your command name.
	     *
	     * @param {String} commandName The command name to be executed.
	     * @param {...*} params
	     */
	
	  }, {
	    key: 'executeCommand',
	    value: function executeCommand(commandName) {
	      var _commandExecutor;
	
	      for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        params[_key2 - 1] = arguments[_key2];
	      }
	
	      (_commandExecutor = this.commandExecutor).execute.apply(_commandExecutor, [commandName].concat(params));
	    }
	
	    /**
	     * On contextmenu listener.
	     *
	     * @private
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'onAfterOnCellContextMenu',
	    value: function onAfterOnCellContextMenu(event) {
	      var settings = this.hot.getSettings();
	      var showRowHeaders = settings.rowHeaders;
	      var showColHeaders = settings.colHeaders;
	
	      function isValidElement(element) {
	        return element.nodeName === 'TD' || element.parentNode.nodeName === 'TD';
	      }
	      // if event is from hot-table we must get web component element not element inside him
	      var element = event.realTarget;
	      this.close();
	
	      if ((0, _element.hasClass)(element, 'handsontableInput')) {
	        return;
	      }
	
	      event.preventDefault();
	      (0, _event.stopPropagation)(event);
	
	      if (!(showRowHeaders || showColHeaders)) {
	        if (!isValidElement(element) && !((0, _element.hasClass)(element, 'current') && (0, _element.hasClass)(element, 'wtBorder'))) {
	          return;
	        }
	      }
	
	      this.open(event);
	    }
	
	    /**
	     * On menu before open listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMenuBeforeOpen',
	    value: function onMenuBeforeOpen() {
	      this.hot.runHooks('beforeContextMenuShow', this);
	    }
	
	    /**
	     * On menu after open listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMenuAfterOpen',
	    value: function onMenuAfterOpen() {
	      this.hot.runHooks('afterContextMenuShow', this);
	    }
	
	    /**
	     * On menu after close listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMenuAfterClose',
	    value: function onMenuAfterClose() {
	      this.hot.listen();
	      this.hot.runHooks('afterContextMenuHide', this);
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.close();
	
	      if (this.menu) {
	        this.menu.destroy();
	      }
	      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return ContextMenu;
	}(_base2.default);
	
	ContextMenu.SEPARATOR = {
	  name: _predefinedItems.SEPARATOR
	};
	
	(0, _plugins.registerPlugin)('contextMenu', ContextMenu);
	
	exports.default = ContextMenu;
	
	/***/ }),
	/* 303 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Command executor for ContextMenu.
	 *
	 * @class CommandExecutor
	 * @plugin ContextMenu
	 */
	var CommandExecutor = function () {
	  function CommandExecutor(hotInstance) {
	    _classCallCheck(this, CommandExecutor);
	
	    this.hot = hotInstance;
	    this.commands = {};
	    this.commonCallback = null;
	  }
	
	  /**
	   * Register command.
	   *
	   * @param {String} name Command name.
	   * @param {Object} commandDescriptor Command descriptor object with properties like `key` (command id),
	   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).
	   */
	
	
	  _createClass(CommandExecutor, [{
	    key: 'registerCommand',
	    value: function registerCommand(name, commandDescriptor) {
	      this.commands[name] = commandDescriptor;
	    }
	
	    /**
	     * Set common callback which will be trigger on every executed command.
	     *
	     * @param {Function} callback Function which will be fired on every command execute.
	     */
	
	  }, {
	    key: 'setCommonCallback',
	    value: function setCommonCallback(callback) {
	      this.commonCallback = callback;
	    }
	
	    /**
	     * Execute command by its name.
	     *
	     * @param {String} commandName Command id.
	     * @param {*} params Arguments passed to command task.
	     */
	
	  }, {
	    key: 'execute',
	    value: function execute(commandName) {
	      var _this = this;
	
	      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        params[_key - 1] = arguments[_key];
	      }
	
	      var commandSplit = commandName.split(':');
	      var commandNamePrimary = commandSplit[0];
	
	      var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;
	      var command = this.commands[commandNamePrimary];
	
	      if (!command) {
	        throw new Error('Menu command \'' + commandNamePrimary + '\' not exists.');
	      }
	      if (subCommandName && command.submenu) {
	        command = findSubCommand(subCommandName, command.submenu.items);
	      }
	      if (command.disabled === true) {
	        return;
	      }
	      if (typeof command.disabled === 'function' && command.disabled.call(this.hot) === true) {
	        return;
	      }
	      if ((0, _object.hasOwnProperty)(command, 'submenu')) {
	        return;
	      }
	      var callbacks = [];
	
	      if (typeof command.callback === 'function') {
	        callbacks.push(command.callback);
	      }
	      if (typeof this.commonCallback === 'function') {
	        callbacks.push(this.commonCallback);
	      }
	      params.unshift(commandSplit.join(':'));
	      (0, _array.arrayEach)(callbacks, function (callback) {
	        return callback.apply(_this.hot, params);
	      });
	    }
	  }]);
	
	  return CommandExecutor;
	}();
	
	function findSubCommand(subCommandName, subCommands) {
	  var command = void 0;
	
	  (0, _array.arrayEach)(subCommands, function (cmd) {
	    var cmds = cmd.key ? cmd.key.split(':') : null;
	
	    if (Array.isArray(cmds) && cmds[1] === subCommandName) {
	      command = cmd;
	
	      return false;
	    }
	  });
	
	  return command;
	}
	
	exports.default = CommandExecutor;
	
	/***/ }),
	/* 304 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _object = __webpack_require__(1);
	
	var _array = __webpack_require__(2);
	
	var _predefinedItems = __webpack_require__(96);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Predefined items class factory for menu items.
	 *
	 * @class ItemsFactory
	 * @plugin ContextMenu
	 */
	var ItemsFactory = function () {
	  function ItemsFactory(hotInstance) {
	    var orderPattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	    _classCallCheck(this, ItemsFactory);
	
	    this.hot = hotInstance;
	    this.predefinedItems = (0, _predefinedItems.predefinedItems)();
	    this.defaultOrderPattern = orderPattern;
	  }
	
	  /**
	   * Set predefined items.
	   *
	   * @param {Array} predefinedItemsCollection Array of predefined items.
	   */
	
	
	  _createClass(ItemsFactory, [{
	    key: 'setPredefinedItems',
	    value: function setPredefinedItems(predefinedItemsCollection) {
	      var _this = this;
	
	      var items = {};
	
	      this.defaultOrderPattern.length = 0;
	
	      (0, _object.objectEach)(predefinedItemsCollection, function (value, key) {
	        var menuItemKey = '';
	
	        if (value.name === _predefinedItems.SEPARATOR) {
	          items[_predefinedItems.SEPARATOR] = value;
	          menuItemKey = _predefinedItems.SEPARATOR;
	
	          // Menu item added as a property to array
	        } else if (isNaN(parseInt(key, 10))) {
	          value.key = value.key === void 0 ? key : value.key;
	          items[key] = value;
	          menuItemKey = value.key;
	        } else {
	          items[value.key] = value;
	          menuItemKey = value.key;
	        }
	        _this.defaultOrderPattern.push(menuItemKey);
	      });
	      this.predefinedItems = items;
	    }
	
	    /**
	     * Get all menu items based on pattern.
	     *
	     * @param {Array|Object|Boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
	     *                                       pattern will be used.
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'getItems',
	    value: function getItems() {
	      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      return _getItems(pattern, this.defaultOrderPattern, this.predefinedItems);
	    }
	  }]);
	
	  return ItemsFactory;
	}();
	
	function _getItems() {
	  var itemsPattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	  var defaultPattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	  var result = [];
	  var pattern = itemsPattern;
	
	  if (pattern && pattern.items) {
	    pattern = pattern.items;
	  } else if (!Array.isArray(pattern)) {
	    pattern = defaultPattern;
	  }
	  if ((0, _object.isObject)(pattern)) {
	    (0, _object.objectEach)(pattern, function (value, key) {
	      var item = items[typeof value === 'string' ? value : key];
	
	      if (!item) {
	        item = value;
	      }
	      if ((0, _object.isObject)(value)) {
	        (0, _object.extend)(item, value);
	      } else if (typeof item === 'string') {
	        item = { name: item };
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    });
	  } else {
	    (0, _array.arrayEach)(pattern, function (name, key) {
	      var item = items[name];
	
	      // Item deleted from settings `allowInsertRow: false` etc.
	      if (!item && _predefinedItems.ITEMS.indexOf(name) >= 0) {
	        return;
	      }
	      if (!item) {
	        item = { name: name, key: '' + key };
	      }
	      if ((0, _object.isObject)(name)) {
	        (0, _object.extend)(item, name);
	      }
	      if (item.key === void 0) {
	        item.key = key;
	      }
	      result.push(item);
	    });
	  }
	
	  return result;
	}
	
	exports.default = ItemsFactory;
	
	/***/ }),
	/* 305 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = alignmentItem;
	
	var _utils = __webpack_require__(19);
	
	var _separator = __webpack_require__(95);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'alignment';
	
	function alignmentItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT);
	    },
	    disabled: function disabled() {
	      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
	    },
	
	    submenu: {
	      items: [{
	        key: KEY + ':left',
	        name: function name() {
	          var _this = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htLeft') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this2 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this2.getCellMeta(row, col).className;
	          });
	          var type = 'horizontal';
	          var alignment = 'htLeft';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this2.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this2.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        key: KEY + ':center',
	        name: function name() {
	          var _this3 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this3.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htCenter') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this4 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this4.getCellMeta(row, col).className;
	          });
	          var type = 'horizontal';
	          var alignment = 'htCenter';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this4.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this4.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        key: KEY + ':right',
	        name: function name() {
	          var _this5 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this5.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htRight') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this6 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this6.getCellMeta(row, col).className;
	          });
	          var type = 'horizontal';
	          var alignment = 'htRight';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this6.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this6.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        key: KEY + ':justify',
	        name: function name() {
	          var _this7 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this7.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htJustify') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this8 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this8.getCellMeta(row, col).className;
	          });
	          var type = 'horizontal';
	          var alignment = 'htJustify';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this8.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this8.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        name: _separator.KEY
	      }, {
	        key: KEY + ':top',
	        name: function name() {
	          var _this9 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this9.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htTop') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	          return label;
	        },
	        callback: function callback() {
	          var _this10 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this10.getCellMeta(row, col).className;
	          });
	          var type = 'vertical';
	          var alignment = 'htTop';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this10.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this10.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        key: KEY + ':middle',
	        name: function name() {
	          var _this11 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this11.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htMiddle') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this12 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this12.getCellMeta(row, col).className;
	          });
	          var type = 'vertical';
	          var alignment = 'htMiddle';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this12.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this12.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }, {
	        key: KEY + ':bottom',
	        name: function name() {
	          var _this13 = this;
	
	          var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);
	          var hasClass = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	            var className = _this13.getCellMeta(row, col).className;
	
	            if (className && className.indexOf('htBottom') !== -1) {
	              return true;
	            }
	          });
	
	          if (hasClass) {
	            label = (0, _utils.markLabelAsSelected)(label);
	          }
	
	          return label;
	        },
	        callback: function callback() {
	          var _this14 = this;
	
	          var selectedRange = this.getSelectedRange();
	          var stateBefore = (0, _utils.getAlignmentClasses)(selectedRange, function (row, col) {
	            return _this14.getCellMeta(row, col).className;
	          });
	          var type = 'vertical';
	          var alignment = 'htBottom';
	
	          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);
	          (0, _utils.align)(selectedRange, type, alignment, function (row, col) {
	            return _this14.getCellMeta(row, col);
	          }, function (row, col, key, value) {
	            return _this14.setCellMeta(row, col, key, value);
	          });
	          this.render();
	        },
	
	        disabled: false
	      }]
	    }
	  };
	}
	
	/***/ }),
	/* 306 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = clearColumnItem;
	
	var _utils = __webpack_require__(19);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'clear_column';
	
	function clearColumnItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_CLEAR_COLUMN);
	    },
	    callback: function callback(key, selection) {
	      var column = selection[0].start.col;
	
	      if (this.countRows()) {
	        this.populateFromArray(0, column, [[null]], Math.max(selection[0].start.row, selection[0].end.row), column, 'ContextMenu.clearColumn');
	      }
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	
	      if (!selected) {
	        return true;
	      }
	
	      var _selected$ = _slicedToArray(selected[0], 3),
	          startRow = _selected$[0],
	          startColumn = _selected$[1],
	          endRow = _selected$[2];
	
	      var entireRowSelection = [startRow, 0, endRow, this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') === selected.join(',');
	
	      return startColumn < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;
	    }
	  };
	}
	
	/***/ }),
	/* 307 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = columnLeftItem;
	
	var _utils = __webpack_require__(19);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'col_left';
	
	function columnLeftItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_LEFT);
	    },
	    callback: function callback(key, normalizedSelection) {
	      var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
	
	      this.alter('insert_col', latestSelection.start.col, 1, 'ContextMenu.columnLeft');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	
	      var _selected$ = _slicedToArray(selected[0], 3),
	          startRow = _selected$[0],
	          startColumn = _selected$[1],
	          endRow = _selected$[2];
	
	      var entireRowSelection = [startRow, 0, endRow, this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') === selected.join(',');
	      var onlyOneColumn = this.countCols() === 1;
	
	      return startColumn < 0 || this.countCols() >= this.getSettings().maxCols || !onlyOneColumn && rowSelected;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  };
	}
	
	/***/ }),
	/* 308 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = columnRightItem;
	
	var _utils = __webpack_require__(19);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'col_right';
	
	function columnRightItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_RIGHT);
	    },
	    callback: function callback(key, normalizedSelection) {
	      var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
	
	      this.alter('insert_col', latestSelection.end.col + 1, 1, 'ContextMenu.columnRight');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	
	      if (!selected) {
	        return true;
	      }
	      if (!this.isColumnModificationAllowed()) {
	        return true;
	      }
	
	      var _selected$ = _slicedToArray(selected[0], 3),
	          startRow = _selected$[0],
	          startColumn = _selected$[1],
	          endRow = _selected$[2];
	
	      var entireRowSelection = [startRow, 0, endRow, this.countCols() - 1];
	      var rowSelected = entireRowSelection.join(',') === selected.join(',');
	      var onlyOneColumn = this.countCols() === 1;
	
	      return startColumn < 0 || this.countCols() >= this.getSettings().maxCols || !onlyOneColumn && rowSelected;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowInsertColumn;
	    }
	  };
	}
	
	/***/ }),
	/* 309 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = readOnlyItem;
	
	var _utils = __webpack_require__(19);
	
	var _array = __webpack_require__(2);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'make_read_only';
	
	function readOnlyItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      var _this = this;
	
	      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);
	      var atLeastOneReadOnly = (0, _utils.checkSelectionConsistency)(this.getSelectedRange(), function (row, col) {
	        return _this.getCellMeta(row, col).readOnly;
	      });
	
	      if (atLeastOneReadOnly) {
	        label = (0, _utils.markLabelAsSelected)(label);
	      }
	
	      return label;
	    },
	    callback: function callback() {
	      var _this2 = this;
	
	      var ranges = this.getSelectedRange();
	      var atLeastOneReadOnly = (0, _utils.checkSelectionConsistency)(ranges, function (row, col) {
	        return _this2.getCellMeta(row, col).readOnly;
	      });
	
	      (0, _array.arrayEach)(ranges, function (range) {
	        range.forAll(function (row, col) {
	          _this2.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);
	        });
	      });
	
	      this.render();
	    },
	    disabled: function disabled() {
	      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
	    }
	  };
	}
	
	/***/ }),
	/* 310 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = redoItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'redo';
	
	function redoItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REDO);
	    },
	    callback: function callback() {
	      this.redo();
	    },
	    disabled: function disabled() {
	      return this.undoRedo && !this.undoRedo.isRedoAvailable();
	    }
	  };
	}
	
	/***/ }),
	/* 311 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = removeColumnItem;
	
	var _utils = __webpack_require__(19);
	
	var _utils2 = __webpack_require__(72);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'remove_col';
	
	function removeColumnItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      var selection = this.getSelected();
	      var pluralForm = 0;
	
	      if (selection) {
	        if (selection.length > 1) {
	          pluralForm = 1;
	        } else {
	          var _selection$ = _slicedToArray(selection[0], 4),
	              fromColumn = _selection$[1],
	              toColumn = _selection$[3];
	
	          if (fromColumn - toColumn !== 0) {
	            pluralForm = 1;
	          }
	        }
	      }
	
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_COLUMN, pluralForm);
	    },
	    callback: function callback() {
	      this.alter('remove_col', (0, _utils2.transformSelectionToColumnDistance)(this.getSelected()), null, 'ContextMenu.removeColumn');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	      var totalColumns = this.countCols();
	
	      if (!selected) {
	        return true;
	      }
	
	      return this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner() || !this.isColumnModificationAllowed() || !totalColumns;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowRemoveColumn;
	    }
	  };
	}
	
	/***/ }),
	/* 312 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = removeRowItem;
	
	var _utils = __webpack_require__(19);
	
	var _utils2 = __webpack_require__(72);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'remove_row';
	
	function removeRowItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      var selection = this.getSelected();
	      var pluralForm = 0;
	
	      if (selection) {
	        if (selection.length > 1) {
	          pluralForm = 1;
	        } else {
	          var _selection$ = _slicedToArray(selection[0], 3),
	              fromRow = _selection$[0],
	              toRow = _selection$[2];
	
	          if (fromRow - toRow !== 0) {
	            pluralForm = 1;
	          }
	        }
	      }
	
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_ROW, pluralForm);
	    },
	    callback: function callback() {
	      this.alter('remove_row', (0, _utils2.transformSelectionToRowDistance)(this.getSelected()), null, 'ContextMenu.removeRow');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	      var totalRows = this.countRows();
	
	      if (!selected) {
	        return true;
	      }
	
	      return this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner() || !totalRows;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowRemoveRow;
	    }
	  };
	}
	
	/***/ }),
	/* 313 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = rowAboveItem;
	
	var _utils = __webpack_require__(19);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'row_above';
	
	function rowAboveItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ROW_ABOVE);
	    },
	    callback: function callback(key, normalizedSelection) {
	      var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
	
	      this.alter('insert_row', latestSelection.start.row, 1, 'ContextMenu.rowAbove');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	
	      if (!selected) {
	        return true;
	      }
	
	      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowInsertRow;
	    }
	  };
	}
	
	/***/ }),
	/* 314 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = rowBelowItem;
	
	var _utils = __webpack_require__(19);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'row_below';
	
	function rowBelowItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ROW_BELOW);
	    },
	    callback: function callback(key, normalizedSelection) {
	      var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
	
	      this.alter('insert_row', latestSelection.end.row + 1, 1, 'ContextMenu.rowBelow');
	    },
	    disabled: function disabled() {
	      var selected = (0, _utils.getValidSelection)(this);
	
	      if (!selected) {
	        return true;
	      }
	
	      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
	    },
	    hidden: function hidden() {
	      return !this.getSettings().allowInsertRow;
	    }
	  };
	}
	
	/***/ }),
	/* 315 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.KEY = undefined;
	exports.default = undoItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var KEY = exports.KEY = 'undo';
	
	function undoItem() {
	  return {
	    key: KEY,
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNDO);
	    },
	    callback: function callback() {
	      this.undo();
	    },
	    disabled: function disabled() {
	      return this.undoRedo && !this.undoRedo.isUndoAvailable();
	    }
	  };
	}
	
	/***/ }),
	/* 316 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(90);
	
	var _core2 = _interopRequireDefault(_core);
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	var _cursor = __webpack_require__(317);
	
	var _cursor2 = _interopRequireDefault(_cursor);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _object = __webpack_require__(1);
	
	var _mixed = __webpack_require__(11);
	
	var _function = __webpack_require__(43);
	
	var _utils = __webpack_require__(19);
	
	var _unicode = __webpack_require__(21);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	var _predefinedItems = __webpack_require__(96);
	
	var _event = __webpack_require__(13);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var MIN_WIDTH = 215;
	
	/**
	 * @class Menu
	 * @plugin ContextMenu
	 */
	
	var Menu = function () {
	  function Menu(hotInstance, options) {
	    _classCallCheck(this, Menu);
	
	    this.hot = hotInstance;
	    this.options = options || {
	      parent: null,
	      name: null,
	      className: '',
	      keepInViewport: true,
	      standalone: false,
	      minWidth: MIN_WIDTH
	    };
	    this.eventManager = new _eventManager2.default(this);
	    this.container = this.createContainer(this.options.name);
	    this.hotMenu = null;
	    this.hotSubMenus = {};
	    this.parentMenu = this.options.parent || null;
	    this.menuItems = null;
	    this.origOutsideClickDeselects = null;
	    this.keyEvent = false;
	
	    this.offset = {
	      above: 0,
	      below: 0,
	      left: 0,
	      right: 0
	    };
	    this._afterScrollCallback = null;
	
	    this.registerEvents();
	  }
	
	  /**
	   * Register event listeners.
	   *
	   * @private
	   */
	
	
	  _createClass(Menu, [{
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this = this;
	
	      this.eventManager.addEventListener(document.documentElement, 'mousedown', function (event) {
	        return _this.onDocumentMouseDown(event);
	      });
	    }
	
	    /**
	     * Set array of objects which defines menu items.
	     *
	     * @param {Array} menuItems Menu items to display.
	     */
	
	  }, {
	    key: 'setMenuItems',
	    value: function setMenuItems(menuItems) {
	      this.menuItems = menuItems;
	    }
	
	    /**
	     * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
	     *
	     * @param {String} area Specified area name (`above`, `below`, `left` or `right`).
	     * @param {Number} offset Offset value.
	     */
	
	  }, {
	    key: 'setOffset',
	    value: function setOffset(area) {
	      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	      this.offset[area] = offset;
	    }
	
	    /**
	     * Check if menu is using as sub-menu.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isSubMenu',
	    value: function isSubMenu() {
	      return this.parentMenu !== null;
	    }
	
	    /**
	     * Open menu.
	     *
	     * @fires Hooks#beforeContextMenuShow
	     * @fires Hooks#afterContextMenuShow
	     */
	
	  }, {
	    key: 'open',
	    value: function open() {
	      var _this2 = this;
	
	      this.runLocalHooks('beforeOpen');
	
	      this.container.removeAttribute('style');
	      this.container.style.display = 'block';
	
	      var delayedOpenSubMenu = (0, _function.debounce)(function (row) {
	        return _this2.openSubMenu(row);
	      }, 300);
	      var minWidthOfMenu = this.options.minWidth || MIN_WIDTH;
	
	      var filteredItems = (0, _array.arrayFilter)(this.menuItems, function (item) {
	        return (0, _utils.isItemHidden)(item, _this2.hot);
	      });
	
	      filteredItems = (0, _utils.filterSeparators)(filteredItems, _predefinedItems.SEPARATOR);
	
	      var settings = {
	        data: filteredItems,
	        colHeaders: false,
	        autoColumnSize: true,
	        modifyColWidth: function modifyColWidth(width) {
	          if ((0, _mixed.isDefined)(width) && width < minWidthOfMenu) {
	            return minWidthOfMenu;
	          }
	
	          return width;
	        },
	
	        autoRowSize: false,
	        readOnly: true,
	        copyPaste: false,
	        columns: [{
	          data: 'name',
	          renderer: function renderer(hot, TD, row, col, prop, value) {
	            return _this2.menuItemRenderer(hot, TD, row, col, prop, value);
	          }
	        }],
	        renderAllRows: true,
	        fragmentSelection: 'cell',
	        disableVisualSelection: 'area',
	        beforeKeyDown: function beforeKeyDown(event) {
	          return _this2.onBeforeKeyDown(event);
	        },
	        afterOnCellMouseOver: function afterOnCellMouseOver(event, coords) {
	          if (_this2.isAllSubMenusClosed()) {
	            delayedOpenSubMenu(coords.row);
	          } else {
	            _this2.openSubMenu(coords.row);
	          }
	        },
	        rowHeights: function rowHeights(row) {
	          return filteredItems[row].name === _predefinedItems.SEPARATOR ? 1 : 23;
	        }
	      };
	      this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;
	      this.hot.getSettings().outsideClickDeselects = false;
	      this.hotMenu = new _core2.default(this.container, settings);
	      this.hotMenu.addHook('afterInit', function () {
	        return _this2.onAfterInit();
	      });
	      this.hotMenu.addHook('afterSelection', function () {
	        return _this2.onAfterSelection.apply(_this2, arguments);
	      });
	      this.hotMenu.init();
	      this.hotMenu.listen();
	      this.blockMainTableCallbacks();
	      this.runLocalHooks('afterOpen');
	    }
	
	    /**
	     * Close menu.
	     *
	     * @param {Boolean} [closeParent=false] if `true` try to close parent menu if exists.
	     */
	
	  }, {
	    key: 'close',
	    value: function close() {
	      var closeParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      if (!this.isOpened()) {
	        return;
	      }
	      if (closeParent && this.parentMenu) {
	        this.parentMenu.close();
	      } else {
	        this.closeAllSubMenus();
	        this.container.style.display = 'none';
	        this.releaseMainTableCallbacks();
	        this.hotMenu.destroy();
	        this.hotMenu = null;
	        this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;
	        this.runLocalHooks('afterClose');
	
	        if (this.parentMenu) {
	          this.parentMenu.hotMenu.listen();
	        }
	      }
	    }
	
	    /**
	     * Open sub menu at the provided row index.
	     *
	     * @param {Number} row Row index.
	     * @returns {Menu|Boolean} Returns created menu or `false` if no one menu was created.
	     */
	
	  }, {
	    key: 'openSubMenu',
	    value: function openSubMenu(row) {
	      if (!this.hotMenu) {
	        return false;
	      }
	      var cell = this.hotMenu.getCell(row, 0);
	
	      this.closeAllSubMenus();
	
	      if (!cell || !(0, _utils.hasSubMenu)(cell)) {
	        return false;
	      }
	      var dataItem = this.hotMenu.getSourceDataAtRow(row);
	      var subMenu = new Menu(this.hot, {
	        parent: this,
	        name: dataItem.name,
	        className: this.options.className,
	        keepInViewport: true
	      });
	      subMenu.setMenuItems(dataItem.submenu.items);
	      subMenu.open();
	      subMenu.setPosition(cell.getBoundingClientRect());
	      this.hotSubMenus[dataItem.key] = subMenu;
	
	      return subMenu;
	    }
	
	    /**
	     * Close sub menu at row index.
	     *
	     * @param {Number} row Row index.
	     */
	
	  }, {
	    key: 'closeSubMenu',
	    value: function closeSubMenu(row) {
	      var dataItem = this.hotMenu.getSourceDataAtRow(row);
	      var menus = this.hotSubMenus[dataItem.key];
	
	      if (menus) {
	        menus.destroy();
	        delete this.hotSubMenus[dataItem.key];
	      }
	    }
	
	    /**
	     * Close all opened sub menus.
	     */
	
	  }, {
	    key: 'closeAllSubMenus',
	    value: function closeAllSubMenus() {
	      var _this3 = this;
	
	      (0, _array.arrayEach)(this.hotMenu.getData(), function (value, row) {
	        return _this3.closeSubMenu(row);
	      });
	    }
	
	    /**
	     * Checks if all created and opened sub menus are closed.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isAllSubMenusClosed',
	    value: function isAllSubMenusClosed() {
	      return Object.keys(this.hotSubMenus).length === 0;
	    }
	
	    /**
	     * Destroy instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.clearLocalHooks();
	      this.close();
	      this.parentMenu = null;
	      this.eventManager.destroy();
	    }
	
	    /**
	     * Checks if menu was opened.
	     *
	     * @returns {Boolean} Returns `true` if menu was opened.
	     */
	
	  }, {
	    key: 'isOpened',
	    value: function isOpened() {
	      return this.hotMenu !== null;
	    }
	
	    /**
	     * Execute menu command.
	     *
	     * @param {Event} [event]
	     */
	
	  }, {
	    key: 'executeCommand',
	    value: function executeCommand(event) {
	      if (!this.isOpened() || !this.hotMenu.getSelectedLast()) {
	        return;
	      }
	      var selectedItem = this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]);
	
	      this.runLocalHooks('select', selectedItem, event);
	
	      if (selectedItem.isCommand === false || selectedItem.name === _predefinedItems.SEPARATOR) {
	        return;
	      }
	      var selRanges = this.hot.getSelectedRange();
	      var normalizedSelection = selRanges ? (0, _utils.normalizeSelection)(selRanges) : [];
	      var autoClose = true;
	
	      // Don't close context menu if item is disabled or it has submenu
	      if (selectedItem.disabled === true || typeof selectedItem.disabled === 'function' && selectedItem.disabled.call(this.hot) === true || selectedItem.submenu) {
	        autoClose = false;
	      }
	
	      this.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	
	      if (this.isSubMenu()) {
	        this.parentMenu.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);
	      }
	
	      if (autoClose) {
	        this.close(true);
	      }
	    }
	
	    /**
	     * Set menu position based on dom event or based on literal object.
	     *
	     * @param {Event|Object} coords Event or literal Object with coordinates.
	     */
	
	  }, {
	    key: 'setPosition',
	    value: function setPosition(coords) {
	      var cursor = new _cursor2.default(coords);
	
	      if (this.options.keepInViewport) {
	        if (cursor.fitsBelow(this.container)) {
	          this.setPositionBelowCursor(cursor);
	        } else if (cursor.fitsAbove(this.container)) {
	          this.setPositionAboveCursor(cursor);
	        } else {
	          this.setPositionBelowCursor(cursor);
	        }
	        if (cursor.fitsOnRight(this.container)) {
	          this.setPositionOnRightOfCursor(cursor);
	        } else {
	          this.setPositionOnLeftOfCursor(cursor);
	        }
	      } else {
	        this.setPositionBelowCursor(cursor);
	        this.setPositionOnRightOfCursor(cursor);
	      }
	    }
	
	    /**
	     * Set menu position above cursor object.
	     *
	     * @param {Cursor} cursor `Cursor` object.
	     */
	
	  }, {
	    key: 'setPositionAboveCursor',
	    value: function setPositionAboveCursor(cursor) {
	      var top = this.offset.above + cursor.top - this.container.offsetHeight;
	
	      if (this.isSubMenu()) {
	        top = cursor.top + cursor.cellHeight - this.container.offsetHeight + 3;
	      }
	      this.container.style.top = top + 'px';
	    }
	
	    /**
	     * Set menu position below cursor object.
	     *
	     * @param {Cursor} cursor `Cursor` object.
	     */
	
	  }, {
	    key: 'setPositionBelowCursor',
	    value: function setPositionBelowCursor(cursor) {
	      var top = this.offset.below + cursor.top;
	
	      if (this.isSubMenu()) {
	        top = cursor.top - 1;
	      }
	      this.container.style.top = top + 'px';
	    }
	
	    /**
	     * Set menu position on the right of cursor object.
	     *
	     * @param {Cursor} cursor `Cursor` object.
	     */
	
	  }, {
	    key: 'setPositionOnRightOfCursor',
	    value: function setPositionOnRightOfCursor(cursor) {
	      var left = void 0;
	
	      if (this.isSubMenu()) {
	        left = 1 + cursor.left + cursor.cellWidth;
	      } else {
	        left = this.offset.right + 1 + cursor.left;
	      }
	
	      this.container.style.left = left + 'px';
	    }
	
	    /**
	     * Set menu position on the left of cursor object.
	     *
	     * @param {Cursor} cursor `Cursor` object.
	     */
	
	  }, {
	    key: 'setPositionOnLeftOfCursor',
	    value: function setPositionOnLeftOfCursor(cursor) {
	      var left = this.offset.left + cursor.left - this.container.offsetWidth + (0, _element.getScrollbarWidth)() + 4;
	
	      this.container.style.left = left + 'px';
	    }
	
	    /**
	     * Select first cell in opened menu.
	     */
	
	  }, {
	    key: 'selectFirstCell',
	    value: function selectFirstCell() {
	      var cell = this.hotMenu.getCell(0, 0);
	
	      if ((0, _utils.isSeparator)(cell) || (0, _utils.isDisabled)(cell) || (0, _utils.isSelectionDisabled)(cell)) {
	        this.selectNextCell(0, 0);
	      } else {
	        this.hotMenu.selectCell(0, 0);
	      }
	    }
	
	    /**
	     * Select last cell in opened menu.
	     */
	
	  }, {
	    key: 'selectLastCell',
	    value: function selectLastCell() {
	      var lastRow = this.hotMenu.countRows() - 1;
	      var cell = this.hotMenu.getCell(lastRow, 0);
	
	      if ((0, _utils.isSeparator)(cell) || (0, _utils.isDisabled)(cell) || (0, _utils.isSelectionDisabled)(cell)) {
	        this.selectPrevCell(lastRow, 0);
	      } else {
	        this.hotMenu.selectCell(lastRow, 0);
	      }
	    }
	
	    /**
	     * Select next cell in opened menu.
	     *
	     * @param {Number} row Row index.
	     * @param {Number} col Column index.
	     */
	
	  }, {
	    key: 'selectNextCell',
	    value: function selectNextCell(row, col) {
	      var nextRow = row + 1;
	      var cell = nextRow < this.hotMenu.countRows() ? this.hotMenu.getCell(nextRow, col) : null;
	
	      if (!cell) {
	        return;
	      }
	      if ((0, _utils.isSeparator)(cell) || (0, _utils.isDisabled)(cell) || (0, _utils.isSelectionDisabled)(cell)) {
	        this.selectNextCell(nextRow, col);
	      } else {
	        this.hotMenu.selectCell(nextRow, col);
	      }
	    }
	
	    /**
	     * Select previous cell in opened menu.
	     *
	     * @param {Number} row Row index.
	     * @param {Number} col Column index.
	     */
	
	  }, {
	    key: 'selectPrevCell',
	    value: function selectPrevCell(row, col) {
	      var prevRow = row - 1;
	      var cell = prevRow >= 0 ? this.hotMenu.getCell(prevRow, col) : null;
	
	      if (!cell) {
	        return;
	      }
	      if ((0, _utils.isSeparator)(cell) || (0, _utils.isDisabled)(cell) || (0, _utils.isSelectionDisabled)(cell)) {
	        this.selectPrevCell(prevRow, col);
	      } else {
	        this.hotMenu.selectCell(prevRow, col);
	      }
	    }
	
	    /**
	     * Menu item renderer.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'menuItemRenderer',
	    value: function menuItemRenderer(hot, TD, row, col, prop, value) {
	      var _this4 = this;
	
	      var item = hot.getSourceDataAtRow(row);
	      var wrapper = document.createElement('div');
	
	      var isSubMenu = function isSubMenu(itemToTest) {
	        return (0, _object.hasOwnProperty)(itemToTest, 'submenu');
	      };
	      var itemIsSeparator = function itemIsSeparator(itemToTest) {
	        return new RegExp(_predefinedItems.SEPARATOR, 'i').test(itemToTest.name);
	      };
	      var itemIsDisabled = function itemIsDisabled(itemToTest) {
	        return itemToTest.disabled === true || typeof itemToTest.disabled === 'function' && itemToTest.disabled.call(_this4.hot) === true;
	      };
	      var itemIsSelectionDisabled = function itemIsSelectionDisabled(itemToTest) {
	        return itemToTest.disableSelection;
	      };
	      var itemValue = value;
	
	      if (typeof itemValue === 'function') {
	        itemValue = itemValue.call(this.hot);
	      }
	      (0, _element.empty)(TD);
	      (0, _element.addClass)(wrapper, 'htItemWrapper');
	      TD.appendChild(wrapper);
	
	      if (itemIsSeparator(item)) {
	        (0, _element.addClass)(TD, 'htSeparator');
	      } else if (typeof item.renderer === 'function') {
	        (0, _element.addClass)(TD, 'htCustomMenuRenderer');
	        TD.appendChild(item.renderer(hot, wrapper, row, col, prop, itemValue));
	      } else {
	        (0, _element.fastInnerHTML)(wrapper, itemValue);
	      }
	      if (itemIsDisabled(item)) {
	        (0, _element.addClass)(TD, 'htDisabled');
	        this.eventManager.addEventListener(TD, 'mouseenter', function () {
	          return hot.deselectCell();
	        });
	      } else if (itemIsSelectionDisabled(item)) {
	        (0, _element.addClass)(TD, 'htSelectionDisabled');
	        this.eventManager.addEventListener(TD, 'mouseenter', function () {
	          return hot.deselectCell();
	        });
	      } else if (isSubMenu(item)) {
	        (0, _element.addClass)(TD, 'htSubmenu');
	
	        if (itemIsSelectionDisabled(item)) {
	          this.eventManager.addEventListener(TD, 'mouseenter', function () {
	            return hot.deselectCell();
	          });
	        } else {
	          this.eventManager.addEventListener(TD, 'mouseenter', function () {
	            return hot.selectCell(row, col, void 0, void 0, false, false);
	          });
	        }
	      } else {
	        (0, _element.removeClass)(TD, 'htSubmenu');
	        (0, _element.removeClass)(TD, 'htDisabled');
	
	        if (itemIsSelectionDisabled(item)) {
	          this.eventManager.addEventListener(TD, 'mouseenter', function () {
	            return hot.deselectCell();
	          });
	        } else {
	          this.eventManager.addEventListener(TD, 'mouseenter', function () {
	            return hot.selectCell(row, col, void 0, void 0, false, false);
	          });
	        }
	      }
	    }
	
	    /**
	     * Create container/wrapper for handsontable.
	     *
	     * @private
	     * @param {String} [name] Class name.
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'createContainer',
	    value: function createContainer() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      var className = name;
	      var container = void 0;
	
	      if (className) {
	        if ((0, _function.isFunction)(className)) {
	          className = className.call(this.hot);
	
	          if (className === null || (0, _mixed.isUndefined)(className)) {
	            className = '';
	          } else {
	            className = className.toString();
	          }
	        }
	
	        className = className.replace(/[^A-z0-9]/g, '_');
	        className = this.options.className + 'Sub_' + className;
	
	        container = document.querySelector('.' + this.options.className + '.' + className);
	      } else {
	        container = document.querySelector('.' + this.options.className);
	      }
	
	      if (!container) {
	        container = document.createElement('div');
	
	        (0, _element.addClass)(container, 'htMenu ' + this.options.className);
	
	        if (className) {
	          (0, _element.addClass)(container, className);
	        }
	        document.getElementsByTagName('body')[0].appendChild(container);
	      }
	
	      return container;
	    }
	
	    /**
	     * @private
	     */
	
	  }, {
	    key: 'blockMainTableCallbacks',
	    value: function blockMainTableCallbacks() {
	      this._afterScrollCallback = function () {};
	      this.hot.addHook('afterScrollVertically', this._afterScrollCallback);
	      this.hot.addHook('afterScrollHorizontally', this._afterScrollCallback);
	    }
	
	    /**
	     * @private
	     */
	
	  }, {
	    key: 'releaseMainTableCallbacks',
	    value: function releaseMainTableCallbacks() {
	      if (this._afterScrollCallback) {
	        this.hot.removeHook('afterScrollVertically', this._afterScrollCallback);
	        this.hot.removeHook('afterScrollHorizontally', this._afterScrollCallback);
	        this._afterScrollCallback = null;
	      }
	    }
	
	    /**
	     * On before key down listener.
	     *
	     * @private
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'onBeforeKeyDown',
	    value: function onBeforeKeyDown(event) {
	      var selection = this.hotMenu.getSelectedLast();
	      var stopEvent = false;
	      this.keyEvent = true;
	
	      switch (event.keyCode) {
	        case _unicode.KEY_CODES.ESCAPE:
	          this.close();
	          stopEvent = true;
	          break;
	
	        case _unicode.KEY_CODES.ENTER:
	          if (selection) {
	            if (this.hotMenu.getSourceDataAtRow(selection[0]).submenu) {
	              stopEvent = true;
	            } else {
	              this.executeCommand(event);
	              this.close(true);
	            }
	          }
	          break;
	
	        case _unicode.KEY_CODES.ARROW_DOWN:
	          if (selection) {
	            this.selectNextCell(selection[0], selection[1]);
	          } else {
	            this.selectFirstCell();
	          }
	          stopEvent = true;
	          break;
	
	        case _unicode.KEY_CODES.ARROW_UP:
	          if (selection) {
	            this.selectPrevCell(selection[0], selection[1]);
	          } else {
	            this.selectLastCell();
	          }
	          stopEvent = true;
	          break;
	
	        case _unicode.KEY_CODES.ARROW_RIGHT:
	          if (selection) {
	            var menu = this.openSubMenu(selection[0]);
	
	            if (menu) {
	              menu.selectFirstCell();
	            }
	          }
	          stopEvent = true;
	
	          break;
	
	        case _unicode.KEY_CODES.ARROW_LEFT:
	          if (selection && this.isSubMenu()) {
	            this.close();
	
	            if (this.parentMenu) {
	              this.parentMenu.hotMenu.listen();
	            }
	            stopEvent = true;
	          }
	          break;
	        default:
	          break;
	      }
	      if (stopEvent) {
	        event.preventDefault();
	        (0, _event.stopImmediatePropagation)(event);
	      }
	
	      this.keyEvent = false;
	    }
	
	    /**
	     * On after init listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterInit',
	    value: function onAfterInit() {
	      var data = this.hotMenu.getSettings().data;
	      var hiderStyle = this.hotMenu.view.wt.wtTable.hider.style;
	      var holderStyle = this.hotMenu.view.wt.wtTable.holder.style;
	      var currentHiderWidth = parseInt(hiderStyle.width, 10);
	
	      var realHeight = (0, _array.arrayReduce)(data, function (accumulator, value) {
	        return accumulator + (value.name === _predefinedItems.SEPARATOR ? 1 : 26);
	      }, 0);
	
	      holderStyle.width = currentHiderWidth + 22 + 'px';
	      holderStyle.height = realHeight + 4 + 'px';
	      hiderStyle.height = holderStyle.height;
	    }
	
	    /**
	     * On after selection listener.
	     *
	     * @param {Number} r Selection start row index.
	     * @param {Number} c Selection start column index.
	     * @param {Number} r2 Selection end row index.
	     * @param {Number} c2 Selection end column index.
	     * @param {Object} preventScrolling Object with `value` property where its value change will be observed.
	     * @param {Number} selectionLayerLevel The number which indicates what selection layer is currently modified.
	     */
	
	  }, {
	    key: 'onAfterSelection',
	    value: function onAfterSelection(r, c, r2, c2, preventScrolling) {
	      if (this.keyEvent === false) {
	        preventScrolling.value = true;
	      }
	    }
	
	    /**
	     * Document mouse down listener.
	     *
	     * @private
	     * @param {Event} event
	     */
	
	  }, {
	    key: 'onDocumentMouseDown',
	    value: function onDocumentMouseDown(event) {
	      if (!this.isOpened()) {
	        return;
	      }
	      if (this.container && (0, _element.isChildOf)(event.target, this.container)) {
	        this.executeCommand(event);
	      }
	      // Close menu when clicked element is not belongs to menu itself
	      if (this.options.standalone && this.hotMenu && !(0, _element.isChildOf)(event.target, this.hotMenu.rootElement)) {
	        this.close(true);
	
	        // Automatically close menu when clicked element is not belongs to menu or submenu (not necessarily to itself)
	      } else if ((this.isAllSubMenusClosed() || this.isSubMenu()) && !(0, _element.isChildOf)(event.target, '.htMenu') && (0, _element.isChildOf)(event.target, document)) {
	        this.close(true);
	      }
	    }
	  }]);
	
	  return Menu;
	}();
	
	(0, _object.mixin)(Menu, _localHooks2.default);
	
	exports.default = Menu;
	
	/***/ }),
	/* 317 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _element = __webpack_require__(0);
	
	var _event = __webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Helper class for checking if element will fit at the desired side of cursor.
	 *
	 * @class Cursor
	 * @plugin ContextMenu
	 */
	var Cursor = function () {
	  function Cursor(object) {
	    _classCallCheck(this, Cursor);
	
	    var windowScrollTop = (0, _element.getWindowScrollTop)();
	    var windowScrollLeft = (0, _element.getWindowScrollLeft)();
	    var top = void 0;
	    var topRelative = void 0;
	    var left = void 0;
	    var leftRelative = void 0;
	    var cellHeight = void 0;
	    var cellWidth = void 0;
	
	    this.type = this.getSourceType(object);
	
	    if (this.type === 'literal') {
	      top = parseInt(object.top, 10);
	      left = parseInt(object.left, 10);
	      cellHeight = object.height || 0;
	      cellWidth = object.width || 0;
	      topRelative = top;
	      leftRelative = left;
	      top += windowScrollTop;
	      left += windowScrollLeft;
	    } else if (this.type === 'event') {
	      top = parseInt((0, _event.pageY)(object), 10);
	      left = parseInt((0, _event.pageX)(object), 10);
	      cellHeight = object.target.clientHeight;
	      cellWidth = object.target.clientWidth;
	      topRelative = top - windowScrollTop;
	      leftRelative = left - windowScrollLeft;
	    }
	
	    this.top = top;
	    this.topRelative = topRelative;
	    this.left = left;
	    this.leftRelative = leftRelative;
	    this.scrollTop = windowScrollTop;
	    this.scrollLeft = windowScrollLeft;
	    this.cellHeight = cellHeight;
	    this.cellWidth = cellWidth;
	  }
	
	  /**
	   * Get source type name.
	   *
	   * @param {*} object Event or Object with coordinates.
	   * @returns {String} Returns one of this values: `'literal'`, `'event'`.
	   */
	
	
	  _createClass(Cursor, [{
	    key: 'getSourceType',
	    value: function getSourceType(object) {
	      var type = 'literal';
	
	      if (object instanceof Event) {
	        type = 'event';
	      }
	
	      return type;
	    }
	
	    /**
	     * Checks if element can be placed above the cursor.
	     *
	     * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'fitsAbove',
	    value: function fitsAbove(element) {
	      return this.topRelative >= element.offsetHeight;
	    }
	
	    /**
	     * Checks if element can be placed below the cursor.
	     *
	     * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
	     * @param {Number} [viewportHeight] The viewport height.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'fitsBelow',
	    value: function fitsBelow(element) {
	      var viewportHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.innerHeight;
	
	      return this.topRelative + element.offsetHeight <= viewportHeight;
	    }
	
	    /**
	     * Checks if element can be placed on the right of the cursor.
	     *
	     * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
	     * @param {Number} [viewportWidth] The viewport width.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'fitsOnRight',
	    value: function fitsOnRight(element) {
	      var viewportWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.innerWidth;
	
	      return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;
	    }
	
	    /**
	     * Checks if element can be placed on the left on the cursor.
	     *
	     * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'fitsOnLeft',
	    value: function fitsOnLeft(element) {
	      return this.leftRelative >= element.offsetWidth;
	    }
	  }]);
	
	  return Cursor;
	}();
	
	exports.default = Cursor;
	
	/***/ }),
	/* 318 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 319 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _SheetClip = __webpack_require__(193);
	
	var _SheetClip2 = _interopRequireDefault(_SheetClip);
	
	var _src = __webpack_require__(4);
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	var _number = __webpack_require__(6);
	
	var _plugins = __webpack_require__(8);
	
	var _copy = __webpack_require__(320);
	
	var _copy2 = _interopRequireDefault(_copy);
	
	var _cut = __webpack_require__(321);
	
	var _cut2 = _interopRequireDefault(_cut);
	
	var _pasteEvent = __webpack_require__(322);
	
	var _pasteEvent2 = _interopRequireDefault(_pasteEvent);
	
	var _focusableElement = __webpack_require__(324);
	
	__webpack_require__(325);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('afterCopyLimit');
	_pluginHooks2.default.getSingleton().register('modifyCopyableRange');
	_pluginHooks2.default.getSingleton().register('beforeCut');
	_pluginHooks2.default.getSingleton().register('afterCut');
	_pluginHooks2.default.getSingleton().register('beforePaste');
	_pluginHooks2.default.getSingleton().register('afterPaste');
	_pluginHooks2.default.getSingleton().register('beforeCopy');
	_pluginHooks2.default.getSingleton().register('afterCopy');
	
	var ROWS_LIMIT = 1000;
	var COLUMNS_LIMIT = 1000;
	var privatePool = new WeakMap();
	
	/**
	 * @description
	 * This plugin enables the copy/paste functionality in the Handsontable. The functionality works for API, Context Menu,
	 * using keyboard shortcuts and menu bar from the browser.
	 * Possible values:
	 * * `true` (to enable default options),
	 * * `false` (to disable completely)
	 *
	 * or an object with values:
	 * * `'columnsLimit'` (see {@link CopyPaste#columnsLimit})
	 * * `'rowsLimit'` (see {@link CopyPaste#rowsLimit})
	 * * `'pasteMode'` (see {@link CopyPaste#pasteMode})
	 *
	 * See [the copy/paste demo](https://docs.handsontable.com/demo-copy-paste.html) for examples.
	 *
	 * @example
	 * ```js
	 * // Enables the plugin with default values
	 * copyPaste: true,
	 * // Enables the plugin with custom values
	 * copyPaste: {
	 *   columnsLimit: 25,
	 *   rowsLimit: 50,
	 *   pasteMode: 'shift_down',
	 * },
	 * ```
	 * @class CopyPaste
	 * @plugin CopyPaste
	 */
	
	var CopyPaste = function (_BasePlugin) {
	  _inherits(CopyPaste, _BasePlugin);
	
	  function CopyPaste(hotInstance) {
	    _classCallCheck(this, CopyPaste);
	
	    /**
	     * Maximum number of columns than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.
	     *
	     * @type {Number}
	     * @default 1000
	     */
	    var _this = _possibleConstructorReturn(this, (CopyPaste.__proto__ || Object.getPrototypeOf(CopyPaste)).call(this, hotInstance));
	
	    _this.columnsLimit = COLUMNS_LIMIT;
	    /**
	     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.
	     *
	     * @private
	     * @type {Array}
	     */
	    _this.copyableRanges = [];
	    /**
	     * Defines paste (<kbd>CTRL</kbd> + <kbd>V</kbd>) behavior.
	     * * Default value `"overwrite"` will paste clipboard value over current selection.
	     * * When set to `"shift_down"`, clipboard data will be pasted in place of current selection, while all selected cells are moved down.
	     * * When set to `"shift_right"`, clipboard data will be pasted in place of current selection, while all selected cells are moved right.
	     *
	     * @type {String}
	     * @default 'overwrite'
	     */
	    _this.pasteMode = 'overwrite';
	    /**
	     * Maximum number of rows than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.
	     *
	     * @type {Number}
	     * @default 1000
	     */
	    _this.rowsLimit = ROWS_LIMIT;
	
	    privatePool.set(_this, {
	      isTriggeredByCopy: false,
	      isTriggeredByCut: false,
	      isBeginEditing: false,
	      isFragmentSelectionEnabled: false
	    });
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link CopyPaste#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(CopyPaste, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().copyPaste;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	      var settings = this.hot.getSettings();
	      var priv = privatePool.get(this);
	
	      priv.isFragmentSelectionEnabled = settings.fragmentSelection;
	
	      if (_typeof(settings.copyPaste) === 'object') {
	        this.pasteMode = settings.copyPaste.pasteMode || this.pasteMode;
	        this.rowsLimit = settings.copyPaste.rowsLimit || this.rowsLimit;
	        this.columnsLimit = settings.copyPaste.columnsLimit || this.columnsLimit;
	      }
	
	      this.addHook('afterContextMenuDefaultOptions', function (options) {
	        return _this2.onAfterContextMenuDefaultOptions(options);
	      });
	      this.addHook('afterSelectionEnd', function () {
	        return _this2.onAfterSelectionEnd();
	      });
	
	      this.focusableElement = (0, _focusableElement.createElement)();
	      this.focusableElement.addLocalHook('copy', function (event) {
	        return _this2.onCopy(event);
	      }).addLocalHook('cut', function (event) {
	        return _this2.onCut(event);
	      }).addLocalHook('paste', function (event) {
	        return _this2.onPaste(event);
	      });
	
	      _get(CopyPaste.prototype.__proto__ || Object.getPrototypeOf(CopyPaste.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(CopyPaste.prototype.__proto__ || Object.getPrototypeOf(CopyPaste.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      if (this.focusableElement) {
	        (0, _focusableElement.destroyElement)(this.focusableElement);
	      }
	
	      _get(CopyPaste.prototype.__proto__ || Object.getPrototypeOf(CopyPaste.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Prepares copyable text from the cells selection in the invisible textarea.
	     */
	
	  }, {
	    key: 'setCopyableText',
	    value: function setCopyableText() {
	      var selRange = this.hot.getSelectedRangeLast();
	
	      if (!selRange) {
	        return;
	      }
	      var topLeft = selRange.getTopLeftCorner();
	      var bottomRight = selRange.getBottomRightCorner();
	      var startRow = topLeft.row;
	      var startCol = topLeft.col;
	      var endRow = bottomRight.row;
	      var endCol = bottomRight.col;
	      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);
	      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);
	
	      this.copyableRanges.length = 0;
	
	      this.copyableRanges.push({
	        startRow: startRow,
	        startCol: startCol,
	        endRow: finalEndRow,
	        endCol: finalEndCol
	      });
	
	      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);
	
	      if (endRow !== finalEndRow || endCol !== finalEndCol) {
	        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);
	      }
	    }
	
	    /**
	     * Creates copyable text releated to range objects.
	     *
	     * @param {Object[]} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
	     * @returns {String} Returns string which will be copied into clipboard.
	     */
	
	  }, {
	    key: 'getRangedCopyableData',
	    value: function getRangedCopyableData(ranges) {
	      var _this3 = this;
	
	      var dataSet = [];
	      var copyableRows = [];
	      var copyableColumns = [];
	
	      // Count all copyable rows and columns
	      (0, _array.arrayEach)(ranges, function (range) {
	        (0, _number.rangeEach)(range.startRow, range.endRow, function (row) {
	          if (copyableRows.indexOf(row) === -1) {
	            copyableRows.push(row);
	          }
	        });
	        (0, _number.rangeEach)(range.startCol, range.endCol, function (column) {
	          if (copyableColumns.indexOf(column) === -1) {
	            copyableColumns.push(column);
	          }
	        });
	      });
	      // Concat all rows and columns data defined in ranges into one copyable string
	      (0, _array.arrayEach)(copyableRows, function (row) {
	        var rowSet = [];
	
	        (0, _array.arrayEach)(copyableColumns, function (column) {
	          rowSet.push(_this3.hot.getCopyableData(row, column));
	        });
	
	        dataSet.push(rowSet);
	      });
	
	      return _SheetClip2.default.stringify(dataSet);
	    }
	
	    /**
	     * Creates copyable text releated to range objects.
	     *
	     * @param {Object[]} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
	     * @returns {Array[]} Returns array of arrays which will be copied into clipboard.
	     */
	
	  }, {
	    key: 'getRangedData',
	    value: function getRangedData(ranges) {
	      var _this4 = this;
	
	      var dataSet = [];
	      var copyableRows = [];
	      var copyableColumns = [];
	
	      // Count all copyable rows and columns
	      (0, _array.arrayEach)(ranges, function (range) {
	        (0, _number.rangeEach)(range.startRow, range.endRow, function (row) {
	          if (copyableRows.indexOf(row) === -1) {
	            copyableRows.push(row);
	          }
	        });
	        (0, _number.rangeEach)(range.startCol, range.endCol, function (column) {
	          if (copyableColumns.indexOf(column) === -1) {
	            copyableColumns.push(column);
	          }
	        });
	      });
	      // Concat all rows and columns data defined in ranges into one copyable string
	      (0, _array.arrayEach)(copyableRows, function (row) {
	        var rowSet = [];
	
	        (0, _array.arrayEach)(copyableColumns, function (column) {
	          rowSet.push(_this4.hot.getCopyableData(row, column));
	        });
	
	        dataSet.push(rowSet);
	      });
	
	      return dataSet;
	    }
	
	    /**
	     * Copies the selected cell into the clipboard.
	     */
	
	  }, {
	    key: 'copy',
	    value: function copy() {
	      var priv = privatePool.get(this);
	
	      priv.isTriggeredByCopy = true;
	      this.focusableElement.focus();
	      document.execCommand('copy');
	    }
	
	    /**
	     * Cuts the selected cell into the clipboard.
	     */
	
	  }, {
	    key: 'cut',
	    value: function cut() {
	      var priv = privatePool.get(this);
	
	      priv.isTriggeredByCut = true;
	      this.focusableElement.focus();
	      document.execCommand('cut');
	    }
	
	    /**
	     * Simulates the paste action.
	     *
	     * @param {String} [value] Value to paste.
	     */
	
	  }, {
	    key: 'paste',
	    value: function paste() {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	      var pasteData = new _pasteEvent2.default();
	
	      pasteData.clipboardData.setData('text/plain', value);
	      this.onPaste(pasteData);
	    }
	
	    /**
	     * `copy` event callback on textarea element.
	     *
	     * @param {Event} event ClipboardEvent.
	     * @private
	     */
	
	  }, {
	    key: 'onCopy',
	    value: function onCopy(event) {
	      var priv = privatePool.get(this);
	
	      if (!this.hot.isListening() && !priv.isTriggeredByCopy) {
	        return;
	      }
	
	      var editor = this.hot.getActiveEditor();
	
	      if (editor && editor.isOpened()) {
	        return;
	      }
	
	      this.setCopyableText();
	      priv.isTriggeredByCopy = false;
	
	      var rangedData = this.getRangedData(this.copyableRanges);
	      var allowCopying = !!this.hot.runHooks('beforeCopy', rangedData, this.copyableRanges);
	      var value = '';
	
	      if (allowCopying) {
	        value = _SheetClip2.default.stringify(rangedData);
	
	        if (event && event.clipboardData) {
	          event.clipboardData.setData('text/plain', value);
	        } else if (typeof ClipboardEvent === 'undefined') {
	          window.clipboardData.setData('Text', value);
	        }
	
	        this.hot.runHooks('afterCopy', rangedData, this.copyableRanges);
	      }
	
	      event.preventDefault();
	    }
	
	    /**
	     * `cut` event callback on textarea element.
	     *
	     * @param {Event} event ClipboardEvent.
	     * @private
	     */
	
	  }, {
	    key: 'onCut',
	    value: function onCut(event) {
	      var priv = privatePool.get(this);
	
	      if (!this.hot.isListening() && !priv.isTriggeredByCut) {
	        return;
	      }
	
	      var editor = this.hot.getActiveEditor();
	
	      if (editor && editor.isOpened()) {
	        return;
	      }
	
	      this.setCopyableText();
	      priv.isTriggeredByCut = false;
	
	      var rangedData = this.getRangedData(this.copyableRanges);
	      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);
	      var value = void 0;
	
	      if (allowCuttingOut) {
	        value = _SheetClip2.default.stringify(rangedData);
	
	        if (event && event.clipboardData) {
	          event.clipboardData.setData('text/plain', value);
	        } else if (typeof ClipboardEvent === 'undefined') {
	          window.clipboardData.setData('Text', value);
	        }
	
	        this.hot.emptySelectedCells();
	        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);
	      }
	
	      event.preventDefault();
	    }
	
	    /**
	     * `paste` event callback on textarea element.
	     *
	     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
	     * @private
	     */
	
	  }, {
	    key: 'onPaste',
	    value: function onPaste(event) {
	      var _this5 = this;
	
	      if (!this.hot.isListening()) {
	        return;
	      }
	
	      var editor = this.hot.getActiveEditor();
	
	      if (editor && editor.isOpened()) {
	        return;
	      }
	
	      if (event && event.preventDefault) {
	        event.preventDefault();
	      }
	
	      var pastedData = void 0;
	
	      if (event && typeof event.clipboardData !== 'undefined') {
	        pastedData = event.clipboardData.getData('text/plain');
	      } else if (typeof ClipboardEvent === 'undefined' && typeof window.clipboardData !== 'undefined') {
	        pastedData = window.clipboardData.getData('Text');
	      }
	
	      var inputArray = _SheetClip2.default.parse(pastedData);
	
	      if (inputArray.length === 0) {
	        return;
	      }
	
	      var allowPasting = !!this.hot.runHooks('beforePaste', inputArray, this.copyableRanges);
	
	      if (!allowPasting) {
	        return;
	      }
	
	      var selected = this.hot.getSelectedLast();
	      var coordsFrom = new _src.CellCoords(selected[0], selected[1]);
	      var coordsTo = new _src.CellCoords(selected[2], selected[3]);
	      var cellRange = new _src.CellRange(coordsFrom, coordsFrom, coordsTo);
	      var topLeftCorner = cellRange.getTopLeftCorner();
	      var bottomRightCorner = cellRange.getBottomRightCorner();
	      var areaStart = topLeftCorner;
	      var areaEnd = new _src.CellCoords(Math.max(bottomRightCorner.row, inputArray.length - 1 + topLeftCorner.row), Math.max(bottomRightCorner.col, inputArray[0].length - 1 + topLeftCorner.col));
	
	      var isSelRowAreaCoverInputValue = coordsTo.row - coordsFrom.row >= inputArray.length - 1;
	      var isSelColAreaCoverInputValue = coordsTo.col - coordsFrom.col >= inputArray[0].length - 1;
	
	      this.hot.addHookOnce('afterChange', function (changes) {
	        var changesLength = changes ? changes.length : 0;
	
	        if (changesLength) {
	          var offset = { row: 0, col: 0 };
	          var highestColumnIndex = -1;
	
	          (0, _array.arrayEach)(changes, function (change, index) {
	            var nextChange = changesLength > index + 1 ? changes[index + 1] : null;
	
	            if (nextChange) {
	              if (!isSelRowAreaCoverInputValue) {
	                offset.row += Math.max(nextChange[0] - change[0] - 1, 0);
	              }
	              if (!isSelColAreaCoverInputValue && change[1] > highestColumnIndex) {
	                highestColumnIndex = change[1];
	                offset.col += Math.max(nextChange[1] - change[1] - 1, 0);
	              }
	            }
	          });
	          _this5.hot.selectCell(areaStart.row, areaStart.col, areaEnd.row + offset.row, areaEnd.col + offset.col);
	        }
	      });
	
	      this.hot.populateFromArray(areaStart.row, areaStart.col, inputArray, areaEnd.row, areaEnd.col, 'CopyPaste.paste', this.pasteMode);
	      this.hot.runHooks('afterPaste', inputArray, this.copyableRanges);
	    }
	
	    /**
	     * Add copy, cut and paste options to the Context Menu.
	     *
	     * @private
	     * @param {Object} options Contains default added options of the Context Menu.
	     */
	
	  }, {
	    key: 'onAfterContextMenuDefaultOptions',
	    value: function onAfterContextMenuDefaultOptions(options) {
	      options.items.push({
	        name: '---------'
	      }, (0, _copy2.default)(this), (0, _cut2.default)(this));
	    }
	
	    /**
	     * We have to keep focus on textarea element, to make possible use of the browser tools (copy, cut, paste).
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterSelectionEnd',
	    value: function onAfterSelectionEnd() {
	      var _privatePool$get = privatePool.get(this),
	          isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;
	
	      var editor = this.hot.getActiveEditor();
	
	      if (editor && editor.isOpened()) {
	        return;
	      }
	
	      var editableElement = editor ? editor.TEXTAREA : void 0;
	
	      if (editableElement) {
	        this.focusableElement.setFocusableElement(editableElement);
	      } else {
	        this.focusableElement.useSecondaryElement();
	      }
	
	      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== document.activeElement && (0, _element.getSelectionText)()) {
	        return;
	      }
	
	      this.setCopyableText();
	      this.focusableElement.focus();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.focusableElement) {
	        (0, _focusableElement.destroyElement)(this.focusableElement);
	        this.focusableElement = null;
	      }
	
	      _get(CopyPaste.prototype.__proto__ || Object.getPrototypeOf(CopyPaste.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return CopyPaste;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('CopyPaste', CopyPaste);
	
	exports.default = CopyPaste;
	
	/***/ }),
	/* 320 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = copyItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function copyItem(copyPastePlugin) {
	  return {
	    key: 'copy',
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_COPY);
	    },
	    callback: function callback() {
	      copyPastePlugin.copy();
	    },
	    disabled: function disabled() {
	      var selected = this.getSelected();
	
	      if (!selected || selected.length > 1) {
	        return true;
	      }
	
	      return false;
	    },
	
	    hidden: false
	  };
	}
	
	/***/ }),
	/* 321 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = cutItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function cutItem(copyPastePlugin) {
	  return {
	    key: 'cut',
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_CUT);
	    },
	    callback: function callback() {
	      copyPastePlugin.cut();
	    },
	    disabled: function disabled() {
	      var selected = this.getSelected();
	
	      if (!selected || selected.length > 1) {
	        return true;
	      }
	
	      return false;
	    },
	
	    hidden: false
	  };
	}
	
	/***/ }),
	/* 322 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _clipboardData = __webpack_require__(323);
	
	var _clipboardData2 = _interopRequireDefault(_clipboardData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PasteEvent = function PasteEvent() {
	  _classCallCheck(this, PasteEvent);
	
	  this.clipboardData = new _clipboardData2.default();
	};
	
	exports.default = PasteEvent;
	
	/***/ }),
	/* 323 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ClipboardData = function () {
	  function ClipboardData() {
	    _classCallCheck(this, ClipboardData);
	
	    this.data = {};
	  }
	
	  _createClass(ClipboardData, [{
	    key: "setData",
	    value: function setData(type, value) {
	      this.data[type] = value;
	    }
	  }, {
	    key: "getData",
	    value: function getData(type) {
	      return this.data[type] || void 0;
	    }
	  }]);
	
	  return ClipboardData;
	}();
	
	exports.default = ClipboardData;
	
	/***/ }),
	/* 324 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.destroyElement = exports.deactivateElement = exports.createElement = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	var _object = __webpack_require__(1);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class FocusableWrapper
	 *
	 * @plugin CopyPaste
	 */
	var FocusableWrapper = function () {
	  function FocusableWrapper() {
	    _classCallCheck(this, FocusableWrapper);
	
	    /**
	     * The main/operational focusable element.
	     *
	     * @type {HTMLElement}
	     */
	    this.mainElement = null;
	    /**
	     * Instance of EventManager.
	     *
	     * @type {EventManager}
	     */
	    this.eventManager = new _eventManager2.default(this);
	    /**
	     * An object for tracking information about event listeners attached to the focusable element.
	     *
	     * @type {WeakSet}
	     */
	    this.listenersCount = new WeakSet();
	  }
	
	  /**
	   * Switch to the secondary focusable element. Used when no any main focusable element is provided.
	   */
	
	
	  _createClass(FocusableWrapper, [{
	    key: 'useSecondaryElement',
	    value: function useSecondaryElement() {
	      var el = createOrGetSecondaryElement();
	
	      if (!this.listenersCount.has(el)) {
	        this.listenersCount.add(el);
	        forwardEventsToLocalHooks(this.eventManager, el, this);
	      }
	
	      this.mainElement = el;
	    }
	
	    /**
	     * Switch to the main focusable element.
	     */
	
	  }, {
	    key: 'setFocusableElement',
	    value: function setFocusableElement(element) {
	      if (!this.listenersCount.has(element)) {
	        this.listenersCount.add(element);
	        forwardEventsToLocalHooks(this.eventManager, element, this);
	      }
	
	      this.mainElement = element;
	    }
	
	    /**
	     * Get currently set focusable element.
	     *
	     * @return {HTMLElement}
	     */
	
	  }, {
	    key: 'getFocusableElement',
	    value: function getFocusableElement() {
	      return this.mainElement;
	    }
	
	    /**
	     * Set focus to the focusable element.
	     */
	
	  }, {
	    key: 'focus',
	    value: function focus() {
	      // Add an empty space to texarea. It is necessary for safari to enable "copy" command from menu bar.
	      this.mainElement.value = ' ';
	      this.mainElement.select();
	    }
	  }]);
	
	  return FocusableWrapper;
	}();
	
	(0, _object.mixin)(FocusableWrapper, _localHooks2.default);
	
	var refCounter = 0;
	
	/**
	 * Create and return the FocusableWrapper instance.
	 *
	 * @return {FocusableWrapper}
	 */
	function createElement() {
	  var focusableWrapper = new FocusableWrapper();
	
	  refCounter += 1;
	
	  return focusableWrapper;
	}
	
	/**
	 * Deactivate the FocusableWrapper instance.
	 *
	 * @param {FocusableWrapper} wrapper
	 */
	function deactivateElement(wrapper) {
	  wrapper.eventManager.clear();
	}
	
	var runLocalHooks = function runLocalHooks(eventName, subject) {
	  return function (event) {
	    return subject.runLocalHooks(eventName, event);
	  };
	};
	
	/**
	 * Register copy/cut/paste events and forward their actions to the subject local hooks system.
	 *
	 * @param {HTMLElement} element
	 * @param {FocusableWrapper} subject
	 */
	function forwardEventsToLocalHooks(eventManager, element, subject) {
	  eventManager.addEventListener(element, 'copy', runLocalHooks('copy', subject));
	  eventManager.addEventListener(element, 'cut', runLocalHooks('cut', subject));
	  eventManager.addEventListener(element, 'paste', runLocalHooks('paste', subject));
	}
	
	var secondaryElement = void 0;
	
	/**
	 * Create and attach newly created focusable element to the DOM.
	 *
	 * @return {HTMLElement}
	 */
	function createOrGetSecondaryElement() {
	  if (secondaryElement) {
	
	    if (!secondaryElement.parentElement) {
	      document.body.appendChild(secondaryElement);
	    }
	
	    return secondaryElement;
	  }
	
	  var element = document.createElement('textarea');
	
	  secondaryElement = element;
	  element.id = 'HandsontableCopyPaste';
	  element.className = 'copyPaste';
	  element.tabIndex = -1;
	  element.autocomplete = 'off';
	  element.wrap = 'hard';
	  element.value = ' ';
	
	  document.body.appendChild(element);
	
	  return element;
	}
	
	/**
	 * Destroy the FocusableWrapper instance.
	 *
	 * @param {FocusableWrapper} wrapper
	 */
	function destroyElement(wrapper) {
	  if (!(wrapper instanceof FocusableWrapper)) {
	    return;
	  }
	
	  if (refCounter > 0) {
	    refCounter -= 1;
	  }
	
	  deactivateElement(wrapper);
	
	  if (refCounter <= 0) {
	    refCounter = 0;
	
	    // Detach secondary element from the DOM.
	    if (secondaryElement && secondaryElement.parentNode) {
	      secondaryElement.parentNode.removeChild(secondaryElement);
	      secondaryElement = null;
	    }
	    wrapper.mainElement = null;
	  }
	}
	
	exports.createElement = createElement;
	exports.deactivateElement = deactivateElement;
	exports.destroyElement = destroyElement;
	
	/***/ }),
	/* 325 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 326 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	var _array = __webpack_require__(2);
	
	var _src = __webpack_require__(4);
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _contextMenuItem = __webpack_require__(327);
	
	var _utils = __webpack_require__(48);
	
	var _selection = __webpack_require__(201);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class CustomBorders
	 * @plugin CustomBorders
	 *
	 * @description
	 * This plugin enables an option to apply custom borders through the context menu (configurable with context menu key
	 * `borders`).
	 *
	 * To initialize Handsontable with predefined custom borders, provide cell coordinates and border styles in a form
	 * of an array.
	 *
	 * See [Custom Borders](http://docs.handsontable.com/demo-custom-borders.html) demo for more examples.
	 *
	 * @example
	 * ```js
	 * customBorders: [
	 *   {
	 *    range: {
	 *      from: {
	 *        row: 1,
	 *        col: 1
	 *      },
	 *      to: {
	 *        row: 3,
	 *        col: 4
	 *      },
	 *    },
	 *    left: {},
	 *    right: {},
	 *    top: {},
	 *    bottom: {},
	 *   },
	 * ],
	 *
	 * // or
	 * customBorders: [
	 *   { row: 2,
	 *     col: 2,
	 *     left: {
	 *       width: 2,
	 *       color: 'red',
	 *     },
	 *     right: {
	 *       width: 1,
	 *       color: 'green',
	 *     },
	 *     top: '',
	 *     bottom: '',
	 *   }
	 * ],
	 * ```
	 */
	var CustomBorders = function (_BasePlugin) {
	  _inherits(CustomBorders, _BasePlugin);
	
	  function CustomBorders(hotInstance) {
	    _classCallCheck(this, CustomBorders);
	
	    /**
	     * Saved borders.
	     *
	     * @private
	     * @type {Array}
	     */
	    var _this = _possibleConstructorReturn(this, (CustomBorders.__proto__ || Object.getPrototypeOf(CustomBorders)).call(this, hotInstance));
	
	    _this.savedBorders = [];
	    return _this;
	  }
	
	  /**
	  * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	  * hook and if it returns `true` than the {@link CustomBorders#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(CustomBorders, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().customBorders;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('afterContextMenuDefaultOptions', function (options) {
	        return _this2.onAfterContextMenuDefaultOptions(options);
	      });
	      this.addHook('afterInit', function () {
	        return _this2.onAfterInit();
	      });
	
	      _get(CustomBorders.prototype.__proto__ || Object.getPrototypeOf(CustomBorders.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.hideBorders();
	
	      _get(CustomBorders.prototype.__proto__ || Object.getPrototypeOf(CustomBorders.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      this.changeBorderSettings();
	
	      _get(CustomBorders.prototype.__proto__ || Object.getPrototypeOf(CustomBorders.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	      * Set custom borders.
	      *
	      * @example
	      * ```js
	      * const customBordersPlugin = hot.getPlugin('customBorders');
	      *
	      * // Using an array of arrays (produced by `.getSelected()` method).
	      * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {left: {width: 2, color: 'blue'}});
	      * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
	      * customBordersPlugin.setBorders(hot.getSelectedRange(), {left: {hide: false, width: 2, color: 'blue'}});
	      * ```
	      *
	      * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
	      * @param {Object} borderObject Object with `top`, `right`, `bottom` and `left` properties.
	      */
	
	  }, {
	    key: 'setBorders',
	    value: function setBorders(selectionRanges, borderObject) {
	      var _this3 = this;
	
	      var defaultBorderKeys = ['top', 'right', 'bottom', 'left'];
	      var borderKeys = borderObject ? Object.keys(borderObject) : defaultBorderKeys;
	      var selectionType = (0, _selection.detectSelectionType)(selectionRanges);
	      var selectionSchemaNormalizer = (0, _selection.normalizeSelectionFactory)(selectionType);
	
	      (0, _array.arrayEach)(selectionRanges, function (selection) {
	        var _selectionSchemaNorma = selectionSchemaNormalizer(selection),
	            _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),
	            rowStart = _selectionSchemaNorma2[0],
	            columnStart = _selectionSchemaNorma2[1],
	            rowEnd = _selectionSchemaNorma2[2],
	            columnEnd = _selectionSchemaNorma2[3];
	
	        var _loop = function _loop(row) {
	          var _loop2 = function _loop2(col) {
	            (0, _array.arrayEach)(borderKeys, function (borderKey) {
	              _this3.prepareBorderFromCustomAdded(row, col, borderObject, borderKey);
	            });
	          };
	
	          for (var col = columnStart; col <= columnEnd; col += 1) {
	            _loop2(col);
	          }
	        };
	
	        for (var row = rowStart; row <= rowEnd; row += 1) {
	          _loop(row);
	        }
	      });
	    }
	
	    /**
	      * Get custom borders.
	      *
	      * @example
	      * ```js
	      * const customBordersPlugin = hot.getPlugin('customBorders');
	      *
	      * // Using an array of arrays (produced by `.getSelected()` method).
	      * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
	      * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
	      * customBordersPlugin.getBorders(hot.getSelectedRange());
	      * // Using without param - return all customBorders.
	      * customBordersPlugin.getBorders();
	      * ```
	      *
	      * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
	      * @return {Object[]} Returns array of border objects.
	      */
	
	  }, {
	    key: 'getBorders',
	    value: function getBorders(selectionRanges) {
	      var _this4 = this;
	
	      if (!Array.isArray(selectionRanges)) {
	        return this.savedBorders;
	      }
	
	      var selectionType = (0, _selection.detectSelectionType)(selectionRanges);
	      var selectionSchemaNormalizer = (0, _selection.normalizeSelectionFactory)(selectionType);
	      var selectedBorders = [];
	
	      (0, _array.arrayEach)(selectionRanges, function (selection) {
	        var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),
	            _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 4),
	            rowStart = _selectionSchemaNorma4[0],
	            columnStart = _selectionSchemaNorma4[1],
	            rowEnd = _selectionSchemaNorma4[2],
	            columnEnd = _selectionSchemaNorma4[3];
	
	        var _loop3 = function _loop3(row) {
	          var _loop4 = function _loop4(col) {
	            (0, _array.arrayEach)(_this4.savedBorders, function (border) {
	              if (border.row === row && border.col === col) {
	                selectedBorders.push(border);
	              }
	            });
	          };
	
	          for (var col = columnStart; col <= columnEnd; col += 1) {
	            _loop4(col);
	          }
	        };
	
	        for (var row = rowStart; row <= rowEnd; row += 1) {
	          _loop3(row);
	        }
	      });
	
	      return selectedBorders;
	    }
	
	    /**
	      * Clear custom borders.
	      *
	      * @example
	      * ```js
	      * const customBordersPlugin = hot.getPlugin('customBorders');
	      *
	      * // Using an array of arrays (produced by `.getSelected()` method).
	      * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
	      * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
	      * customBordersPlugin.clearBorders(hot.getSelectedRange());
	      * // Using without param - clear all customBorders.
	      * customBordersPlugin.clearBorders();
	      * ```
	      *
	      * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
	      */
	
	  }, {
	    key: 'clearBorders',
	    value: function clearBorders(selectionRanges) {
	      var _this5 = this;
	
	      if (selectionRanges) {
	        this.setBorders(selectionRanges);
	      } else {
	        (0, _array.arrayEach)(this.savedBorders, function (border) {
	          _this5.clearBordersFromSelectionSettings(border.id);
	          _this5.clearNullCellRange();
	          _this5.hot.removeCellMeta(border.row, border.col, 'borders');
	        });
	
	        this.savedBorders.length = 0;
	      }
	    }
	
	    /**
	     * Insert WalkontableSelection instance into Walkontable settings.
	     *
	     * @private
	     * @param {Object} border Object with `row` and `col`, `left`, `right`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
	     * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right`.
	     */
	
	  }, {
	    key: 'insertBorderIntoSettings',
	    value: function insertBorderIntoSettings(border, place) {
	      var hasSavedBorders = this.checkSavedBorders(border);
	
	      if (!hasSavedBorders) {
	        this.savedBorders.push(border);
	      }
	
	      var coordinates = {
	        row: border.row,
	        col: border.col
	      };
	      var cellRange = new _src.CellRange(coordinates, coordinates, coordinates);
	      var hasCustomSelections = this.checkCustomSelections(border, cellRange, place);
	
	      if (!hasCustomSelections) {
	        this.hot.selection.highlight.addCustomSelection({ border: border, cellRange: cellRange });
	        this.hot.view.wt.draw(true);
	      }
	    }
	
	    /**
	     * Prepare borders from setting (single cell).
	     *
	     * @private
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {Object} borderDescriptor Object with `row` and `col`, `left`, `right`, `top` and `bottom` properties.
	     * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right`.
	     */
	
	  }, {
	    key: 'prepareBorderFromCustomAdded',
	    value: function prepareBorderFromCustomAdded(row, column, borderDescriptor, place) {
	      var border = (0, _utils.createEmptyBorders)(row, column);
	
	      if (borderDescriptor) {
	        border = (0, _utils.extendDefaultBorder)(border, borderDescriptor);
	
	        (0, _array.arrayEach)(this.hot.selection.highlight.customSelections, function (customSelection) {
	          if (border.id === customSelection.settings.id) {
	            Object.assign(customSelection.settings, borderDescriptor);
	
	            border = customSelection.settings;
	
	            return false; // breaks forAll
	          }
	        });
	      }
	
	      this.hot.setCellMeta(row, column, 'borders', border);
	
	      this.insertBorderIntoSettings(border, place);
	    }
	
	    /**
	     * Prepare borders from setting (object).
	     *
	     * @private
	     * @param {Object} rowDecriptor Object with `range`, `left`, `right`, `top` and `bottom` properties.
	     */
	
	  }, {
	    key: 'prepareBorderFromCustomAddedRange',
	    value: function prepareBorderFromCustomAddedRange(rowDecriptor) {
	      var _this6 = this;
	
	      var range = rowDecriptor.range;
	
	      (0, _number.rangeEach)(range.from.row, range.to.row, function (rowIndex) {
	        (0, _number.rangeEach)(range.from.col, range.to.col, function (colIndex) {
	          var border = (0, _utils.createEmptyBorders)(rowIndex, colIndex);
	          var add = 0;
	
	          if (rowIndex === range.from.row) {
	            add += 1;
	
	            if ((0, _object.hasOwnProperty)(rowDecriptor, 'top')) {
	              border.top = rowDecriptor.top;
	            }
	          }
	
	          if (rowIndex === range.to.row) {
	            add += 1;
	
	            if ((0, _object.hasOwnProperty)(rowDecriptor, 'bottom')) {
	              border.bottom = rowDecriptor.bottom;
	            }
	          }
	
	          if (colIndex === range.from.col) {
	            add += 1;
	
	            if ((0, _object.hasOwnProperty)(rowDecriptor, 'left')) {
	              border.left = rowDecriptor.left;
	            }
	          }
	
	          if (colIndex === range.to.col) {
	            add += 1;
	
	            if ((0, _object.hasOwnProperty)(rowDecriptor, 'right')) {
	              border.right = rowDecriptor.right;
	            }
	          }
	
	          if (add > 0) {
	            _this6.hot.setCellMeta(rowIndex, colIndex, 'borders', border);
	            _this6.insertBorderIntoSettings(border);
	          }
	        });
	      });
	    }
	
	    /**
	     * Remove border (triggered from context menu).
	     *
	     * @private
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     */
	
	  }, {
	    key: 'removeAllBorders',
	    value: function removeAllBorders(row, column) {
	      var borderId = (0, _utils.createId)(row, column);
	
	      this.spliceBorder(borderId);
	
	      this.clearBordersFromSelectionSettings(borderId);
	      this.clearNullCellRange();
	
	      this.hot.removeCellMeta(row, column, 'borders');
	    }
	
	    /**
	     * Set borders for each cell re. to border position.
	     *
	     * @private
	     * @param {Number} row Visual row index.
	     * @param {Number} column Visual column index.
	     * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
	     * @param {Boolean} remove True when remove borders, and false when add borders.
	     */
	
	  }, {
	    key: 'setBorder',
	    value: function setBorder(row, column, place, remove) {
	      var bordersMeta = this.hot.getCellMeta(row, column).borders;
	
	      if (!bordersMeta || bordersMeta.border === void 0) {
	        bordersMeta = (0, _utils.createEmptyBorders)(row, column);
	      }
	
	      if (remove) {
	        bordersMeta[place] = (0, _utils.createSingleEmptyBorder)();
	
	        var hideCount = this.countHide(bordersMeta);
	
	        if (hideCount === 4) {
	          this.removeAllBorders(row, column);
	        } else {
	          var customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
	
	          if (!customSelectionsChecker) {
	            this.insertBorderIntoSettings(bordersMeta);
	          }
	
	          this.hot.setCellMeta(row, column, 'borders', bordersMeta);
	        }
	      } else {
	        bordersMeta[place] = (0, _utils.createDefaultCustomBorder)();
	
	        var _customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
	
	        if (!_customSelectionsChecker) {
	          this.insertBorderIntoSettings(bordersMeta);
	        }
	
	        this.hot.setCellMeta(row, column, 'borders', bordersMeta);
	      }
	    }
	
	    /**
	     * Prepare borders based on cell and border position.
	     *
	     * @private
	     * @param {Object} selected
	     * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
	     * @param {Boolean} remove True when remove borders, and false when add borders.
	     */
	
	  }, {
	    key: 'prepareBorder',
	    value: function prepareBorder(selected, place, remove) {
	      var _this7 = this;
	
	      (0, _array.arrayEach)(selected, function (_ref) {
	        var start = _ref.start,
	            end = _ref.end;
	
	        if (start.row === end.row && start.col === end.col) {
	          if (place === 'noBorders') {
	            _this7.removeAllBorders(start.row, start.col);
	          } else {
	            _this7.setBorder(start.row, start.col, place, remove);
	          }
	        } else {
	          switch (place) {
	            case 'noBorders':
	              (0, _number.rangeEach)(start.col, end.col, function (colIndex) {
	                (0, _number.rangeEach)(start.row, end.row, function (rowIndex) {
	                  _this7.removeAllBorders(rowIndex, colIndex);
	                });
	              });
	              break;
	
	            case 'top':
	              (0, _number.rangeEach)(start.col, end.col, function (topCol) {
	                _this7.setBorder(start.row, topCol, place, remove);
	              });
	              break;
	
	            case 'right':
	              (0, _number.rangeEach)(start.row, end.row, function (rowRight) {
	                _this7.setBorder(rowRight, end.col, place, remove);
	              });
	              break;
	
	            case 'bottom':
	              (0, _number.rangeEach)(start.col, end.col, function (bottomCol) {
	                _this7.setBorder(end.row, bottomCol, place, remove);
	              });
	              break;
	
	            case 'left':
	              (0, _number.rangeEach)(start.row, end.row, function (rowLeft) {
	                _this7.setBorder(rowLeft, start.col, place, remove);
	              });
	              break;
	            default:
	              break;
	          }
	        }
	      });
	    }
	
	    /**
	     * Create borders from settings.
	     *
	     * @private
	     * @param {Array} customBorders Object with `row` and `col`, `left`, `right`, `top` and `bottom` properties.
	     */
	
	  }, {
	    key: 'createCustomBorders',
	    value: function createCustomBorders(customBorders) {
	      var _this8 = this;
	
	      (0, _array.arrayEach)(customBorders, function (customBorder) {
	        if (customBorder.range) {
	          _this8.prepareBorderFromCustomAddedRange(customBorder);
	        } else {
	          _this8.prepareBorderFromCustomAdded(customBorder.row, customBorder.col, customBorder);
	        }
	      });
	    }
	
	    /**
	    * Count hide property in border object.
	    *
	    * @private
	    * @param {Object} border Object with `row` and `col`, `left`, `right`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
	    */
	
	  }, {
	    key: 'countHide',
	    value: function countHide(border) {
	      var values = Object.values(border);
	
	      return (0, _array.arrayReduce)(values, function (accumulator, value) {
	        var result = accumulator;
	
	        if (value.hide) {
	          result += 1;
	        }
	
	        return result;
	      }, 0);
	    }
	
	    /**
	    * Clear borders settings from custom selections.
	    *
	    * @private
	    * @param {String} borderId Border id name as string.
	    */
	
	  }, {
	    key: 'clearBordersFromSelectionSettings',
	    value: function clearBordersFromSelectionSettings(borderId) {
	      var index = (0, _array.arrayMap)(this.hot.selection.highlight.customSelections, function (customSelection) {
	        return customSelection.settings.id;
	      }).indexOf(borderId);
	
	      if (index > -1) {
	        this.hot.selection.highlight.customSelections[index].clear();
	      }
	
	      this.hot.view.wt.draw(true);
	    }
	
	    /**
	    * Clear cellRange with null value.
	    *
	    * @private
	    */
	
	  }, {
	    key: 'clearNullCellRange',
	    value: function clearNullCellRange() {
	      var _this9 = this;
	
	      (0, _array.arrayEach)(this.hot.selection.highlight.customSelections, function (customSelection, index) {
	        if (customSelection.cellRange === null) {
	          _this9.hot.selection.highlight.customSelections.splice(index, 1);
	
	          return false; // breaks forAll
	        }
	      });
	    }
	
	    /**
	      * Hide custom borders.
	      *
	      * @private
	      */
	
	  }, {
	    key: 'hideBorders',
	    value: function hideBorders() {
	      var _this10 = this;
	
	      (0, _array.arrayEach)(this.savedBorders, function (border) {
	        _this10.clearBordersFromSelectionSettings(border.id);
	      });
	    }
	
	    /**
	    * Splice border from savedBorders.
	    *
	    * @private
	    * @param {String} borderId Border id name as string.
	    */
	
	  }, {
	    key: 'spliceBorder',
	    value: function spliceBorder(borderId) {
	      var index = (0, _array.arrayMap)(this.savedBorders, function (border) {
	        return border.id;
	      }).indexOf(borderId);
	
	      if (index > -1) {
	        this.savedBorders.splice(index, 1);
	      }
	    }
	
	    /**
	    * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
	    *
	    * @private
	    * @param {Object} border Object with `row` and `col`, `left`, `right`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
	    *
	    * @return {Boolean}
	    */
	
	  }, {
	    key: 'checkSavedBorders',
	    value: function checkSavedBorders(border) {
	      var _this11 = this;
	
	      var check = false;
	
	      var hideCount = this.countHide(border);
	
	      if (hideCount === 4) {
	        this.spliceBorder(border.id);
	        check = true;
	      } else {
	        (0, _array.arrayEach)(this.savedBorders, function (savedBorder, index) {
	          if (border.id === savedBorder.id) {
	            _this11.savedBorders[index] = border;
	            check = true;
	
	            return false; // breaks forAll
	          }
	        });
	      }
	
	      return check;
	    }
	
	    /**
	    * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
	    *
	    * @private
	    * @param {Object} border Object with `row` and `col`, `left`, `right`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
	    * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
	    * @param {Boolean} remove True when remove borders, and false when add borders.
	    *
	    * @return {Boolean}
	    */
	
	  }, {
	    key: 'checkCustomSelectionsFromContextMenu',
	    value: function checkCustomSelectionsFromContextMenu(border, place, remove) {
	      var check = false;
	
	      (0, _array.arrayEach)(this.hot.selection.highlight.customSelections, function (customSelection) {
	        if (border.id === customSelection.settings.id) {
	          (0, _object.objectEach)(customSelection.instanceBorders, function (borderObject) {
	            borderObject.toggleHiddenClass(place, remove);
	          });
	
	          check = true;
	
	          return false; // breaks forAll
	        }
	      });
	
	      return check;
	    }
	
	    /**
	    * Check if an border already exists in the customSelections, and if true reset cellRange.
	    *
	    * @private
	    * @param {Object} border Object with `row` and `col`, `left`, `right`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
	    * @param {CellRange} cellRange
	    * @param {String} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right`.
	    *
	    * @return {Boolean}
	    */
	
	  }, {
	    key: 'checkCustomSelections',
	    value: function checkCustomSelections(border, cellRange, place) {
	      var hideCount = this.countHide(border);
	      var check = false;
	
	      if (hideCount === 4) {
	        this.removeAllBorders(border.row, border.col);
	        this.clearBordersFromSelectionSettings(border.id);
	        this.clearNullCellRange();
	
	        check = true;
	      } else {
	        (0, _array.arrayEach)(this.hot.selection.highlight.customSelections, function (customSelection) {
	          if (border.id === customSelection.settings.id) {
	            customSelection.cellRange = cellRange;
	
	            if (place) {
	              (0, _object.objectEach)(customSelection.instanceBorders, function (borderObject) {
	                borderObject.changeBorderStyle(place, border);
	              });
	            }
	
	            check = true;
	
	            return false; // breaks forAll
	          }
	        });
	      }
	
	      return check;
	    }
	
	    /**
	     * Change borders from settings.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'changeBorderSettings',
	    value: function changeBorderSettings() {
	      var customBorders = this.hot.getSettings().customBorders;
	
	      if (Array.isArray(customBorders)) {
	        if (!customBorders.length) {
	          this.savedBorders = customBorders;
	        }
	
	        this.createCustomBorders(customBorders);
	      } else if (customBorders !== void 0) {
	        this.createCustomBorders(this.savedBorders);
	      }
	    }
	
	    /**
	    * Add border options to context menu.
	    *
	    * @private
	    * @param {Object} defaultOptions Context menu items.
	    */
	
	  }, {
	    key: 'onAfterContextMenuDefaultOptions',
	    value: function onAfterContextMenuDefaultOptions(defaultOptions) {
	      if (!this.hot.getSettings().customBorders) {
	        return;
	      }
	
	      defaultOptions.items.push({
	        name: '---------'
	      }, {
	        key: 'borders',
	        name: function name() {
	          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS);
	        },
	        disabled: function disabled() {
	          return this.selection.isSelectedByCorner();
	        },
	
	        submenu: {
	          items: [(0, _contextMenuItem.top)(this), (0, _contextMenuItem.right)(this), (0, _contextMenuItem.bottom)(this), (0, _contextMenuItem.left)(this), (0, _contextMenuItem.noBorders)(this)]
	        }
	      });
	    }
	
	    /**
	     * `afterInit` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterInit',
	    value: function onAfterInit() {
	      this.changeBorderSettings();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(CustomBorders.prototype.__proto__ || Object.getPrototypeOf(CustomBorders.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return CustomBorders;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('customBorders', CustomBorders);
	
	exports.default = CustomBorders;
	
	/***/ }),
	/* 327 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.top = exports.right = exports.noBorders = exports.left = exports.bottom = undefined;
	
	var _bottom = __webpack_require__(328);
	
	var _bottom2 = _interopRequireDefault(_bottom);
	
	var _left = __webpack_require__(329);
	
	var _left2 = _interopRequireDefault(_left);
	
	var _noBorders = __webpack_require__(330);
	
	var _noBorders2 = _interopRequireDefault(_noBorders);
	
	var _right = __webpack_require__(331);
	
	var _right2 = _interopRequireDefault(_right);
	
	var _top = __webpack_require__(332);
	
	var _top2 = _interopRequireDefault(_top);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.bottom = _bottom2.default;
	exports.left = _left2.default;
	exports.noBorders = _noBorders2.default;
	exports.right = _right2.default;
	exports.top = _top2.default;
	
	/***/ }),
	/* 328 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = bottom;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _utils = __webpack_require__(48);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function bottom(customBordersPlugin) {
	  return {
	    key: 'borders:bottom',
	    name: function name() {
	      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM);
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'bottom');
	      if (hasBorder) {
	        label = (0, _utils.markSelected)(label);
	      }
	      return label;
	    },
	    callback: function callback(key, selected) {
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'bottom');
	      customBordersPlugin.prepareBorder(selected, 'bottom', hasBorder);
	    }
	  };
	}
	
	/***/ }),
	/* 329 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = left;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _utils = __webpack_require__(48);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function left(customBordersPlugin) {
	  return {
	    key: 'borders:left',
	    name: function name() {
	      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_LEFT);
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'left');
	      if (hasBorder) {
	        label = (0, _utils.markSelected)(label);
	      }
	
	      return label;
	    },
	    callback: function callback(key, selected) {
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'left');
	      customBordersPlugin.prepareBorder(selected, 'left', hasBorder);
	    }
	  };
	}
	
	/***/ }),
	/* 330 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = noBorders;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _utils = __webpack_require__(48);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function noBorders(customBordersPlugin) {
	  return {
	    key: 'borders:no_borders',
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_BORDERS);
	    },
	    callback: function callback(key, selected) {
	      customBordersPlugin.prepareBorder(selected, 'noBorders');
	    },
	    disabled: function disabled() {
	      return !(0, _utils.checkSelectionBorders)(this);
	    }
	  };
	}
	
	/***/ }),
	/* 331 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = right;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _utils = __webpack_require__(48);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function right(customBordersPlugin) {
	  return {
	    key: 'borders:right',
	    name: function name() {
	      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_RIGHT);
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'right');
	      if (hasBorder) {
	        label = (0, _utils.markSelected)(label);
	      }
	      return label;
	    },
	    callback: function callback(key, selected) {
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'right');
	      customBordersPlugin.prepareBorder(selected, 'right', hasBorder);
	    }
	  };
	}
	
	/***/ }),
	/* 332 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = top;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _utils = __webpack_require__(48);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function top(customBordersPlugin) {
	  return {
	    key: 'borders:top',
	    name: function name() {
	      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_TOP);
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'top');
	      if (hasBorder) {
	        label = (0, _utils.markSelected)(label);
	      }
	
	      return label;
	    },
	    callback: function callback(key, selected) {
	      var hasBorder = (0, _utils.checkSelectionBorders)(this, 'top');
	      customBordersPlugin.prepareBorder(selected, 'top', hasBorder);
	    }
	  };
	}
	
	/***/ }),
	/* 333 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _plugins = __webpack_require__(8);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @description
	 * Plugin used to scroll Handsontable by selecting a cell and dragging outside of the visible viewport.
	 *
	 *
	 * @class DragToScroll
	 * @plugin DragToScroll
	 */
	var DragToScroll = function (_BasePlugin) {
	  _inherits(DragToScroll, _BasePlugin);
	
	  function DragToScroll(hotInstance) {
	    _classCallCheck(this, DragToScroll);
	
	    /**
	     * Instance of {@link EventManager}.
	     *
	     * @private
	     * @type {EventManager}
	     */
	    var _this = _possibleConstructorReturn(this, (DragToScroll.__proto__ || Object.getPrototypeOf(DragToScroll)).call(this, hotInstance));
	
	    _this.eventManager = new _eventManager2.default(_this);
	    /**
	     * Size of an element and its position relative to the viewport,
	     * e.g. {bottom: 449, height: 441, left: 8, right: 814, top: 8, width: 806, x: 8, y:8}.
	     *
	     * @type {DOMRect}
	     */
	    _this.boundaries = null;
	    /**
	     * Callback function.
	     *
	     * @private
	     * @type {Function}
	     */
	    _this.callback = null;
	    /**
	     * Flag indicates mouseDown/mouseUp.
	     *
	     * @private
	     * @type {Boolean}
	     */
	    _this.listening = false;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link DragToScroll#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(DragToScroll, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().dragToScroll;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('afterOnCellMouseDown', function () {
	        return _this2.setupListening();
	      });
	      this.addHook('afterOnCellCornerMouseDown', function () {
	        return _this2.setupListening();
	      });
	
	      this.registerEvents();
	
	      _get(DragToScroll.prototype.__proto__ || Object.getPrototypeOf(DragToScroll.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(DragToScroll.prototype.__proto__ || Object.getPrototypeOf(DragToScroll.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.unregisterEvents();
	
	      _get(DragToScroll.prototype.__proto__ || Object.getPrototypeOf(DragToScroll.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Sets the value of the visible element.
	     *
	     * @param boundaries {DOMRect} An object with coordinates compatible with DOMRect.
	     */
	
	  }, {
	    key: 'setBoundaries',
	    value: function setBoundaries(boundaries) {
	      this.boundaries = boundaries;
	    }
	
	    /**
	     * Changes callback function.
	     *
	     * @param callback {Function}
	     */
	
	  }, {
	    key: 'setCallback',
	    value: function setCallback(callback) {
	      this.callback = callback;
	    }
	
	    /**
	     * Checks if the mouse position (X, Y) is outside of the viewport and fires a callback with calculated X an Y diffs
	     * between passed boundaries.
	     *
	     * @param {Number} x Mouse X coordinate to check.
	     * @param {Number} y Mouse Y coordinate to check.
	     */
	
	  }, {
	    key: 'check',
	    value: function check(x, y) {
	      var diffX = 0;
	      var diffY = 0;
	
	      if (y < this.boundaries.top) {
	        // y is less than top
	        diffY = y - this.boundaries.top;
	      } else if (y > this.boundaries.bottom) {
	        // y is more than bottom
	        diffY = y - this.boundaries.bottom;
	      }
	
	      if (x < this.boundaries.left) {
	        // x is less than left
	        diffX = x - this.boundaries.left;
	      } else if (x > this.boundaries.right) {
	        // x is more than right
	        diffX = x - this.boundaries.right;
	      }
	
	      this.callback(diffX, diffY);
	    }
	
	    /**
	     * Registers dom listeners.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this3 = this;
	
	      this.eventManager.addEventListener(document, 'mouseup', function () {
	        return _this3.onMouseUp();
	      });
	      this.eventManager.addEventListener(document, 'mousemove', function (event) {
	        return _this3.onMouseMove(event);
	      });
	    }
	
	    /**
	     * Unbinds the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'unregisterEvents',
	    value: function unregisterEvents() {
	      this.eventManager.clear();
	    }
	
	    /**
	     * On after on cell/cellCorner mouse down listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setupListening',
	    value: function setupListening() {
	      var scrollHandler = this.hot.view.wt.wtTable.holder; // native scroll
	
	      if (scrollHandler === window) {
	        // not much we can do currently
	        return;
	      }
	
	      this.setBoundaries(scrollHandler.getBoundingClientRect());
	      this.setCallback(function (scrollX, scrollY) {
	        if (scrollX < 0) {
	          scrollHandler.scrollLeft -= 50;
	        } else if (scrollX > 0) {
	          scrollHandler.scrollLeft += 50;
	        }
	
	        if (scrollY < 0) {
	          scrollHandler.scrollTop -= 20;
	        } else if (scrollY > 0) {
	          scrollHandler.scrollTop += 20;
	        }
	      });
	
	      this.listening = true;
	    }
	
	    /**
	     * 'mouseMove' event callback.
	     *
	     * @private
	     * @param {MouseEvent} event `mousemove` event properties.
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (this.listening) {
	        this.check(event.clientX, event.clientY);
	      }
	    }
	
	    /**
	     * `onMouseUp` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      this.listening = false;
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(DragToScroll.prototype.__proto__ || Object.getPrototypeOf(DragToScroll.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return DragToScroll;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('dragToScroll', DragToScroll);
	
	exports.default = DragToScroll;
	
	/***/ }),
	/* 334 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _array = __webpack_require__(2);
	
	var _freezeColumn = __webpack_require__(335);
	
	var _freezeColumn2 = _interopRequireDefault(_freezeColumn);
	
	var _unfreezeColumn = __webpack_require__(336);
	
	var _unfreezeColumn2 = _interopRequireDefault(_unfreezeColumn);
	
	__webpack_require__(337);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var privatePool = new WeakMap();
	/**
	 * This plugin allows to manually "freeze" and "unfreeze" a column using an entry in the Context Menu or using API.
	 * You can turn it on by setting a {@link Options#manualColumnFreeze} property to `true`.
	 *
	 * @example
	 * ```js
	 * // Enables the plugin
	 * manualColumnFreeze: true,
	 * ```
	 *
	 * @plugin ManualColumnFreeze
	 * @dependencies ManualColumnMove
	 */
	
	var ManualColumnFreeze = function (_BasePlugin) {
	  _inherits(ManualColumnFreeze, _BasePlugin);
	
	  function ManualColumnFreeze(hotInstance) {
	    _classCallCheck(this, ManualColumnFreeze);
	
	    var _this = _possibleConstructorReturn(this, (ManualColumnFreeze.__proto__ || Object.getPrototypeOf(ManualColumnFreeze)).call(this, hotInstance));
	
	    privatePool.set(_this, {
	      moveByFreeze: false,
	      afterFirstUse: false
	    });
	    /**
	     * Original column positions
	     *
	     * @private
	     * @type {Array}
	     */
	    _this.frozenColumnsBasePositions = [];
	    /**
	     * Reference to the `ManualColumnMove` plugin.
	     *
	     * @private
	     * @type {ManualColumnMove}
	     */
	    _this.manualColumnMovePlugin = void 0;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ManualColumnFreeze#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ManualColumnFreeze, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().manualColumnFreeze;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('afterContextMenuDefaultOptions', function (options) {
	        return _this2.addContextMenuEntry(options);
	      });
	      this.addHook('afterInit', function () {
	        return _this2.onAfterInit();
	      });
	      this.addHook('beforeColumnMove', function (rows, target) {
	        return _this2.onBeforeColumnMove(rows, target);
	      });
	
	      _get(ManualColumnFreeze.prototype.__proto__ || Object.getPrototypeOf(ManualColumnFreeze.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      var priv = privatePool.get(this);
	
	      priv.afterFirstUse = false;
	      priv.moveByFreeze = false;
	
	      _get(ManualColumnFreeze.prototype.__proto__ || Object.getPrototypeOf(ManualColumnFreeze.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(ManualColumnFreeze.prototype.__proto__ || Object.getPrototypeOf(ManualColumnFreeze.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Freezes the given column (add it to fixed columns).
	     *
	     * @param {Number} column Visual column index.
	     */
	
	  }, {
	    key: 'freezeColumn',
	    value: function freezeColumn(column) {
	      var priv = privatePool.get(this);
	      var settings = this.hot.getSettings();
	
	      if (!priv.afterFirstUse) {
	        priv.afterFirstUse = true;
	      }
	
	      if (settings.fixedColumnsLeft === this.hot.countCols() || column <= settings.fixedColumnsLeft - 1) {
	        return; // already fixed
	      }
	
	      priv.moveByFreeze = true;
	
	      if (column !== this.getMovePlugin().columnsMapper.getValueByIndex(column)) {
	        this.frozenColumnsBasePositions[settings.fixedColumnsLeft] = column;
	      }
	
	      this.getMovePlugin().moveColumn(column, settings.fixedColumnsLeft);
	
	      settings.fixedColumnsLeft += 1;
	    }
	
	    /**
	     * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
	     *
	     * @param {Number} column Visual column index.
	     */
	
	  }, {
	    key: 'unfreezeColumn',
	    value: function unfreezeColumn(column) {
	      var priv = privatePool.get(this);
	      var settings = this.hot.getSettings();
	
	      if (!priv.afterFirstUse) {
	        priv.afterFirstUse = true;
	      }
	
	      if (settings.fixedColumnsLeft <= 0 || column > settings.fixedColumnsLeft - 1) {
	        return; // not fixed
	      }
	
	      var returnCol = this.getBestColumnReturnPosition(column);
	
	      priv.moveByFreeze = true;
	      settings.fixedColumnsLeft -= 1;
	
	      this.getMovePlugin().moveColumn(column, returnCol + 1);
	    }
	
	    /**
	     * Gets the reference to the ManualColumnMove plugin.
	     *
	     * @private
	     * @returns {Object}
	     */
	
	  }, {
	    key: 'getMovePlugin',
	    value: function getMovePlugin() {
	      if (!this.manualColumnMovePlugin) {
	        this.manualColumnMovePlugin = this.hot.getPlugin('manualColumnMove');
	      }
	
	      return this.manualColumnMovePlugin;
	    }
	
	    /**
	     * Estimates the most fitting return position for unfrozen column.
	     *
	     * @private
	     * @param {Number} column Visual column index.
	     */
	
	  }, {
	    key: 'getBestColumnReturnPosition',
	    value: function getBestColumnReturnPosition(column) {
	      var movePlugin = this.getMovePlugin();
	      var settings = this.hot.getSettings();
	      var i = settings.fixedColumnsLeft;
	      var j = movePlugin.columnsMapper.getValueByIndex(i);
	      var initialCol = void 0;
	
	      if (this.frozenColumnsBasePositions[column] === null || this.frozenColumnsBasePositions[column] === void 0) {
	        initialCol = movePlugin.columnsMapper.getValueByIndex(column);
	
	        while (j !== null && j <= initialCol) {
	          i += 1;
	          j = movePlugin.columnsMapper.getValueByIndex(i);
	        }
	      } else {
	        initialCol = this.frozenColumnsBasePositions[column];
	        this.frozenColumnsBasePositions[column] = void 0;
	
	        while (j !== null && j <= initialCol) {
	          i += 1;
	          j = movePlugin.columnsMapper.getValueByIndex(i);
	        }
	        i = j;
	      }
	
	      return i - 1;
	    }
	
	    /**
	     * Adds the manualColumnFreeze context menu entries.
	     *
	     * @private
	     * @param {Object} options Context menu options.
	     */
	
	  }, {
	    key: 'addContextMenuEntry',
	    value: function addContextMenuEntry(options) {
	      options.items.push({ name: '---------' }, (0, _freezeColumn2.default)(this), (0, _unfreezeColumn2.default)(this));
	    }
	
	    /**
	     * Enables `manualColumnMove` plugin on `afterInit` hook.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterInit',
	    value: function onAfterInit() {
	      if (!this.getMovePlugin().isEnabled()) {
	        this.getMovePlugin().enablePlugin();
	      }
	    }
	
	    /**
	     * Prevents moving the rows from/to fixed area.
	     *
	     * @private
	     * @param {Array} rows
	     * @param {Number} target
	     */
	
	  }, {
	    key: 'onBeforeColumnMove',
	    value: function onBeforeColumnMove(rows, target) {
	      var priv = privatePool.get(this);
	
	      if (priv.afterFirstUse && !priv.moveByFreeze) {
	        var frozenLen = this.hot.getSettings().fixedColumnsLeft;
	        var disallowMoving = target < frozenLen;
	
	        if (!disallowMoving) {
	          (0, _array.arrayEach)(rows, function (value) {
	            if (value < frozenLen) {
	              disallowMoving = true;
	              return false;
	            }
	          });
	        }
	
	        if (disallowMoving) {
	          return false;
	        }
	      }
	
	      if (priv.moveByFreeze) {
	        priv.moveByFreeze = false;
	      }
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(ManualColumnFreeze.prototype.__proto__ || Object.getPrototypeOf(ManualColumnFreeze.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return ManualColumnFreeze;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('manualColumnFreeze', ManualColumnFreeze);
	
	exports.default = ManualColumnFreeze;
	
	/***/ }),
	/* 335 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = freezeColumnItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function freezeColumnItem(manualColumnFreezePlugin) {
	  return {
	    key: 'freeze_column',
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_FREEZE_COLUMN);
	    },
	    callback: function callback(key, selected) {
	      var _selected = _slicedToArray(selected, 1),
	          selectedColumn = _selected[0].start.col;
	
	      manualColumnFreezePlugin.freezeColumn(selectedColumn);
	
	      this.render();
	      this.view.wt.wtOverlays.adjustElementsSize(true);
	    },
	    hidden: function hidden() {
	      var selection = this.getSelectedRange();
	      var hide = false;
	
	      if (selection === void 0) {
	        hide = true;
	      } else if (selection.length > 1) {
	        hide = true;
	      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col <= this.getSettings().fixedColumnsLeft - 1) {
	        hide = true;
	      }
	
	      return hide;
	    }
	  };
	}
	
	/***/ }),
	/* 336 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = unfreezeColumnItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function unfreezeColumnItem(manualColumnFreezePlugin) {
	  return {
	    key: 'unfreeze_column',
	    name: function name() {
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN);
	    },
	    callback: function callback(key, selected) {
	      var _selected = _slicedToArray(selected, 1),
	          selectedColumn = _selected[0].start.col;
	
	      manualColumnFreezePlugin.unfreezeColumn(selectedColumn);
	
	      this.render();
	      this.view.wt.wtOverlays.adjustElementsSize(true);
	    },
	    hidden: function hidden() {
	      var selection = this.getSelectedRange();
	      var hide = false;
	
	      if (selection === void 0) {
	        hide = true;
	      } else if (selection.length > 1) {
	        hide = true;
	      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col >= this.getSettings().fixedColumnsLeft) {
	        hide = true;
	      }
	
	      return hide;
	    }
	  };
	}
	
	/***/ }),
	/* 337 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 338 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _array = __webpack_require__(2);
	
	var _element = __webpack_require__(0);
	
	var _number = __webpack_require__(6);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _plugins = __webpack_require__(8);
	
	var _columnsMapper = __webpack_require__(339);
	
	var _columnsMapper2 = _interopRequireDefault(_columnsMapper);
	
	var _backlight = __webpack_require__(340);
	
	var _backlight2 = _interopRequireDefault(_backlight);
	
	var _guideline = __webpack_require__(341);
	
	var _guideline2 = _interopRequireDefault(_guideline);
	
	__webpack_require__(342);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('beforeColumnMove');
	_pluginHooks2.default.getSingleton().register('afterColumnMove');
	_pluginHooks2.default.getSingleton().register('unmodifyCol');
	
	var privatePool = new WeakMap();
	var CSS_PLUGIN = 'ht__manualColumnMove';
	var CSS_SHOW_UI = 'show-ui';
	var CSS_ON_MOVING = 'on-moving--columns';
	var CSS_AFTER_SELECTION = 'after-selection--columns';
	
	/**
	 * @plugin ManualColumnMove
	 *
	 * @description
	 * This plugin allows to change columns order. To make columns order persistent the {@link Options#persistentState}
	 * plugin should be enabled.
	 *
	 * API:
	 * - moveColumn - move single column to the new position.
	 * - moveColumns - move many columns (as an array of indexes) to the new position.
	 *
	 * If you want apply visual changes, you have to call manually the render() method on the instance of Handsontable.
	 *
	 * The plugin creates additional components to make moving possibly using user interface:
	 * - backlight - highlight of selected columns.
	 * - guideline - line which shows where rows has been moved.
	 *
	 * @class ManualColumnMove
	 * @plugin ManualColumnMove
	 */
	
	var ManualColumnMove = function (_BasePlugin) {
	  _inherits(ManualColumnMove, _BasePlugin);
	
	  function ManualColumnMove(hotInstance) {
	    _classCallCheck(this, ManualColumnMove);
	
	    /**
	     * Set up WeakMap of plugin to sharing private parameters;
	     */
	    var _this = _possibleConstructorReturn(this, (ManualColumnMove.__proto__ || Object.getPrototypeOf(ManualColumnMove)).call(this, hotInstance));
	
	    privatePool.set(_this, {
	      columnsToMove: [],
	      countCols: 0,
	      fixedColumns: 0,
	      pressed: void 0,
	      disallowMoving: void 0,
	      target: {
	        eventPageX: void 0,
	        coords: void 0,
	        TD: void 0,
	        col: void 0
	      }
	    });
	
	    /**
	     * List of last removed row indexes.
	     *
	     * @private
	     * @type {Array}
	     */
	    _this.removedColumns = [];
	    /**
	     * Object containing visual row indexes mapped to data source indexes.
	     *
	     * @private
	     * @type {RowsMapper}
	     */
	    _this.columnsMapper = new _columnsMapper2.default(_this);
	    /**
	     * Event Manager object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.eventManager = new _eventManager2.default(_this);
	    /**
	     * Backlight UI object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.backlight = new _backlight2.default(hotInstance);
	    /**
	     * Guideline UI object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.guideline = new _guideline2.default(hotInstance);
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ManualColumnMove#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ManualColumnMove, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().manualColumnMove;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, blockCalculations) {
	        return _this2.onBeforeOnCellMouseDown(event, coords, TD, blockCalculations);
	      });
	      this.addHook('beforeOnCellMouseOver', function (event, coords, TD, blockCalculations) {
	        return _this2.onBeforeOnCellMouseOver(event, coords, TD, blockCalculations);
	      });
	      this.addHook('afterScrollVertically', function () {
	        return _this2.onAfterScrollVertically();
	      });
	      this.addHook('modifyCol', function (row, source) {
	        return _this2.onModifyCol(row, source);
	      });
	      this.addHook('beforeRemoveCol', function (index, amount) {
	        return _this2.onBeforeRemoveCol(index, amount);
	      });
	      this.addHook('afterRemoveCol', function () {
	        return _this2.onAfterRemoveCol();
	      });
	      this.addHook('afterCreateCol', function (index, amount) {
	        return _this2.onAfterCreateCol(index, amount);
	      });
	      this.addHook('afterLoadData', function () {
	        return _this2.onAfterLoadData();
	      });
	      this.addHook('unmodifyCol', function (column) {
	        return _this2.onUnmodifyCol(column);
	      });
	
	      this.registerEvents();
	
	      // TODO: move adding plugin classname to BasePlugin.
	      (0, _element.addClass)(this.hot.rootElement, CSS_PLUGIN);
	
	      _get(ManualColumnMove.prototype.__proto__ || Object.getPrototypeOf(ManualColumnMove.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      this.onAfterPluginsInitialized();
	
	      _get(ManualColumnMove.prototype.__proto__ || Object.getPrototypeOf(ManualColumnMove.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      var pluginSettings = this.hot.getSettings().manualColumnMove;
	
	      if (Array.isArray(pluginSettings)) {
	        this.columnsMapper.clearMap();
	      }
	
	      (0, _element.removeClass)(this.hot.rootElement, CSS_PLUGIN);
	
	      this.unregisterEvents();
	      this.backlight.destroy();
	      this.guideline.destroy();
	
	      _get(ManualColumnMove.prototype.__proto__ || Object.getPrototypeOf(ManualColumnMove.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Moves a single column.
	     *
	     * @param {Number} column Visual column index to be moved.
	     * @param {Number} target Visual column index being a target for the moved column.
	     * @fires Hooks#beforeColumnMove
	     * @fires Hooks#afterColumnMove
	     */
	
	  }, {
	    key: 'moveColumn',
	    value: function moveColumn(column, target) {
	      this.moveColumns([column], target);
	    }
	
	    /**
	     * Moves a multiple columns.
	     *
	     * @param {Array} columns Array of visual column indexes to be moved.
	     * @param {Number} target Visual column index being a target for the moved columns.
	     * @fires Hooks#beforeColumnMove
	     * @fires Hooks#afterColumnMove
	     */
	
	  }, {
	    key: 'moveColumns',
	    value: function moveColumns(columns, target) {
	      var _this3 = this;
	
	      var visualColumns = [].concat(_toConsumableArray(columns));
	      var priv = privatePool.get(this);
	      var beforeColumnHook = this.hot.runHooks('beforeColumnMove', visualColumns, target);
	
	      priv.disallowMoving = !beforeColumnHook;
	
	      if (beforeColumnHook !== false) {
	        // first we need to rewrite an visual indexes to physical for save reference after move
	        (0, _array.arrayEach)(columns, function (column, index, array) {
	          array[index] = _this3.columnsMapper.getValueByIndex(column);
	        });
	
	        // next, when we have got an physical indexes, we can move columns
	        (0, _array.arrayEach)(columns, function (column, index) {
	          var actualPosition = _this3.columnsMapper.getIndexByValue(column);
	
	          if (actualPosition !== target) {
	            _this3.columnsMapper.moveColumn(actualPosition, target + index);
	          }
	        });
	
	        // after moving we have to clear columnsMapper from null entries
	        this.columnsMapper.clearNull();
	      }
	
	      this.hot.runHooks('afterColumnMove', visualColumns, target);
	    }
	
	    /**
	     * Correct the cell selection after the move action. Fired only when action was made with a mouse.
	     * That means that changing the column order using the API won't correct the selection.
	     *
	     * @private
	     * @param {Number} startColumn Visual column index for the start of the selection.
	     * @param {Number} endColumn Visual column index for the end of the selection.
	     */
	
	  }, {
	    key: 'changeSelection',
	    value: function changeSelection(startColumn, endColumn) {
	      this.hot.selectColumns(startColumn, endColumn);
	    }
	
	    /**
	     * Gets the sum of the widths of columns in the provided range.
	     *
	     * @private
	     * @param {Number} from Visual column index.
	     * @param {Number} to Visual column index.
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getColumnsWidth',
	    value: function getColumnsWidth(from, to) {
	      var width = 0;
	
	      for (var i = from; i < to; i++) {
	        var columnWidth = 0;
	
	        if (i < 0) {
	          columnWidth = this.hot.view.wt.wtViewport.getRowHeaderWidth() || 0;
	        } else {
	          columnWidth = this.hot.view.wt.wtTable.getStretchedColumnWidth(i) || 0;
	        }
	
	        width += columnWidth;
	      }
	
	      return width;
	    }
	
	    /**
	     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'initialSettings',
	    value: function initialSettings() {
	      var pluginSettings = this.hot.getSettings().manualColumnMove;
	
	      if (Array.isArray(pluginSettings)) {
	        this.moveColumns(pluginSettings, 0);
	      } else if (pluginSettings !== void 0) {
	        this.persistentStateLoad();
	      }
	    }
	
	    /**
	     * Checks if the provided column is in the fixedColumnsLeft section.
	     *
	     * @private
	     * @param {Number} column Visual column index to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isFixedColumnsLeft',
	    value: function isFixedColumnsLeft(column) {
	      return column < this.hot.getSettings().fixedColumnsLeft;
	    }
	
	    /**
	     * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
	     */
	
	  }, {
	    key: 'persistentStateSave',
	    value: function persistentStateSave() {
	      this.hot.runHooks('persistentStateSave', 'manualColumnMove', this.columnsMapper._arrayMap);
	    }
	
	    /**
	     * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
	     */
	
	  }, {
	    key: 'persistentStateLoad',
	    value: function persistentStateLoad() {
	      var storedState = {};
	
	      this.hot.runHooks('persistentStateLoad', 'manualColumnMove', storedState);
	
	      if (storedState.value) {
	        this.columnsMapper._arrayMap = storedState.value;
	      }
	    }
	
	    /**
	     * Prepares an array of indexes based on actual selection.
	     *
	     * @private
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'prepareColumnsToMoving',
	    value: function prepareColumnsToMoving(start, end) {
	      var selectedColumns = [];
	
	      (0, _number.rangeEach)(start, end, function (i) {
	        selectedColumns.push(i);
	      });
	
	      return selectedColumns;
	    }
	
	    /**
	     * Updates the UI visual position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshPositions',
	    value: function refreshPositions() {
	      var priv = privatePool.get(this);
	      var firstVisible = this.hot.view.wt.wtTable.getFirstVisibleColumn();
	      var lastVisible = this.hot.view.wt.wtTable.getLastVisibleColumn();
	      var wtTable = this.hot.view.wt.wtTable;
	      var scrollableElement = this.hot.view.wt.wtOverlays.scrollableElement;
	      var scrollLeft = typeof scrollableElement.scrollX === 'number' ? scrollableElement.scrollX : scrollableElement.scrollLeft;
	      var tdOffsetLeft = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, priv.coordsColumn);
	      var mouseOffsetLeft = priv.target.eventPageX - (priv.rootElementOffset - (scrollableElement.scrollX === void 0 ? scrollLeft : 0));
	      var hiderWidth = wtTable.hider.offsetWidth;
	      var tbodyOffsetLeft = wtTable.TBODY.offsetLeft;
	      var backlightElemMarginLeft = this.backlight.getOffset().left;
	      var backlightElemWidth = this.backlight.getSize().width;
	      var rowHeaderWidth = 0;
	
	      if (priv.rootElementOffset + wtTable.holder.offsetWidth + scrollLeft < priv.target.eventPageX) {
	        if (priv.coordsColumn < priv.countCols) {
	          priv.coordsColumn += 1;
	        }
	      }
	
	      if (priv.hasRowHeaders) {
	        rowHeaderWidth = this.hot.view.wt.wtOverlays.leftOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth;
	      }
	      if (this.isFixedColumnsLeft(priv.coordsColumn)) {
	        tdOffsetLeft += scrollLeft;
	      }
	      tdOffsetLeft += rowHeaderWidth;
	
	      if (priv.coordsColumn < 0) {
	        // if hover on rowHeader
	        if (priv.fixedColumns > 0) {
	          priv.target.col = 0;
	        } else {
	          priv.target.col = firstVisible > 0 ? firstVisible - 1 : firstVisible;
	        }
	      } else if (priv.target.TD.offsetWidth / 2 + tdOffsetLeft <= mouseOffsetLeft) {
	        var newCoordsCol = priv.coordsColumn >= priv.countCols ? priv.countCols - 1 : priv.coordsColumn;
	        // if hover on right part of TD
	        priv.target.col = newCoordsCol + 1;
	        // unfortunately first column is bigger than rest
	        tdOffsetLeft += priv.target.TD.offsetWidth;
	
	        if (priv.target.col > lastVisible && lastVisible < priv.countCols) {
	          this.hot.scrollViewportTo(void 0, lastVisible + 1, void 0, true);
	        }
	      } else {
	        // elsewhere on table
	        priv.target.col = priv.coordsColumn;
	
	        if (priv.target.col <= firstVisible && priv.target.col >= priv.fixedColumns && firstVisible > 0) {
	          this.hot.scrollViewportTo(void 0, firstVisible - 1);
	        }
	      }
	
	      if (priv.target.col <= firstVisible && priv.target.col >= priv.fixedColumns && firstVisible > 0) {
	        this.hot.scrollViewportTo(void 0, firstVisible - 1);
	      }
	
	      var backlightLeft = mouseOffsetLeft;
	      var guidelineLeft = tdOffsetLeft;
	
	      if (mouseOffsetLeft + backlightElemWidth + backlightElemMarginLeft >= hiderWidth) {
	        // prevent display backlight on the right side of the table
	        backlightLeft = hiderWidth - backlightElemWidth - backlightElemMarginLeft;
	      } else if (mouseOffsetLeft + backlightElemMarginLeft < tbodyOffsetLeft + rowHeaderWidth) {
	        // prevent display backlight on the left side of the table
	        backlightLeft = tbodyOffsetLeft + rowHeaderWidth + Math.abs(backlightElemMarginLeft);
	      }
	
	      if (tdOffsetLeft >= hiderWidth - 1) {
	        // prevent display guideline outside the table
	        guidelineLeft = hiderWidth - 1;
	      } else if (guidelineLeft === 0) {
	        // guideline has got `margin-left: -1px` as default
	        guidelineLeft = 1;
	      } else if (scrollableElement.scrollX !== void 0 && priv.coordsColumn < priv.fixedColumns) {
	        guidelineLeft -= priv.rootElementOffset <= scrollableElement.scrollX ? priv.rootElementOffset : 0;
	      }
	
	      this.backlight.setPosition(null, backlightLeft);
	      this.guideline.setPosition(null, guidelineLeft);
	    }
	
	    /**
	     * This method checks arrayMap from columnsMapper and updates the columnsMapper if it's necessary.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'updateColumnsMapper',
	    value: function updateColumnsMapper() {
	      var countCols = this.hot.countSourceCols();
	      var columnsMapperLen = this.columnsMapper._arrayMap.length;
	
	      if (columnsMapperLen === 0) {
	        this.columnsMapper.createMap(countCols || this.hot.getSettings().startCols);
	      } else if (columnsMapperLen < countCols) {
	        var diff = countCols - columnsMapperLen;
	
	        this.columnsMapper.insertItems(columnsMapperLen, diff);
	      } else if (columnsMapperLen > countCols) {
	        var maxIndex = countCols - 1;
	        var columnsToRemove = [];
	
	        (0, _array.arrayEach)(this.columnsMapper._arrayMap, function (value, index) {
	          if (value > maxIndex) {
	            columnsToRemove.push(index);
	          }
	        });
	
	        this.columnsMapper.removeItems(columnsToRemove);
	      }
	    }
	
	    /**
	     * Binds the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this4 = this;
	
	      this.eventManager.addEventListener(document.documentElement, 'mousemove', function (event) {
	        return _this4.onMouseMove(event);
	      });
	      this.eventManager.addEventListener(document.documentElement, 'mouseup', function () {
	        return _this4.onMouseUp();
	      });
	    }
	
	    /**
	     * Unbinds the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'unregisterEvents',
	    value: function unregisterEvents() {
	      this.eventManager.clear();
	    }
	
	    /**
	     * Changes the behavior of selection / dragging.
	     *
	     * @private
	     * @param {MouseEvent} event `mousedown` event properties.
	     * @param {CellCoords} coords Visual cell coordinates where was fired event.
	     * @param {HTMLElement} TD Cell represented as HTMLElement.
	     * @param {Object} blockCalculations Object which contains information about blockCalculation for row, column or cells.
	     */
	
	  }, {
	    key: 'onBeforeOnCellMouseDown',
	    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {
	      var wtTable = this.hot.view.wt.wtTable;
	      var isHeaderSelection = this.hot.selection.isSelectedByColumnHeader();
	      var selection = this.hot.getSelectedRangeLast();
	      var priv = privatePool.get(this);
	      var isSortingElement = event.realTarget.className.indexOf('columnSorting') > -1;
	
	      if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0 || isSortingElement) {
	        priv.pressed = false;
	        priv.columnsToMove.length = 0;
	        (0, _element.removeClass)(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);
	        return;
	      }
	
	      var guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();
	      var backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();
	
	      if (guidelineIsNotReady && backlightIsNotReady) {
	        this.guideline.appendTo(wtTable.hider);
	        this.backlight.appendTo(wtTable.hider);
	      }
	
	      var from = selection.from,
	          to = selection.to;
	
	      var start = Math.min(from.col, to.col);
	      var end = Math.max(from.col, to.col);
	
	      if (coords.row < 0 && coords.col >= start && coords.col <= end) {
	        blockCalculations.column = true;
	        priv.pressed = true;
	        priv.target.eventPageX = event.pageX;
	        priv.coordsColumn = coords.col;
	        priv.target.TD = TD;
	        priv.target.col = coords.col;
	        priv.columnsToMove = this.prepareColumnsToMoving(start, end);
	        priv.hasRowHeaders = !!this.hot.getSettings().rowHeaders;
	        priv.countCols = this.hot.countCols();
	        priv.fixedColumns = this.hot.getSettings().fixedColumnsLeft;
	        priv.rootElementOffset = (0, _element.offset)(this.hot.rootElement).left;
	
	        var countColumnsFrom = priv.hasRowHeaders ? -1 : 0;
	        var topPos = wtTable.holder.scrollTop + wtTable.getColumnHeaderHeight(0) + 1;
	        var fixedColumns = coords.col < priv.fixedColumns;
	        var scrollableElement = this.hot.view.wt.wtOverlays.scrollableElement;
	        var wrapperIsWindow = scrollableElement.scrollX ? scrollableElement.scrollX - priv.rootElementOffset : 0;
	
	        var mouseOffset = event.layerX - (fixedColumns ? wrapperIsWindow : 0);
	        var leftOffset = Math.abs(this.getColumnsWidth(start, coords.col) + mouseOffset);
	
	        this.backlight.setPosition(topPos, this.getColumnsWidth(countColumnsFrom, start) + leftOffset);
	        this.backlight.setSize(this.getColumnsWidth(start, end + 1), wtTable.hider.offsetHeight - topPos);
	        this.backlight.setOffset(null, leftOffset * -1);
	
	        (0, _element.addClass)(this.hot.rootElement, CSS_ON_MOVING);
	      } else {
	        (0, _element.removeClass)(this.hot.rootElement, CSS_AFTER_SELECTION);
	        priv.pressed = false;
	        priv.columnsToMove.length = 0;
	      }
	    }
	
	    /**
	     * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
	     *
	     * @private
	     * @param {MouseEvent} event `mousemove` event properties.
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var priv = privatePool.get(this);
	
	      if (!priv.pressed) {
	        return;
	      }
	
	      // callback for browser which doesn't supports CSS pointer-event: none
	      if (event.realTarget === this.backlight.element) {
	        var width = this.backlight.getSize().width;
	        this.backlight.setSize(0);
	
	        setTimeout(function () {
	          this.backlight.setPosition(width);
	        });
	      }
	
	      priv.target.eventPageX = event.pageX;
	      this.refreshPositions();
	    }
	
	    /**
	     * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
	     *
	     * @private
	     * @param {MouseEvent} event `mouseover` event properties.
	     * @param {CellCoords} coords Visual cell coordinates where was fired event.
	     * @param {HTMLElement} TD Cell represented as HTMLElement.
	     * @param {Object} blockCalculations Object which contains information about blockCalculation for row, column or cells.
	     */
	
	  }, {
	    key: 'onBeforeOnCellMouseOver',
	    value: function onBeforeOnCellMouseOver(event, coords, TD, blockCalculations) {
	      var selectedRange = this.hot.getSelectedRangeLast();
	      var priv = privatePool.get(this);
	
	      if (!selectedRange || !priv.pressed) {
	        return;
	      }
	
	      if (priv.columnsToMove.indexOf(coords.col) > -1) {
	        (0, _element.removeClass)(this.hot.rootElement, CSS_SHOW_UI);
	      } else {
	        (0, _element.addClass)(this.hot.rootElement, CSS_SHOW_UI);
	      }
	
	      blockCalculations.row = true;
	      blockCalculations.column = true;
	      blockCalculations.cell = true;
	      priv.coordsColumn = coords.col;
	      priv.target.TD = TD;
	    }
	
	    /**
	     * `onMouseUp` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      var priv = privatePool.get(this);
	
	      priv.coordsColumn = void 0;
	      priv.pressed = false;
	      priv.backlightWidth = 0;
	
	      (0, _element.removeClass)(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);
	
	      if (this.hot.selection.isSelectedByColumnHeader()) {
	        (0, _element.addClass)(this.hot.rootElement, CSS_AFTER_SELECTION);
	      }
	      if (priv.columnsToMove.length < 1 || priv.target.col === void 0 || priv.columnsToMove.indexOf(priv.target.col) > -1) {
	        return;
	      }
	
	      this.moveColumns(priv.columnsToMove, priv.target.col);
	      this.persistentStateSave();
	      this.hot.render();
	      this.hot.view.wt.wtOverlays.adjustElementsSize(true);
	
	      if (!priv.disallowMoving) {
	        var selectionStart = this.columnsMapper.getIndexByValue(priv.columnsToMove[0]);
	        var selectionEnd = this.columnsMapper.getIndexByValue(priv.columnsToMove[priv.columnsToMove.length - 1]);
	        this.changeSelection(selectionStart, selectionEnd);
	      }
	
	      priv.columnsToMove.length = 0;
	    }
	
	    /**
	     * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterScrollVertically',
	    value: function onAfterScrollVertically() {
	      var wtTable = this.hot.view.wt.wtTable;
	      var headerHeight = wtTable.getColumnHeaderHeight(0) + 1;
	      var scrollTop = wtTable.holder.scrollTop;
	      var posTop = headerHeight + scrollTop;
	
	      this.backlight.setPosition(posTop);
	      this.backlight.setSize(null, wtTable.hider.offsetHeight - posTop);
	    }
	
	    /**
	     * `afterCreateCol` hook callback.
	     *
	     * @private
	     * @param {Number} index Visual index of the created column.
	     * @param {Number} amount Amount of created columns.
	     */
	
	  }, {
	    key: 'onAfterCreateCol',
	    value: function onAfterCreateCol(index, amount) {
	      this.columnsMapper.shiftItems(index, amount);
	    }
	
	    /**
	     * On before remove column listener.
	     *
	     * @private
	     * @param {Number} index Visual column index.
	     * @param {Number} amount Defines how many columns removed.
	     */
	
	  }, {
	    key: 'onBeforeRemoveCol',
	    value: function onBeforeRemoveCol(index, amount) {
	      var _this5 = this;
	
	      this.removedColumns.length = 0;
	
	      if (index !== false) {
	        // Collect physical row index.
	        (0, _number.rangeEach)(index, index + amount - 1, function (removedIndex) {
	          _this5.removedColumns.push(_this5.hot.runHooks('modifyCol', removedIndex, _this5.pluginName));
	        });
	      }
	    }
	
	    /**
	     * `afterRemoveCol` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterRemoveCol',
	    value: function onAfterRemoveCol() {
	      this.columnsMapper.unshiftItems(this.removedColumns);
	    }
	
	    /**
	     * `afterLoadData` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterLoadData',
	    value: function onAfterLoadData() {
	      this.updateColumnsMapper();
	    }
	
	    /**
	     * 'modifyRow' hook callback.
	     *
	     * @private
	     * @param {Number} column Visual column index.
	     * @returns {Number} Physical column index.
	     */
	
	  }, {
	    key: 'onModifyCol',
	    value: function onModifyCol(column, source) {
	      var physicalColumn = column;
	
	      if (source !== this.pluginName) {
	        // ugly fix for try to insert new, needed columns after pasting data
	        var columnInMapper = this.columnsMapper.getValueByIndex(physicalColumn);
	        physicalColumn = columnInMapper === null ? physicalColumn : columnInMapper;
	      }
	
	      return physicalColumn;
	    }
	
	    /**
	     * 'unmodifyCol' hook callback.
	     *
	     * @private
	     * @param {Number} column Physical column index.
	     * @returns {Number} Visual column index.
	     */
	
	  }, {
	    key: 'onUnmodifyCol',
	    value: function onUnmodifyCol(column) {
	      var indexInMapper = this.columnsMapper.getIndexByValue(column);
	
	      return indexInMapper === null ? column : indexInMapper;
	    }
	
	    /**
	     * `afterPluginsInitialized` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterPluginsInitialized',
	    value: function onAfterPluginsInitialized() {
	      this.updateColumnsMapper();
	      this.initialSettings();
	      this.backlight.build();
	      this.guideline.build();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.backlight.destroy();
	      this.guideline.destroy();
	
	      _get(ManualColumnMove.prototype.__proto__ || Object.getPrototypeOf(ManualColumnMove.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return ManualColumnMove;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('ManualColumnMove', ManualColumnMove);
	
	exports.default = ManualColumnMove;
	
	/***/ }),
	/* 339 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _arrayMapper = __webpack_require__(94);
	
	var _arrayMapper2 = _interopRequireDefault(_arrayMapper);
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class ColumnsMapper
	 * @plugin ManualColumnMove
	 */
	var ColumnsMapper = function () {
	  function ColumnsMapper(manualColumnMove) {
	    _classCallCheck(this, ColumnsMapper);
	
	    /**
	     * Instance of ManualColumnMove plugin.
	     *
	     * @type {ManualColumnMove}
	     */
	    this.manualColumnMove = manualColumnMove;
	  }
	
	  /**
	   * Reset current map array and create new one.
	   *
	   * @param {Number} [length] Custom generated map length.
	   */
	
	
	  _createClass(ColumnsMapper, [{
	    key: 'createMap',
	    value: function createMap(length) {
	      var _this = this;
	
	      var originLength = length === void 0 ? this._arrayMap.length : length;
	
	      this._arrayMap.length = 0;
	
	      (0, _number.rangeEach)(originLength - 1, function (itemIndex) {
	        _this._arrayMap[itemIndex] = itemIndex;
	      });
	    }
	
	    /**
	     * Destroy class.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this._arrayMap = null;
	    }
	
	    /**
	     * Moving elements in columnsMapper.
	     *
	     * @param {Number} from Column index to move.
	     * @param {Number} to Target index.
	     */
	
	  }, {
	    key: 'moveColumn',
	    value: function moveColumn(from, to) {
	      var indexToMove = this._arrayMap[from];
	      this._arrayMap[from] = null;
	      this._arrayMap.splice(to, 0, indexToMove);
	    }
	
	    /**
	     * Clearing arrayMap from `null` entries.
	     */
	
	  }, {
	    key: 'clearNull',
	    value: function clearNull() {
	      this._arrayMap = (0, _array.arrayFilter)(this._arrayMap, function (i) {
	        return i !== null;
	      });
	    }
	  }]);
	
	  return ColumnsMapper;
	}();
	
	(0, _object.mixin)(ColumnsMapper, _arrayMapper2.default);
	
	exports.default = ColumnsMapper;
	
	/***/ }),
	/* 340 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(204);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CSS_CLASSNAME = 'ht__manualColumnMove--backlight';
	
	/**
	 * @class BacklightUI
	 * @util
	 */
	
	var BacklightUI = function (_BaseUI) {
	  _inherits(BacklightUI, _BaseUI);
	
	  function BacklightUI() {
	    _classCallCheck(this, BacklightUI);
	
	    return _possibleConstructorReturn(this, (BacklightUI.__proto__ || Object.getPrototypeOf(BacklightUI)).apply(this, arguments));
	  }
	
	  _createClass(BacklightUI, [{
	    key: 'build',
	
	    /**
	     * Custom className on build process.
	     */
	    value: function build() {
	      _get(BacklightUI.prototype.__proto__ || Object.getPrototypeOf(BacklightUI.prototype), 'build', this).call(this);
	
	      (0, _element.addClass)(this._element, CSS_CLASSNAME);
	    }
	  }]);
	
	  return BacklightUI;
	}(_base2.default);
	
	exports.default = BacklightUI;
	
	/***/ }),
	/* 341 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(204);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CSS_CLASSNAME = 'ht__manualColumnMove--guideline';
	
	/**
	 * @class GuidelineUI
	 * @util
	 */
	
	var GuidelineUI = function (_BaseUI) {
	  _inherits(GuidelineUI, _BaseUI);
	
	  function GuidelineUI() {
	    _classCallCheck(this, GuidelineUI);
	
	    return _possibleConstructorReturn(this, (GuidelineUI.__proto__ || Object.getPrototypeOf(GuidelineUI)).apply(this, arguments));
	  }
	
	  _createClass(GuidelineUI, [{
	    key: 'build',
	
	    /**
	     * Custom className on build process.
	     */
	    value: function build() {
	      _get(GuidelineUI.prototype.__proto__ || Object.getPrototypeOf(GuidelineUI.prototype), 'build', this).call(this);
	
	      (0, _element.addClass)(this._element, CSS_CLASSNAME);
	    }
	  }]);
	
	  return GuidelineUI;
	}(_base2.default);
	
	exports.default = GuidelineUI;
	
	/***/ }),
	/* 342 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 343 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _event = __webpack_require__(13);
	
	var _array = __webpack_require__(2);
	
	var _number = __webpack_require__(6);
	
	var _plugins = __webpack_require__(8);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Developer note! Whenever you make a change in this file, make an analogous change in manualRowResize.js
	
	/**
	 * @description
	 * This plugin allows to change columns width. To make columns width persistent the {@link Options#persistentState}
	 * plugin should be enabled.
	 *
	 * The plugin creates additional components to make resizing possibly using user interface:
	 * - handle - the draggable element that sets the desired width of the column.
	 * - guide - the helper guide that shows the desired width as a vertical guide.
	 *
	 * @plugin ManualColumnResize
	 */
	var ManualColumnResize = function (_BasePlugin) {
	  _inherits(ManualColumnResize, _BasePlugin);
	
	  function ManualColumnResize(hotInstance) {
	    _classCallCheck(this, ManualColumnResize);
	
	    var _this = _possibleConstructorReturn(this, (ManualColumnResize.__proto__ || Object.getPrototypeOf(ManualColumnResize)).call(this, hotInstance));
	
	    _this.currentTH = null;
	    _this.currentCol = null;
	    _this.selectedCols = [];
	    _this.currentWidth = null;
	    _this.newSize = null;
	    _this.startY = null;
	    _this.startWidth = null;
	    _this.startOffset = null;
	    _this.handle = document.createElement('DIV');
	    _this.guide = document.createElement('DIV');
	    _this.eventManager = new _eventManager2.default(_this);
	    _this.pressed = null;
	    _this.dblclick = 0;
	    _this.autoresizeTimeout = null;
	    _this.manualColumnWidths = [];
	
	    (0, _element.addClass)(_this.handle, 'manualColumnResizer');
	    (0, _element.addClass)(_this.guide, 'manualColumnResizerGuide');
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ManualColumnResize#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ManualColumnResize, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().manualColumnResize;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.manualColumnWidths = [];
	      var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	      var loadedManualColumnWidths = this.loadManualColumnWidths();
	
	      this.addHook('modifyColWidth', function (width, col) {
	        return _this2.onModifyColWidth(width, col);
	      });
	      this.addHook('beforeStretchingColumnWidth', function (stretchedWidth, column) {
	        return _this2.onBeforeStretchingColumnWidth(stretchedWidth, column);
	      });
	      this.addHook('beforeColumnResize', function (currentColumn, newSize, isDoubleClick) {
	        return _this2.onBeforeColumnResize(currentColumn, newSize, isDoubleClick);
	      });
	
	      if (typeof loadedManualColumnWidths !== 'undefined') {
	        this.manualColumnWidths = loadedManualColumnWidths;
	      } else if (Array.isArray(initialColumnWidth)) {
	        this.manualColumnWidths = initialColumnWidth;
	      } else {
	        this.manualColumnWidths = [];
	      }
	
	      // Handsontable.hooks.register('beforeColumnResize');
	      // Handsontable.hooks.register('afterColumnResize');
	
	      this.bindEvents();
	
	      _get(ManualColumnResize.prototype.__proto__ || Object.getPrototypeOf(ManualColumnResize.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      var initialColumnWidth = this.hot.getSettings().manualColumnResize;
	
	      if (Array.isArray(initialColumnWidth)) {
	        this.manualColumnWidths = initialColumnWidth;
	      } else if (!initialColumnWidth) {
	        this.manualColumnWidths = [];
	      }
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(ManualColumnResize.prototype.__proto__ || Object.getPrototypeOf(ManualColumnResize.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
	     */
	
	  }, {
	    key: 'saveManualColumnWidths',
	    value: function saveManualColumnWidths() {
	      this.hot.runHooks('persistentStateSave', 'manualColumnWidths', this.manualColumnWidths);
	    }
	
	    /**
	     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
	     *
	     * @returns {Array}
	     *
	     * @fires Hooks#persistentStateLoad
	     * @fires Hooks#manualColumnWidths
	     */
	
	  }, {
	    key: 'loadManualColumnWidths',
	    value: function loadManualColumnWidths() {
	      var storedState = {};
	
	      this.hot.runHooks('persistentStateLoad', 'manualColumnWidths', storedState);
	
	      return storedState.value;
	    }
	
	    /**
	     * Set the resize handle position.
	     *
	     * @private
	     * @param {HTMLCellElement} TH TH HTML element.
	     */
	
	  }, {
	    key: 'setupHandlePosition',
	    value: function setupHandlePosition(TH) {
	      var _this3 = this;
	
	      if (!TH.parentNode) {
	        return false;
	      }
	
	      this.currentTH = TH;
	
	      var col = this.hot.view.wt.wtTable.getCoords(TH).col; // getCoords returns CellCoords
	      var headerHeight = (0, _element.outerHeight)(this.currentTH);
	
	      if (col >= 0) {
	        // if not col header
	        var box = this.currentTH.getBoundingClientRect();
	
	        this.currentCol = col;
	        this.selectedCols = [];
	
	        if (this.hot.selection.isSelected() && this.hot.selection.isSelectedByColumnHeader()) {
	          var _hot$getSelectedRange = this.hot.getSelectedRangeLast(),
	              from = _hot$getSelectedRange.from,
	              to = _hot$getSelectedRange.to;
	
	          var start = from.col;
	          var end = to.col;
	
	          if (start >= end) {
	            start = to.col;
	            end = from.col;
	          }
	
	          if (this.currentCol >= start && this.currentCol <= end) {
	            (0, _number.rangeEach)(start, end, function (i) {
	              return _this3.selectedCols.push(i);
	            });
	          } else {
	            this.selectedCols.push(this.currentCol);
	          }
	        } else {
	          this.selectedCols.push(this.currentCol);
	        }
	
	        this.startOffset = box.left - 6;
	        this.startWidth = parseInt(box.width, 10);
	        this.handle.style.top = box.top + 'px';
	        this.handle.style.left = this.startOffset + this.startWidth + 'px';
	        this.handle.style.height = headerHeight + 'px';
	        this.hot.rootElement.appendChild(this.handle);
	      }
	    }
	
	    /**
	     * Refresh the resize handle position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshHandlePosition',
	    value: function refreshHandlePosition() {
	      this.handle.style.left = this.startOffset + this.currentWidth + 'px';
	    }
	
	    /**
	     * Sets the resize guide position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setupGuidePosition',
	    value: function setupGuidePosition() {
	      var handleHeight = parseInt((0, _element.outerHeight)(this.handle), 10);
	      var handleBottomPosition = parseInt(this.handle.style.top, 10) + handleHeight;
	      var maximumVisibleElementHeight = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
	
	      (0, _element.addClass)(this.handle, 'active');
	      (0, _element.addClass)(this.guide, 'active');
	
	      this.guide.style.top = handleBottomPosition + 'px';
	      this.guide.style.left = this.handle.style.left;
	      this.guide.style.height = maximumVisibleElementHeight - handleHeight + 'px';
	      this.hot.rootElement.appendChild(this.guide);
	    }
	
	    /**
	     * Refresh the resize guide position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshGuidePosition',
	    value: function refreshGuidePosition() {
	      this.guide.style.left = this.handle.style.left;
	    }
	
	    /**
	     * Hides both the resize handle and resize guide.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'hideHandleAndGuide',
	    value: function hideHandleAndGuide() {
	      (0, _element.removeClass)(this.handle, 'active');
	      (0, _element.removeClass)(this.guide, 'active');
	    }
	
	    /**
	     * Checks if provided element is considered a column header.
	     *
	     * @private
	     * @param {HTMLElement} element HTML element.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'checkIfColumnHeader',
	    value: function checkIfColumnHeader(element) {
	      if (element !== this.hot.rootElement) {
	        var parent = element.parentNode;
	
	        if (parent.tagName === 'THEAD') {
	          return true;
	        }
	
	        return this.checkIfColumnHeader(parent);
	      }
	
	      return false;
	    }
	
	    /**
	     * Gets the TH element from the provided element.
	     *
	     * @private
	     * @param {HTMLElement} element HTML element.
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'getTHFromTargetElement',
	    value: function getTHFromTargetElement(element) {
	      if (element.tagName !== 'TABLE') {
	        if (element.tagName === 'TH') {
	          return element;
	        }
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	
	      return null;
	    }
	
	    /**
	     * 'mouseover' event callback - set the handle position.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseOver',
	    value: function onMouseOver(event) {
	      if (this.checkIfColumnHeader(event.target)) {
	        var th = this.getTHFromTargetElement(event.target);
	
	        if (!th) {
	          return;
	        }
	
	        var colspan = th.getAttribute('colspan');
	
	        if (th && (colspan === null || colspan === 1)) {
	          if (!this.pressed) {
	            this.setupHandlePosition(th);
	          }
	        }
	      }
	    }
	
	    /**
	     * Auto-size row after doubleclick - callback.
	     *
	     * @private
	     *
	     * @fires Hooks#beforeColumnResize
	     * @fires Hooks#afterColumnResize
	     */
	
	  }, {
	    key: 'afterMouseDownTimeout',
	    value: function afterMouseDownTimeout() {
	      var _this4 = this;
	
	      var render = function render() {
	        _this4.hot.forceFullRender = true;
	        _this4.hot.view.render(); // updates all
	        _this4.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      };
	      var resize = function resize(selectedCol, forceRender) {
	        var hookNewSize = _this4.hot.runHooks('beforeColumnResize', selectedCol, _this4.newSize, true);
	
	        if (hookNewSize !== void 0) {
	          _this4.newSize = hookNewSize;
	        }
	
	        if (_this4.hot.getSettings().stretchH === 'all') {
	          _this4.clearManualSize(selectedCol);
	        } else {
	          _this4.setManualSize(selectedCol, _this4.newSize); // double click sets by auto row size plugin
	        }
	
	        if (forceRender) {
	          render();
	        }
	
	        _this4.saveManualColumnWidths();
	
	        _this4.hot.runHooks('afterColumnResize', selectedCol, _this4.newSize, true);
	      };
	
	      if (this.dblclick >= 2) {
	        var selectedColsLength = this.selectedCols.length;
	
	        if (selectedColsLength > 1) {
	          (0, _array.arrayEach)(this.selectedCols, function (selectedCol) {
	            resize(selectedCol);
	          });
	          render();
	        } else {
	          (0, _array.arrayEach)(this.selectedCols, function (selectedCol) {
	            resize(selectedCol, true);
	          });
	        }
	      }
	      this.dblclick = 0;
	      this.autoresizeTimeout = null;
	    }
	
	    /**
	     * 'mousedown' event callback.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(event) {
	      var _this5 = this;
	
	      if ((0, _element.hasClass)(event.target, 'manualColumnResizer')) {
	        this.setupGuidePosition();
	        this.pressed = this.hot;
	
	        if (this.autoresizeTimeout === null) {
	          this.autoresizeTimeout = setTimeout(function () {
	            return _this5.afterMouseDownTimeout();
	          }, 500);
	
	          this.hot._registerTimeout(this.autoresizeTimeout);
	        }
	        this.dblclick += 1;
	
	        this.startX = (0, _event.pageX)(event);
	        this.newSize = this.startWidth;
	      }
	    }
	
	    /**
	     * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var _this6 = this;
	
	      if (this.pressed) {
	        this.currentWidth = this.startWidth + ((0, _event.pageX)(event) - this.startX);
	
	        (0, _array.arrayEach)(this.selectedCols, function (selectedCol) {
	          _this6.newSize = _this6.setManualSize(selectedCol, _this6.currentWidth);
	        });
	
	        this.refreshHandlePosition();
	        this.refreshGuidePosition();
	      }
	    }
	
	    /**
	     * 'mouseup' event callback - apply the column resizing.
	     *
	     * @private
	     *
	     * @fires Hooks#beforeColumnResize
	     * @fires Hooks#afterColumnResize
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      var _this7 = this;
	
	      var render = function render() {
	        _this7.hot.forceFullRender = true;
	        _this7.hot.view.render(); // updates all
	        _this7.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      };
	      var resize = function resize(selectedCol, forceRender) {
	        _this7.hot.runHooks('beforeColumnResize', selectedCol, _this7.newSize, false);
	
	        if (forceRender) {
	          render();
	        }
	
	        _this7.saveManualColumnWidths();
	
	        _this7.hot.runHooks('afterColumnResize', selectedCol, _this7.newSize);
	      };
	
	      if (this.pressed) {
	        this.hideHandleAndGuide();
	        this.pressed = false;
	
	        if (this.newSize !== this.startWidth) {
	          var selectedColsLength = this.selectedCols.length;
	
	          if (selectedColsLength > 1) {
	            (0, _array.arrayEach)(this.selectedCols, function (selectedCol) {
	              resize(selectedCol);
	            });
	            render();
	          } else {
	            (0, _array.arrayEach)(this.selectedCols, function (selectedCol) {
	              resize(selectedCol, true);
	            });
	          }
	        }
	
	        this.setupHandlePosition(this.currentTH);
	      }
	    }
	
	    /**
	     * Binds the mouse events.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'bindEvents',
	    value: function bindEvents() {
	      var _this8 = this;
	
	      this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', function (e) {
	        return _this8.onMouseOver(e);
	      });
	      this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', function (e) {
	        return _this8.onMouseDown(e);
	      });
	      this.eventManager.addEventListener(window, 'mousemove', function (e) {
	        return _this8.onMouseMove(e);
	      });
	      this.eventManager.addEventListener(window, 'mouseup', function () {
	        return _this8.onMouseUp();
	      });
	    }
	
	    /**
	     * Sets the new width for specified column index.
	     *
	     * @param {Number} column Visual column index.
	     * @param {Number} width Column width (no less than 20px).
	     * @returns {Number} Returns new width.
	     */
	
	  }, {
	    key: 'setManualSize',
	    value: function setManualSize(column, width) {
	      var newWidth = Math.max(width, 20);
	
	      /**
	       *  We need to run col through modifyCol hook, in case the order of displayed columns is different than the order
	       *  in data source. For instance, this order can be modified by manualColumnMove plugin.
	       */
	      var physicalColumn = this.hot.runHooks('modifyCol', column);
	
	      this.manualColumnWidths[physicalColumn] = newWidth;
	
	      return newWidth;
	    }
	
	    /**
	     * Clears the cache for the specified column index.
	     *
	     * @param {Number} column Visual column index.
	     */
	
	  }, {
	    key: 'clearManualSize',
	    value: function clearManualSize(column) {
	      var physicalColumn = this.hot.runHooks('modifyCol', column);
	
	      this.manualColumnWidths[physicalColumn] = void 0;
	    }
	
	    /**
	     * Modifies the provided column width, based on the plugin settings
	     *
	     * @private
	     * @param {Number} width Column width.
	     * @param {Number} column Visual column index.
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'onModifyColWidth',
	    value: function onModifyColWidth(width, column) {
	      var newWidth = width;
	
	      if (this.enabled) {
	        var physicalColumn = this.hot.runHooks('modifyCol', column);
	        var columnWidth = this.manualColumnWidths[physicalColumn];
	
	        if (this.hot.getSettings().manualColumnResize && columnWidth) {
	          newWidth = columnWidth;
	        }
	      }
	
	      return newWidth;
	    }
	
	    /**
	     * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.
	     *
	     * @private
	     * @param {Number} stretchedWidth Stretched width.
	     * @param {Number} column Physical column index.
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'onBeforeStretchingColumnWidth',
	    value: function onBeforeStretchingColumnWidth(stretchedWidth, column) {
	      var width = this.manualColumnWidths[column];
	
	      if (width === void 0) {
	        width = stretchedWidth;
	      }
	
	      return width;
	    }
	
	    /**
	     * `beforeColumnResize` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onBeforeColumnResize',
	    value: function onBeforeColumnResize() {
	      // clear the header height cache information
	      this.hot.view.wt.wtViewport.hasOversizedColumnHeadersMarked = {};
	    }
	  }]);
	
	  return ManualColumnResize;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('manualColumnResize', ManualColumnResize);
	
	exports.default = ManualColumnResize;
	
	/***/ }),
	/* 344 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _array = __webpack_require__(2);
	
	var _element = __webpack_require__(0);
	
	var _number = __webpack_require__(6);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _plugins = __webpack_require__(8);
	
	var _rowsMapper = __webpack_require__(345);
	
	var _rowsMapper2 = _interopRequireDefault(_rowsMapper);
	
	var _backlight = __webpack_require__(346);
	
	var _backlight2 = _interopRequireDefault(_backlight);
	
	var _guideline = __webpack_require__(347);
	
	var _guideline2 = _interopRequireDefault(_guideline);
	
	__webpack_require__(348);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('beforeRowMove');
	_pluginHooks2.default.getSingleton().register('afterRowMove');
	_pluginHooks2.default.getSingleton().register('unmodifyRow');
	
	var privatePool = new WeakMap();
	var CSS_PLUGIN = 'ht__manualRowMove';
	var CSS_SHOW_UI = 'show-ui';
	var CSS_ON_MOVING = 'on-moving--rows';
	var CSS_AFTER_SELECTION = 'after-selection--rows';
	
	/**
	 * @plugin ManualRowMove
	 *
	 * @description
	 * This plugin allows to change rows order. To make rows order persistent the {@link Options#persistentState}
	 * plugin should be enabled.
	 *
	 * API:
	 * - moveRow - move single row to the new position.
	 * - moveRows - move many rows (as an array of indexes) to the new position.
	 *
	 * If you want apply visual changes, you have to call manually the render() method on the instance of handsontable.
	 *
	 * The plugin creates additional components to make moving possibly using user interface:
	 * - backlight - highlight of selected rows.
	 * - guideline - line which shows where rows has been moved.
	 *
	 * @class ManualRowMove
	 * @plugin ManualRowMove
	 */
	
	var ManualRowMove = function (_BasePlugin) {
	  _inherits(ManualRowMove, _BasePlugin);
	
	  function ManualRowMove(hotInstance) {
	    _classCallCheck(this, ManualRowMove);
	
	    /**
	     * Set up WeakMap of plugin to sharing private parameters;
	     */
	    var _this = _possibleConstructorReturn(this, (ManualRowMove.__proto__ || Object.getPrototypeOf(ManualRowMove)).call(this, hotInstance));
	
	    privatePool.set(_this, {
	      rowsToMove: [],
	      pressed: void 0,
	      disallowMoving: void 0,
	      target: {
	        eventPageY: void 0,
	        coords: void 0,
	        TD: void 0,
	        row: void 0
	      }
	    });
	
	    /**
	     * List of last removed row indexes.
	     *
	     * @private
	     * @type {Array}
	     */
	    _this.removedRows = [];
	    /**
	     * Object containing visual row indexes mapped to data source indexes.
	     *
	     * @private
	     * @type {RowsMapper}
	     */
	    _this.rowsMapper = new _rowsMapper2.default(_this);
	    /**
	     * Event Manager object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.eventManager = new _eventManager2.default(_this);
	    /**
	     * Backlight UI object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.backlight = new _backlight2.default(hotInstance);
	    /**
	     * Guideline UI object.
	     *
	     * @private
	     * @type {Object}
	     */
	    _this.guideline = new _guideline2.default(hotInstance);
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ManualRowMove#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ManualRowMove, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().manualRowMove;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, blockCalculations) {
	        return _this2.onBeforeOnCellMouseDown(event, coords, TD, blockCalculations);
	      });
	      this.addHook('beforeOnCellMouseOver', function (event, coords, TD, blockCalculations) {
	        return _this2.onBeforeOnCellMouseOver(event, coords, TD, blockCalculations);
	      });
	      this.addHook('afterScrollHorizontally', function () {
	        return _this2.onAfterScrollHorizontally();
	      });
	      this.addHook('modifyRow', function (row, source) {
	        return _this2.onModifyRow(row, source);
	      });
	      this.addHook('beforeRemoveRow', function (index, amount) {
	        return _this2.onBeforeRemoveRow(index, amount);
	      });
	      this.addHook('afterRemoveRow', function () {
	        return _this2.onAfterRemoveRow();
	      });
	      this.addHook('afterCreateRow', function (index, amount) {
	        return _this2.onAfterCreateRow(index, amount);
	      });
	      this.addHook('afterLoadData', function () {
	        return _this2.onAfterLoadData();
	      });
	      this.addHook('beforeColumnSort', function (column, order) {
	        return _this2.onBeforeColumnSort(column, order);
	      });
	      this.addHook('unmodifyRow', function (row) {
	        return _this2.onUnmodifyRow(row);
	      });
	
	      this.registerEvents();
	
	      // TODO: move adding plugin classname to BasePlugin.
	      (0, _element.addClass)(this.hot.rootElement, CSS_PLUGIN);
	
	      _get(ManualRowMove.prototype.__proto__ || Object.getPrototypeOf(ManualRowMove.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      this.onAfterPluginsInitialized();
	
	      _get(ManualRowMove.prototype.__proto__ || Object.getPrototypeOf(ManualRowMove.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      var pluginSettings = this.hot.getSettings().manualRowMove;
	
	      if (Array.isArray(pluginSettings)) {
	        this.rowsMapper.clearMap();
	      }
	
	      (0, _element.removeClass)(this.hot.rootElement, CSS_PLUGIN);
	
	      this.unregisterEvents();
	      this.backlight.destroy();
	      this.guideline.destroy();
	
	      _get(ManualRowMove.prototype.__proto__ || Object.getPrototypeOf(ManualRowMove.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Moves a single row.
	     *
	     * @param {Number} row Visual row index to be moved.
	     * @param {Number} target Visual row index being a target for the moved row.
	     * @fires Hooks#beforeRowMove
	     * @fires Hooks#afterRowMove
	     */
	
	  }, {
	    key: 'moveRow',
	    value: function moveRow(row, target) {
	      this.moveRows([row], target);
	    }
	
	    /**
	     * Moves a multiple rows.
	     *
	     * @param {Array} rows Array of visual row indexes to be moved.
	     * @param {Number} target Visual row index being a target for the moved rows.
	     * @fires Hooks#beforeRowMove
	     * @fires Hooks#afterRowMove
	     */
	
	  }, {
	    key: 'moveRows',
	    value: function moveRows(rows, target) {
	      var _this3 = this;
	
	      var visualRows = [].concat(_toConsumableArray(rows));
	      var priv = privatePool.get(this);
	      var beforeMoveHook = this.hot.runHooks('beforeRowMove', visualRows, target);
	
	      priv.disallowMoving = beforeMoveHook === false;
	
	      if (!priv.disallowMoving) {
	        // first we need to rewrite an visual indexes to physical for save reference after move
	        (0, _array.arrayEach)(rows, function (row, index, array) {
	          array[index] = _this3.rowsMapper.getValueByIndex(row);
	        });
	
	        // next, when we have got an physical indexes, we can move rows
	        (0, _array.arrayEach)(rows, function (row, index) {
	          var actualPosition = _this3.rowsMapper.getIndexByValue(row);
	
	          if (actualPosition !== target) {
	            _this3.rowsMapper.moveRow(actualPosition, target + index);
	          }
	        });
	
	        // after moving we have to clear rowsMapper from null entries
	        this.rowsMapper.clearNull();
	      }
	
	      this.hot.runHooks('afterRowMove', visualRows, target);
	    }
	
	    /**
	     * Correct the cell selection after the move action. Fired only when action was made with a mouse.
	     * That means that changing the row order using the API won't correct the selection.
	     *
	     * @private
	     * @param {Number} startRow Visual row index for the start of the selection.
	     * @param {Number} endRow Visual row index for the end of the selection.
	     */
	
	  }, {
	    key: 'changeSelection',
	    value: function changeSelection(startRow, endRow) {
	      this.hot.selectRows(startRow, endRow);
	    }
	
	    /**
	     * Gets the sum of the heights of rows in the provided range.
	     *
	     * @private
	     * @param {Number} from Visual row index.
	     * @param {Number} to Visual row index.
	     * @returns {Number}
	     */
	
	  }, {
	    key: 'getRowsHeight',
	    value: function getRowsHeight(from, to) {
	      var height = 0;
	
	      for (var i = from; i < to; i++) {
	        var rowHeight = this.hot.view.wt.wtTable.getRowHeight(i) || 23;
	
	        height += rowHeight;
	      }
	
	      return height;
	    }
	
	    /**
	     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'initialSettings',
	    value: function initialSettings() {
	      var pluginSettings = this.hot.getSettings().manualRowMove;
	
	      if (Array.isArray(pluginSettings)) {
	        this.moveRows(pluginSettings, 0);
	      } else if (pluginSettings !== void 0) {
	        var persistentState = this.persistentStateLoad();
	
	        if (persistentState.length) {
	          this.moveRows(persistentState, 0);
	        }
	      }
	    }
	
	    /**
	     * Checks if the provided row is in the fixedRowsTop section.
	     *
	     * @private
	     * @param {Number} row Visual row index to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isFixedRowTop',
	    value: function isFixedRowTop(row) {
	      return row < this.hot.getSettings().fixedRowsTop;
	    }
	
	    /**
	     * Checks if the provided row is in the fixedRowsBottom section.
	     *
	     * @private
	     * @param {Number} row Visual row index to check.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isFixedRowBottom',
	    value: function isFixedRowBottom(row) {
	      return row > this.hot.getSettings().fixedRowsBottom;
	    }
	
	    /**
	     * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
	     *
	     * @fires Hooks#persistentStateSave
	     * @fires Hooks#manualRowMove
	     */
	
	  }, {
	    key: 'persistentStateSave',
	    value: function persistentStateSave() {
	      this.hot.runHooks('persistentStateSave', 'manualRowMove', this.rowsMapper._arrayMap);
	    }
	
	    /**
	     * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
	     *
	     * @returns {Array} Stored state.
	     *
	     * @fires Hooks#persistentStateLoad
	     * @fires Hooks#manualRowMove
	     */
	
	  }, {
	    key: 'persistentStateLoad',
	    value: function persistentStateLoad() {
	      var storedState = {};
	
	      this.hot.runHooks('persistentStateLoad', 'manualRowMove', storedState);
	
	      return storedState.value ? storedState.value : [];
	    }
	
	    /**
	     * Prepare array of indexes based on actual selection.
	     *
	     * @private
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'prepareRowsToMoving',
	    value: function prepareRowsToMoving() {
	      var selection = this.hot.getSelectedRangeLast();
	      var selectedRows = [];
	
	      if (!selection) {
	        return selectedRows;
	      }
	
	      var from = selection.from,
	          to = selection.to;
	
	      var start = Math.min(from.row, to.row);
	      var end = Math.max(from.row, to.row);
	
	      (0, _number.rangeEach)(start, end, function (i) {
	        selectedRows.push(i);
	      });
	
	      return selectedRows;
	    }
	
	    /**
	     * Update the UI visual position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshPositions',
	    value: function refreshPositions() {
	      var priv = privatePool.get(this);
	      var coords = priv.target.coords;
	      var firstVisible = this.hot.view.wt.wtTable.getFirstVisibleRow();
	      var lastVisible = this.hot.view.wt.wtTable.getLastVisibleRow();
	      var fixedRows = this.hot.getSettings().fixedRowsTop;
	      var countRows = this.hot.countRows();
	
	      if (coords.row < fixedRows && firstVisible > 0) {
	        this.hot.scrollViewportTo(firstVisible - 1);
	      }
	      if (coords.row >= lastVisible && lastVisible < countRows) {
	        this.hot.scrollViewportTo(lastVisible + 1, undefined, true);
	      }
	
	      var wtTable = this.hot.view.wt.wtTable;
	      var TD = priv.target.TD;
	      var rootElementOffset = (0, _element.offset)(this.hot.rootElement);
	      var tdOffsetTop = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, coords.row);
	      var mouseOffsetTop = priv.target.eventPageY - rootElementOffset.top + wtTable.holder.scrollTop;
	      var hiderHeight = wtTable.hider.offsetHeight;
	      var tbodyOffsetTop = wtTable.TBODY.offsetTop;
	      var backlightElemMarginTop = this.backlight.getOffset().top;
	      var backlightElemHeight = this.backlight.getSize().height;
	
	      if (this.isFixedRowTop(coords.row)) {
	        tdOffsetTop += wtTable.holder.scrollTop;
	      }
	
	      // todo: fixedRowsBottom
	      // if (this.isFixedRowBottom(coords.row)) {
	      //
	      // }
	
	      if (coords.row < 0) {
	        // if hover on colHeader
	        priv.target.row = firstVisible > 0 ? firstVisible - 1 : firstVisible;
	      } else if (TD.offsetHeight / 2 + tdOffsetTop <= mouseOffsetTop) {
	        // if hover on lower part of TD
	        priv.target.row = coords.row + 1;
	        // unfortunately first row is bigger than rest
	        tdOffsetTop += coords.row === 0 ? TD.offsetHeight - 1 : TD.offsetHeight;
	      } else {
	        // elsewhere on table
	        priv.target.row = coords.row;
	      }
	
	      var backlightTop = mouseOffsetTop;
	      var guidelineTop = tdOffsetTop;
	
	      if (mouseOffsetTop + backlightElemHeight + backlightElemMarginTop >= hiderHeight) {
	        // prevent display backlight below table
	        backlightTop = hiderHeight - backlightElemHeight - backlightElemMarginTop;
	      } else if (mouseOffsetTop + backlightElemMarginTop < tbodyOffsetTop) {
	        // prevent display above below table
	        backlightTop = tbodyOffsetTop + Math.abs(backlightElemMarginTop);
	      }
	
	      if (tdOffsetTop >= hiderHeight - 1) {
	        // prevent display guideline below table
	        guidelineTop = hiderHeight - 1;
	      }
	
	      var topOverlayHeight = 0;
	      if (this.hot.view.wt.wtOverlays.topOverlay) {
	        topOverlayHeight = this.hot.view.wt.wtOverlays.topOverlay.clone.wtTable.TABLE.offsetHeight;
	      }
	
	      if (coords.row >= fixedRows && guidelineTop - wtTable.holder.scrollTop < topOverlayHeight) {
	        this.hot.scrollViewportTo(coords.row);
	      }
	
	      this.backlight.setPosition(backlightTop);
	      this.guideline.setPosition(guidelineTop);
	    }
	
	    /**
	     * This method checks arrayMap from rowsMapper and updates the rowsMapper if it's necessary.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'updateRowsMapper',
	    value: function updateRowsMapper() {
	      var countRows = this.hot.countSourceRows();
	      var rowsMapperLen = this.rowsMapper._arrayMap.length;
	
	      if (rowsMapperLen === 0) {
	        this.rowsMapper.createMap(countRows || this.hot.getSettings().startRows);
	      } else if (rowsMapperLen < countRows) {
	        var diff = countRows - rowsMapperLen;
	
	        this.rowsMapper.insertItems(rowsMapperLen, diff);
	      } else if (rowsMapperLen > countRows) {
	        var maxIndex = countRows - 1;
	        var rowsToRemove = [];
	
	        (0, _array.arrayEach)(this.rowsMapper._arrayMap, function (value, index) {
	          if (value > maxIndex) {
	            rowsToRemove.push(index);
	          }
	        });
	
	        this.rowsMapper.removeItems(rowsToRemove);
	      }
	    }
	
	    /**
	     * Binds the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this4 = this;
	
	      this.eventManager.addEventListener(document.documentElement, 'mousemove', function (event) {
	        return _this4.onMouseMove(event);
	      });
	      this.eventManager.addEventListener(document.documentElement, 'mouseup', function () {
	        return _this4.onMouseUp();
	      });
	    }
	
	    /**
	     * Unbinds the events used by the plugin.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'unregisterEvents',
	    value: function unregisterEvents() {
	      this.eventManager.clear();
	    }
	
	    /**
	     * `beforeColumnSort` hook callback. If user uses the sorting, manual row moving is disabled.
	     *
	     * @private
	     * @param {Number} column Column index where soring is present
	     * @param {*} order State of sorting. ASC/DESC/None
	     */
	
	  }, {
	    key: 'onBeforeColumnSort',
	    value: function onBeforeColumnSort(column, order) {
	      var priv = privatePool.get(this);
	
	      priv.disallowMoving = order !== void 0;
	    }
	
	    /**
	     * Changes the behavior of selection / dragging.
	     *
	     * @private
	     * @param {MouseEvent} event
	     * @param {CellCoords} coords Visual coordinates.
	     * @param {HTMLElement} TD
	     * @param {Object} blockCalculations
	     */
	
	  }, {
	    key: 'onBeforeOnCellMouseDown',
	    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {
	      var wtTable = this.hot.view.wt.wtTable;
	      var isHeaderSelection = this.hot.selection.isSelectedByRowHeader();
	      var selection = this.hot.getSelectedRangeLast();
	      var priv = privatePool.get(this);
	
	      if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0) {
	        priv.pressed = false;
	        priv.rowsToMove.length = 0;
	        (0, _element.removeClass)(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);
	        return;
	      }
	
	      var guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();
	      var backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();
	
	      if (guidelineIsNotReady && backlightIsNotReady) {
	        this.guideline.appendTo(wtTable.hider);
	        this.backlight.appendTo(wtTable.hider);
	      }
	
	      var from = selection.from,
	          to = selection.to;
	
	      var start = Math.min(from.row, to.row);
	      var end = Math.max(from.row, to.row);
	
	      if (coords.col < 0 && coords.row >= start && coords.row <= end) {
	        blockCalculations.row = true;
	        priv.pressed = true;
	        priv.target.eventPageY = event.pageY;
	        priv.target.coords = coords;
	        priv.target.TD = TD;
	        priv.rowsToMove = this.prepareRowsToMoving();
	
	        var leftPos = wtTable.holder.scrollLeft + this.hot.view.wt.wtViewport.getRowHeaderWidth();
	
	        this.backlight.setPosition(null, leftPos);
	        this.backlight.setSize(wtTable.hider.offsetWidth - leftPos, this.getRowsHeight(start, end + 1));
	        this.backlight.setOffset((this.getRowsHeight(start, coords.row) + event.layerY) * -1, null);
	
	        (0, _element.addClass)(this.hot.rootElement, CSS_ON_MOVING);
	
	        this.refreshPositions();
	      } else {
	        (0, _element.removeClass)(this.hot.rootElement, CSS_AFTER_SELECTION);
	        priv.pressed = false;
	        priv.rowsToMove.length = 0;
	      }
	    }
	
	    /**
	     * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
	     *
	     * @private
	     * @param {MouseEvent} event `mousemove` event properties.
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var priv = privatePool.get(this);
	
	      if (!priv.pressed) {
	        return;
	      }
	
	      // callback for browser which doesn't supports CSS pointer-event: none
	      if (event.realTarget === this.backlight.element) {
	        var height = this.backlight.getSize().height;
	        this.backlight.setSize(null, 0);
	
	        setTimeout(function () {
	          this.backlight.setPosition(null, height);
	        });
	      }
	
	      priv.target.eventPageY = event.pageY;
	      this.refreshPositions();
	    }
	
	    /**
	     * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
	     *
	     * @private
	     * @param {MouseEvent} event `mouseover` event properties.
	     * @param {CellCoords} coords Visual cell coordinates where was fired event.
	     * @param {HTMLElement} TD Cell represented as HTMLElement.
	     * @param {Object} blockCalculations Object which contains information about blockCalculation for row, column or cells.
	     */
	
	  }, {
	    key: 'onBeforeOnCellMouseOver',
	    value: function onBeforeOnCellMouseOver(event, coords, TD, blockCalculations) {
	      var selectedRange = this.hot.getSelectedRangeLast();
	      var priv = privatePool.get(this);
	
	      if (!selectedRange || !priv.pressed) {
	        return;
	      }
	
	      if (priv.rowsToMove.indexOf(coords.row) > -1) {
	        (0, _element.removeClass)(this.hot.rootElement, CSS_SHOW_UI);
	      } else {
	        (0, _element.addClass)(this.hot.rootElement, CSS_SHOW_UI);
	      }
	
	      blockCalculations.row = true;
	      blockCalculations.column = true;
	      blockCalculations.cell = true;
	      priv.target.coords = coords;
	      priv.target.TD = TD;
	    }
	
	    /**
	     * `onMouseUp` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      var priv = privatePool.get(this);
	      var target = priv.target.row;
	      var rowsLen = priv.rowsToMove.length;
	
	      priv.pressed = false;
	      priv.backlightHeight = 0;
	
	      (0, _element.removeClass)(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);
	
	      if (this.hot.selection.isSelectedByRowHeader()) {
	        (0, _element.addClass)(this.hot.rootElement, CSS_AFTER_SELECTION);
	      }
	
	      if (rowsLen < 1 || target === void 0 || priv.rowsToMove.indexOf(target) > -1 || priv.rowsToMove[rowsLen - 1] === target - 1) {
	        return;
	      }
	
	      this.moveRows(priv.rowsToMove, target);
	
	      this.persistentStateSave();
	      this.hot.render();
	
	      if (!priv.disallowMoving) {
	        var selectionStart = this.rowsMapper.getIndexByValue(priv.rowsToMove[0]);
	        var selectionEnd = this.rowsMapper.getIndexByValue(priv.rowsToMove[rowsLen - 1]);
	        this.changeSelection(selectionStart, selectionEnd);
	      }
	
	      priv.rowsToMove.length = 0;
	    }
	
	    /**
	     * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterScrollHorizontally',
	    value: function onAfterScrollHorizontally() {
	      var wtTable = this.hot.view.wt.wtTable;
	      var headerWidth = this.hot.view.wt.wtViewport.getRowHeaderWidth();
	      var scrollLeft = wtTable.holder.scrollLeft;
	      var posLeft = headerWidth + scrollLeft;
	
	      this.backlight.setPosition(null, posLeft);
	      this.backlight.setSize(wtTable.hider.offsetWidth - posLeft);
	    }
	
	    /**
	     * `afterCreateRow` hook callback.
	     *
	     * @private
	     * @param {Number} index Visual index of the created row.
	     * @param {Number} amount Amount of created rows.
	     */
	
	  }, {
	    key: 'onAfterCreateRow',
	    value: function onAfterCreateRow(index, amount) {
	      this.rowsMapper.shiftItems(index, amount);
	    }
	
	    /**
	     * On before remove row listener.
	     *
	     * @private
	     * @param {Number} index Visual row index.
	     * @param {Number} amount Defines how many rows removed.
	     */
	
	  }, {
	    key: 'onBeforeRemoveRow',
	    value: function onBeforeRemoveRow(index, amount) {
	      var _this5 = this;
	
	      this.removedRows.length = 0;
	
	      if (index !== false) {
	        // Collect physical row index.
	        (0, _number.rangeEach)(index, index + amount - 1, function (removedIndex) {
	          _this5.removedRows.push(_this5.hot.runHooks('modifyRow', removedIndex, _this5.pluginName));
	        });
	      }
	    }
	
	    /**
	     * `afterRemoveRow` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterRemoveRow',
	    value: function onAfterRemoveRow() {
	      this.rowsMapper.unshiftItems(this.removedRows);
	    }
	
	    /**
	     * `afterLoadData` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterLoadData',
	    value: function onAfterLoadData() {
	      this.updateRowsMapper();
	    }
	
	    /**
	     * 'modifyRow' hook callback.
	     *
	     * @private
	     * @param {Number} row Visual Row index.
	     * @returns {Number} Physical row index.
	     */
	
	  }, {
	    key: 'onModifyRow',
	    value: function onModifyRow(row, source) {
	      var physicalRow = row;
	
	      if (source !== this.pluginName) {
	        var rowInMapper = this.rowsMapper.getValueByIndex(physicalRow);
	        physicalRow = rowInMapper === null ? physicalRow : rowInMapper;
	      }
	
	      return physicalRow;
	    }
	
	    /**
	     * 'unmodifyRow' hook callback.
	     *
	     * @private
	     * @param {Number} row Physical row index.
	     * @returns {Number} Visual row index.
	     */
	
	  }, {
	    key: 'onUnmodifyRow',
	    value: function onUnmodifyRow(row) {
	      var indexInMapper = this.rowsMapper.getIndexByValue(row);
	
	      return indexInMapper === null ? row : indexInMapper;
	    }
	
	    /**
	     * `afterPluginsInitialized` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterPluginsInitialized',
	    value: function onAfterPluginsInitialized() {
	      this.updateRowsMapper();
	      this.initialSettings();
	      this.backlight.build();
	      this.guideline.build();
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.backlight.destroy();
	      this.guideline.destroy();
	      this.rowsMapper.destroy();
	
	      _get(ManualRowMove.prototype.__proto__ || Object.getPrototypeOf(ManualRowMove.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return ManualRowMove;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('ManualRowMove', ManualRowMove);
	
	exports.default = ManualRowMove;
	
	/***/ }),
	/* 345 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _arrayMapper = __webpack_require__(94);
	
	var _arrayMapper2 = _interopRequireDefault(_arrayMapper);
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class RowsMapper
	 * @plugin ManualRowMove
	 */
	var RowsMapper = function () {
	  function RowsMapper(manualRowMove) {
	    _classCallCheck(this, RowsMapper);
	
	    /**
	     * Instance of ManualRowMove plugin.
	     *
	     * @type {ManualRowMove}
	     */
	    this.manualRowMove = manualRowMove;
	  }
	
	  /**
	   * Reset current map array and create new one.
	   *
	   * @param {Number} [length] Custom generated map length.
	   */
	
	
	  _createClass(RowsMapper, [{
	    key: 'createMap',
	    value: function createMap(length) {
	      var _this = this;
	
	      var originLength = length === void 0 ? this._arrayMap.length : length;
	
	      this._arrayMap.length = 0;
	
	      (0, _number.rangeEach)(originLength - 1, function (itemIndex) {
	        _this._arrayMap[itemIndex] = itemIndex;
	      });
	    }
	
	    /**
	     * Destroy class.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this._arrayMap = null;
	    }
	
	    /**
	     *
	     * Moving elements in rowsMapper.
	     * @param {Number} from Row index to move.
	     * @param {Number} to Target index.
	     */
	
	  }, {
	    key: 'moveRow',
	    value: function moveRow(from, to) {
	      var indexToMove = this._arrayMap[from];
	      this._arrayMap[from] = null;
	      this._arrayMap.splice(to, 0, indexToMove);
	    }
	
	    /**
	     * Clearing arrayMap from `null` entries.
	     */
	
	  }, {
	    key: 'clearNull',
	    value: function clearNull() {
	      this._arrayMap = (0, _array.arrayFilter)(this._arrayMap, function (i) {
	        return i !== null;
	      });
	    }
	  }]);
	
	  return RowsMapper;
	}();
	
	(0, _object.mixin)(RowsMapper, _arrayMapper2.default);
	
	exports.default = RowsMapper;
	
	/***/ }),
	/* 346 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(205);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CSS_CLASSNAME = 'ht__manualRowMove--backlight';
	
	/**
	 * @class BacklightUI
	 * @util
	 */
	
	var BacklightUI = function (_BaseUI) {
	  _inherits(BacklightUI, _BaseUI);
	
	  function BacklightUI() {
	    _classCallCheck(this, BacklightUI);
	
	    return _possibleConstructorReturn(this, (BacklightUI.__proto__ || Object.getPrototypeOf(BacklightUI)).apply(this, arguments));
	  }
	
	  _createClass(BacklightUI, [{
	    key: 'build',
	
	    /**
	     * Custom className on build process.
	     */
	    value: function build() {
	      _get(BacklightUI.prototype.__proto__ || Object.getPrototypeOf(BacklightUI.prototype), 'build', this).call(this);
	
	      (0, _element.addClass)(this._element, CSS_CLASSNAME);
	    }
	  }]);
	
	  return BacklightUI;
	}(_base2.default);
	
	exports.default = BacklightUI;
	
	/***/ }),
	/* 347 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(205);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CSS_CLASSNAME = 'ht__manualRowMove--guideline';
	
	/**
	 * @class GuidelineUI
	 * @util
	 */
	
	var GuidelineUI = function (_BaseUI) {
	  _inherits(GuidelineUI, _BaseUI);
	
	  function GuidelineUI() {
	    _classCallCheck(this, GuidelineUI);
	
	    return _possibleConstructorReturn(this, (GuidelineUI.__proto__ || Object.getPrototypeOf(GuidelineUI)).apply(this, arguments));
	  }
	
	  _createClass(GuidelineUI, [{
	    key: 'build',
	
	    /**
	     * Custom className on build process.
	     */
	    value: function build() {
	      _get(GuidelineUI.prototype.__proto__ || Object.getPrototypeOf(GuidelineUI.prototype), 'build', this).call(this);
	
	      (0, _element.addClass)(this._element, CSS_CLASSNAME);
	    }
	  }]);
	
	  return GuidelineUI;
	}(_base2.default);
	
	exports.default = GuidelineUI;
	
	/***/ }),
	/* 348 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 349 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _element = __webpack_require__(0);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _event = __webpack_require__(13);
	
	var _array = __webpack_require__(2);
	
	var _number = __webpack_require__(6);
	
	var _plugins = __webpack_require__(8);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Developer note! Whenever you make a change in this file, make an analogous change in manualRowResize.js
	
	/**
	 * @description
	 * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}
	 * plugin should be enabled.
	 *
	 * The plugin creates additional components to make resizing possibly using user interface:
	 * - handle - the draggable element that sets the desired height of the row.
	 * - guide - the helper guide that shows the desired height as a horizontal guide.
	 *
	 * @plugin ManualRowResize
	 */
	var ManualRowResize = function (_BasePlugin) {
	  _inherits(ManualRowResize, _BasePlugin);
	
	  function ManualRowResize(hotInstance) {
	    _classCallCheck(this, ManualRowResize);
	
	    var _this = _possibleConstructorReturn(this, (ManualRowResize.__proto__ || Object.getPrototypeOf(ManualRowResize)).call(this, hotInstance));
	
	    _this.currentTH = null;
	    _this.currentRow = null;
	    _this.selectedRows = [];
	    _this.currentHeight = null;
	    _this.newSize = null;
	    _this.startY = null;
	    _this.startHeight = null;
	    _this.startOffset = null;
	    _this.handle = document.createElement('DIV');
	    _this.guide = document.createElement('DIV');
	    _this.eventManager = new _eventManager2.default(_this);
	    _this.pressed = null;
	    _this.dblclick = 0;
	    _this.autoresizeTimeout = null;
	    _this.manualRowHeights = [];
	
	    (0, _element.addClass)(_this.handle, 'manualRowResizer');
	    (0, _element.addClass)(_this.guide, 'manualRowResizerGuide');
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ManualRowResize#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ManualRowResize, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().manualRowResize;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.manualRowHeights = [];
	
	      var initialRowHeights = this.hot.getSettings().manualRowResize;
	      var loadedManualRowHeights = this.loadManualRowHeights();
	
	      if (typeof loadedManualRowHeights !== 'undefined') {
	        this.manualRowHeights = loadedManualRowHeights;
	      } else if (Array.isArray(initialRowHeights)) {
	        this.manualRowHeights = initialRowHeights;
	      } else {
	        this.manualRowHeights = [];
	      }
	
	      this.addHook('modifyRowHeight', function (height, row) {
	        return _this2.onModifyRowHeight(height, row);
	      });
	
	      // Handsontable.hooks.register('beforeRowResize');
	      // Handsontable.hooks.register('afterRowResize');
	
	      this.bindEvents();
	
	      _get(ManualRowResize.prototype.__proto__ || Object.getPrototypeOf(ManualRowResize.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      var initialRowHeights = this.hot.getSettings().manualRowResize;
	
	      if (Array.isArray(initialRowHeights)) {
	        this.manualRowHeights = initialRowHeights;
	      } else if (!initialRowHeights) {
	        this.manualRowHeights = [];
	      }
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(ManualRowResize.prototype.__proto__ || Object.getPrototypeOf(ManualRowResize.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
	     * @fires Hooks#persistentStateSave
	     * @fires Hooks#manualRowHeights
	     */
	
	  }, {
	    key: 'saveManualRowHeights',
	    value: function saveManualRowHeights() {
	      this.hot.runHooks('persistentStateSave', 'manualRowHeights', this.manualRowHeights);
	    }
	
	    /**
	     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
	     *
	     * @returns {Array}
	     * @fires Hooks#persistentStateLoad
	     * @fires Hooks#manualRowHeights
	     */
	
	  }, {
	    key: 'loadManualRowHeights',
	    value: function loadManualRowHeights() {
	      var storedState = {};
	
	      this.hot.runHooks('persistentStateLoad', 'manualRowHeights', storedState);
	
	      return storedState.value;
	    }
	
	    /**
	     * Sets the resize handle position.
	     *
	     * @private
	     * @param {HTMLCellElement} TH TH HTML element.
	     */
	
	  }, {
	    key: 'setupHandlePosition',
	    value: function setupHandlePosition(TH) {
	      var _this3 = this;
	
	      this.currentTH = TH;
	      var row = this.hot.view.wt.wtTable.getCoords(TH).row; // getCoords returns CellCoords
	      var headerWidth = (0, _element.outerWidth)(this.currentTH);
	
	      if (row >= 0) {
	        // if not col header
	        var box = this.currentTH.getBoundingClientRect();
	
	        this.currentRow = row;
	        this.selectedRows = [];
	
	        if (this.hot.selection.isSelected() && this.hot.selection.isSelectedByRowHeader()) {
	          var _hot$getSelectedRange = this.hot.getSelectedRangeLast(),
	              from = _hot$getSelectedRange.from,
	              to = _hot$getSelectedRange.to;
	
	          var start = from.row;
	          var end = to.row;
	
	          if (start >= end) {
	            start = to.row;
	            end = from.row;
	          }
	
	          if (this.currentRow >= start && this.currentRow <= end) {
	            (0, _number.rangeEach)(start, end, function (i) {
	              return _this3.selectedRows.push(i);
	            });
	          } else {
	            this.selectedRows.push(this.currentRow);
	          }
	        } else {
	          this.selectedRows.push(this.currentRow);
	        }
	
	        this.startOffset = box.top - 6;
	        this.startHeight = parseInt(box.height, 10);
	        this.handle.style.left = box.left + 'px';
	        this.handle.style.top = this.startOffset + this.startHeight + 'px';
	        this.handle.style.width = headerWidth + 'px';
	        this.hot.rootElement.appendChild(this.handle);
	      }
	    }
	
	    /**
	     * Refresh the resize handle position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshHandlePosition',
	    value: function refreshHandlePosition() {
	      this.handle.style.top = this.startOffset + this.currentHeight + 'px';
	    }
	
	    /**
	     * Sets the resize guide position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'setupGuidePosition',
	    value: function setupGuidePosition() {
	      var handleWidth = parseInt((0, _element.outerWidth)(this.handle), 10);
	      var handleRightPosition = parseInt(this.handle.style.left, 10) + handleWidth;
	      var maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
	      (0, _element.addClass)(this.handle, 'active');
	      (0, _element.addClass)(this.guide, 'active');
	
	      this.guide.style.top = this.handle.style.top;
	      this.guide.style.left = handleRightPosition + 'px';
	      this.guide.style.width = maximumVisibleElementWidth - handleWidth + 'px';
	      this.hot.rootElement.appendChild(this.guide);
	    }
	
	    /**
	     * Refresh the resize guide position.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'refreshGuidePosition',
	    value: function refreshGuidePosition() {
	      this.guide.style.top = this.handle.style.top;
	    }
	
	    /**
	     * Hides both the resize handle and resize guide.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'hideHandleAndGuide',
	    value: function hideHandleAndGuide() {
	      (0, _element.removeClass)(this.handle, 'active');
	      (0, _element.removeClass)(this.guide, 'active');
	    }
	
	    /**
	     * Checks if provided element is considered as a row header.
	     *
	     * @private
	     * @param {HTMLElement} element HTML element.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'checkIfRowHeader',
	    value: function checkIfRowHeader(element) {
	      if (element !== this.hot.rootElement) {
	        var parent = element.parentNode;
	
	        if (parent.tagName === 'TBODY') {
	          return true;
	        }
	
	        return this.checkIfRowHeader(parent);
	      }
	
	      return false;
	    }
	
	    /**
	     * Gets the TH element from the provided element.
	     *
	     * @private
	     * @param {HTMLElement} element HTML element.
	     * @returns {HTMLElement}
	     */
	
	  }, {
	    key: 'getTHFromTargetElement',
	    value: function getTHFromTargetElement(element) {
	      if (element.tagName !== 'TABLE') {
	        if (element.tagName === 'TH') {
	          return element;
	        }
	        return this.getTHFromTargetElement(element.parentNode);
	      }
	
	      return null;
	    }
	
	    /**
	     * 'mouseover' event callback - set the handle position.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseOver',
	    value: function onMouseOver(event) {
	      if (this.checkIfRowHeader(event.target)) {
	        var th = this.getTHFromTargetElement(event.target);
	
	        if (th) {
	          if (!this.pressed) {
	            this.setupHandlePosition(th);
	          }
	        }
	      }
	    }
	
	    /**
	     * Auto-size row after doubleclick - callback.
	     *
	     * @private
	     * @fires Hooks#beforeRowResize
	     * @fires Hooks#afterRowResize
	     */
	
	  }, {
	    key: 'afterMouseDownTimeout',
	    value: function afterMouseDownTimeout() {
	      var _this4 = this;
	
	      var render = function render() {
	        _this4.hot.forceFullRender = true;
	        _this4.hot.view.render(); // updates all
	        _this4.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      };
	      var resize = function resize(selectedRow, forceRender) {
	        var hookNewSize = _this4.hot.runHooks('beforeRowResize', selectedRow, _this4.newSize, true);
	
	        if (hookNewSize !== void 0) {
	          _this4.newSize = hookNewSize;
	        }
	
	        _this4.setManualSize(selectedRow, _this4.newSize); // double click sets auto row size
	
	        if (forceRender) {
	          render();
	        }
	
	        _this4.hot.runHooks('afterRowResize', selectedRow, _this4.newSize, true);
	      };
	
	      if (this.dblclick >= 2) {
	        var selectedRowsLength = this.selectedRows.length;
	
	        if (selectedRowsLength > 1) {
	          (0, _array.arrayEach)(this.selectedRows, function (selectedRow) {
	            resize(selectedRow);
	          });
	          render();
	        } else {
	          (0, _array.arrayEach)(this.selectedRows, function (selectedRow) {
	            resize(selectedRow, true);
	          });
	        }
	      }
	      this.dblclick = 0;
	      this.autoresizeTimeout = null;
	    }
	
	    /**
	     * 'mousedown' event callback.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseDown',
	    value: function onMouseDown(event) {
	      var _this5 = this;
	
	      if ((0, _element.hasClass)(event.target, 'manualRowResizer')) {
	        this.setupGuidePosition();
	        this.pressed = this.hot;
	
	        if (this.autoresizeTimeout === null) {
	          this.autoresizeTimeout = setTimeout(function () {
	            return _this5.afterMouseDownTimeout();
	          }, 500);
	
	          this.hot._registerTimeout(this.autoresizeTimeout);
	        }
	
	        this.dblclick += 1;
	        this.startY = (0, _event.pageY)(event);
	        this.newSize = this.startHeight;
	      }
	    }
	
	    /**
	     * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.
	     *
	     * @private
	     * @param {MouseEvent} event
	     */
	
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var _this6 = this;
	
	      if (this.pressed) {
	        this.currentHeight = this.startHeight + ((0, _event.pageY)(event) - this.startY);
	
	        (0, _array.arrayEach)(this.selectedRows, function (selectedRow) {
	          _this6.newSize = _this6.setManualSize(selectedRow, _this6.currentHeight);
	        });
	
	        this.refreshHandlePosition();
	        this.refreshGuidePosition();
	      }
	    }
	
	    /**
	     * 'mouseup' event callback - apply the row resizing.
	     *
	     * @private
	     *
	     * @fires Hooks#beforeRowResize
	     * @fires Hooks#afterRowResize
	     */
	
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp() {
	      var _this7 = this;
	
	      var render = function render() {
	        _this7.hot.forceFullRender = true;
	        _this7.hot.view.render(); // updates all
	        _this7.hot.view.wt.wtOverlays.adjustElementsSize(true);
	      };
	      var runHooks = function runHooks(selectedRow, forceRender) {
	        _this7.hot.runHooks('beforeRowResize', selectedRow, _this7.newSize);
	
	        if (forceRender) {
	          render();
	        }
	
	        _this7.saveManualRowHeights();
	
	        _this7.hot.runHooks('afterRowResize', selectedRow, _this7.newSize, false);
	      };
	      if (this.pressed) {
	        this.hideHandleAndGuide();
	        this.pressed = false;
	
	        if (this.newSize !== this.startHeight) {
	          var selectedRowsLength = this.selectedRows.length;
	
	          if (selectedRowsLength > 1) {
	            (0, _array.arrayEach)(this.selectedRows, function (selectedRow) {
	              runHooks(selectedRow);
	            });
	            render();
	          } else {
	            (0, _array.arrayEach)(this.selectedRows, function (selectedRow) {
	              runHooks(selectedRow, true);
	            });
	          }
	        }
	
	        this.setupHandlePosition(this.currentTH);
	      }
	    }
	
	    /**
	     * Binds the mouse events.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'bindEvents',
	    value: function bindEvents() {
	      var _this8 = this;
	
	      this.eventManager.addEventListener(this.hot.rootElement, 'mouseover', function (e) {
	        return _this8.onMouseOver(e);
	      });
	      this.eventManager.addEventListener(this.hot.rootElement, 'mousedown', function (e) {
	        return _this8.onMouseDown(e);
	      });
	      this.eventManager.addEventListener(window, 'mousemove', function (e) {
	        return _this8.onMouseMove(e);
	      });
	      this.eventManager.addEventListener(window, 'mouseup', function () {
	        return _this8.onMouseUp();
	      });
	    }
	
	    /**
	     * Sets the new height for specified row index.
	     *
	     * @param {Number} row Visual row index.
	     * @param {Number} height Row height.
	     * @returns {Number} Returns new height.
	     *
	     * @fires Hooks#modifyRow
	     */
	
	  }, {
	    key: 'setManualSize',
	    value: function setManualSize(row, height) {
	      var physicalRow = this.hot.runHooks('modifyRow', row);
	
	      this.manualRowHeights[physicalRow] = height;
	
	      return height;
	    }
	
	    /**
	     * Modifies the provided row height, based on the plugin settings.
	     *
	     * @private
	     * @param {Number} height Row height.
	     * @param {Number} row Visual row index.
	     * @returns {Number}
	     *
	     * @fires Hooks#modifyRow
	     */
	
	  }, {
	    key: 'onModifyRowHeight',
	    value: function onModifyRowHeight(height, row) {
	      if (this.enabled) {
	        var autoRowSizePlugin = this.hot.getPlugin('autoRowSize');
	        var autoRowHeightResult = autoRowSizePlugin ? autoRowSizePlugin.heights[row] : null;
	        var physicalRow = this.hot.runHooks('modifyRow', row);
	        var manualRowHeight = this.manualRowHeights[physicalRow];
	
	        if (manualRowHeight !== void 0 && (manualRowHeight === autoRowHeightResult || manualRowHeight > (height || 0))) {
	          return manualRowHeight;
	        }
	      }
	
	      return height;
	    }
	  }]);
	
	  return ManualRowResize;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('manualRowResize', ManualRowResize);
	
	exports.default = ManualRowResize;
	
	/***/ }),
	/* 350 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _plugins = __webpack_require__(8);
	
	var _event = __webpack_require__(13);
	
	var _src = __webpack_require__(4);
	
	var _cellsCollection = __webpack_require__(351);
	
	var _cellsCollection2 = _interopRequireDefault(_cellsCollection);
	
	var _cellCoords = __webpack_require__(97);
	
	var _cellCoords2 = _interopRequireDefault(_cellCoords);
	
	var _autofill = __webpack_require__(352);
	
	var _autofill2 = _interopRequireDefault(_autofill);
	
	var _selection = __webpack_require__(353);
	
	var _selection2 = _interopRequireDefault(_selection);
	
	var _toggleMerge = __webpack_require__(354);
	
	var _toggleMerge2 = _interopRequireDefault(_toggleMerge);
	
	var _array = __webpack_require__(2);
	
	var _object = __webpack_require__(1);
	
	var _console = __webpack_require__(58);
	
	var _number = __webpack_require__(6);
	
	var _utils = __webpack_require__(206);
	
	__webpack_require__(355);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	_pluginHooks2.default.getSingleton().register('beforeMergeCells');
	_pluginHooks2.default.getSingleton().register('afterMergeCells');
	_pluginHooks2.default.getSingleton().register('beforeUnmergeCells');
	_pluginHooks2.default.getSingleton().register('afterUnmergeCells');
	
	var privatePool = new WeakMap();
	
	/**
	 * @plugin MergeCells
	 *
	 * @description
	 * Plugin, which allows merging cells in the table (using the initial configuration, API or context menu).
	 *
	 * @example
	 *
	 * ```js
	 * const hot = new Handsontable(document.getElementById('example'), {
	 *  data: getData(),
	 *  mergeCells: [
	 *    {row: 0, col: 3, rowspan: 3, colspan: 3},
	 *    {row: 2, col: 6, rowspan: 2, colspan: 2},
	 *    {row: 4, col: 8, rowspan: 3, colspan: 3}
	 *  ],
	 * ```
	 */
	
	var MergeCells = function (_BasePlugin) {
	  _inherits(MergeCells, _BasePlugin);
	
	  function MergeCells(hotInstance) {
	    _classCallCheck(this, MergeCells);
	
	    var _this = _possibleConstructorReturn(this, (MergeCells.__proto__ || Object.getPrototypeOf(MergeCells)).call(this, hotInstance));
	
	    privatePool.set(_this, {
	      lastDesiredCoords: null
	    });
	
	    /**
	     * A container for all the merged cells.
	     *
	     * @private
	     * @type {MergedCellsCollection}
	     */
	    _this.mergedCellsCollection = null;
	    /**
	     * Instance of the class responsible for all the autofill-related calculations.
	     *
	     * @private
	     * @type {AutofillCalculations}
	     */
	    _this.autofillCalculations = null;
	    /**
	     * Instance of the class responsible for the selection-related calculations.
	     *
	     * @private
	     * @type {SelectionCalculations}
	     */
	    _this.selectionCalculations = null;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link MergeCells#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(MergeCells, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return !!this.hot.getSettings().mergeCells;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.mergedCellsCollection = new _cellsCollection2.default(this);
	      this.autofillCalculations = new _autofill2.default(this);
	      this.selectionCalculations = new _selection2.default(this);
	
	      this.addHook('afterInit', function () {
	        return _this2.onAfterInit.apply(_this2, arguments);
	      });
	      this.addHook('beforeKeyDown', function () {
	        return _this2.onBeforeKeyDown.apply(_this2, arguments);
	      });
	      this.addHook('modifyTransformStart', function () {
	        return _this2.onModifyTransformStart.apply(_this2, arguments);
	      });
	      this.addHook('afterModifyTransformStart', function () {
	        return _this2.onAfterModifyTransformStart.apply(_this2, arguments);
	      });
	      this.addHook('modifyTransformEnd', function () {
	        return _this2.onModifyTransformEnd.apply(_this2, arguments);
	      });
	      this.addHook('modifyGetCellCoords', function () {
	        return _this2.onModifyGetCellCoords.apply(_this2, arguments);
	      });
	      this.addHook('beforeSetRangeEnd', function () {
	        return _this2.onBeforeSetRangeEnd.apply(_this2, arguments);
	      });
	      this.addHook('afterIsMultipleSelection', function () {
	        return _this2.onAfterIsMultipleSelection.apply(_this2, arguments);
	      });
	      this.addHook('afterRenderer', function () {
	        return _this2.onAfterRenderer.apply(_this2, arguments);
	      });
	      this.addHook('afterContextMenuDefaultOptions', function () {
	        return _this2.addMergeActionsToContextMenu.apply(_this2, arguments);
	      });
	      this.addHook('afterGetCellMeta', function () {
	        return _this2.onAfterGetCellMeta.apply(_this2, arguments);
	      });
	      this.addHook('afterViewportRowCalculatorOverride', function () {
	        return _this2.onAfterViewportRowCalculatorOverride.apply(_this2, arguments);
	      });
	      this.addHook('afterViewportColumnCalculatorOverride', function () {
	        return _this2.onAfterViewportColumnCalculatorOverride.apply(_this2, arguments);
	      });
	      this.addHook('modifyAutofillRange', function () {
	        return _this2.onModifyAutofillRange.apply(_this2, arguments);
	      });
	      this.addHook('afterCreateCol', function () {
	        return _this2.onAfterCreateCol.apply(_this2, arguments);
	      });
	      this.addHook('afterRemoveCol', function () {
	        return _this2.onAfterRemoveCol.apply(_this2, arguments);
	      });
	      this.addHook('afterCreateRow', function () {
	        return _this2.onAfterCreateRow.apply(_this2, arguments);
	      });
	      this.addHook('afterRemoveRow', function () {
	        return _this2.onAfterRemoveRow.apply(_this2, arguments);
	      });
	      this.addHook('afterChange', function () {
	        return _this2.onAfterChange.apply(_this2, arguments);
	      });
	      this.addHook('beforeDrawBorders', function () {
	        return _this2.onBeforeDrawAreaBorders.apply(_this2, arguments);
	      });
	      this.addHook('afterDrawSelection', function () {
	        return _this2.onAfterDrawSelection.apply(_this2, arguments);
	      });
	      this.addHook('beforeRemoveCellClassNames', function () {
	        return _this2.onBeforeRemoveCellClassNames.apply(_this2, arguments);
	      });
	
	      _get(MergeCells.prototype.__proto__ || Object.getPrototypeOf(MergeCells.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      this.clearCollections();
	      this.hot.render();
	      _get(MergeCells.prototype.__proto__ || Object.getPrototypeOf(MergeCells.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      var settings = this.hot.getSettings().mergeCells;
	
	      this.disablePlugin();
	      this.enablePlugin();
	
	      this.generateFromSettings(settings);
	
	      _get(MergeCells.prototype.__proto__ || Object.getPrototypeOf(MergeCells.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Validates a single setting object, represented by a single merged cell information object.
	     *
	     * @private
	     * @param {Object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'validateSetting',
	    value: function validateSetting(setting) {
	      var valid = true;
	
	      if (!setting) {
	        return false;
	      }
	
	      if (_cellCoords2.default.containsNegativeValues(setting)) {
	        (0, _console.warn)(_cellCoords2.default.NEGATIVE_VALUES_WARNING(setting));
	
	        valid = false;
	      } else if (_cellCoords2.default.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {
	        (0, _console.warn)(_cellCoords2.default.IS_OUT_OF_BOUNDS_WARNING(setting));
	
	        valid = false;
	      } else if (_cellCoords2.default.isSingleCell(setting)) {
	        (0, _console.warn)(_cellCoords2.default.IS_SINGLE_CELL(setting));
	
	        valid = false;
	      } else if (_cellCoords2.default.containsZeroSpan(setting)) {
	        (0, _console.warn)(_cellCoords2.default.ZERO_SPAN_WARNING(setting));
	
	        valid = false;
	      }
	
	      return valid;
	    }
	
	    /**
	     * Generates the merged cells from the settings provided to the plugin.
	     *
	     * @private
	     * @param {Array|Boolean} settings The settings provided to the plugin.
	     */
	
	  }, {
	    key: 'generateFromSettings',
	    value: function generateFromSettings(settings) {
	      var _this3 = this;
	
	      if (Array.isArray(settings)) {
	        var _hot;
	
	        var populationArgumentsList = [];
	
	        (0, _array.arrayEach)(settings, function (setting) {
	          if (!_this3.validateSetting(setting)) {
	            return;
	          }
	
	          var highlight = new _src.CellCoords(setting.row, setting.col);
	          var rangeEnd = new _src.CellCoords(setting.row + setting.rowspan - 1, setting.col + setting.colspan - 1);
	          var mergeRange = new _src.CellRange(highlight, highlight, rangeEnd);
	
	          populationArgumentsList.push(_this3.mergeRange(mergeRange, true, true));
	        });
	
	        // remove 'empty' setting objects, caused by improper merge range declarations
	        populationArgumentsList = populationArgumentsList.filter(function (value) {
	          return value !== true;
	        });
	
	        var bulkPopulationData = this.getBulkCollectionData(populationArgumentsList);
	
	        (_hot = this.hot).populateFromArray.apply(_hot, _toConsumableArray(bulkPopulationData));
	      }
	    }
	
	    /**
	     * Generates a bulk set of all the data to be populated to fill the data "under" the added merged cells.
	     *
	     * @private
	     * @param {Array} populationArgumentsList Array in a form of `[row, column, dataUnderCollection]`.
	     * @return {Array} Array in a form of `[row, column, dataOfAllCollections]`.
	     */
	
	  }, {
	    key: 'getBulkCollectionData',
	    value: function getBulkCollectionData(populationArgumentsList) {
	      var _hot2;
	
	      var populationDataRange = this.getBulkCollectionDataRange(populationArgumentsList);
	      var dataAtRange = (_hot2 = this.hot).getData.apply(_hot2, _toConsumableArray(populationDataRange));
	      var newDataAtRange = dataAtRange.splice(0);
	
	      (0, _array.arrayEach)(populationArgumentsList, function (mergedCellArguments) {
	        var _mergedCellArguments = _slicedToArray(mergedCellArguments, 3),
	            mergedCellRowIndex = _mergedCellArguments[0],
	            mergedCellColumnIndex = _mergedCellArguments[1],
	            mergedCellData = _mergedCellArguments[2];
	
	        (0, _array.arrayEach)(mergedCellData, function (mergedCellRow, rowIndex) {
	          (0, _array.arrayEach)(mergedCellRow, function (mergedCellElement, columnIndex) {
	            newDataAtRange[mergedCellRowIndex - populationDataRange[0] + rowIndex][mergedCellColumnIndex - populationDataRange[1] + columnIndex] = mergedCellElement;
	          });
	        });
	      });
	
	      return [populationDataRange[0], populationDataRange[1], newDataAtRange];
	    }
	
	    /**
	     * Gets the range of combined data ranges provided in a form of an array of arrays ([row, column, dataUnderCollection])
	     *
	     * @private
	     * @param {Array} populationArgumentsList Array containing argument lists for the `populateFromArray` method - row, column and data for population.
	     * @return {Array[]} Start and end coordinates of the merged cell range. (in a form of [rowIndex, columnIndex])
	     */
	
	  }, {
	    key: 'getBulkCollectionDataRange',
	    value: function getBulkCollectionDataRange(populationArgumentsList) {
	      var start = [0, 0];
	      var end = [0, 0];
	      var mergedCellRow = null;
	      var mergedCellColumn = null;
	      var mergedCellData = null;
	
	      (0, _array.arrayEach)(populationArgumentsList, function (mergedCellArguments) {
	        mergedCellRow = mergedCellArguments[0];
	        mergedCellColumn = mergedCellArguments[1];
	        mergedCellData = mergedCellArguments[2];
	
	        start[0] = Math.min(mergedCellRow, start[0]);
	        start[1] = Math.min(mergedCellColumn, start[1]);
	        end[0] = Math.max(mergedCellRow + mergedCellData.length - 1, end[0]);
	        end[1] = Math.max(mergedCellColumn + mergedCellData[0].length - 1, end[1]);
	      });
	
	      return [].concat(start, end);
	    }
	
	    /**
	     * Clears the merged cells from the merged cell container.
	     */
	
	  }, {
	    key: 'clearCollections',
	    value: function clearCollections() {
	      this.mergedCellsCollection.clear();
	    }
	
	    /**
	     * Returns `true` if a range is mergeable.
	     *
	     * @private
	     * @param {Object} newMergedCellInfo Merged cell information object to test.
	     * @param {Boolean} [auto=false] `true` if triggered at initialization.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'canMergeRange',
	    value: function canMergeRange(newMergedCellInfo) {
	      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      return auto ? true : this.validateSetting(newMergedCellInfo);
	    }
	
	    /**
	     * Merge or unmerge, based on last selected range.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'toggleMergeOnSelection',
	    value: function toggleMergeOnSelection() {
	      var currentRange = this.hot.getSelectedRangeLast();
	
	      if (!currentRange) {
	        return;
	      }
	
	      currentRange.setDirection('NW-SE');
	
	      var from = currentRange.from,
	          to = currentRange.to;
	
	
	      this.toggleMerge(currentRange);
	      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
	    }
	
	    /**
	     * Merges the selection provided as a cell range.
	     *
	     * @param {CellRange} [cellRange] Selection cell range.
	     */
	
	  }, {
	    key: 'mergeSelection',
	    value: function mergeSelection() {
	      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();
	
	      if (!cellRange) {
	        return;
	      }
	
	      cellRange.setDirection('NW-SE');
	
	      var from = cellRange.from,
	          to = cellRange.to;
	
	
	      this.unmergeRange(cellRange, true);
	      this.mergeRange(cellRange);
	      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
	    }
	
	    /**
	     * Unmerges the selection provided as a cell range.
	     *
	     * @param {CellRange} [cellRange] Selection cell range.
	     */
	
	  }, {
	    key: 'unmergeSelection',
	    value: function unmergeSelection() {
	      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();
	
	      if (!cellRange) {
	        return;
	      }
	
	      var from = cellRange.from,
	          to = cellRange.to;
	
	
	      this.unmergeRange(cellRange, true);
	      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
	    }
	
	    /**
	     * Merges cells in the provided cell range.
	     *
	     * @private
	     * @param {CellRange} cellRange Cell range to merge.
	     * @param {Boolean} [auto=false] `true` if is called automatically, e.g. at initialization.
	     * @param {Boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end, but rather return its arguments.
	     * @returns {Array|Boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to true. If the the merging process went successful, it returns `true`, otherwise - `false`.
	     * @fires Hooks#beforeMergeCells
	     * @fires Hooks#afterMergeCells
	     */
	
	  }, {
	    key: 'mergeRange',
	    value: function mergeRange(cellRange) {
	      var _this4 = this;
	
	      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      var preventPopulation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	      var topLeft = cellRange.getTopLeftCorner();
	      var bottomRight = cellRange.getBottomRightCorner();
	      var mergeParent = {
	        row: topLeft.row,
	        col: topLeft.col,
	        rowspan: bottomRight.row - topLeft.row + 1,
	        colspan: bottomRight.col - topLeft.col + 1
	      };
	      var clearedData = [];
	      var populationInfo = null;
	
	      if (!this.canMergeRange(mergeParent, auto)) {
	        return false;
	      }
	
	      this.hot.runHooks('beforeMergeCells', cellRange, auto);
	
	      (0, _number.rangeEach)(0, mergeParent.rowspan - 1, function (i) {
	        (0, _number.rangeEach)(0, mergeParent.colspan - 1, function (j) {
	          var clearedValue = null;
	
	          if (!clearedData[i]) {
	            clearedData[i] = [];
	          }
	
	          if (i === 0 && j === 0) {
	            clearedValue = _this4.hot.getDataAtCell(mergeParent.row, mergeParent.col);
	          } else {
	            _this4.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, 'hidden', true);
	          }
	
	          clearedData[i][j] = clearedValue;
	        });
	      });
	
	      this.hot.setCellMeta(mergeParent.row, mergeParent.col, 'spanned', true);
	
	      var mergedCellAdded = this.mergedCellsCollection.add(mergeParent);
	
	      if (mergedCellAdded) {
	        if (preventPopulation) {
	          populationInfo = [mergeParent.row, mergeParent.col, clearedData];
	        } else {
	          this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);
	        }
	
	        this.hot.runHooks('afterMergeCells', cellRange, mergeParent, auto);
	
	        return populationInfo;
	      }
	
	      return true;
	    }
	
	    /**
	     * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
	     *
	     * @private
	     * @param {CellRange} cellRange Selection cell range.
	     * @param {Boolean} [auto=false] `true` if called automatically by the plugin.
	     *
	     * @fires Hooks#beforeUnmergeCells
	     * @fires Hooks#afterUnmergeCells
	     */
	
	  }, {
	    key: 'unmergeRange',
	    value: function unmergeRange(cellRange) {
	      var _this5 = this;
	
	      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      var mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);
	
	      if (!mergedCells) {
	        return;
	      }
	
	      this.hot.runHooks('beforeUnmergeCells', cellRange, auto);
	
	      (0, _array.arrayEach)(mergedCells, function (currentCollection) {
	        _this5.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);
	
	        (0, _number.rangeEach)(0, currentCollection.rowspan - 1, function (i) {
	          (0, _number.rangeEach)(0, currentCollection.colspan - 1, function (j) {
	            _this5.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, 'hidden');
	          });
	        });
	
	        _this5.hot.removeCellMeta(currentCollection.row, currentCollection.col, 'spanned');
	      });
	
	      this.hot.render();
	      this.hot.runHooks('afterUnmergeCells', cellRange, auto);
	    }
	
	    /**
	     * Merges or unmerges, based on the cell range provided as `cellRange`.
	     *
	     * @private
	     * @param {CellRange} cellRange The cell range to merge or unmerged.
	     */
	
	  }, {
	    key: 'toggleMerge',
	    value: function toggleMerge(cellRange) {
	      var mergedCell = this.mergedCellsCollection.get(cellRange.from.row, cellRange.from.col);
	      var mergedCellCoversWholeRange = mergedCell.row === cellRange.from.row && mergedCell.col === cellRange.from.col && mergedCell.row + mergedCell.rowspan - 1 === cellRange.to.row && mergedCell.col + mergedCell.colspan - 1 === cellRange.to.col;
	
	      if (mergedCellCoversWholeRange) {
	        this.unmergeRange(cellRange);
	      } else {
	        this.mergeSelection(cellRange);
	      }
	    }
	
	    /**
	     * Merges the specified range.
	     *
	     * @param {Number} startRow Start row of the merged cell.
	     * @param {Number} startColumn Start column of the merged cell.
	     * @param {Number} endRow End row of the merged cell.
	     * @param {Number} endColumn End column of the merged cell.
	     * @fires Hooks#beforeMergeCells
	     * @fires Hooks#afterMergeCells
	     */
	
	  }, {
	    key: 'merge',
	    value: function merge(startRow, startColumn, endRow, endColumn) {
	      var start = new _src.CellCoords(startRow, startColumn);
	      var end = new _src.CellCoords(endRow, endColumn);
	
	      this.mergeRange(new _src.CellRange(start, start, end));
	    }
	
	    /**
	     * Unmerges the merged cell in the provided range.
	     *
	     * @param {Number} startRow Start row of the merged cell.
	     * @param {Number} startColumn Start column of the merged cell.
	     * @param {Number} endRow End row of the merged cell.
	     * @param {Number} endColumn End column of the merged cell.
	     * @fires Hooks#beforeUnmergeCells
	     * @fires Hooks#afterUnmergeCells
	     */
	
	  }, {
	    key: 'unmerge',
	    value: function unmerge(startRow, startColumn, endRow, endColumn) {
	      var start = new _src.CellCoords(startRow, startColumn);
	      var end = new _src.CellCoords(endRow, endColumn);
	
	      this.unmergeRange(new _src.CellRange(start, start, end));
	    }
	
	    /**
	     * `afterInit` hook callback.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterInit',
	    value: function onAfterInit() {
	      this.generateFromSettings(this.hot.getSettings().mergeCells);
	      this.hot.render();
	    }
	
	    /**
	     * `beforeKeyDown` hook callback.
	     *
	     * @private
	     * @param {KeyboardEvent} event The `keydown` event object.
	     */
	
	  }, {
	    key: 'onBeforeKeyDown',
	    value: function onBeforeKeyDown(event) {
	      var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	
	      if (ctrlDown && event.keyCode === 77) {
	        // CTRL + M
	        this.toggleMerge(this.hot.getSelectedRangeLast());
	
	        this.hot.render();
	        (0, _event.stopImmediatePropagation)(event);
	      }
	    }
	
	    /**
	     * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection` hook callback.
	     *
	     * @private
	     * @param {Boolean} isMultiple
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'onAfterIsMultipleSelection',
	    value: function onAfterIsMultipleSelection(isMultiple) {
	      if (isMultiple) {
	        var mergedCells = this.mergedCellsCollection.mergedCells;
	        var selectionRange = this.hot.getSelectedRangeLast();
	
	        for (var group = 0; group < mergedCells.length; group += 1) {
	          if (selectionRange.highlight.row === mergedCells[group].row && selectionRange.highlight.col === mergedCells[group].col && selectionRange.to.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col === mergedCells[group].col + mergedCells[group].colspan - 1) {
	            return false;
	          }
	        }
	      }
	
	      return isMultiple;
	    }
	
	    /**
	     * `modifyTransformStart` hook callback.
	     *
	     * @private
	     * @param {Object} delta The transformation delta.
	     */
	
	  }, {
	    key: 'onModifyTransformStart',
	    value: function onModifyTransformStart(delta) {
	      var priv = privatePool.get(this);
	      var currentlySelectedRange = this.hot.getSelectedRangeLast();
	      var newDelta = {
	        row: delta.row,
	        col: delta.col
	      };
	      var nextPosition = null;
	      var currentPosition = new _src.CellCoords(currentlySelectedRange.highlight.row, currentlySelectedRange.highlight.col);
	      var mergedParent = this.mergedCellsCollection.get(currentPosition.row, currentPosition.col);
	
	      if (!priv.lastDesiredCoords) {
	        priv.lastDesiredCoords = new _src.CellCoords(null, null);
	      }
	
	      if (mergedParent) {
	        // only merge selected
	        var mergeTopLeft = new _src.CellCoords(mergedParent.row, mergedParent.col);
	        var mergeBottomRight = new _src.CellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1);
	        var mergeRange = new _src.CellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);
	
	        if (!mergeRange.includes(priv.lastDesiredCoords)) {
	          priv.lastDesiredCoords = new _src.CellCoords(null, null); // reset outdated version of lastDesiredCoords
	        }
	
	        newDelta.row = priv.lastDesiredCoords.row ? priv.lastDesiredCoords.row - currentPosition.row : newDelta.row;
	        newDelta.col = priv.lastDesiredCoords.col ? priv.lastDesiredCoords.col - currentPosition.col : newDelta.col;
	
	        if (delta.row > 0) {
	          // moving down
	          newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;
	        } else if (delta.row < 0) {
	          // moving up
	          newDelta.row = currentPosition.row - mergedParent.row + delta.row;
	        }
	
	        if (delta.col > 0) {
	          // moving right
	          newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;
	        } else if (delta.col < 0) {
	          // moving left
	          newDelta.col = currentPosition.col - mergedParent.col + delta.col;
	        }
	      }
	
	      nextPosition = new _src.CellCoords(currentlySelectedRange.highlight.row + newDelta.row, currentlySelectedRange.highlight.col + newDelta.col);
	
	      var nextParentIsMerged = this.mergedCellsCollection.get(nextPosition.row, nextPosition.col);
	
	      if (nextParentIsMerged) {
	        // skipping the invisible cells in the merge range
	        priv.lastDesiredCoords = nextPosition;
	        newDelta = {
	          row: nextParentIsMerged.row - currentPosition.row,
	          col: nextParentIsMerged.col - currentPosition.col
	        };
	      }
	
	      if (newDelta.row !== 0) {
	        delta.row = newDelta.row;
	      }
	      if (newDelta.col !== 0) {
	        delta.col = newDelta.col;
	      }
	    }
	
	    /**
	     * `modifyTransformEnd` hook callback. Needed to handle "jumping over" merged merged cells, while selecting.
	     *
	     * @private
	     * @param {Object} delta The transformation delta.
	     */
	
	  }, {
	    key: 'onModifyTransformEnd',
	    value: function onModifyTransformEnd(delta) {
	      var _this6 = this;
	
	      var currentSelectionRange = this.hot.getSelectedRangeLast();
	      var newDelta = (0, _object.clone)(delta);
	      var newSelectionRange = this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, delta);
	      var tempDelta = (0, _object.clone)(newDelta);
	
	      var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(newSelectionRange, true);
	
	      do {
	        tempDelta = (0, _object.clone)(newDelta);
	        this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, newDelta);
	
	        (0, _array.arrayEach)(mergedCellsWithinRange, function (mergedCell) {
	          _this6.selectionCalculations.snapDelta(newDelta, currentSelectionRange, mergedCell);
	        });
	      } while (newDelta.row !== tempDelta.row || newDelta.col !== tempDelta.col);
	
	      delta.row = newDelta.row;
	      delta.col = newDelta.col;
	    }
	
	    /**
	     * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.
	     *
	     * @private
	     * @param {Number} row Row index.
	     * @param {Number} column Column index.
	     * @returns {Array}
	     */
	
	  }, {
	    key: 'onModifyGetCellCoords',
	    value: function onModifyGetCellCoords(row, column) {
	      var mergeParent = this.mergedCellsCollection.get(row, column);
	
	      return mergeParent ? [mergeParent.row, mergeParent.col, mergeParent.row + mergeParent.rowspan - 1, mergeParent.col + mergeParent.colspan - 1] : void 0;
	    }
	
	    /**
	     * `afterContextMenuDefaultOptions` hook callback.
	     *
	     * @private
	     * @param {Object} defaultOptions The default context menu options.
	     */
	
	  }, {
	    key: 'addMergeActionsToContextMenu',
	    value: function addMergeActionsToContextMenu(defaultOptions) {
	      defaultOptions.items.push({
	        name: '---------'
	      }, (0, _toggleMerge2.default)(this));
	    }
	
	    /**
	     * `afterRenderer` hook callback.
	     *
	     * @private
	     * @param {HTMLElement} TD The cell to be modified.
	     * @param {Number} row Row index.
	     * @param {Number} col Column index.
	     */
	
	  }, {
	    key: 'onAfterRenderer',
	    value: function onAfterRenderer(TD, row, col) {
	      var mergedCell = this.mergedCellsCollection.get(row, col);
	
	      (0, _utils.applySpanProperties)(TD, mergedCell, row, col);
	    }
	
	    /**
	     * `beforeSetRangeEnd` hook callback.
	     * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the merged cell
	     *
	     * @private
	     * @param {Object} coords Cell coords.
	     */
	
	  }, {
	    key: 'onBeforeSetRangeEnd',
	    value: function onBeforeSetRangeEnd(coords) {
	      var selRange = this.hot.getSelectedRangeLast();
	      selRange.highlight = new _src.CellCoords(selRange.highlight.row, selRange.highlight.col); // clone in case we will modify its reference
	      selRange.to = coords;
	      var rangeExpanded = false;
	
	      if (selRange.from.row === 0 && selRange.to.row === this.hot.countRows() - 1 || selRange.from.col === 0 && selRange.to.col === this.hot.countCols() - 1) {
	        return;
	      }
	
	      do {
	        rangeExpanded = false;
	
	        for (var i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {
	          var cellInfo = this.mergedCellsCollection.mergedCells[i];
	          var mergedCellRange = cellInfo.getRange();
	
	          if (selRange.expandByRange(mergedCellRange)) {
	            coords.row = selRange.to.row;
	            coords.col = selRange.to.col;
	
	            rangeExpanded = true;
	          }
	        }
	      } while (rangeExpanded);
	    }
	
	    /**
	     * The `afterGetCellMeta` hook callback.
	     *
	     * @private
	     * @param {Number} row Row index.
	     * @param {Number} col Column index.
	     * @param {Object} cellProperties The cell properties object.
	     */
	
	  }, {
	    key: 'onAfterGetCellMeta',
	    value: function onAfterGetCellMeta(row, col, cellProperties) {
	      var mergeParent = this.mergedCellsCollection.get(row, col);
	
	      if (mergeParent && (mergeParent.row !== row || mergeParent.col !== col)) {
	        cellProperties.copyable = false;
	      }
	    }
	
	    /**
	     * `afterViewportRowCalculatorOverride` hook callback.
	     *
	     * @private
	     * @param {Object} calc The row calculator object.
	     */
	
	  }, {
	    key: 'onAfterViewportRowCalculatorOverride',
	    value: function onAfterViewportRowCalculatorOverride(calc) {
	      var _this7 = this;
	
	      var colCount = this.hot.countCols();
	      var mergeParent = void 0;
	
	      (0, _number.rangeEach)(0, colCount - 1, function (c) {
	        mergeParent = _this7.mergedCellsCollection.get(calc.startRow, c);
	        if (mergeParent) {
	          if (mergeParent.row < calc.startRow) {
	            calc.startRow = mergeParent.row;
	            return _this7.onAfterViewportRowCalculatorOverride.call(_this7, calc); // recursively search upwards
	          }
	        }
	
	        mergeParent = _this7.mergedCellsCollection.get(calc.endRow, c);
	
	        if (mergeParent) {
	          var mergeEnd = mergeParent.row + mergeParent.rowspan - 1;
	          if (mergeEnd > calc.endRow) {
	            calc.endRow = mergeEnd;
	            return _this7.onAfterViewportRowCalculatorOverride.call(_this7, calc); // recursively search upwards
	          }
	        }
	
	        return true;
	      });
	    }
	
	    /**
	     * `afterViewportColumnCalculatorOverride` hook callback.
	     *
	     * @private
	     * @param {Object} calc The column calculator object.
	     */
	
	  }, {
	    key: 'onAfterViewportColumnCalculatorOverride',
	    value: function onAfterViewportColumnCalculatorOverride(calc) {
	      var _this8 = this;
	
	      var rowCount = this.hot.countRows();
	      var mergeParent = void 0;
	
	      (0, _number.rangeEach)(0, rowCount - 1, function (r) {
	        mergeParent = _this8.mergedCellsCollection.get(r, calc.startColumn);
	
	        if (mergeParent && mergeParent.col < calc.startColumn) {
	          calc.startColumn = mergeParent.col;
	          return _this8.onAfterViewportColumnCalculatorOverride.call(_this8, calc); // recursively search upwards
	        }
	
	        mergeParent = _this8.mergedCellsCollection.get(r, calc.endColumn);
	
	        if (mergeParent) {
	          var mergeEnd = mergeParent.col + mergeParent.colspan - 1;
	          if (mergeEnd > calc.endColumn) {
	            calc.endColumn = mergeEnd;
	            return _this8.onAfterViewportColumnCalculatorOverride.call(_this8, calc); // recursively search upwards
	          }
	        }
	
	        return true;
	      });
	    }
	
	    /**
	     * The `modifyAutofillRange` hook callback.
	     *
	     * @private
	     * @param {Array} drag The drag area coordinates.
	     * @param {Array} select The selection information.
	     * @return {Array} The new drag area.
	     */
	
	  }, {
	    key: 'onModifyAutofillRange',
	    value: function onModifyAutofillRange(drag, select) {
	      this.autofillCalculations.correctSelectionAreaSize(select);
	      var dragDirection = this.autofillCalculations.getDirection(select, drag);
	      var dragArea = drag;
	
	      if (this.autofillCalculations.dragAreaOverlapsCollections(select, dragArea, dragDirection)) {
	        dragArea = select;
	
	        return dragArea;
	      }
	
	      var mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange({
	        from: { row: select[0], col: select[1] },
	        to: { row: select[2], col: select[3] }
	      });
	
	      if (!mergedCellsWithinSelectionArea) {
	        return dragArea;
	      }
	
	      dragArea = this.autofillCalculations.snapDragArea(select, dragArea, dragDirection, mergedCellsWithinSelectionArea);
	
	      return dragArea;
	    }
	
	    /**
	     * `afterCreateCol` hook callback.
	     *
	     * @private
	     * @param {Number} column Column index.
	     * @param {Number} count Number of created columns.
	     */
	
	  }, {
	    key: 'onAfterCreateCol',
	    value: function onAfterCreateCol(column, count) {
	      this.mergedCellsCollection.shiftCollections('right', column, count);
	    }
	
	    /**
	     * `afterRemoveCol` hook callback.
	     *
	     * @private
	     * @param {Number} column Column index.
	     * @param {Number} count Number of removed columns.
	     */
	
	  }, {
	    key: 'onAfterRemoveCol',
	    value: function onAfterRemoveCol(column, count) {
	      this.mergedCellsCollection.shiftCollections('left', column, count);
	    }
	
	    /**
	     * `afterCreateRow` hook callback.
	     *
	     * @private
	     * @param {Number} row Row index.
	     * @param {Number} count Number of created rows.
	     * @param {String} source Source of change.
	     */
	
	  }, {
	    key: 'onAfterCreateRow',
	    value: function onAfterCreateRow(row, count, source) {
	      if (source === 'auto') {
	        return;
	      }
	
	      this.mergedCellsCollection.shiftCollections('down', row, count);
	    }
	
	    /**
	     * `afterRemoveRow` hook callback.
	     *
	     * @private
	     * @param {Number} row Row index.
	     * @param {Number} count Number of removed rows.
	     */
	
	  }, {
	    key: 'onAfterRemoveRow',
	    value: function onAfterRemoveRow(row, count) {
	      this.mergedCellsCollection.shiftCollections('up', row, count);
	    }
	
	    /**
	     * `afterChange` hook callback. Used to propagate merged cells after using Autofill.
	     *
	     * @private
	     * @param {Array} changes The changes array.
	     * @param {String} source Determines the source of the change.
	     */
	
	  }, {
	    key: 'onAfterChange',
	    value: function onAfterChange(changes, source) {
	      if (source !== 'Autofill.fill') {
	        return;
	      }
	
	      this.autofillCalculations.recreateAfterDataPopulation(changes);
	    }
	
	    /**
	     * `beforeDrawAreaBorders` hook callback.
	     *
	     * @private
	     * @param {Array} corners Coordinates of the area corners.
	     * @param {String} className Class name for the area.
	     */
	
	  }, {
	    key: 'onBeforeDrawAreaBorders',
	    value: function onBeforeDrawAreaBorders(corners, className) {
	      if (className && className === 'area') {
	        var selectedRange = this.hot.getSelectedRangeLast();
	        var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);
	
	        (0, _array.arrayEach)(mergedCellsWithinRange, function (mergedCell) {
	          if (selectedRange.getBottomRightCorner().row === mergedCell.getLastRow() && selectedRange.getBottomRightCorner().col === mergedCell.getLastColumn()) {
	            corners[2] = mergedCell.row;
	            corners[3] = mergedCell.col;
	          }
	        });
	      }
	    }
	
	    /**
	     * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of the table
	     * with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.
	     *
	     * @private
	     * @param {CellCoords} coords Coordinates of the to-be-selected cell.
	     * @param {Number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value = down)
	     * @param {Number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value = down)
	     */
	
	  }, {
	    key: 'onAfterModifyTransformStart',
	    value: function onAfterModifyTransformStart(coords, rowTransformDir, colTransformDir) {
	      if (!this.enabled) {
	        return;
	      }
	
	      var mergedCellAtCoords = this.mergedCellsCollection.get(coords.row, coords.col);
	
	      if (!mergedCellAtCoords) {
	        return;
	      }
	
	      var goingDown = rowTransformDir > 0;
	      var goingUp = rowTransformDir < 0;
	      var goingLeft = colTransformDir < 0;
	      var goingRight = colTransformDir > 0;
	      var mergedCellOnBottomEdge = mergedCellAtCoords.row + mergedCellAtCoords.rowspan - 1 === this.hot.countRows() - 1;
	      var mergedCellOnTopEdge = mergedCellAtCoords.row === 0;
	      var mergedCellOnRightEdge = mergedCellAtCoords.col + mergedCellAtCoords.colspan - 1 === this.hot.countCols() - 1;
	      var mergedCellOnLeftEdge = mergedCellAtCoords.col === 0;
	
	      if (goingDown && mergedCellOnBottomEdge || goingUp && mergedCellOnTopEdge || goingRight && mergedCellOnRightEdge || goingLeft && mergedCellOnLeftEdge) {
	        coords.row = mergedCellAtCoords.row;
	        coords.col = mergedCellAtCoords.col;
	      }
	    }
	
	    /**
	     * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.
	     *
	     * @private
	     * @param {Number} currentRow Row index of the currently processed cell.
	     * @param {Number} currentColumn Column index of the currently cell.
	     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
	     * @param {Number|undefined} layerLevel Number indicating which layer of selection is currently processed.
	     * @returns {String|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
	     */
	
	  }, {
	    key: 'onAfterDrawSelection',
	    value: function onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {
	      return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);
	    }
	
	    /**
	     * `beforeRemoveCellClassNames` hook callback. Used to remove additional class name from all cells in the table.
	     *
	     * @private
	     * @returns {String[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
	     */
	
	  }, {
	    key: 'onBeforeRemoveCellClassNames',
	    value: function onBeforeRemoveCellClassNames() {
	      return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
	    }
	  }]);
	
	  return MergeCells;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('mergeCells', MergeCells);
	
	exports.default = MergeCells;
	
	/***/ }),
	/* 351 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _templateObject = _taggedTemplateLiteral(['The merged cell declared at [', ', ', '], overlaps with the other declared merged \n    cell. The overlapping merged cell was not added to the table, please fix your setup.'], ['The merged cell declared at [', ', ', '], overlaps with the other declared merged \n    cell. The overlapping merged cell was not added to the table, please fix your setup.']);
	
	var _cellCoords = __webpack_require__(97);
	
	var _cellCoords2 = _interopRequireDefault(_cellCoords);
	
	var _index = __webpack_require__(4);
	
	var _number = __webpack_require__(6);
	
	var _console = __webpack_require__(58);
	
	var _array = __webpack_require__(2);
	
	var _utils = __webpack_require__(206);
	
	var _templateLiteralTag = __webpack_require__(42);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Defines a container object for the merged cells.
	 *
	 * @class MergedCellsCollection
	 * @plugin MergeCells
	 */
	var MergedCellsCollection = function () {
	  function MergedCellsCollection(plugin) {
	    _classCallCheck(this, MergedCellsCollection);
	
	    /**
	     * Reference to the Merge Cells plugin.
	     *
	     * @type {MergeCells}
	     */
	    this.plugin = plugin;
	    /**
	     * Array of merged cells.
	     *
	     * @type {Array}
	     */
	    this.mergedCells = [];
	    /**
	     * The Handsontable instance.
	     *
	     * @type {Handsontable}
	     */
	    this.hot = plugin.hot;
	  }
	
	  /**
	   * Get a warning message for when the declared merged cell data overlaps already existing merged cells.
	   *
	   * @param {Object} newMergedCell Object containg information about the merged cells that was about to be added.
	   * @return {String}
	   */
	
	
	  _createClass(MergedCellsCollection, [{
	    key: 'get',
	
	
	    /**
	     * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
	     * of a merged cell, or any coordinates from the body of the merged cell.
	     *
	     * @param {Number} row Row index.
	     * @param {Number} column Column index.
	     * @returns {MergedCellCoords|Boolean} Returns a wanted merged cell on success and `false` on failure.
	     */
	    value: function get(row, column) {
	      var mergedCells = this.mergedCells;
	      var result = false;
	
	      (0, _array.arrayEach)(mergedCells, function (mergedCell) {
	        if (mergedCell.row <= row && mergedCell.row + mergedCell.rowspan - 1 >= row && mergedCell.col <= column && mergedCell.col + mergedCell.colspan - 1 >= column) {
	          result = mergedCell;
	          return false;
	        }
	
	        return true;
	      });
	
	      return result;
	    }
	
	    /**
	     * Get a merged cell containing the provided range.
	     *
	     * @param {CellRange|Object} range The range to search merged cells for.
	     * @return {MergedCellCoords|Boolean}
	     */
	
	  }, {
	    key: 'getByRange',
	    value: function getByRange(range) {
	      var mergedCells = this.mergedCells;
	      var result = false;
	
	      (0, _array.arrayEach)(mergedCells, function (mergedCell) {
	        if (mergedCell.row <= range.from.row && mergedCell.row + mergedCell.rowspan - 1 >= range.to.row && mergedCell.col <= range.from.col && mergedCell.col + mergedCell.colspan - 1 >= range.to.col) {
	          result = mergedCell;
	          return result;
	        }
	
	        return true;
	      });
	
	      return result;
	    }
	
	    /**
	     * Get a merged cell contained in the provided range.
	     *
	     * @param {CellRange|Object} range The range to search merged cells in.
	     * @param [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
	     * @return {Array|Boolean} Array of found merged cells of `false` if none were found.
	     */
	
	  }, {
	    key: 'getWithinRange',
	    value: function getWithinRange(range) {
	      var countPartials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      var mergedCells = this.mergedCells;
	      var foundMergedCells = [];
	      var testedRange = range;
	
	      if (!testedRange.includesRange) {
	        var from = new _index.CellCoords(testedRange.from.row, testedRange.from.col);
	        var to = new _index.CellCoords(testedRange.to.row, testedRange.to.col);
	        testedRange = new _index.CellRange(from, from, to);
	      }
	
	      (0, _array.arrayEach)(mergedCells, function (mergedCell) {
	        var mergedCellTopLeft = new _index.CellCoords(mergedCell.row, mergedCell.col);
	        var mergedCellBottomRight = new _index.CellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1);
	        var mergedCellRange = new _index.CellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
	
	        if (countPartials) {
	          if (testedRange.overlaps(mergedCellRange)) {
	            foundMergedCells.push(mergedCell);
	          }
	        } else if (testedRange.includesRange(mergedCellRange)) {
	          foundMergedCells.push(mergedCell);
	        }
	      });
	
	      return foundMergedCells.length ? foundMergedCells : false;
	    }
	
	    /**
	     * Add a merged cell to the container.
	     *
	     * @param {Object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
	     * @return {MergedCellCoords|Boolean} Returns the new merged cell on success and `false` on failure.
	     */
	
	  }, {
	    key: 'add',
	    value: function add(mergedCellInfo) {
	      var mergedCells = this.mergedCells;
	      var row = mergedCellInfo.row;
	      var column = mergedCellInfo.col;
	      var rowspan = mergedCellInfo.rowspan;
	      var colspan = mergedCellInfo.colspan;
	      var newMergedCell = new _cellCoords2.default(row, column, rowspan, colspan);
	      var alreadyExists = this.get(row, column);
	      var isOverlapping = this.isOverlapping(newMergedCell);
	
	      if (!alreadyExists && !isOverlapping) {
	        if (this.hot) {
	          newMergedCell.normalize(this.hot);
	        }
	
	        mergedCells.push(newMergedCell);
	
	        return newMergedCell;
	      }
	
	      (0, _console.warn)(MergedCellsCollection.IS_OVERLAPPING_WARNING(newMergedCell));
	
	      return false;
	    }
	
	    /**
	     * Remove a merged cell from the container. You can provide either the "starting coordinates"
	     * of a merged cell, or any coordinates from the body of the merged cell.
	     *
	     * @param {Number} row Row index.
	     * @param {Number} column Column index.
	     * @return {MergedCellCoords|Boolean} Returns the removed merged cell on success and `false` on failure.
	     */
	
	  }, {
	    key: 'remove',
	    value: function remove(row, column) {
	      var mergedCells = this.mergedCells;
	      var wantedCollection = this.get(row, column);
	      var wantedCollectionIndex = wantedCollection ? this.mergedCells.indexOf(wantedCollection) : null;
	
	      if (wantedCollection && wantedCollectionIndex !== false) {
	        mergedCells.splice(wantedCollectionIndex, 1);
	        return wantedCollection;
	      }
	
	      return false;
	    }
	
	    /**
	     * Clear all the merged cells.
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      var _this = this;
	
	      var mergedCells = this.mergedCells;
	      var mergedCellParentsToClear = [];
	      var hiddenCollectionElements = [];
	
	      (0, _array.arrayEach)(mergedCells, function (mergedCell) {
	        var TD = _this.hot.getCell(mergedCell.row, mergedCell.col);
	
	        if (TD) {
	          mergedCellParentsToClear.push([TD, _this.get(mergedCell.row, mergedCell.col), mergedCell.row, mergedCell.col]);
	        }
	      });
	
	      this.mergedCells.length = 0;
	
	      (0, _array.arrayEach)(mergedCellParentsToClear, function (mergedCell, i) {
	        (0, _number.rangeEach)(0, mergedCell.rowspan - 1, function (j) {
	          (0, _number.rangeEach)(0, mergedCell.colspan - 1, function (k) {
	            if (k !== 0 || j !== 0) {
	              var TD = _this.hot.getCell(mergedCell.row + j, mergedCell.col + k);
	
	              if (TD) {
	                hiddenCollectionElements.push([TD, null, null, null]);
	              }
	            }
	          });
	        });
	
	        mergedCellParentsToClear[i][1] = null;
	      });
	
	      (0, _array.arrayEach)(mergedCellParentsToClear, function (mergedCellParents) {
	        _utils.applySpanProperties.apply(undefined, _toConsumableArray(mergedCellParents));
	      });
	
	      (0, _array.arrayEach)(hiddenCollectionElements, function (hiddenCollectionElement) {
	        _utils.applySpanProperties.apply(undefined, _toConsumableArray(hiddenCollectionElement));
	      });
	    }
	
	    /**
	     * Check if the provided merged cell overlaps with the others in the container.
	     *
	     * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
	     * @return {Boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
	     */
	
	  }, {
	    key: 'isOverlapping',
	    value: function isOverlapping(mergedCell) {
	      var mergedCellRange = new _index.CellRange(null, new _index.CellCoords(mergedCell.row, mergedCell.col), new _index.CellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1));
	      var result = false;
	
	      (0, _array.arrayEach)(this.mergedCells, function (col) {
	        var currentRange = new _index.CellRange(null, new _index.CellCoords(col.row, col.col), new _index.CellCoords(col.row + col.rowspan - 1, col.col + col.colspan - 1));
	
	        if (currentRange.overlaps(mergedCellRange)) {
	          result = true;
	          return false;
	        }
	
	        return true;
	      });
	
	      return result;
	    }
	
	    /**
	     * Check whether the provided row/col coordinates direct to a merged parent.
	     *
	     * @param {Number} row Row index.
	     * @param {Number} column Column index.
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'isMergedParent',
	    value: function isMergedParent(row, column) {
	      var mergedCells = this.mergedCells;
	      var result = false;
	
	      (0, _array.arrayEach)(mergedCells, function (mergedCell) {
	        if (mergedCell.row === row && mergedCell.col === column) {
	          result = true;
	          return false;
	        }
	
	        return true;
	      });
	
	      return result;
	    }
	
	    /**
	     * Shift the merged cell in the direction and by an offset defined in the arguments.
	     *
	     * @param {String} direction `right`, `left`, `up` or `down`.
	     * @param {Number} index Index where the change, which caused the shifting took place.
	     * @param {Number} count Number of rows/columns added/removed in the preceding action.
	     */
	
	  }, {
	    key: 'shiftCollections',
	    value: function shiftCollections(direction, index, count) {
	      var _this2 = this;
	
	      var shiftVector = [0, 0];
	
	      switch (direction) {
	        case 'right':
	          shiftVector[0] += count;
	          break;
	
	        case 'left':
	          shiftVector[0] -= count;
	          break;
	
	        case 'down':
	          shiftVector[1] += count;
	          break;
	
	        case 'up':
	          shiftVector[1] -= count;
	          break;
	
	        default:
	      }
	
	      (0, _array.arrayEach)(this.mergedCells, function (currentMerge) {
	        currentMerge.shift(shiftVector, index);
	      });
	
	      (0, _number.rangeEachReverse)(this.mergedCells.length - 1, 0, function (i) {
	        var currentMerge = _this2.mergedCells[i];
	
	        if (currentMerge && currentMerge.removed) {
	          _this2.mergedCells.splice(_this2.mergedCells.indexOf(currentMerge), 1);
	        }
	      });
	    }
	  }], [{
	    key: 'IS_OVERLAPPING_WARNING',
	    value: function IS_OVERLAPPING_WARNING(newMergedCell) {
	      return (0, _templateLiteralTag.toSingleLine)(_templateObject, newMergedCell.row, newMergedCell.col);
	    }
	  }]);
	
	  return MergedCellsCollection;
	}();
	
	exports.default = MergedCellsCollection;
	
	/***/ }),
	/* 352 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _object = __webpack_require__(1);
	
	var _src = __webpack_require__(4);
	
	var _array = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Class responsible for all of the Autofill-related operations on merged cells.
	 *
	 * @class AutofillCalculations
	 * @plugin MergeCells
	 * @util
	 */
	var AutofillCalculations = function () {
	  function AutofillCalculations(plugin) {
	    _classCallCheck(this, AutofillCalculations);
	
	    /**
	     * Reference to the Merge Cells plugin.
	     *
	     * @type {MergeCells}
	     */
	    this.plugin = plugin;
	    /**
	     * Reference to the MergedCellsCollection class instance.
	     *
	     * @type {MergedCellsCollection}
	     */
	    this.mergedCellsCollection = this.plugin.mergedCellsCollection;
	    /**
	     * Cache of the currently processed autofill data.
	     *
	     * @private
	     * @type {Object}
	     */
	    this.currentFillData = null;
	  }
	
	  /**
	   * Correct the provided selection area, so it's not selecting only a part of a merged cell.
	   *
	   * @param {Array} selectionArea
	   */
	
	
	  _createClass(AutofillCalculations, [{
	    key: 'correctSelectionAreaSize',
	    value: function correctSelectionAreaSize(selectionArea) {
	      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {
	        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);
	
	        if (mergedCell) {
	          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;
	          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;
	        }
	      }
	    }
	
	    /**
	     * Get the direction of the autofill process.
	     *
	     * @param {Array} selectionArea The selection area.
	     * @param {Array} finalArea The final area (base + drag).
	     * @return {String} `up`, `down`, `left` or `right`.
	     */
	
	  }, {
	    key: 'getDirection',
	    value: function getDirection(selectionArea, finalArea) {
	      var direction = null;
	
	      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {
	        direction = 'down';
	      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {
	        direction = 'up';
	      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {
	        direction = 'right';
	      } else {
	        direction = 'left';
	      }
	
	      return direction;
	    }
	
	    /**
	     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
	     *
	     * @param {Array} baseArea The base selected area.
	     * @param {Array} dragArea The drag area.
	     * @param {String} dragDirection The autofill drag direction.
	     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
	     * @return {Array} The new drag area
	     */
	
	  }, {
	    key: 'snapDragArea',
	    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {
	      var newDragArea = dragArea.slice(0);
	      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);
	
	      var _baseArea = _slicedToArray(baseArea, 4),
	          baseAreaStartRow = _baseArea[0],
	          baseAreaStartColumn = _baseArea[1],
	          baseAreaEndRow = _baseArea[2],
	          baseAreaEndColumn = _baseArea[3];
	
	      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;
	      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
	      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;
	      var partials = fillSize - fulls;
	      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);
	
	      if (farthestCollection) {
	        if (dragDirection === 'down') {
	          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;
	          var newLimit = newDragArea[2] + fill;
	
	          if (newLimit >= this.plugin.hot.countRows()) {
	            newDragArea[2] -= partials;
	          } else {
	            newDragArea[2] += partials ? fill : 0;
	          }
	        } else if (dragDirection === 'right') {
	          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;
	          var _newLimit = newDragArea[3] + _fill;
	
	          if (_newLimit >= this.plugin.hot.countCols()) {
	            newDragArea[3] -= partials;
	          } else {
	            newDragArea[3] += partials ? _fill : 0;
	          }
	        } else if (dragDirection === 'up') {
	          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;
	          var _newLimit2 = newDragArea[0] + _fill2;
	
	          if (_newLimit2 < 0) {
	            newDragArea[0] += partials;
	          } else {
	            newDragArea[0] -= partials ? _fill2 : 0;
	          }
	        } else if (dragDirection === 'left') {
	          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;
	          var _newLimit3 = newDragArea[1] + _fill3;
	
	          if (_newLimit3 < 0) {
	            newDragArea[1] += partials;
	          } else {
	            newDragArea[1] -= partials ? _fill3 : 0;
	          }
	        }
	      }
	
	      this.updateCurrentFillCache({
	        baseArea: baseArea,
	        dragDirection: dragDirection,
	        foundMergedCells: foundMergedCells,
	        fillSize: fillSize,
	        dragArea: newDragArea,
	        cycleLength: fullCycle
	      });
	
	      return newDragArea;
	    }
	
	    /**
	     * Update the current fill cache with the provided object.
	     *
	     * @private
	     * @param {Object} updateObject
	     */
	
	  }, {
	    key: 'updateCurrentFillCache',
	    value: function updateCurrentFillCache(updateObject) {
	      if (!this.currentFillData) {
	        this.currentFillData = {};
	      }
	
	      (0, _object.extend)(this.currentFillData, updateObject);
	    }
	
	    /**
	     * Get the "length" of the drag area.
	     *
	     * @private
	     * @param {Array} baseArea The base selection area.
	     * @param {Array} dragArea The drag area (containing the base area).
	     * @param {String} direction The drag direction.
	     * @return {Number|null} The "length" (height or width, depending on the direction) of the drag.
	     */
	
	  }, {
	    key: 'getAutofillSize',
	    value: function getAutofillSize(baseArea, dragArea, direction) {
	      var _baseArea2 = _slicedToArray(baseArea, 4),
	          baseAreaStartRow = _baseArea2[0],
	          baseAreaStartColumn = _baseArea2[1],
	          baseAreaEndRow = _baseArea2[2],
	          baseAreaEndColumn = _baseArea2[3];
	
	      var _dragArea = _slicedToArray(dragArea, 4),
	          dragAreaStartRow = _dragArea[0],
	          dragAreaStartColumn = _dragArea[1],
	          dragAreaEndRow = _dragArea[2],
	          dragAreaEndColumn = _dragArea[3];
	
	      switch (direction) {
	        case 'up':
	          return baseAreaStartRow - dragAreaStartRow;
	        case 'down':
	          return dragAreaEndRow - baseAreaEndRow;
	        case 'left':
	          return baseAreaStartColumn - dragAreaStartColumn;
	        case 'right':
	          return dragAreaEndColumn - baseAreaEndColumn;
	        default:
	          return null;
	      }
	    }
	
	    /**
	     * Trim the default drag area (containing the selection area) to the drag-only area.
	     *
	     * @private
	     * @param {Array} baseArea The base selection area.
	     * @param {Array} dragArea The base selection area extended by the drag area.
	     * @param {String} direction Drag direction.
	     * @return {Array|null} Array representing the drag area coordinates.
	     */
	
	  }, {
	    key: 'getDragArea',
	    value: function getDragArea(baseArea, dragArea, direction) {
	      var _baseArea3 = _slicedToArray(baseArea, 4),
	          baseAreaStartRow = _baseArea3[0],
	          baseAreaStartColumn = _baseArea3[1],
	          baseAreaEndRow = _baseArea3[2],
	          baseAreaEndColumn = _baseArea3[3];
	
	      var _dragArea2 = _slicedToArray(dragArea, 4),
	          dragAreaStartRow = _dragArea2[0],
	          dragAreaStartColumn = _dragArea2[1],
	          dragAreaEndRow = _dragArea2[2],
	          dragAreaEndColumn = _dragArea2[3];
	
	      switch (direction) {
	        case 'up':
	          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];
	        case 'down':
	          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];
	        case 'left':
	          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];
	        case 'right':
	          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];
	        default:
	          return null;
	      }
	    }
	
	    /**
	     * Get the to-be-farthest merged cell in the newly filled area.
	     *
	     * @private
	     * @param {Array} baseArea The base selection area.
	     * @param {Array} dragArea The drag area (containing the base area).
	     * @param {String} direction The drag direction.
	     * @param {Array} mergedCellArray Array of the merged cells found in the base area.
	     * @return {MergedCellCoords|null}
	     */
	
	  }, {
	    key: 'getFarthestCollection',
	    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {
	      var _baseArea4 = _slicedToArray(baseArea, 4),
	          baseAreaStartRow = _baseArea4[0],
	          baseAreaStartColumn = _baseArea4[1],
	          baseAreaEndRow = _baseArea4[2],
	          baseAreaEndColumn = _baseArea4[3];
	
	      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;
	      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;
	      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;
	      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);
	      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
	      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;
	      var partials = fillSize - fulls;
	      var inclusionFunctionName = null;
	      var farthestCollection = null;
	      var endOfDragRecreationIndex = null;
	
	      switch (direction) {
	        case 'up':
	          inclusionFunctionName = 'includesVertically';
	          endOfDragRecreationIndex = baseEnd - partials + 1;
	          break;
	
	        case 'left':
	          inclusionFunctionName = 'includesHorizontally';
	          endOfDragRecreationIndex = baseEnd - partials + 1;
	          break;
	
	        case 'down':
	          inclusionFunctionName = 'includesVertically';
	          endOfDragRecreationIndex = baseStart + partials - 1;
	          break;
	
	        case 'right':
	          inclusionFunctionName = 'includesHorizontally';
	          endOfDragRecreationIndex = baseStart + partials - 1;
	          break;
	
	        default:
	      }
	
	      (0, _array.arrayEach)(mergedCellArray, function (currentCollection) {
	        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {
	          farthestCollection = currentCollection;
	        }
	      });
	
	      return farthestCollection;
	    }
	
	    /**
	     * Recreate the merged cells after the autofill process.
	     *
	     * @param {Array} changes Changes made.
	     */
	
	  }, {
	    key: 'recreateAfterDataPopulation',
	    value: function recreateAfterDataPopulation(changes) {
	      if (!this.currentFillData) {
	        return;
	      }
	
	      var fillRange = this.getRangeFromChanges(changes);
	      var foundMergedCells = this.currentFillData.foundMergedCells;
	      var dragDirection = this.currentFillData.dragDirection;
	      var inBounds = function inBounds(current, offset) {
	        switch (dragDirection) {
	          case 'up':
	            return current.row - offset >= fillRange.from.row;
	          case 'down':
	            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;
	          case 'left':
	            return current.col - offset >= fillRange.from.column;
	          case 'right':
	            return current.col + current.colspan - 1 + offset <= fillRange.to.column;
	          default:
	            return null;
	        }
	      };
	      var fillOffset = 0;
	      var current = null;
	      var multiplier = 1;
	
	      do {
	        for (var j = 0; j < foundMergedCells.length; j += 1) {
	          current = foundMergedCells[j];
	
	          fillOffset = multiplier * this.currentFillData.cycleLength;
	
	          if (inBounds(current, fillOffset)) {
	            switch (dragDirection) {
	              case 'up':
	                this.plugin.mergedCellsCollection.add({
	                  row: current.row - fillOffset,
	                  rowspan: current.rowspan,
	                  col: current.col,
	                  colspan: current.colspan
	                });
	                break;
	
	              case 'down':
	                this.plugin.mergedCellsCollection.add({
	                  row: current.row + fillOffset,
	                  rowspan: current.rowspan,
	                  col: current.col,
	                  colspan: current.colspan
	                });
	                break;
	
	              case 'left':
	                this.plugin.mergedCellsCollection.add({
	                  row: current.row,
	                  rowspan: current.rowspan,
	                  col: current.col - fillOffset,
	                  colspan: current.colspan
	                });
	                break;
	
	              case 'right':
	                this.plugin.mergedCellsCollection.add({
	                  row: current.row,
	                  rowspan: current.rowspan,
	                  col: current.col + fillOffset,
	                  colspan: current.colspan
	                });
	                break;
	
	              default:
	            }
	          }
	
	          if (j === foundMergedCells.length - 1) {
	            multiplier += 1;
	          }
	        }
	      } while (inBounds(current, fillOffset));
	
	      this.currentFillData = null;
	      this.plugin.hot.render();
	    }
	
	    /**
	     * Get the drag range from the changes made.
	     *
	     * @private
	     * @param {Array} changes The changes made.
	     * @returns {Object} Object with `from` and `to` properties, both containing `row` and `column` keys.
	     */
	
	  }, {
	    key: 'getRangeFromChanges',
	    value: function getRangeFromChanges(changes) {
	      var rows = { min: null, max: null };
	      var columns = { min: null, max: null };
	
	      (0, _array.arrayEach)(changes, function (change) {
	        if (rows.min === null || change[0] < rows.min) {
	          rows.min = change[0];
	        }
	
	        if (rows.max === null || change[0] > rows.max) {
	          rows.max = change[0];
	        }
	
	        if (columns.min === null || change[1] < columns.min) {
	          columns.min = change[1];
	        }
	
	        if (columns.max === null || change[1] > columns.max) {
	          columns.max = change[1];
	        }
	      });
	
	      return {
	        from: {
	          row: rows.min,
	          column: columns.min
	        },
	        to: {
	          row: rows.max,
	          column: columns.max
	        }
	      };
	    }
	
	    /**
	     * Check if the drag area contains any merged cells.
	     *
	     * @param {Array} baseArea The base selection area.
	     * @param {Array} fullArea The base area extended by the drag area.
	     * @param {String} direction Drag direction.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'dragAreaOverlapsCollections',
	    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {
	      var dragArea = this.getDragArea(baseArea, fullArea, direction);
	
	      var _dragArea3 = _slicedToArray(dragArea, 4),
	          dragAreaStartRow = _dragArea3[0],
	          dragAreaStartColumn = _dragArea3[1],
	          dragAreaEndRow = _dragArea3[2],
	          dragAreaEndColumn = _dragArea3[3];
	
	      var topLeft = new _src.CellCoords(dragAreaStartRow, dragAreaStartColumn);
	      var bottomRight = new _src.CellCoords(dragAreaEndRow, dragAreaEndColumn);
	      var dragRange = new _src.CellRange(topLeft, topLeft, bottomRight);
	
	      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);
	    }
	  }]);
	
	  return AutofillCalculations;
	}();
	
	exports.default = AutofillCalculations;
	
	/***/ }),
	/* 353 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _src = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Class responsible for all of the Selection-related operations on merged cells.
	 *
	 * @class SelectionCalculations
	 * @plugin MergeCells
	 * @util
	 */
	var SelectionCalculations = function () {
	  function SelectionCalculations(plugin) {
	    _classCallCheck(this, SelectionCalculations);
	
	    /**
	     * Reference to the Merge Cells plugin.
	     *
	     * @type {MergeCells}
	     */
	    this.plugin = plugin;
	    /**
	     * Class name used for fully selected merged cells.
	     *
	     * @type {String}
	     */
	    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';
	  }
	
	  /**
	   * "Snap" the delta value according to defined merged cells. (In other words, compensate the rowspan -
	   * e.g. going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.)
	   *
	   * @param {Object} delta The delta object containing `row` and `col` properties.
	   * @param {CellRange} selectionRange The selection range.
	   * @param {Object} mergedCell A merged cell object.
	   */
	
	
	  _createClass(SelectionCalculations, [{
	    key: 'snapDelta',
	    value: function snapDelta(delta, selectionRange, mergedCell) {
	      var cellCoords = selectionRange.to;
	      var newRow = cellCoords.row + delta.row;
	      var newColumn = cellCoords.col + delta.col;
	
	      if (delta.row) {
	        this.jumpOverMergedCell(delta, mergedCell, newRow);
	      } else if (delta.col) {
	        this.jumpOverMergedCell(delta, mergedCell, newColumn);
	      }
	    }
	
	    /**
	     * "Jump" over the merged cell (compensate for the indexes within the merged cell to get past it)
	     *
	     * @private
	     * @param {Object} delta The delta object.
	     * @param {MergedCellCoords} mergedCell The merge cell object.
	     * @param {Number} newIndex New row/column index, created with the delta.
	     */
	
	  }, {
	    key: 'jumpOverMergedCell',
	    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {
	      var flatDelta = delta.row || delta.col;
	      var includesIndex = null;
	      var firstIndex = null;
	      var lastIndex = null;
	
	      if (delta.row) {
	        includesIndex = mergedCell.includesVertically(newIndex);
	        firstIndex = mergedCell.row;
	        lastIndex = mergedCell.getLastRow();
	      } else if (delta.col) {
	        includesIndex = mergedCell.includesHorizontally(newIndex);
	        firstIndex = mergedCell.col;
	        lastIndex = mergedCell.getLastColumn();
	      }
	
	      if (flatDelta === 0) {
	        return;
	      } else if (flatDelta > 0) {
	        if (includesIndex && newIndex !== firstIndex) {
	          flatDelta += lastIndex - newIndex + 1;
	        }
	      } else if (includesIndex && newIndex !== lastIndex) {
	        flatDelta -= newIndex - firstIndex + 1;
	      }
	
	      if (delta.row) {
	        delta.row = flatDelta;
	      } else if (delta.col) {
	        delta.col = flatDelta;
	      }
	    }
	
	    /**
	     * Get a selection range with `to` property incremented by the provided delta.
	     *
	     * @param {CellRange} oldSelectionRange The base selection range.
	     * @param {Object} delta The delta object with `row` and `col` properties.
	     * @returns {CellRange} A new `CellRange` object.
	     */
	
	  }, {
	    key: 'getUpdatedSelectionRange',
	    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {
	      return new _src.CellRange(oldSelectionRange.highlight, oldSelectionRange.from, new _src.CellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));
	    }
	
	    /**
	     * Generate an additional class name for the entirely-selected merged cells.
	     *
	     * @param {Number} currentRow Row index of the currently processed cell.
	     * @param {Number} currentColumn Column index of the currently cell.
	     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
	     * @param {Number|undefined} layerLevel Number indicating which layer of selection is currently processed.
	     * @returns {String|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
	     */
	
	  }, {
	    key: 'getSelectedMergedCellClassName',
	    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {
	      var _cornersOfSelection = _slicedToArray(cornersOfSelection, 4),
	          startRow = _cornersOfSelection[0],
	          startColumn = _cornersOfSelection[1],
	          endRow = _cornersOfSelection[2],
	          endColumn = _cornersOfSelection[3];
	
	      if (layerLevel === void 0) {
	        return;
	      }
	
	      if (currentRow >= startRow && currentRow <= endRow && currentColumn >= startColumn && currentColumn <= endColumn) {
	
	        var isMergedCellParent = this.plugin.mergedCellsCollection.isMergedParent(currentRow, currentColumn);
	
	        if (!isMergedCellParent) {
	          return;
	        }
	
	        var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);
	
	        if (!mergedCell) {
	          return;
	        }
	
	        if (mergedCell.row + mergedCell.rowspan - 1 <= endRow && mergedCell.col + mergedCell.colspan - 1 <= endColumn) {
	          return this.fullySelectedMergedCellClassName + '-' + layerLevel;
	        } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {
	          return this.fullySelectedMergedCellClassName + '-multiple';
	        }
	      }
	    }
	
	    /**
	     * Check if the provided merged cell is fully selected (by one or many layers of selection)
	     *
	     * @param {MergedCellCoords} mergedCell The merged cell to be processed.
	     * @param {CellRange[]} selectionRangesArray Array of selection ranges.
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isMergeCellFullySelected',
	    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {
	      var mergedCellIndividualCoords = [];
	
	      if (!selectionRangesArray || !mergedCell) {
	        return false;
	      }
	
	      for (var r = 0; r < mergedCell.rowspan; r += 1) {
	        for (var c = 0; c < mergedCell.colspan; c += 1) {
	          mergedCellIndividualCoords.push(new _src.CellCoords(mergedCell.row + r, mergedCell.col + c));
	        }
	      }
	
	      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {
	        var insideSelections = [];
	
	        for (var s = 0; s < selectionRangesArray.length; s += 1) {
	          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);
	        }
	
	        if (!insideSelections.includes(true)) {
	          return false;
	        }
	      }
	
	      return true;
	    }
	
	    /**
	     * Generate an array of the entirely-selected merged cells' class names.
	     *
	     * @returns {String[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
	     */
	
	  }, {
	    key: 'getSelectedMergedCellClassNameToRemove',
	    value: function getSelectedMergedCellClassNameToRemove() {
	      var classNames = [];
	
	      for (var i = 0; i <= 7; i += 1) {
	        classNames.push(this.fullySelectedMergedCellClassName + '-' + i);
	      }
	
	      classNames.push(this.fullySelectedMergedCellClassName + '-multiple');
	
	      return classNames;
	    }
	  }]);
	
	  return SelectionCalculations;
	}();
	
	exports.default = SelectionCalculations;
	
	/***/ }),
	/* 354 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	exports.default = toggleMergeItem;
	
	var _constants = __webpack_require__(7);
	
	var C = _interopRequireWildcard(_constants);
	
	var _cellCoords = __webpack_require__(97);
	
	var _cellCoords2 = _interopRequireDefault(_cellCoords);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function toggleMergeItem(plugin) {
	  return {
	    key: 'mergeCells',
	    name: function name() {
	      var sel = this.getSelectedLast();
	
	      if (sel) {
	        var info = plugin.mergedCellsCollection.get(sel[0], sel[1]);
	
	        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {
	          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNMERGE_CELLS);
	        }
	      }
	
	      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_MERGE_CELLS);
	    },
	    callback: function callback() {
	      plugin.toggleMergeOnSelection();
	    },
	    disabled: function disabled() {
	      var sel = this.getSelectedLast();
	
	      if (!sel) {
	        return true;
	      }
	
	      var isSingleCell = _cellCoords2.default.isSingleCell({
	        row: sel[0],
	        col: sel[1],
	        rowspan: sel[2] - sel[0] + 1,
	        colspan: sel[3] - sel[1] + 1
	      });
	
	      return isSingleCell || this.selection.isSelectedByCorner();
	    },
	
	    hidden: false
	  };
	}
	
	/***/ }),
	/* 355 */
	/***/ (function(module, exports) {
	
	// removed by extract-text-webpack-plugin
	
	/***/ }),
	/* 356 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _element = __webpack_require__(0);
	
	var _browser = __webpack_require__(39);
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _eventManager = __webpack_require__(5);
	
	var _eventManager2 = _interopRequireDefault(_eventManager);
	
	var _plugins = __webpack_require__(8);
	
	var _src = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @plugin MultipleSelectionHandles
	 */
	var MultipleSelectionHandles = function (_BasePlugin) {
	  _inherits(MultipleSelectionHandles, _BasePlugin);
	
	  /**
	   * @param {Object} hotInstance
	   */
	  function MultipleSelectionHandles(hotInstance) {
	    _classCallCheck(this, MultipleSelectionHandles);
	
	    /**
	     * @type {Array}
	     */
	    var _this2 = _possibleConstructorReturn(this, (MultipleSelectionHandles.__proto__ || Object.getPrototypeOf(MultipleSelectionHandles)).call(this, hotInstance));
	
	    _this2.dragged = [];
	    /**
	     * Instance of EventManager.
	     *
	     * @type {EventManager}
	     */
	    _this2.eventManager = null;
	    /**
	     * @type {null}
	     */
	    _this2.lastSetCell = null;
	    return _this2;
	  }
	
	  /**
	   * Check if the plugin is enabled in the handsontable settings.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(MultipleSelectionHandles, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return (0, _browser.isMobileBrowser)();
	    }
	
	    /**
	     * Enable plugin for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      if (this.enabled) {
	        return;
	      }
	      if (!this.eventManager) {
	        this.eventManager = new _eventManager2.default(this);
	      }
	      this.registerListeners();
	      _get(MultipleSelectionHandles.prototype.__proto__ || Object.getPrototypeOf(MultipleSelectionHandles.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Bind the touch events
	     * @private
	     */
	
	  }, {
	    key: 'registerListeners',
	    value: function registerListeners() {
	      var _this = this;
	
	      function removeFromDragged(query) {
	
	        if (_this.dragged.length === 1) {
	          // clear array
	          _this.dragged.splice(0, _this.dragged.length);
	
	          return true;
	        }
	
	        var entryPosition = _this.dragged.indexOf(query);
	
	        if (entryPosition === -1) {
	          return false;
	        } else if (entryPosition === 0) {
	          _this.dragged = _this.dragged.slice(0, 1);
	        } else if (entryPosition === 1) {
	          _this.dragged = _this.dragged.slice(-1);
	        }
	      }
	
	      this.eventManager.addEventListener(this.hot.rootElement, 'touchstart', function (event) {
	        var selectedRange = void 0;
	
	        if ((0, _element.hasClass)(event.target, 'topLeftSelectionHandle-HitArea')) {
	          selectedRange = _this.hot.getSelectedRangeLast();
	
	          _this.dragged.push('topLeft');
	
	          _this.touchStartRange = {
	            width: selectedRange.getWidth(),
	            height: selectedRange.getHeight(),
	            direction: selectedRange.getDirection()
	          };
	
	          event.preventDefault();
	          return false;
	        } else if ((0, _element.hasClass)(event.target, 'bottomRightSelectionHandle-HitArea')) {
	          selectedRange = _this.hot.getSelectedRangeLast();
	
	          _this.dragged.push('bottomRight');
	
	          _this.touchStartRange = {
	            width: selectedRange.getWidth(),
	            height: selectedRange.getHeight(),
	            direction: selectedRange.getDirection()
	          };
	
	          event.preventDefault();
	          return false;
	        }
	      });
	
	      this.eventManager.addEventListener(this.hot.rootElement, 'touchend', function (event) {
	        if ((0, _element.hasClass)(event.target, 'topLeftSelectionHandle-HitArea')) {
	          removeFromDragged.call(_this, 'topLeft');
	
	          _this.touchStartRange = void 0;
	
	          event.preventDefault();
	          return false;
	        } else if ((0, _element.hasClass)(event.target, 'bottomRightSelectionHandle-HitArea')) {
	          removeFromDragged.call(_this, 'bottomRight');
	
	          _this.touchStartRange = void 0;
	
	          event.preventDefault();
	          return false;
	        }
	      });
	
	      this.eventManager.addEventListener(this.hot.rootElement, 'touchmove', function (event) {
	        var scrollTop = (0, _element.getWindowScrollTop)();
	        var scrollLeft = (0, _element.getWindowScrollLeft)();
	        var targetCoords = void 0;
	        var selectedRange = void 0;
	        var rangeWidth = void 0;
	        var rangeHeight = void 0;
	        var rangeDirection = void 0;
	        var newRangeCoords = void 0;
	
	        if (_this.dragged.length === 0) {
	          return;
	        }
	
	        var endTarget = document.elementFromPoint(event.touches[0].screenX - scrollLeft, event.touches[0].screenY - scrollTop);
	
	        if (!endTarget || endTarget === _this.lastSetCell) {
	          return;
	        }
	
	        if (endTarget.nodeName === 'TD' || endTarget.nodeName === 'TH') {
	          targetCoords = _this.hot.getCoords(endTarget);
	
	          if (targetCoords.col === -1) {
	            targetCoords.col = 0;
	          }
	
	          selectedRange = _this.hot.getSelectedRangeLast();
	          rangeWidth = selectedRange.getWidth();
	          rangeHeight = selectedRange.getHeight();
	          rangeDirection = selectedRange.getDirection();
	
	          if (rangeWidth === 1 && rangeHeight === 1) {
	            _this.hot.selection.setRangeEnd(targetCoords);
	          }
	
	          newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);
	
	          if (newRangeCoords.start !== null) {
	            _this.hot.selection.setRangeStart(newRangeCoords.start);
	          }
	
	          _this.hot.selection.setRangeEnd(newRangeCoords.end);
	
	          _this.lastSetCell = endTarget;
	        }
	
	        event.preventDefault();
	      });
	    }
	  }, {
	    key: 'getCurrentRangeCoords',
	    value: function getCurrentRangeCoords(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
	      var topLeftCorner = selectedRange.getTopLeftCorner();
	      var bottomRightCorner = selectedRange.getBottomRightCorner();
	      var bottomLeftCorner = selectedRange.getBottomLeftCorner();
	      var topRightCorner = selectedRange.getTopRightCorner();
	
	      var newCoords = {
	        start: null,
	        end: null
	      };
	
	      switch (touchStartDirection) {
	        case 'NE-SW':
	          switch (currentDirection) {
	            case 'NE-SW':
	            case 'NW-SE':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: new _src.CellCoords(currentTouch.row, selectedRange.highlight.col),
	                  end: new _src.CellCoords(bottomLeftCorner.row, currentTouch.col)
	                };
	              } else {
	                newCoords = {
	                  start: new _src.CellCoords(selectedRange.highlight.row, currentTouch.col),
	                  end: new _src.CellCoords(currentTouch.row, topLeftCorner.col)
	                };
	              }
	              break;
	            case 'SE-NW':
	              if (draggedHandle === 'bottomRight') {
	                newCoords = {
	                  start: new _src.CellCoords(bottomRightCorner.row, currentTouch.col),
	                  end: new _src.CellCoords(currentTouch.row, topLeftCorner.col)
	                };
	              }
	              break;
	            default:
	              break;
	          }
	          break;
	        case 'NW-SE':
	          switch (currentDirection) {
	            case 'NE-SW':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: currentTouch,
	                  end: bottomLeftCorner
	                };
	              } else {
	                newCoords.end = currentTouch;
	              }
	              break;
	            case 'NW-SE':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: currentTouch,
	                  end: bottomRightCorner
	                };
	              } else {
	                newCoords.end = currentTouch;
	              }
	              break;
	            case 'SE-NW':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: currentTouch,
	                  end: topLeftCorner
	                };
	              } else {
	                newCoords.end = currentTouch;
	              }
	              break;
	            case 'SW-NE':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: currentTouch,
	                  end: topRightCorner
	                };
	              } else {
	                newCoords.end = currentTouch;
	              }
	              break;
	            default:
	              break;
	          }
	          break;
	        case 'SW-NE':
	          switch (currentDirection) {
	            case 'NW-SE':
	              if (draggedHandle === 'bottomRight') {
	                newCoords = {
	                  start: new _src.CellCoords(currentTouch.row, topLeftCorner.col),
	                  end: new _src.CellCoords(bottomLeftCorner.row, currentTouch.col)
	                };
	              } else {
	                newCoords = {
	                  start: new _src.CellCoords(topLeftCorner.row, currentTouch.col),
	                  end: new _src.CellCoords(currentTouch.row, bottomRightCorner.col)
	                };
	              }
	              break;
	            // case 'NE-SW':
	            //
	            //  break;
	            case 'SW-NE':
	              if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: new _src.CellCoords(selectedRange.highlight.row, currentTouch.col),
	                  end: new _src.CellCoords(currentTouch.row, bottomRightCorner.col)
	                };
	              } else {
	                newCoords = {
	                  start: new _src.CellCoords(currentTouch.row, topLeftCorner.col),
	                  end: new _src.CellCoords(topLeftCorner.row, currentTouch.col)
	                };
	              }
	              break;
	            case 'SE-NW':
	              if (draggedHandle === 'bottomRight') {
	                newCoords = {
	                  start: new _src.CellCoords(currentTouch.row, topRightCorner.col),
	                  end: new _src.CellCoords(topLeftCorner.row, currentTouch.col)
	                };
	              } else if (draggedHandle === 'topLeft') {
	                newCoords = {
	                  start: bottomLeftCorner,
	                  end: currentTouch
	                };
	              }
	              break;
	            default:
	              break;
	          }
	          break;
	        case 'SE-NW':
	          switch (currentDirection) {
	            case 'NW-SE':
	            case 'NE-SW':
	            case 'SW-NE':
	              if (draggedHandle === 'topLeft') {
	                newCoords.end = currentTouch;
	              }
	              break;
	            case 'SE-NW':
	              if (draggedHandle === 'topLeft') {
	                newCoords.end = currentTouch;
	              } else {
	                newCoords = {
	                  start: currentTouch,
	                  end: topLeftCorner
	                };
	              }
	              break;
	            default:
	              break;
	          }
	          break;
	        default:
	          break;
	      }
	
	      return newCoords;
	    }
	
	    /**
	     * Check if user is currently dragging the handle.
	     *
	     * @returns {boolean} Dragging state
	     */
	
	  }, {
	    key: 'isDragged',
	    value: function isDragged() {
	      return this.dragged.length > 0;
	    }
	  }]);
	
	  return MultipleSelectionHandles;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('multipleSelectionHandles', MultipleSelectionHandles);
	
	exports.default = MultipleSelectionHandles;
	
	/***/ }),
	/* 357 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _dataObserver = __webpack_require__(358);
	
	var _dataObserver2 = _interopRequireDefault(_dataObserver);
	
	var _array = __webpack_require__(2);
	
	var _plugins = __webpack_require__(8);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Handsontable.hooks.register('afterChangesObserved');
	
	/**
	 * @plugin ObserveChanges
	 *
	 * @description
	 * This plugin allows to observe data source changes. By default, the plugin is declared as `undefined`, which makes it
	 * disabled. Enabling this plugin switches the table into one-way data binding where changes are applied into the data
	 * source (outside from the table) will be automatically reflected in the table.
	 *
	 * ```js
	 * // as a boolean
	 * observeChanges: true,
	 * ```
	 *
	 * To configure this plugin see {@link Options#observeChanges}.
	 */
	var ObserveChanges = function (_BasePlugin) {
	  _inherits(ObserveChanges, _BasePlugin);
	
	  function ObserveChanges(hotInstance) {
	    _classCallCheck(this, ObserveChanges);
	
	    /**
	     * Instance of {@link DataObserver}.
	     *
	     * @private
	     * @type {DataObserver}
	     */
	    var _this = _possibleConstructorReturn(this, (ObserveChanges.__proto__ || Object.getPrototypeOf(ObserveChanges)).call(this, hotInstance));
	
	    _this.observer = null;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link ObserveChanges#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(ObserveChanges, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().observeChanges;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	      if (!this.observer) {
	        this.observer = new _dataObserver2.default(this.hot.getSourceData());
	        this._exposePublicApi();
	      }
	
	      this.observer.addLocalHook('change', function (patches) {
	        return _this2.onDataChange(patches);
	      });
	      this.addHook('afterCreateRow', function () {
	        return _this2.onAfterTableAlter();
	      });
	      this.addHook('afterRemoveRow', function () {
	        return _this2.onAfterTableAlter();
	      });
	      this.addHook('afterCreateCol', function () {
	        return _this2.onAfterTableAlter();
	      });
	      this.addHook('afterRemoveCol', function () {
	        return _this2.onAfterTableAlter();
	      });
	      this.addHook('afterChange', function (changes, source) {
	        return _this2.onAfterTableAlter(source);
	      });
	      this.addHook('afterLoadData', function (firstRun) {
	        return _this2.onAfterLoadData(firstRun);
	      });
	
	      _get(ObserveChanges.prototype.__proto__ || Object.getPrototypeOf(ObserveChanges.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      if (this.observer) {
	        this.observer.destroy();
	        this.observer = null;
	        this._deletePublicApi();
	      }
	
	      _get(ObserveChanges.prototype.__proto__ || Object.getPrototypeOf(ObserveChanges.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Data change observer.
	     *
	     * @private
	     * @param {Array} patches An array of objects which every item defines coordinates where data was changed.
	     */
	
	  }, {
	    key: 'onDataChange',
	    value: function onDataChange(patches) {
	      var _this3 = this;
	
	      if (!this.observer.isPaused()) {
	        var sourceName = this.pluginName + '.change';
	        var actions = {
	          add: function add(patch) {
	            if (isNaN(patch.col)) {
	              _this3.hot.runHooks('afterCreateRow', patch.row, 1, sourceName);
	            } else {
	              _this3.hot.runHooks('afterCreateCol', patch.col, 1, sourceName);
	            }
	          },
	          remove: function remove(patch) {
	            if (isNaN(patch.col)) {
	              _this3.hot.runHooks('afterRemoveRow', patch.row, 1, sourceName);
	            } else {
	              _this3.hot.runHooks('afterRemoveCol', patch.col, 1, sourceName);
	            }
	          },
	          replace: function replace(patch) {
	            _this3.hot.runHooks('afterChange', [[patch.row, patch.col, null, patch.value]], sourceName);
	          }
	        };
	
	        (0, _array.arrayEach)(patches, function (patch) {
	          if (actions[patch.op]) {
	            actions[patch.op](patch);
	          }
	        });
	        this.hot.render();
	      }
	
	      this.hot.runHooks('afterChangesObserved');
	    }
	
	    /**
	     * On after table alter listener. Prevents infinity loop between internal and external data changing.
	     *
	     * @private
	     * @param source
	     */
	
	  }, {
	    key: 'onAfterTableAlter',
	    value: function onAfterTableAlter(source) {
	      var _this4 = this;
	
	      if (source !== 'loadData') {
	        this.observer.pause();
	        this.hot.addHookOnce('afterChangesObserved', function () {
	          return _this4.observer.resume();
	        });
	      }
	    }
	
	    /**
	     * On after load data listener.
	     *
	     * @private
	     * @param {Boolean} firstRun `true` if event was fired first time.
	     */
	
	  }, {
	    key: 'onAfterLoadData',
	    value: function onAfterLoadData(firstRun) {
	      if (!firstRun) {
	        this.observer.setObservedData(this.hot.getSourceData());
	      }
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.observer) {
	        this.observer.destroy();
	        this._deletePublicApi();
	      }
	      _get(ObserveChanges.prototype.__proto__ || Object.getPrototypeOf(ObserveChanges.prototype), 'destroy', this).call(this);
	    }
	
	    /**
	     * Expose plugins methods to the core.
	     *
	     * @private
	     */
	
	  }, {
	    key: '_exposePublicApi',
	    value: function _exposePublicApi() {
	      var _this5 = this;
	
	      var hot = this.hot;
	
	      hot.pauseObservingChanges = function () {
	        return _this5.observer.pause();
	      };
	      hot.resumeObservingChanges = function () {
	        return _this5.observer.resume();
	      };
	      hot.isPausedObservingChanges = function () {
	        return _this5.observer.isPaused();
	      };
	    }
	
	    /**
	     * Deletes all previously exposed methods.
	     *
	     * @private
	     */
	
	  }, {
	    key: '_deletePublicApi',
	    value: function _deletePublicApi() {
	      var hot = this.hot;
	
	      delete hot.pauseObservingChanges;
	      delete hot.resumeObservingChanges;
	      delete hot.isPausedObservingChanges;
	    }
	  }]);
	
	  return ObserveChanges;
	}(_base2.default);
	
	exports.default = ObserveChanges;
	
	
	(0, _plugins.registerPlugin)('observeChanges', ObserveChanges);
	
	/***/ }),
	/* 358 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _jsonPatchDuplex = __webpack_require__(359);
	
	var _jsonPatchDuplex2 = _interopRequireDefault(_jsonPatchDuplex);
	
	var _localHooks = __webpack_require__(47);
	
	var _localHooks2 = _interopRequireDefault(_localHooks);
	
	var _object = __webpack_require__(1);
	
	var _utils = __webpack_require__(360);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class DataObserver
	 * @plugin ObserveChanges
	 */
	var DataObserver = function () {
	  function DataObserver(observedData) {
	    _classCallCheck(this, DataObserver);
	
	    /**
	     * Observed source data.
	     *
	     * @type {Array}
	     */
	    this.observedData = null;
	    /**
	     * JsonPatch observer.
	     *
	     * @type {Object}
	     */
	    this.observer = null;
	    /**
	     * Flag which determines if observer is paused or not. Paused observer doesn't emit `change` hooks.
	     *
	     * @type {Boolean}
	     * @default false
	     */
	    this.paused = false;
	
	    this.setObservedData(observedData);
	  }
	
	  /**
	   * Set data to observe.
	   *
	   * @param {*} observedData
	   */
	
	
	  _createClass(DataObserver, [{
	    key: 'setObservedData',
	    value: function setObservedData(observedData) {
	      var _this = this;
	
	      if (this.observer) {
	        _jsonPatchDuplex2.default.unobserve(this.observedData, this.observer);
	      }
	      this.observedData = observedData;
	      this.observer = _jsonPatchDuplex2.default.observe(this.observedData, function (patches) {
	        return _this.onChange(patches);
	      });
	    }
	
	    /**
	     * Check if observer was paused.
	     *
	     * @returns {Boolean}
	     */
	
	  }, {
	    key: 'isPaused',
	    value: function isPaused() {
	      return this.paused;
	    }
	
	    /**
	     * Pause observer (stop emitting all detected changes).
	     */
	
	  }, {
	    key: 'pause',
	    value: function pause() {
	      this.paused = true;
	    }
	
	    /**
	     * Resume observer (emit all detected changes).
	     */
	
	  }, {
	    key: 'resume',
	    value: function resume() {
	      this.paused = false;
	    }
	
	    /**
	     * JsonPatch on change listener.
	     *
	     * @private
	     * @param {Array} patches An array of object passed from jsonpatch.
	     */
	
	  }, {
	    key: 'onChange',
	    value: function onChange(patches) {
	      this.runLocalHooks('change', (0, _utils.cleanPatches)(patches));
	    }
	
	    /**
	     * Destroy observer instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _jsonPatchDuplex2.default.unobserve(this.observedData, this.observer);
	      this.observedData = null;
	      this.observer = null;
	    }
	  }]);
	
	  return DataObserver;
	}();
	
	(0, _object.mixin)(DataObserver, _localHooks2.default);
	
	exports.default = DataObserver;
	
	/***/ }),
	/* 359 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*!
	 * https://github.com/Starcounter-Jack/JSON-Patch
	 * json-patch-duplex.js version: 0.5.7
	 * (c) 2013 Joachim Wester
	 * MIT license
	 */
	var __extends = undefined && undefined.__extends || function (d, b) {
	    for (var p in b) {
	        if (b.hasOwnProperty(p)) d[p] = b[p];
	    }function __() {
	        this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OriginalError = Error;
	var jsonpatch;
	(function (jsonpatch) {
	    var _objectKeys = function _objectKeys(obj) {
	        if (_isArray(obj)) {
	            var keys = new Array(obj.length);
	            for (var k = 0; k < keys.length; k++) {
	                keys[k] = "" + k;
	            }
	            return keys;
	        }
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i)) {
	                keys.push(i);
	            }
	        }
	        return keys;
	    };
	    function _equals(a, b) {
	        switch (typeof a === 'undefined' ? 'undefined' : _typeof(a)) {
	            case 'undefined': //backward compatibility, but really I think we should return false
	            case 'boolean':
	            case 'string':
	            case 'number':
	                return a === b;
	            case 'object':
	                if (a === null) return b === null;
	                if (_isArray(a)) {
	                    if (!_isArray(b) || a.length !== b.length) return false;
	                    for (var i = 0, l = a.length; i < l; i++) {
	                        if (!_equals(a[i], b[i])) return false;
	                    }return true;
	                }
	                var bKeys = _objectKeys(b);
	                var bLength = bKeys.length;
	                if (_objectKeys(a).length !== bLength) return false;
	                for (var i = 0; i < bLength; i++) {
	                    if (!_equals(a[i], b[i])) return false;
	                }return true;
	            default:
	                return false;
	        }
	    }
	    /* We use a Javascript hash to store each
	     function. Each hash entry (property) uses
	     the operation identifiers specified in rfc6902.
	     In this way, we can map each patch operation
	     to its dedicated function in efficient way.
	     */
	    /* The operations applicable to an object */
	    var objOps = {
	        add: function add(obj, key) {
	            obj[key] = this.value;
	            return true;
	        },
	        remove: function remove(obj, key) {
	            delete obj[key];
	            return true;
	        },
	        replace: function replace(obj, key) {
	            obj[key] = this.value;
	            return true;
	        },
	        move: function move(obj, key, tree) {
	            var temp = { op: "_get", path: this.from };
	            apply(tree, [temp]);
	            apply(tree, [{ op: "remove", path: this.from }]);
	            apply(tree, [{ op: "add", path: this.path, value: temp.value }]);
	            return true;
	        },
	        copy: function copy(obj, key, tree) {
	            var temp = { op: "_get", path: this.from };
	            apply(tree, [temp]);
	            apply(tree, [{ op: "add", path: this.path, value: temp.value }]);
	            return true;
	        },
	        test: function test(obj, key) {
	            return _equals(obj[key], this.value);
	        },
	        _get: function _get(obj, key) {
	            this.value = obj[key];
	        }
	    };
	    /* The operations applicable to an array. Many are the same as for the object */
	    var arrOps = {
	        add: function add(arr, i) {
	            arr.splice(i, 0, this.value);
	            return true;
	        },
	        remove: function remove(arr, i) {
	            arr.splice(i, 1);
	            return true;
	        },
	        replace: function replace(arr, i) {
	            arr[i] = this.value;
	            return true;
	        },
	        move: objOps.move,
	        copy: objOps.copy,
	        test: objOps.test,
	        _get: objOps._get
	    };
	    /* The operations applicable to object root. Many are the same as for the object */
	    var rootOps = {
	        add: function add(obj) {
	            rootOps.remove.call(this, obj);
	            for (var key in this.value) {
	                if (this.value.hasOwnProperty(key)) {
	                    obj[key] = this.value[key];
	                }
	            }
	            return true;
	        },
	        remove: function remove(obj) {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    objOps.remove.call(this, obj, key);
	                }
	            }
	            return true;
	        },
	        replace: function replace(obj) {
	            apply(obj, [{ op: "remove", path: this.path }]);
	            apply(obj, [{ op: "add", path: this.path, value: this.value }]);
	            return true;
	        },
	        move: objOps.move,
	        copy: objOps.copy,
	        test: function test(obj) {
	            return JSON.stringify(obj) === JSON.stringify(this.value);
	        },
	        _get: function _get(obj) {
	            this.value = obj;
	        }
	    };
	    var observeOps = {
	        add: function add(patches, path) {
	            var patch = {
	                op: "add",
	                path: path + escapePathComponent(this.name),
	                value: this.object[this.name] };
	            patches.push(patch);
	        },
	        'delete': function _delete(patches, path) {
	            var patch = {
	                op: "remove",
	                path: path + escapePathComponent(this.name)
	            };
	            patches.push(patch);
	        },
	        update: function update(patches, path) {
	            var patch = {
	                op: "replace",
	                path: path + escapePathComponent(this.name),
	                value: this.object[this.name]
	            };
	            patches.push(patch);
	        }
	    };
	    function escapePathComponent(str) {
	        if (str.indexOf('/') === -1 && str.indexOf('~') === -1) return str;
	        return str.replace(/~/g, '~0').replace(/\//g, '~1');
	    }
	    function _getPathRecursive(root, obj) {
	        var found;
	        for (var key in root) {
	            if (root.hasOwnProperty(key)) {
	                if (root[key] === obj) {
	                    return escapePathComponent(key) + '/';
	                } else if (_typeof(root[key]) === 'object') {
	                    found = _getPathRecursive(root[key], obj);
	                    if (found != '') {
	                        return escapePathComponent(key) + '/' + found;
	                    }
	                }
	            }
	        }
	        return '';
	    }
	    function getPath(root, obj) {
	        if (root === obj) {
	            return '/';
	        }
	        var path = _getPathRecursive(root, obj);
	        if (path === '') {
	            throw new OriginalError("Object not found in root");
	        }
	        return '/' + path;
	    }
	    var beforeDict = [];
	    var Mirror = function () {
	        function Mirror(obj) {
	            this.observers = [];
	            this.obj = obj;
	        }
	        return Mirror;
	    }();
	    var ObserverInfo = function () {
	        function ObserverInfo(callback, observer) {
	            this.callback = callback;
	            this.observer = observer;
	        }
	        return ObserverInfo;
	    }();
	    function getMirror(obj) {
	        for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {
	            if (beforeDict[i].obj === obj) {
	                return beforeDict[i];
	            }
	        }
	    }
	    function getObserverFromMirror(mirror, callback) {
	        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {
	            if (mirror.observers[j].callback === callback) {
	                return mirror.observers[j].observer;
	            }
	        }
	    }
	    function removeObserverFromMirror(mirror, observer) {
	        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {
	            if (mirror.observers[j].observer === observer) {
	                mirror.observers.splice(j, 1);
	                return;
	            }
	        }
	    }
	    function unobserve(root, observer) {
	        observer.unobserve();
	    }
	    jsonpatch.unobserve = unobserve;
	    function deepClone(obj) {
	        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === "object") {
	            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
	        } else {
	            return obj; //no need to clone primitives
	        }
	    }
	    function observe(obj, callback) {
	        var patches = [];
	        var root = obj;
	        var observer;
	        var mirror = getMirror(obj);
	        if (!mirror) {
	            mirror = new Mirror(obj);
	            beforeDict.push(mirror);
	        } else {
	            observer = getObserverFromMirror(mirror, callback);
	        }
	        if (observer) {
	            return observer;
	        }
	        observer = {};
	        mirror.value = deepClone(obj);
	        if (callback) {
	            observer.callback = callback;
	            observer.next = null;
	            var intervals = this.intervals || [100, 1000, 10000, 60000];
	            if (intervals.push === void 0) {
	                throw new OriginalError("jsonpatch.intervals must be an array");
	            }
	            var currentInterval = 0;
	            var dirtyCheck = function dirtyCheck() {
	                generate(observer);
	            };
	            var fastCheck = function fastCheck() {
	                clearTimeout(observer.next);
	                observer.next = setTimeout(function () {
	                    dirtyCheck();
	                    currentInterval = 0;
	                    observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	                }, 0);
	            };
	            var slowCheck = function slowCheck() {
	                dirtyCheck();
	                if (currentInterval == intervals.length) currentInterval = intervals.length - 1;
	                observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	            };
	            if (typeof window !== 'undefined') {
	                if (window.addEventListener) {
	                    window.addEventListener('mousedown', fastCheck);
	                    window.addEventListener('mouseup', fastCheck);
	                    window.addEventListener('keydown', fastCheck);
	                } else {
	                    document.documentElement.attachEvent('onmousedown', fastCheck);
	                    document.documentElement.attachEvent('onmouseup', fastCheck);
	                    document.documentElement.attachEvent('onkeydown', fastCheck);
	                }
	            }
	            observer.next = setTimeout(slowCheck, intervals[currentInterval++]);
	        }
	        observer.patches = patches;
	        observer.object = obj;
	        observer.unobserve = function () {
	            generate(observer);
	            clearTimeout(observer.next);
	            removeObserverFromMirror(mirror, observer);
	            if (typeof window !== 'undefined') {
	                if (window.removeEventListener) {
	                    window.removeEventListener('mousedown', fastCheck);
	                    window.removeEventListener('mouseup', fastCheck);
	                    window.removeEventListener('keydown', fastCheck);
	                } else {
	                    document.documentElement.detachEvent('onmousedown', fastCheck);
	                    document.documentElement.detachEvent('onmouseup', fastCheck);
	                    document.documentElement.detachEvent('onkeydown', fastCheck);
	                }
	            }
	        };
	        mirror.observers.push(new ObserverInfo(callback, observer));
	        return observer;
	    }
	    jsonpatch.observe = observe;
	    function generate(observer) {
	        var mirror;
	        for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {
	            if (beforeDict[i].obj === observer.object) {
	                mirror = beforeDict[i];
	                break;
	            }
	        }
	        _generate(mirror.value, observer.object, observer.patches, "");
	        if (observer.patches.length) {
	            apply(mirror.value, observer.patches);
	        }
	        var temp = observer.patches;
	        if (temp.length > 0) {
	            observer.patches = [];
	            if (observer.callback) {
	                observer.callback(temp);
	            }
	        }
	        return temp;
	    }
	    jsonpatch.generate = generate;
	    // Dirty check if obj is different from mirror, generate patches and update mirror
	    function _generate(mirror, obj, patches, path) {
	        var newKeys = _objectKeys(obj);
	        var oldKeys = _objectKeys(mirror);
	        var changed = false;
	        var deleted = false;
	        //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
	        for (var t = oldKeys.length - 1; t >= 0; t--) {
	            var key = oldKeys[t];
	            var oldVal = mirror[key];
	            if (obj.hasOwnProperty(key)) {
	                var newVal = obj[key];
	                if ((typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) == "object" && oldVal != null && (typeof newVal === 'undefined' ? 'undefined' : _typeof(newVal)) == "object" && newVal != null) {
	                    _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key));
	                } else {
	                    if (oldVal != newVal) {
	                        changed = true;
	                        patches.push({ op: "replace", path: path + "/" + escapePathComponent(key), value: deepClone(newVal) });
	                    }
	                }
	            } else {
	                patches.push({ op: "remove", path: path + "/" + escapePathComponent(key) });
	                deleted = true; // property has been deleted
	            }
	        }
	        if (!deleted && newKeys.length == oldKeys.length) {
	            return;
	        }
	        for (var t = 0; t < newKeys.length; t++) {
	            var key = newKeys[t];
	            if (!mirror.hasOwnProperty(key)) {
	                patches.push({ op: "add", path: path + "/" + escapePathComponent(key), value: deepClone(obj[key]) });
	            }
	        }
	    }
	    var _isArray;
	    if (Array.isArray) {
	        _isArray = Array.isArray;
	    } else {
	        _isArray = function _isArray(obj) {
	            return obj.push && typeof obj.length === 'number';
	        };
	    }
	    //3x faster than cached /^\d+$/.test(str)
	    function isInteger(str) {
	        var i = 0;
	        var len = str.length;
	        var charCode;
	        while (i < len) {
	            charCode = str.charCodeAt(i);
	            if (charCode >= 48 && charCode <= 57) {
	                i++;
	                continue;
	            }
	            return false;
	        }
	        return true;
	    }
	    /// Apply a json-patch operation on an object tree
	    function apply(tree, patches, validate) {
	        var result = false,
	            p = 0,
	            plen = patches.length,
	            patch,
	            key;
	        while (p < plen) {
	            patch = patches[p];
	            p++;
	            // Find the object
	            var path = patch.path || "";
	            var keys = path.split('/');
	            var obj = tree;
	            var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
	            var len = keys.length;
	            var existingPathFragment = undefined;
	            while (true) {
	                key = keys[t];
	                if (validate) {
	                    if (existingPathFragment === undefined) {
	                        if (obj[key] === undefined) {
	                            existingPathFragment = keys.slice(0, t).join('/');
	                        } else if (t == len - 1) {
	                            existingPathFragment = patch.path;
	                        }
	                        if (existingPathFragment !== undefined) {
	                            this.validator(patch, p - 1, tree, existingPathFragment);
	                        }
	                    }
	                }
	                t++;
	                if (key === undefined) {
	                    if (t >= len) {
	                        result = rootOps[patch.op].call(patch, obj, key, tree); // Apply patch
	                        break;
	                    }
	                }
	                if (_isArray(obj)) {
	                    if (key === '-') {
	                        key = obj.length;
	                    } else {
	                        if (validate && !isInteger(key)) {
	                            throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", p - 1, patch.path, patch);
	                        }
	                        key = parseInt(key, 10);
	                    }
	                    if (t >= len) {
	                        if (validate && patch.op === "add" && key > obj.length) {
	                            throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", p - 1, patch.path, patch);
	                        }
	                        result = arrOps[patch.op].call(patch, obj, key, tree); // Apply patch
	                        break;
	                    }
	                } else {
	                    if (key && key.indexOf('~') != -1) key = key.replace(/~1/g, '/').replace(/~0/g, '~'); // escape chars
	                    if (t >= len) {
	                        result = objOps[patch.op].call(patch, obj, key, tree); // Apply patch
	                        break;
	                    }
	                }
	                obj = obj[key];
	            }
	        }
	        return result;
	    }
	    jsonpatch.apply = apply;
	    function compare(tree1, tree2) {
	        var patches = [];
	        _generate(tree1, tree2, patches, '');
	        return patches;
	    }
	    jsonpatch.compare = compare;
	    var JsonPatchError = function (_super) {
	        __extends(JsonPatchError, _super);
	        function JsonPatchError(message, name, index, operation, tree) {
	            _super.call(this, message);
	            this.message = message;
	            this.name = name;
	            this.index = index;
	            this.operation = operation;
	            this.tree = tree;
	        }
	        return JsonPatchError;
	    }(OriginalError);
	    jsonpatch.JsonPatchError = JsonPatchError;
	    jsonpatch.Error = JsonPatchError;
	    /**
	     * Recursively checks whether an object has any undefined values inside.
	     */
	    function hasUndefined(obj) {
	        if (obj === undefined) {
	            return true;
	        }
	        if (typeof obj == "array" || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == "object") {
	            for (var i in obj) {
	                if (hasUndefined(obj[i])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    /**
	     * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
	     * @param {object} operation - operation object (patch)
	     * @param {number} index - index of operation in the sequence
	     * @param {object} [tree] - object where the operation is supposed to be applied
	     * @param {string} [existingPathFragment] - comes along with `tree`
	     */
	    function validator(operation, index, tree, existingPathFragment) {
	        if ((typeof operation === 'undefined' ? 'undefined' : _typeof(operation)) !== 'object' || operation === null || _isArray(operation)) {
	            throw new JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, tree);
	        } else if (!objOps[operation.op]) {
	            throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, tree);
	        } else if (typeof operation.path !== 'string') {
	            throw new JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, tree);
	        } else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
	            throw new JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, tree);
	        } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
	            throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, tree);
	        } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && hasUndefined(operation.value)) {
	            throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, tree);
	        } else if (tree) {
	            if (operation.op == "add") {
	                var pathLen = operation.path.split("/").length;
	                var existingPathLen = existingPathFragment.split("/").length;
	                if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
	                    throw new JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, tree);
	                }
	            } else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
	                if (operation.path !== existingPathFragment) {
	                    throw new JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, tree);
	                }
	            } else if (operation.op === 'move' || operation.op === 'copy') {
	                var existingValue = { op: "_get", path: operation.from, value: undefined };
	                var error = jsonpatch.validate([existingValue], tree);
	                if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
	                    throw new JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, tree);
	                }
	            }
	        }
	    }
	    jsonpatch.validator = validator;
	    /**
	     * Validates a sequence of operations. If `tree` parameter is provided, the sequence is additionally validated against the object tree.
	     * If error is encountered, returns a JsonPatchError object
	     * @param sequence
	     * @param tree
	     * @returns {JsonPatchError|undefined}
	     */
	    function validate(sequence, tree) {
	        try {
	            if (!_isArray(sequence)) {
	                throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
	            }
	            if (tree) {
	                tree = JSON.parse(JSON.stringify(tree)); //clone tree so that we can safely try applying operations
	                apply.call(this, tree, sequence, true);
	            } else {
	                for (var i = 0; i < sequence.length; i++) {
	                    this.validator(sequence[i], i);
	                }
	            }
	        } catch (e) {
	            if (e instanceof JsonPatchError) {
	                return e;
	            } else {
	                throw e;
	            }
	        }
	    }
	    jsonpatch.validate = validate;
	})(jsonpatch || (jsonpatch = {}));
	if (true) {
	    exports.apply = jsonpatch.apply;
	    exports.observe = jsonpatch.observe;
	    exports.unobserve = jsonpatch.unobserve;
	    exports.generate = jsonpatch.generate;
	    exports.compare = jsonpatch.compare;
	    exports.validate = jsonpatch.validate;
	    exports.validator = jsonpatch.validator;
	    exports.JsonPatchError = jsonpatch.JsonPatchError;
	    exports.Error = jsonpatch.Error;
	}
	
	/***/ }),
	/* 360 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.cleanPatches = cleanPatches;
	exports.parsePath = parsePath;
	
	var _array = __webpack_require__(2);
	
	/**
	 * Clean and extend patches from jsonpatch observer.
	 *
	 * @param {Array} patches
	 * @returns {Array}
	 */
	function cleanPatches(patches) {
	  var newOrRemovedColumns = [];
	
	  /**
	   * If observeChanges uses native Object.observe method, then it produces patches for length property. Filter them.
	   * If path can't be parsed. Filter it.
	   */
	  var cleanedPatches = (0, _array.arrayFilter)(patches, function (patch) {
	    if (/[/]length/ig.test(patch.path)) {
	      return false;
	    }
	    if (!parsePath(patch.path)) {
	      return false;
	    }
	
	    return true;
	  });
	  /**
	   * Extend patches with changed cells coords
	   */
	  cleanedPatches = (0, _array.arrayMap)(cleanedPatches, function (patch) {
	    var coords = parsePath(patch.path);
	
	    patch.row = coords.row;
	    patch.col = coords.col;
	
	    return patch;
	  });
	  /**
	   * Removing or adding column will produce one patch for each table row.
	   * Leaves only one patch for each column add/remove operation.
	   */
	  cleanedPatches = (0, _array.arrayFilter)(cleanedPatches, function (patch) {
	    if (['add', 'remove'].indexOf(patch.op) !== -1 && !isNaN(patch.col)) {
	      if (newOrRemovedColumns.indexOf(patch.col) !== -1) {
	        return false;
	      }
	      newOrRemovedColumns.push(patch.col);
	    }
	
	    return true;
	  });
	  newOrRemovedColumns.length = 0;
	
	  return cleanedPatches;
	}
	
	/**
	 * Extract coordinates from path where data was changed.
	 *
	 * @param {String} path Path describing where data was changed.
	 * @returns {Object|null} Returns an object with `row` and `col` properties or `null` if path doesn't have necessary information.
	 */
	function parsePath(path) {
	  var match = path.match(/^\/(\d+)\/?(.*)?$/);
	
	  if (!match) {
	    return null;
	  }
	
	  var _match = _slicedToArray(match, 3),
	      row = _match[1],
	      column = _match[2];
	
	  return {
	    row: parseInt(row, 10),
	    col: /^\d*$/.test(column) ? parseInt(column, 10) : column
	  };
	}
	
	/***/ }),
	/* 361 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _object = __webpack_require__(1);
	
	var _number = __webpack_require__(6);
	
	var _mixed = __webpack_require__(11);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DEFAULT_SEARCH_RESULT_CLASS = 'htSearchResult';
	
	var DEFAULT_CALLBACK = function DEFAULT_CALLBACK(instance, row, col, data, testResult) {
	  instance.getCellMeta(row, col).isSearchResult = testResult;
	};
	
	var DEFAULT_QUERY_METHOD = function DEFAULT_QUERY_METHOD(query, value) {
	  if ((0, _mixed.isUndefined)(query) || query === null || !query.toLowerCase || query.length === 0) {
	    return false;
	  }
	  if ((0, _mixed.isUndefined)(value) || value === null) {
	    return false;
	  }
	
	  return value.toString().toLowerCase().indexOf(query.toLowerCase()) !== -1;
	};
	
	/**
	 * @plugin Search
	 *
	 * @description
	 * The search plugin provides an easy interface to search data across Handsontable.
	 *
	 * In order to enable search mechanism, {@link Options#search} option must be set to `true`.
	 *
	 * @example
	 * ```js
	 * // as boolean
	 * search: true
	 * // as a object with one or more options
	 * search: {
	 *   callback: myNewCallbackFunction,
	 *   queryMethod: myNewQueryMethod,
	 *   searchResultClass: 'customClass'
	 * }
	 *
	 * // Access to search plugin instance:
	 * const searchPlugin = hot.getPlugin('search');
	 *
	 * // Set callback programmatically:
	 * searchPlugin.setCallback(myNewCallbackFunction);
	 * // Set query method programmatically:
	 * searchPlugin.setQueryMethod(myNewQueryMethod);
	 * // Set search result cells class programmatically:
	 * searchPlugin.setSearchResultClass(customClass);
	 * ```
	 */
	
	var Search = function (_BasePlugin) {
	  _inherits(Search, _BasePlugin);
	
	  function Search(hotInstance) {
	    _classCallCheck(this, Search);
	
	    /**
	     * Function called during querying for each cell from the {@link DataMap}.
	     *
	     * @private
	     * @type {Function}
	     */
	    var _this = _possibleConstructorReturn(this, (Search.__proto__ || Object.getPrototypeOf(Search)).call(this, hotInstance));
	
	    _this.callback = DEFAULT_CALLBACK;
	    /**
	     * Query function is responsible for determining whether a query matches the value stored in a cell.
	     *
	     * @private
	     * @type {Function}
	     */
	    _this.queryMethod = DEFAULT_QUERY_METHOD;
	    /**
	     * Class name added to each cell that belongs to the searched query.
	     *
	     * @private
	     * @type {String}
	     */
	    _this.searchResultClass = DEFAULT_SEARCH_RESULT_CLASS;
	    return _this;
	  }
	
	  /**
	   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
	   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(Search, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return this.hot.getSettings().search;
	    }
	
	    /**
	     * Enables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      var searchSettings = this.hot.getSettings().search;
	      this.updatePluginSettings(searchSettings);
	
	      this.addHook('beforeRenderer', function () {
	        return _this2.onBeforeRenderer.apply(_this2, arguments);
	      });
	
	      _get(Search.prototype.__proto__ || Object.getPrototypeOf(Search.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Disables the plugin functionality for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      var _this3 = this;
	
	      var beforeRendererCallback = function beforeRendererCallback() {
	        return _this3.onBeforeRenderer.apply(_this3, arguments);
	      };
	
	      this.hot.addHook('beforeRenderer', beforeRendererCallback);
	      this.hot.addHookOnce('afterRender', function () {
	        _this3.hot.removeHook('beforeRenderer', beforeRendererCallback);
	      });
	
	      _get(Search.prototype.__proto__ || Object.getPrototypeOf(Search.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.disablePlugin();
	      this.enablePlugin();
	
	      _get(Search.prototype.__proto__ || Object.getPrototypeOf(Search.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Makes the query.
	     *
	     * @param {String} queryStr Value to be search.
	     * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
	     * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
	     * @returns {Object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
	     */
	
	  }, {
	    key: 'query',
	    value: function query(queryStr) {
	      var _this4 = this;
	
	      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCallback();
	      var queryMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getQueryMethod();
	
	      var rowCount = this.hot.countRows();
	      var colCount = this.hot.countCols();
	      var queryResult = [];
	      var instance = this.hot;
	
	      (0, _number.rangeEach)(0, rowCount - 1, function (rowIndex) {
	        (0, _number.rangeEach)(0, colCount - 1, function (colIndex) {
	          var cellData = _this4.hot.getDataAtCell(rowIndex, colIndex);
	          var cellProperties = _this4.hot.getCellMeta(rowIndex, colIndex);
	          var cellCallback = cellProperties.search.callback || callback;
	          var cellQueryMethod = cellProperties.search.queryMethod || queryMethod;
	          var testResult = cellQueryMethod(queryStr, cellData);
	
	          if (testResult) {
	            var singleResult = {
	              row: rowIndex,
	              col: colIndex,
	              data: cellData
	            };
	
	            queryResult.push(singleResult);
	          }
	
	          if (cellCallback) {
	            cellCallback(instance, rowIndex, colIndex, cellData, testResult);
	          }
	        });
	      });
	
	      return queryResult;
	    }
	
	    /**
	     * Gets the callback function.
	     *
	     * @returns {Function} Return the callback function.
	     */
	
	  }, {
	    key: 'getCallback',
	    value: function getCallback() {
	      return this.callback;
	    }
	
	    /**
	     * Sets the callback function. This function will be called during querying for each cell.
	     *
	     * @param {Function} newCallback
	     */
	
	  }, {
	    key: 'setCallback',
	    value: function setCallback(newCallback) {
	      this.callback = newCallback;
	    }
	
	    /**
	     * Gets the query method function.
	     *
	     * @returns {Function} Return the query method.
	     */
	
	  }, {
	    key: 'getQueryMethod',
	    value: function getQueryMethod() {
	      return this.queryMethod;
	    }
	
	    /**
	     * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
	     *
	     * @param {Function} newQueryMethod
	     */
	
	  }, {
	    key: 'setQueryMethod',
	    value: function setQueryMethod(newQueryMethod) {
	      this.queryMethod = newQueryMethod;
	    }
	
	    /**
	     * Gets search result cells class name.
	     *
	     * @returns {String} Return the cell class name.
	     */
	
	  }, {
	    key: 'getSearchResultClass',
	    value: function getSearchResultClass() {
	      return this.searchResultClass;
	    }
	
	    /**
	     * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
	     *
	     * @param {String} newElementClass
	     */
	
	  }, {
	    key: 'setSearchResultClass',
	    value: function setSearchResultClass(newElementClass) {
	      this.searchResultClass = newElementClass;
	    }
	
	    /**
	     * Updates the settings of the plugin.
	     *
	     * @param {Object} searchSettings The plugin settings, taken from Handsontable configuration.
	     * @private
	     */
	
	  }, {
	    key: 'updatePluginSettings',
	    value: function updatePluginSettings(searchSettings) {
	      if ((0, _object.isObject)(searchSettings)) {
	        if (searchSettings.searchResultClass) {
	          this.setSearchResultClass(searchSettings.searchResultClass);
	        }
	
	        if (searchSettings.queryMethod) {
	          this.setQueryMethod(searchSettings.queryMethod);
	        }
	
	        if (searchSettings.callback) {
	          this.setCallback(searchSettings.callback);
	        }
	      }
	    }
	
	    /** *
	     * The `beforeRenderer` hook callback.
	     *
	     * @private
	     * @param {HTMLTableCellElement} TD The rendered `TD` element.
	     * @param {Number} row Visual row index.
	     * @param {Number} col Visual column index.
	     * @param {String | Number} prop Column property name or a column index, if datasource is an array of arrays.
	     * @param {String} value Value of the rendered cell.
	     * @param {Object} cellProperties Object containing the cell's properties.
	     */
	
	  }, {
	    key: 'onBeforeRenderer',
	    value: function onBeforeRenderer(TD, row, col, prop, value, cellProperties) {
	      // TODO: #4972
	      var className = cellProperties.className || [];
	      var classArray = [];
	
	      if (typeof className === 'string') {
	        classArray = className.split(' ');
	      } else {
	        var _classArray;
	
	        (_classArray = classArray).push.apply(_classArray, _toConsumableArray(className));
	      }
	
	      if (this.isEnabled() && cellProperties.isSearchResult) {
	        if (!classArray.includes(this.searchResultClass)) {
	          classArray.push('' + this.searchResultClass);
	        }
	      } else if (classArray.includes(this.searchResultClass)) {
	        classArray.splice(classArray.indexOf(this.searchResultClass), 1);
	      }
	
	      cellProperties.className = classArray.join(' ');
	    }
	
	    /**
	     * Destroys the plugin instance.
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _get(Search.prototype.__proto__ || Object.getPrototypeOf(Search.prototype), 'destroy', this).call(this);
	    }
	  }]);
	
	  return Search;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('search', Search);
	
	exports.default = Search;
	
	/***/ }),
	/* 362 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _element = __webpack_require__(0);
	
	var _array = __webpack_require__(2);
	
	var _base = __webpack_require__(10);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _plugins = __webpack_require__(8);
	
	var _feature = __webpack_require__(40);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @private
	 * @plugin TouchScroll
	 * @class TouchScroll
	 */
	var TouchScroll = function (_BasePlugin) {
	  _inherits(TouchScroll, _BasePlugin);
	
	  function TouchScroll(hotInstance) {
	    _classCallCheck(this, TouchScroll);
	
	    /**
	     * Collection of scrollbars to update.
	     *
	     * @type {Array}
	     */
	    var _this = _possibleConstructorReturn(this, (TouchScroll.__proto__ || Object.getPrototypeOf(TouchScroll)).call(this, hotInstance));
	
	    _this.scrollbars = [];
	    /**
	     * Collection of overlays to update.
	     *
	     * @type {Array}
	     */
	    _this.clones = [];
	    /**
	     * Flag which determines if collection of overlays should be refilled on every table render.
	     *
	     * @type {Boolean}
	     * @default false
	     */
	    _this.lockedCollection = false;
	    /**
	     * Flag which determines if walkontable should freeze overlays while scrolling.
	     *
	     * @type {Boolean}
	     * @default false
	     */
	    _this.freezeOverlays = false;
	    return _this;
	  }
	
	  /**
	   * Check if plugin is enabled.
	   *
	   * @returns {Boolean}
	   */
	
	
	  _createClass(TouchScroll, [{
	    key: 'isEnabled',
	    value: function isEnabled() {
	      return (0, _feature.isTouchSupported)();
	    }
	
	    /**
	     * Enable the plugin.
	     */
	
	  }, {
	    key: 'enablePlugin',
	    value: function enablePlugin() {
	      var _this2 = this;
	
	      if (this.enabled) {
	        return;
	      }
	
	      this.addHook('afterRender', function () {
	        return _this2.onAfterRender();
	      });
	      this.registerEvents();
	
	      _get(TouchScroll.prototype.__proto__ || Object.getPrototypeOf(TouchScroll.prototype), 'enablePlugin', this).call(this);
	    }
	
	    /**
	     * Updates the plugin to use the latest options you have specified.
	     */
	
	  }, {
	    key: 'updatePlugin',
	    value: function updatePlugin() {
	      this.lockedCollection = false;
	
	      _get(TouchScroll.prototype.__proto__ || Object.getPrototypeOf(TouchScroll.prototype), 'updatePlugin', this).call(this);
	    }
	
	    /**
	     * Disable plugin for this Handsontable instance.
	     */
	
	  }, {
	    key: 'disablePlugin',
	    value: function disablePlugin() {
	      _get(TouchScroll.prototype.__proto__ || Object.getPrototypeOf(TouchScroll.prototype), 'disablePlugin', this).call(this);
	    }
	
	    /**
	     * Register all necessary events.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'registerEvents',
	    value: function registerEvents() {
	      var _this3 = this;
	
	      this.addHook('beforeTouchScroll', function () {
	        return _this3.onBeforeTouchScroll();
	      });
	      this.addHook('afterMomentumScroll', function () {
	        return _this3.onAfterMomentumScroll();
	      });
	    }
	
	    /**
	     * After render listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterRender',
	    value: function onAfterRender() {
	      if (this.lockedCollection) {
	        return;
	      }
	
	      var _hot$view$wt$wtOverla = this.hot.view.wt.wtOverlays,
	          topOverlay = _hot$view$wt$wtOverla.topOverlay,
	          bottomOverlay = _hot$view$wt$wtOverla.bottomOverlay,
	          leftOverlay = _hot$view$wt$wtOverla.leftOverlay,
	          topLeftCornerOverlay = _hot$view$wt$wtOverla.topLeftCornerOverlay,
	          bottomLeftCornerOverlay = _hot$view$wt$wtOverla.bottomLeftCornerOverlay;
	
	
	      this.lockedCollection = true;
	      this.scrollbars.length = 0;
	      this.scrollbars.push(topOverlay);
	
	      if (bottomOverlay.clone) {
	        this.scrollbars.push(bottomOverlay);
	      }
	      this.scrollbars.push(leftOverlay);
	
	      if (topLeftCornerOverlay) {
	        this.scrollbars.push(topLeftCornerOverlay);
	      }
	      if (bottomLeftCornerOverlay && bottomLeftCornerOverlay.clone) {
	        this.scrollbars.push(bottomLeftCornerOverlay);
	      }
	
	      this.clones.length = 0;
	
	      if (topOverlay.needFullRender) {
	        this.clones.push(topOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (bottomOverlay.needFullRender) {
	        this.clones.push(bottomOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (leftOverlay.needFullRender) {
	        this.clones.push(leftOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (topLeftCornerOverlay) {
	        this.clones.push(topLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	      if (bottomLeftCornerOverlay && bottomLeftCornerOverlay.clone) {
	        this.clones.push(bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);
	      }
	    }
	
	    /**
	     * Touch scroll listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onBeforeTouchScroll',
	    value: function onBeforeTouchScroll() {
	      this.freezeOverlays = true;
	
	      (0, _array.arrayEach)(this.clones, function (clone) {
	        (0, _element.addClass)(clone, 'hide-tween');
	      });
	    }
	
	    /**
	     * After momentum scroll listener.
	     *
	     * @private
	     */
	
	  }, {
	    key: 'onAfterMomentumScroll',
	    value: function onAfterMomentumScroll() {
	      var _this4 = this;
	
	      this.freezeOverlays = false;
	
	      (0, _array.arrayEach)(this.clones, function (clone) {
	        (0, _element.removeClass)(clone, 'hide-tween');
	        (0, _element.addClass)(clone, 'show-tween');
	      });
	
	      setTimeout(function () {
	        (0, _array.arrayEach)(_this4.clones, function (clone) {
	          (0, _element.removeClass)(clone, 'show-tween');
	        });
	      }, 400);
	
	      (0, _array.arrayEach)(this.scrollbars, function (scrollbar) {
	        scrollbar.refresh();
	        scrollbar.resetFixedPosition();
	      });
	
	      this.hot.view.wt.wtOverlays.syncScrollWithMaster();
	    }
	  }]);
	
	  return TouchScroll;
	}(_base2.default);
	
	(0, _plugins.registerPlugin)('touchScroll', TouchScroll);
	
	exports.default = TouchScroll;
	
	/***/ }),
	/* 363 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pluginHooks = __webpack_require__(16);
	
	var _pluginHooks2 = _interopRequireDefault(_pluginHooks);
	
	var _array = __webpack_require__(2);
	
	var _number = __webpack_require__(6);
	
	var _object = __webpack_require__(1);
	
	var _event = __webpack_require__(13);
	
	var _utils = __webpack_require__(19);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Handsontable UndoRedo class
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	/**
	 * @description
	 * Handsontable UndoRedo plugin allows to undo and redo certain actions done in the table.
	 *
	 * __Note__, that not all actions are currently undo-able. The UndoRedo plugin is enabled by default.
	 *
	 * @example
	 * ```js
	 * undo: true
	 * ```
	 * @class UndoRedo
	 * @plugin UndoRedo
	 */
	function UndoRedo(instance) {
	  var plugin = this;
	  this.instance = instance;
	  this.doneActions = [];
	  this.undoneActions = [];
	  this.ignoreNewActions = false;
	
	  instance.addHook('afterChange', function (changes, source) {
	    if (changes && source !== 'UndoRedo.undo' && source !== 'UndoRedo.redo' && source !== 'MergeCells') {
	      plugin.done(new UndoRedo.ChangeAction(changes));
	    }
	  });
	
	  instance.addHook('afterCreateRow', function (index, amount, source) {
	    if (source === 'UndoRedo.undo' || source === 'UndoRedo.undo' || source === 'auto') {
	      return;
	    }
	
	    var action = new UndoRedo.CreateRowAction(index, amount);
	    plugin.done(action);
	  });
	
	  instance.addHook('beforeRemoveRow', function (index, amount, logicRows, source) {
	    if (source === 'UndoRedo.undo' || source === 'UndoRedo.redo' || source === 'auto') {
	      return;
	    }
	
	    var originalData = plugin.instance.getSourceDataArray();
	    var rowIndex = (originalData.length + index) % originalData.length;
	    var removedData = (0, _object.deepClone)(originalData.slice(rowIndex, rowIndex + amount));
	
	    plugin.done(new UndoRedo.RemoveRowAction(rowIndex, removedData));
	  });
	
	  instance.addHook('afterCreateCol', function (index, amount, source) {
	    if (source === 'UndoRedo.undo' || source === 'UndoRedo.redo' || source === 'auto') {
	      return;
	    }
	
	    plugin.done(new UndoRedo.CreateColumnAction(index, amount));
	  });
	
	  instance.addHook('beforeRemoveCol', function (index, amount, logicColumns, source) {
	    if (source === 'UndoRedo.undo' || source === 'UndoRedo.redo' || source === 'auto') {
	      return;
	    }
	
	    var originalData = plugin.instance.getSourceDataArray();
	    var columnIndex = (plugin.instance.countCols() + index) % plugin.instance.countCols();
	    var removedData = [];
	    var headers = [];
	    var indexes = [];
	
	    (0, _number.rangeEach)(originalData.length - 1, function (i) {
	      var column = [];
	      var origRow = originalData[i];
	
	      (0, _number.rangeEach)(columnIndex, columnIndex + (amount - 1), function (j) {
	        column.push(origRow[instance.runHooks('modifyCol', j)]);
	      });
	      removedData.push(column);
	    });
	
	    (0, _number.rangeEach)(amount - 1, function (i) {
	      indexes.push(instance.runHooks('modifyCol', columnIndex + i));
	    });
	
	    if (Array.isArray(instance.getSettings().colHeaders)) {
	      (0, _number.rangeEach)(amount - 1, function (i) {
	        headers.push(instance.getSettings().colHeaders[instance.runHooks('modifyCol', columnIndex + i)] || null);
	      });
	    }
	
	    var manualColumnMovePlugin = plugin.instance.getPlugin('manualColumnMove');
	    var columnsMap = manualColumnMovePlugin.isEnabled() ? manualColumnMovePlugin.columnsMapper.__arrayMap : [];
	    var action = new UndoRedo.RemoveColumnAction(columnIndex, indexes, removedData, headers, columnsMap);
	
	    plugin.done(action);
	  });
	
	  instance.addHook('beforeCellAlignment', function (stateBefore, range, type, alignment) {
	    var action = new UndoRedo.CellAlignmentAction(stateBefore, range, type, alignment);
	    plugin.done(action);
	  });
	
	  instance.addHook('beforeFilter', function (conditionsStack) {
	    plugin.done(new UndoRedo.FiltersAction(conditionsStack));
	  });
	
	  instance.addHook('beforeRowMove', function (movedRows, target) {
	    if (movedRows === false) {
	      return;
	    }
	
	    plugin.done(new UndoRedo.RowMoveAction(movedRows, target));
	  });
	
	  instance.addHook('beforeMergeCells', function (cellRange, auto) {
	    if (auto) {
	      return;
	    }
	
	    plugin.done(new UndoRedo.MergeCellsAction(instance, cellRange));
	  });
	
	  instance.addHook('afterUnmergeCells', function (cellRange, auto) {
	    if (auto) {
	      return;
	    }
	
	    plugin.done(new UndoRedo.UnmergeCellsAction(instance, cellRange));
	  });
	}
	
	UndoRedo.prototype.done = function (action) {
	  if (!this.ignoreNewActions) {
	    this.doneActions.push(action);
	    this.undoneActions.length = 0;
	  }
	};
	
	/**
	 * Undo the last action performed to the table.
	 *
	 * @function undo
	 * @memberof UndoRedo#
	 * @fires Hooks#beforeUndo
	 * @fires Hooks#afterUndo
	 */
	UndoRedo.prototype.undo = function () {
	  if (this.isUndoAvailable()) {
	    var action = this.doneActions.pop();
	    var actionClone = (0, _object.deepClone)(action);
	    var instance = this.instance;
	
	    var continueAction = instance.runHooks('beforeUndo', actionClone);
	
	    if (continueAction === false) {
	      return;
	    }
	
	    this.ignoreNewActions = true;
	    var that = this;
	    action.undo(this.instance, function () {
	      that.ignoreNewActions = false;
	      that.undoneActions.push(action);
	    });
	
	    instance.runHooks('afterUndo', actionClone);
	  }
	};
	
	/**
	 * Redo the previous action performed to the table (used to reverse an undo).
	 *
	 * @function redo
	 * @memberof UndoRedo#
	 * @fires Hooks#beforeRedo
	 * @fires Hooks#afterRedo
	 */
	UndoRedo.prototype.redo = function () {
	  if (this.isRedoAvailable()) {
	    var action = this.undoneActions.pop();
	    var actionClone = (0, _object.deepClone)(action);
	    var instance = this.instance;
	
	    var continueAction = instance.runHooks('beforeRedo', actionClone);
	
	    if (continueAction === false) {
	      return;
	    }
	
	    this.ignoreNewActions = true;
	    var that = this;
	    action.redo(this.instance, function () {
	      that.ignoreNewActions = false;
	      that.doneActions.push(action);
	    });
	
	    instance.runHooks('afterRedo', actionClone);
	  }
	};
	
	/**
	 * Checks if undo action is available.
	 *
	 * @function isUndoAvailable
	 * @memberof UndoRedo#
	 * @return {Boolean} Return `true` if undo can be performed, `false` otherwise.
	 */
	UndoRedo.prototype.isUndoAvailable = function () {
	  return this.doneActions.length > 0;
	};
	
	/**
	 * Checks if redo action is available.
	 *
	 * @function isRedoAvailable
	 * @memberof UndoRedo#
	 * @return {Boolean} Return `true` if redo can be performed, `false` otherwise.
	 */
	UndoRedo.prototype.isRedoAvailable = function () {
	  return this.undoneActions.length > 0;
	};
	
	/**
	 * Clears undo history.
	 *
	 * @function clear
	 * @memberof UndoRedo#
	 */
	UndoRedo.prototype.clear = function () {
	  this.doneActions.length = 0;
	  this.undoneActions.length = 0;
	};
	
	UndoRedo.Action = function () {};
	UndoRedo.Action.prototype.undo = function () {};
	UndoRedo.Action.prototype.redo = function () {};
	
	/**
	 * Change action.
	 *
	 * @private
	 */
	UndoRedo.ChangeAction = function (changes) {
	  this.changes = changes;
	  this.actionType = 'change';
	};
	(0, _object.inherit)(UndoRedo.ChangeAction, UndoRedo.Action);
	
	UndoRedo.ChangeAction.prototype.undo = function (instance, undoneCallback) {
	  var data = (0, _object.deepClone)(this.changes);
	  var emptyRowsAtTheEnd = instance.countEmptyRows(true);
	  var emptyColsAtTheEnd = instance.countEmptyCols(true);
	
	  for (var i = 0, len = data.length; i < len; i++) {
	    data[i].splice(3, 1);
	  }
	
	  instance.addHookOnce('afterChange', undoneCallback);
	
	  instance.setDataAtRowProp(data, null, null, 'UndoRedo.undo');
	
	  for (var _i = 0, _len = data.length; _i < _len; _i++) {
	    if (instance.getSettings().minSpareRows && data[_i][0] + 1 + instance.getSettings().minSpareRows === instance.countRows() && emptyRowsAtTheEnd === instance.getSettings().minSpareRows) {
	
	      instance.alter('remove_row', parseInt(data[_i][0] + 1, 10), instance.getSettings().minSpareRows);
	      instance.undoRedo.doneActions.pop();
	    }
	
	    if (instance.getSettings().minSpareCols && data[_i][1] + 1 + instance.getSettings().minSpareCols === instance.countCols() && emptyColsAtTheEnd === instance.getSettings().minSpareCols) {
	
	      instance.alter('remove_col', parseInt(data[_i][1] + 1, 10), instance.getSettings().minSpareCols);
	      instance.undoRedo.doneActions.pop();
	    }
	  }
	};
	UndoRedo.ChangeAction.prototype.redo = function (instance, onFinishCallback) {
	  var data = (0, _object.deepClone)(this.changes);
	
	  for (var i = 0, len = data.length; i < len; i++) {
	    data[i].splice(2, 1);
	  }
	
	  instance.addHookOnce('afterChange', onFinishCallback);
	  instance.setDataAtRowProp(data, null, null, 'UndoRedo.redo');
	};
	
	/**
	 * Create row action.
	 *
	 * @private
	 */
	UndoRedo.CreateRowAction = function (index, amount) {
	  this.index = index;
	  this.amount = amount;
	  this.actionType = 'insert_row';
	};
	(0, _object.inherit)(UndoRedo.CreateRowAction, UndoRedo.Action);
	
	UndoRedo.CreateRowAction.prototype.undo = function (instance, undoneCallback) {
	  var rowCount = instance.countRows();
	  var minSpareRows = instance.getSettings().minSpareRows;
	
	  if (this.index >= rowCount && this.index - minSpareRows < rowCount) {
	    this.index -= minSpareRows; // work around the situation where the needed row was removed due to an 'undo' of a made change
	  }
	
	  instance.addHookOnce('afterRemoveRow', undoneCallback);
	  instance.alter('remove_row', this.index, this.amount, 'UndoRedo.undo');
	};
	UndoRedo.CreateRowAction.prototype.redo = function (instance, redoneCallback) {
	  instance.addHookOnce('afterCreateRow', redoneCallback);
	  instance.alter('insert_row', this.index, this.amount, 'UndoRedo.redo');
	};
	
	/**
	 * Remove row action.
	 *
	 * @private
	 */
	UndoRedo.RemoveRowAction = function (index, data) {
	  this.index = index;
	  this.data = data;
	  this.actionType = 'remove_row';
	};
	(0, _object.inherit)(UndoRedo.RemoveRowAction, UndoRedo.Action);
	
	UndoRedo.RemoveRowAction.prototype.undo = function (instance, undoneCallback) {
	  instance.alter('insert_row', this.index, this.data.length, 'UndoRedo.undo');
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.populateFromArray(this.index, 0, this.data, void 0, void 0, 'UndoRedo.undo');
	};
	UndoRedo.RemoveRowAction.prototype.redo = function (instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveRow', redoneCallback);
	  instance.alter('remove_row', this.index, this.data.length, 'UndoRedo.redo');
	};
	
	/**
	 * Create column action.
	 *
	 * @private
	 */
	UndoRedo.CreateColumnAction = function (index, amount) {
	  this.index = index;
	  this.amount = amount;
	  this.actionType = 'insert_col';
	};
	(0, _object.inherit)(UndoRedo.CreateColumnAction, UndoRedo.Action);
	
	UndoRedo.CreateColumnAction.prototype.undo = function (instance, undoneCallback) {
	  instance.addHookOnce('afterRemoveCol', undoneCallback);
	  instance.alter('remove_col', this.index, this.amount, 'UndoRedo.undo');
	};
	UndoRedo.CreateColumnAction.prototype.redo = function (instance, redoneCallback) {
	  instance.addHookOnce('afterCreateCol', redoneCallback);
	  instance.alter('insert_col', this.index, this.amount, 'UndoRedo.redo');
	};
	
	/**
	 * Remove column action.
	 *
	 * @private
	 */
	UndoRedo.RemoveColumnAction = function (index, indexes, data, headers, columnPositions) {
	  this.index = index;
	  this.indexes = indexes;
	  this.data = data;
	  this.amount = this.data[0].length;
	  this.headers = headers;
	  this.columnPositions = columnPositions.slice(0);
	  this.actionType = 'remove_col';
	};
	(0, _object.inherit)(UndoRedo.RemoveColumnAction, UndoRedo.Action);
	
	UndoRedo.RemoveColumnAction.prototype.undo = function (instance, undoneCallback) {
	  var _this = this;
	
	  var row = void 0;
	  var ascendingIndexes = this.indexes.slice(0).sort();
	  var sortByIndexes = function sortByIndexes(elem, j, arr) {
	    return arr[_this.indexes.indexOf(ascendingIndexes[j])];
	  };
	
	  var sortedData = [];
	  (0, _number.rangeEach)(this.data.length - 1, function (i) {
	    sortedData[i] = (0, _array.arrayMap)(_this.data[i], sortByIndexes);
	  });
	
	  var sortedHeaders = [];
	  sortedHeaders = (0, _array.arrayMap)(this.headers, sortByIndexes);
	
	  var changes = [];
	
	  // TODO: Temporary hook for undo/redo mess
	  instance.runHooks('beforeCreateCol', this.indexes[0], this.indexes.length, 'UndoRedo.undo');
	
	  (0, _number.rangeEach)(this.data.length - 1, function (i) {
	    row = instance.getSourceDataAtRow(i);
	
	    (0, _number.rangeEach)(ascendingIndexes.length - 1, function (j) {
	      row.splice(ascendingIndexes[j], 0, sortedData[i][j]);
	      changes.push([i, ascendingIndexes[j], null, sortedData[i][j]]);
	    });
	  });
	
	  // TODO: Temporary hook for undo/redo mess
	  if (instance.getPlugin('formulas')) {
	    instance.getPlugin('formulas').onAfterSetDataAtCell(changes);
	  }
	
	  if (typeof this.headers !== 'undefined') {
	    (0, _number.rangeEach)(sortedHeaders.length - 1, function (j) {
	      instance.getSettings().colHeaders.splice(ascendingIndexes[j], 0, sortedHeaders[j]);
	    });
	  }
	
	  if (instance.getPlugin('manualColumnMove')) {
	    instance.getPlugin('manualColumnMove').columnsMapper.__arrayMap = this.columnPositions;
	  }
	
	  instance.addHookOnce('afterRender', undoneCallback);
	
	  // TODO: Temporary hook for undo/redo mess
	  instance.runHooks('afterCreateCol', this.indexes[0], this.indexes.length, 'UndoRedo.undo');
	
	  if (instance.getPlugin('formulas')) {
	    instance.getPlugin('formulas').recalculateFull();
	  }
	
	  instance.render();
	};
	
	UndoRedo.RemoveColumnAction.prototype.redo = function (instance, redoneCallback) {
	  instance.addHookOnce('afterRemoveCol', redoneCallback);
	  instance.alter('remove_col', this.index, this.amount, 'UndoRedo.redo');
	};
	
	/**
	 * Cell alignment action.
	 *
	 * @private
	 */
	UndoRedo.CellAlignmentAction = function (stateBefore, range, type, alignment) {
	  this.stateBefore = stateBefore;
	  this.range = range;
	  this.type = type;
	  this.alignment = alignment;
	};
	UndoRedo.CellAlignmentAction.prototype.undo = function (instance, undoneCallback) {
	  var _this2 = this;
	
	  (0, _array.arrayEach)(this.range, function (_ref) {
	    var from = _ref.from,
	        to = _ref.to;
	
	    for (var row = from.row; row <= to.row; row += 1) {
	      for (var col = from.col; col <= to.col; col += 1) {
	        instance.setCellMeta(row, col, 'className', _this2.stateBefore[row][col] || ' htLeft');
	      }
	    }
	  });
	
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	UndoRedo.CellAlignmentAction.prototype.redo = function (instance, undoneCallback) {
	  (0, _utils.align)(this.range, this.type, this.alignment, function (row, col) {
	    return instance.getCellMeta(row, col);
	  }, function (row, col, key, value) {
	    return instance.setCellMeta(row, col, key, value);
	  });
	
	  instance.addHookOnce('afterRender', undoneCallback);
	  instance.render();
	};
	
	/**
	 * Filters action.
	 *
	 * @private
	 */
	UndoRedo.FiltersAction = function (conditionsStack) {
	  this.conditionsStack = conditionsStack;
	  this.actionType = 'filter';
	};
	(0, _object.inherit)(UndoRedo.FiltersAction, UndoRedo.Action);
	
	UndoRedo.FiltersAction.prototype.undo = function (instance, undoneCallback) {
	  var filters = instance.getPlugin('filters');
	
	  instance.addHookOnce('afterRender', undoneCallback);
	
	  filters.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1));
	  filters.filter();
	};
	UndoRedo.FiltersAction.prototype.redo = function (instance, redoneCallback) {
	  var filters = instance.getPlugin('filters');
	
	  instance.addHookOnce('afterRender', redoneCallback);
	
	  filters.conditionCollection.importAllConditions(this.conditionsStack);
	  filters.filter();
	};
	
	/**
	 * Merge Cells action.
	 * @util
	 */
	
	var MergeCellsAction = function (_UndoRedo$Action) {
	  _inherits(MergeCellsAction, _UndoRedo$Action);
	
	  function MergeCellsAction(instance, cellRange) {
	    _classCallCheck(this, MergeCellsAction);
	
	    var _this3 = _possibleConstructorReturn(this, (MergeCellsAction.__proto__ || Object.getPrototypeOf(MergeCellsAction)).call(this));
	
	    _this3.cellRange = cellRange;
	    _this3.rangeData = instance.getData(cellRange.from.row, cellRange.from.col, cellRange.to.row, cellRange.to.col);
	    return _this3;
	  }
	
	  _createClass(MergeCellsAction, [{
	    key: 'undo',
	    value: function undo(instance, undoneCallback) {
	      var mergeCellsPlugin = instance.getPlugin('mergeCells');
	      instance.addHookOnce('afterRender', undoneCallback);
	
	      mergeCellsPlugin.unmergeRange(this.cellRange, true);
	      instance.populateFromArray(this.cellRange.from.row, this.cellRange.from.col, this.rangeData, void 0, void 0, 'MergeCells');
	    }
	  }, {
	    key: 'redo',
	    value: function redo(instance, redoneCallback) {
	      var mergeCellsPlugin = instance.getPlugin('mergeCells');
	      instance.addHookOnce('afterRender', redoneCallback);
	
	      mergeCellsPlugin.mergeRange(this.cellRange);
	    }
	  }]);
	
	  return MergeCellsAction;
	}(UndoRedo.Action);
	
	UndoRedo.MergeCellsAction = MergeCellsAction;
	
	/**
	 * Unmerge Cells action.
	 * @util
	 */
	
	var UnmergeCellsAction = function (_UndoRedo$Action2) {
	  _inherits(UnmergeCellsAction, _UndoRedo$Action2);
	
	  function UnmergeCellsAction(instance, cellRange) {
	    _classCallCheck(this, UnmergeCellsAction);
	
	    var _this4 = _possibleConstructorReturn(this, (UnmergeCellsAction.__proto__ || Object.getPrototypeOf(UnmergeCellsAction)).call(this));
	
	    _this4.cellRange = cellRange;
	    return _this4;
	  }
	
	  _createClass(UnmergeCellsAction, [{
	    key: 'undo',
	    value: function undo(instance, undoneCallback) {
	      var mergeCellsPlugin = instance.getPlugin('mergeCells');
	      instance.addHookOnce('afterRender', undoneCallback);
	
	      mergeCellsPlugin.mergeRange(this.cellRange, true);
	    }
	  }, {
	    key: 'redo',
	    value: function redo(instance, redoneCallback) {
	      var mergeCellsPlugin = instance.getPlugin('mergeCells');
	      instance.addHookOnce('afterRender', redoneCallback);
	
	      mergeCellsPlugin.unmergeRange(this.cellRange, true);
	      instance.render();
	    }
	  }]);
	
	  return UnmergeCellsAction;
	}(UndoRedo.Action);
	
	UndoRedo.UnmergeCellsAction = UnmergeCellsAction;
	
	/**
	 * ManualRowMove action.
	 *
	 * @private
	 * @TODO: removeRow undo should works on logical index
	 */
	UndoRedo.RowMoveAction = function (movedRows, target) {
	  this.rows = movedRows.slice();
	  this.target = target;
	};
	(0, _object.inherit)(UndoRedo.RowMoveAction, UndoRedo.Action);
	
	UndoRedo.RowMoveAction.prototype.undo = function (instance, undoneCallback) {
	  var manualRowMove = instance.getPlugin('manualRowMove');
	
	  instance.addHookOnce('afterRender', undoneCallback);
	
	  var mod = this.rows[0] < this.target ? -1 * this.rows.length : 0;
	  var newTarget = this.rows[0] > this.target ? this.rows[0] + this.rows.length : this.rows[0];
	  var newRows = [];
	  var rowsLen = this.rows.length + mod;
	
	  for (var i = mod; i < rowsLen; i += 1) {
	    newRows.push(this.target + i);
	  }
	
	  manualRowMove.moveRows(newRows.slice(), newTarget);
	  instance.render();
	
	  instance.selectCell(this.rows[0], 0, this.rows[this.rows.length - 1], instance.countCols() - 1, false, false);
	};
	UndoRedo.RowMoveAction.prototype.redo = function (instance, redoneCallback) {
	  var manualRowMove = instance.getPlugin('manualRowMove');
	
	  instance.addHookOnce('afterRender', redoneCallback);
	  manualRowMove.moveRows(this.rows.slice(), this.target);
	  instance.render();
	  var startSelection = this.rows[0] < this.target ? this.target - this.rows.length : this.target;
	
	  instance.selectCell(startSelection, 0, startSelection + this.rows.length - 1, instance.countCols() - 1, false, false);
	};
	
	function init() {
	  var instance = this;
	  var pluginEnabled = typeof instance.getSettings().undo === 'undefined' || instance.getSettings().undo;
	
	  if (pluginEnabled) {
	    if (!instance.undoRedo) {
	      /**
	       * Instance of Handsontable.UndoRedo Plugin {@link Handsontable.UndoRedo}
	       *
	       * @alias undoRedo
	       * @memberof! Handsontable.Core#
	       * @type {UndoRedo}
	       */
	      instance.undoRedo = new UndoRedo(instance);
	
	      exposeUndoRedoMethods(instance);
	
	      instance.addHook('beforeKeyDown', onBeforeKeyDown);
	      instance.addHook('afterChange', onAfterChange);
	    }
	  } else if (instance.undoRedo) {
	    delete instance.undoRedo;
	
	    removeExposedUndoRedoMethods(instance);
	
	    instance.removeHook('beforeKeyDown', onBeforeKeyDown);
	    instance.removeHook('afterChange', onAfterChange);
	  }
	}
	
	function onBeforeKeyDown(event) {
	  var instance = this;
	
	  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;
	
	  if (ctrlDown) {
	    if (event.keyCode === 89 || event.shiftKey && event.keyCode === 90) {
	      // CTRL + Y or CTRL + SHIFT + Z
	      instance.undoRedo.redo();
	      (0, _event.stopImmediatePropagation)(event);
	    } else if (event.keyCode === 90) {
	      // CTRL + Z
	      instance.undoRedo.undo();
	      (0, _event.stopImmediatePropagation)(event);
	    }
	  }
	}
	
	function onAfterChange(changes, source) {
	  var instance = this;
	  if (source === 'loadData') {
	    return instance.undoRedo.clear();
	  }
	}
	
	function exposeUndoRedoMethods(instance) {
	  /**
	   * {@link UndoRedo#undo}
	   * @alias undo
	   * @memberof! Handsontable.Core#
	   */
	  instance.undo = function () {
	    return instance.undoRedo.undo();
	  };
	
	  /**
	   * {@link UndoRedo#redo}
	   * @alias redo
	   * @memberof! Handsontable.Core#
	   */
	  instance.redo = function () {
	    return instance.undoRedo.redo();
	  };
	
	  /**
	   * {@link UndoRedo#isUndoAvailable}
	   * @alias isUndoAvailable
	   * @memberof! Handsontable.Core#
	   */
	  instance.isUndoAvailable = function () {
	    return instance.undoRedo.isUndoAvailable();
	  };
	
	  /**
	   * {@link UndoRedo#isRedoAvailable}
	   * @alias isRedoAvailable
	   * @memberof! Handsontable.Core#
	   */
	  instance.isRedoAvailable = function () {
	    return instance.undoRedo.isRedoAvailable();
	  };
	
	  /**
	   * {@link UndoRedo#clear}
	   * @alias clearUndo
	   * @memberof! Handsontable.Core#
	   */
	  instance.clearUndo = function () {
	    return instance.undoRedo.clear();
	  };
	}
	
	function removeExposedUndoRedoMethods(instance) {
	  delete instance.undo;
	  delete instance.redo;
	  delete instance.isUndoAvailable;
	  delete instance.isRedoAvailable;
	  delete instance.clearUndo;
	}
	
	var hook = _pluginHooks2.default.getSingleton();
	
	hook.add('afterInit', init);
	hook.add('afterUpdateSettings', init);
	
	hook.register('beforeUndo');
	hook.register('afterUndo');
	hook.register('beforeRedo');
	hook.register('afterRedo');
	
	exports.default = UndoRedo;
	
	/***/ })
	/******/ ])["default"];
	});
	//# sourceMappingURL=handsontable.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(268).setImmediate, __webpack_require__(268).clearImmediate, __webpack_require__(32)))

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
	            (typeof self !== "undefined" && self) ||
	            window;
	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(scope, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(269);
	// On some exotic environments, it's not clear which object `setimmediate` was
	// able to install onto.  Search each possibility in the same order as the
	// `setimmediate` library.
	exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
	                       (typeof global !== "undefined" && global.setImmediate) ||
	                       (this && this.setImmediate);
	exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
	                         (typeof global !== "undefined" && global.clearImmediate) ||
	                         (this && this.clearImmediate);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(32)))

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.20.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	var hookCallback;
	
	function hooks () {
	    return hookCallback.apply(null, arguments);
	}
	
	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}
	
	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}
	
	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}
	
	function isObjectEmpty(obj) {
	    if (Object.getOwnPropertyNames) {
	        return (Object.getOwnPropertyNames(obj).length === 0);
	    } else {
	        var k;
	        for (k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                return false;
	            }
	        }
	        return true;
	    }
	}
	
	function isUndefined(input) {
	    return input === void 0;
	}
	
	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}
	
	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}
	
	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}
	
	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}
	
	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }
	
	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }
	
	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }
	
	    return a;
	}
	
	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}
	
	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}
	
	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}
	
	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;
	
	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	}
	
	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.weekdayMismatch &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));
	
	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }
	
	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}
	
	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }
	
	    return m;
	}
	
	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];
	
	function copyConfig(to, from) {
	    var i, prop, val;
	
	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }
	
	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }
	
	    return to;
	}
	
	var updateInProgress = false;
	
	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}
	
	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}
	
	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}
	
	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;
	
	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }
	
	    return value;
	}
	
	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}
	
	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}
	
	function deprecate(msg, fn) {
	    var firstTime = true;
	
	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}
	
	var deprecations = {};
	
	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}
	
	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}
	
	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}
	
	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}
	
	var keys;
	
	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}
	
	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};
	
	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}
	
	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};
	
	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];
	
	    if (format || !formatUpper) {
	        return format;
	    }
	
	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });
	
	    return this._longDateFormat[key];
	}
	
	var defaultInvalidDate = 'Invalid date';
	
	function invalidDate () {
	    return this._invalidDate;
	}
	
	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}
	
	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};
	
	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}
	
	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}
	
	var aliases = {};
	
	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}
	
	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}
	
	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;
	
	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }
	
	    return normalizedInput;
	}
	
	var priorities = {};
	
	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}
	
	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}
	
	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}
	
	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	var formatFunctions = {};
	
	var formatTokenFunctions = {};
	
	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}
	
	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}
	
	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;
	
	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }
	
	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}
	
	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }
	
	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	    return formatFunctions[format](m);
	}
	
	function expandFormat(format, locale) {
	    var i = 5;
	
	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }
	
	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }
	
	    return format;
	}
	
	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
	
	
	var regexes = {};
	
	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}
	
	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }
	
	    return regexes[token](config._strict, config._locale);
	}
	
	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}
	
	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}
	
	var tokens = {};
	
	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}
	
	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}
	
	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}
	
	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;
	
	// FORMATTING
	
	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});
	
	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});
	
	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	// ALIASES
	
	addUnitAlias('year', 'y');
	
	// PRIORITIES
	
	addUnitPriority('year', 1);
	
	// PARSING
	
	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);
	
	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});
	
	// HELPERS
	
	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}
	
	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}
	
	// HOOKS
	
	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};
	
	// MOMENTS
	
	var getSetYear = makeGetSet('FullYear', true);
	
	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}
	
	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}
	
	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}
	
	function set$1 (mom, unit, value) {
	    if (mom.isValid() && !isNaN(value)) {
	        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	        }
	        else {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	}
	
	// MOMENTS
	
	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}
	
	
	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}
	
	function mod(n, x) {
	    return ((n % x) + x) % x;
	}
	
	var indexOf;
	
	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}
	
	function daysInMonth(year, month) {
	    if (isNaN(year) || isNaN(month)) {
	        return NaN;
	    }
	    var modMonth = mod(month, 12);
	    year += (month - modMonth) / 12;
	    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	}
	
	// FORMATTING
	
	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});
	
	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});
	
	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});
	
	// ALIASES
	
	addUnitAlias('month', 'M');
	
	// PRIORITY
	
	addUnitPriority('month', 8);
	
	// PARSING
	
	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});
	
	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});
	
	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});
	
	// LOCALES
	
	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;
	
	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }
	
	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }
	
	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function setMonth (mom, value) {
	    var dayOfMonth;
	
	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }
	
	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }
	
	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}
	
	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}
	
	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}
	
	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}
	
	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}
	
	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}
	
	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);
	
	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}
	
	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));
	
	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}
	
	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	    return -fwdlw + fwd - 1;
	}
	
	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;
	
	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }
	
	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}
	
	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;
	
	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }
	
	    return {
	        week: resWeek,
	        year: resYear
	    };
	}
	
	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}
	
	// FORMATTING
	
	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	// ALIASES
	
	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');
	
	// PRIORITIES
	
	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);
	
	// PARSING
	
	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);
	
	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});
	
	// HELPERS
	
	// LOCALES
	
	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}
	
	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};
	
	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}
	
	function localeFirstDayOfYear () {
	    return this._week.doy;
	}
	
	// MOMENTS
	
	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	// FORMATTING
	
	addFormatToken('d', 0, 'do', 'day');
	
	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});
	
	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});
	
	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});
	
	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');
	
	// ALIASES
	
	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');
	
	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);
	
	// PARSING
	
	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});
	
	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});
	
	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});
	
	// HELPERS
	
	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }
	
	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }
	
	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }
	
	    return null;
	}
	
	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}
	
	// LOCALES
	
	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}
	
	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}
	
	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}
	
	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];
	
	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;
	
	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }
	
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }
	
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	
	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}
	
	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}
	
	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	
	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.
	
	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}
	
	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}
	
	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}
	
	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}
	
	
	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;
	
	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	function hFormat() {
	    return this.hours() % 12 || 12;
	}
	
	function kFormat() {
	    return this.hours() || 24;
	}
	
	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);
	
	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}
	
	meridiem('a', true);
	meridiem('A', false);
	
	// ALIASES
	
	addUnitAlias('hour', 'h');
	
	// PRIORITY
	addUnitPriority('hour', 13);
	
	// PARSING
	
	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}
	
	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);
	
	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);
	
	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});
	
	// LOCALES
	
	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}
	
	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}
	
	
	// MOMENTS
	
	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);
	
	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,
	
	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,
	
	    week: defaultLocaleWeek,
	
	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,
	
	    meridiemParse: defaultLocaleMeridiemParse
	};
	
	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;
	
	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}
	
	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;
	
	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}
	
	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            var aliasedRequire = require;
	            __webpack_require__(271)("./" + name);
	            getSetGlobalLocale(oldLocale);
	        } catch (e) {}
	    }
	    return locales[name];
	}
	
	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }
	
	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }
	
	    return globalLocale._abbr;
	}
	
	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }
	
	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);
	
	
	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}
	
	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, tmpLocale, parentConfig = baseConfig;
	        // MERGE
	        tmpLocale = loadLocale(name);
	        if (tmpLocale != null) {
	            parentConfig = tmpLocale._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;
	
	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}
	
	// returns locale data
	function getLocale (key) {
	    var locale;
	
	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }
	
	    if (!key) {
	        return globalLocale;
	    }
	
	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }
	
	    return chooseLocale(key);
	}
	
	function listLocales() {
	    return keys(locales);
	}
	
	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;
	
	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;
	
	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }
	
	        getParsingFlags(m).overflow = overflow;
	    }
	
	    return m;
	}
	
	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}
	
	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}
	
	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, expectedWeekday, yearToUse;
	
	    if (config._d) {
	        return;
	    }
	
	    currentDate = currentDateArray(config);
	
	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }
	
	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }
	
	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }
	
	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }
	
	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }
	
	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }
	
	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
	
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }
	
	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	
	    // check for mismatching day of week
	    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	        getParsingFlags(config).weekdayMismatch = true;
	    }
	}
	
	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;
	
	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;
	
	        var curWeek = weekOfYear(createLocal(), dow, doy);
	
	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	        // Default to current week.
	        week = defaults(w.w, curWeek.week);
	
	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}
	
	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];
	
	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];
	
	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;
	
	    if (match) {
	        getParsingFlags(config).iso = true;
	
	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}
	
	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
	
	function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	    var result = [
	        untruncateYear(yearStr),
	        defaultLocaleMonthsShort.indexOf(monthStr),
	        parseInt(dayStr, 10),
	        parseInt(hourStr, 10),
	        parseInt(minuteStr, 10)
	    ];
	
	    if (secondStr) {
	        result.push(parseInt(secondStr, 10));
	    }
	
	    return result;
	}
	
	function untruncateYear(yearStr) {
	    var year = parseInt(yearStr, 10);
	    if (year <= 49) {
	        return 2000 + year;
	    } else if (year <= 999) {
	        return 1900 + year;
	    }
	    return year;
	}
	
	function preprocessRFC2822(s) {
	    // Remove comments and folding whitespace and replace multiple-spaces with a single space
	    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
	}
	
	function checkWeekday(weekdayStr, parsedInput, config) {
	    if (weekdayStr) {
	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	        if (weekdayProvided !== weekdayActual) {
	            getParsingFlags(config).weekdayMismatch = true;
	            config._isValid = false;
	            return false;
	        }
	    }
	    return true;
	}
	
	var obsOffsets = {
	    UT: 0,
	    GMT: 0,
	    EDT: -4 * 60,
	    EST: -5 * 60,
	    CDT: -5 * 60,
	    CST: -6 * 60,
	    MDT: -6 * 60,
	    MST: -7 * 60,
	    PDT: -7 * 60,
	    PST: -8 * 60
	};
	
	function calculateOffset(obsOffset, militaryOffset, numOffset) {
	    if (obsOffset) {
	        return obsOffsets[obsOffset];
	    } else if (militaryOffset) {
	        // the only allowed military tz is Z
	        return 0;
	    } else {
	        var hm = parseInt(numOffset, 10);
	        var m = hm % 100, h = (hm - m) / 100;
	        return h * 60 + m;
	    }
	}
	
	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var match = rfc2822.exec(preprocessRFC2822(config._i));
	    if (match) {
	        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	        if (!checkWeekday(match[1], parsedArray, config)) {
	            return;
	        }
	
	        config._a = parsedArray;
	        config._tzm = calculateOffset(match[8], match[9], match[10]);
	
	        config._d = createUTCDate.apply(null, config._a);
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}
	
	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);
	
	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }
	
	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }
	
	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }
	
	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}
	
	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);
	
	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};
	
	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};
	
	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;
	
	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;
	
	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }
	
	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }
	
	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }
	
	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	    configFromArray(config);
	    checkOverflow(config);
	}
	
	
	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;
	
	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}
	
	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,
	
	        scoreToBeat,
	        i,
	        currentScore;
	
	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }
	
	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);
	
	        if (!isValid(tempConfig)) {
	            continue;
	        }
	
	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	        getParsingFlags(tempConfig).score = currentScore;
	
	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }
	
	    extend(config, bestMoment || tempConfig);
	}
	
	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }
	
	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });
	
	    configFromArray(config);
	}
	
	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }
	
	    return res;
	}
	
	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;
	
	    config._locale = config._locale || getLocale(config._l);
	
	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }
	
	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }
	
	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }
	
	    if (!isValid(config)) {
	        config._d = null;
	    }
	
	    return config;
	}
	
	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}
	
	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};
	
	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }
	
	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;
	
	    return createFromConfig(c);
	}
	
	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}
	
	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}
	
	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isBefore', args);
	}
	
	function max () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isAfter', args);
	}
	
	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};
	
	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
	
	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }
	
	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }
	
	    return true;
	}
	
	function isValid$1() {
	    return this._isValid;
	}
	
	function createInvalid$1() {
	    return createDuration(NaN);
	}
	
	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;
	
	    this._isValid = isDurationValid(normalizedInput);
	
	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible to translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;
	
	    this._data = {};
	
	    this._locale = getLocale();
	
	    this._bubble();
	}
	
	function isDuration (obj) {
	    return obj instanceof Duration;
	}
	
	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}
	
	// FORMATTING
	
	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}
	
	offset('Z', ':');
	offset('ZZ', '');
	
	// PARSING
	
	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});
	
	// HELPERS
	
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;
	
	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);
	
	    if (matches === null) {
	        return null;
	    }
	
	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}
	
	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}
	
	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}
	
	// HOOKS
	
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};
	
	// MOMENTS
	
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}
	
	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }
	
	        this.utcOffset(input, keepLocalTime);
	
	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}
	
	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}
	
	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;
	
	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}
	
	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}
	
	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;
	
	    return (this.utcOffset() - input) % 60 === 0;
	}
	
	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}
	
	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }
	
	    var c = {};
	
	    copyConfig(c, this);
	    c = prepareConfig(c);
	
	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }
	
	    return this._isDSTShifted;
	}
	
	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}
	
	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}
	
	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}
	
	// ASP.NET json date format regex
	var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;
	
	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }
	
	    ret = new Duration(duration);
	
	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }
	
	    return ret;
	}
	
	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;
	
	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}
	
	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};
	
	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }
	
	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	    return res;
	}
	
	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }
	
	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }
	
	    return res;
	}
	
	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }
	
	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}
	
	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);
	
	    if (!mom.isValid()) {
	        // No op
	        return;
	    }
	
	    updateOffset = updateOffset == null ? true : updateOffset;
	
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}
	
	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');
	
	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}
	
	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';
	
	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}
	
	function clone () {
	    return new Moment(this);
	}
	
	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}
	
	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}
	
	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}
	
	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}
	
	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}
	
	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}
	
	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;
	
	    if (!this.isValid()) {
	        return NaN;
	    }
	
	    that = cloneWithOffset(input, this);
	
	    if (!that.isValid()) {
	        return NaN;
	    }
	
	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	    units = normalizeUnits(units);
	
	    switch (units) {
	        case 'year': output = monthDiff(this, that) / 12; break;
	        case 'month': output = monthDiff(this, that); break;
	        case 'quarter': output = monthDiff(this, that) / 3; break;
	        case 'second': output = (this - that) / 1e3; break; // 1000
	        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	        default: output = this - that;
	    }
	
	    return asFloat ? output : absFloor(output);
	}
	
	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;
	
	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }
	
	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}
	
	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}
	
	function toISOString(keepOffset) {
	    if (!this.isValid()) {
	        return null;
	    }
	    var utc = keepOffset !== true;
	    var m = utc ? this.clone().utc() : this;
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }
	    if (isFunction(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        if (utc) {
	            return this.toDate().toISOString();
	        } else {
	            return new Date(this._d.valueOf()).toISOString().replace('Z', formatMoment(m, 'Z'));
	        }
	    }
	    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	}
	
	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';
	
	    return this.format(prefix + year + datetime + suffix);
	}
	
	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}
	
	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}
	
	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}
	
	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;
	
	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}
	
	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);
	
	function localeData () {
	    return this._locale;
	}
	
	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }
	
	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }
	
	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }
	
	    return this;
	}
	
	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }
	
	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }
	
	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}
	
	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}
	
	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}
	
	function toDate () {
	    return new Date(this.valueOf());
	}
	
	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}
	
	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}
	
	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}
	
	function isValid$2 () {
	    return isValid(this);
	}
	
	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}
	
	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}
	
	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}
	
	// FORMATTING
	
	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});
	
	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});
	
	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}
	
	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	// ALIASES
	
	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');
	
	// PRIORITY
	
	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);
	
	
	// PARSING
	
	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);
	
	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});
	
	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});
	
	// MOMENTS
	
	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}
	
	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}
	
	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}
	
	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}
	
	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}
	
	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}
	
	// FORMATTING
	
	addFormatToken('Q', 0, 'Qo', 'quarter');
	
	// ALIASES
	
	addUnitAlias('quarter', 'Q');
	
	// PRIORITY
	
	addUnitPriority('quarter', 7);
	
	// PARSING
	
	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});
	
	// MOMENTS
	
	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}
	
	// FORMATTING
	
	addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	// ALIASES
	
	addUnitAlias('date', 'D');
	
	// PRIOROITY
	addUnitPriority('date', 9);
	
	// PARSING
	
	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});
	
	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0]);
	});
	
	// MOMENTS
	
	var getSetDayOfMonth = makeGetSet('Date', true);
	
	// FORMATTING
	
	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	// ALIASES
	
	addUnitAlias('dayOfYear', 'DDD');
	
	// PRIORITY
	addUnitPriority('dayOfYear', 4);
	
	// PARSING
	
	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});
	
	// HELPERS
	
	// MOMENTS
	
	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}
	
	// FORMATTING
	
	addFormatToken('m', ['mm', 2], 0, 'minute');
	
	// ALIASES
	
	addUnitAlias('minute', 'm');
	
	// PRIORITY
	
	addUnitPriority('minute', 14);
	
	// PARSING
	
	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);
	
	// MOMENTS
	
	var getSetMinute = makeGetSet('Minutes', false);
	
	// FORMATTING
	
	addFormatToken('s', ['ss', 2], 0, 'second');
	
	// ALIASES
	
	addUnitAlias('second', 's');
	
	// PRIORITY
	
	addUnitPriority('second', 15);
	
	// PARSING
	
	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);
	
	// MOMENTS
	
	var getSetSecond = makeGetSet('Seconds', false);
	
	// FORMATTING
	
	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});
	
	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});
	
	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});
	
	
	// ALIASES
	
	addUnitAlias('millisecond', 'ms');
	
	// PRIORITY
	
	addUnitPriority('millisecond', 16);
	
	// PARSING
	
	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);
	
	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}
	
	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}
	
	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS
	
	var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	// FORMATTING
	
	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');
	
	// MOMENTS
	
	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}
	
	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}
	
	var proto = Moment.prototype;
	
	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$2;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;
	
	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	
	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	
	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;
	
	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	
	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	
	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;
	
	// Hour
	proto.hour = proto.hours = getSetHour;
	
	// Minute
	proto.minute = proto.minutes = getSetMinute;
	
	// Second
	proto.second = proto.seconds = getSetSecond;
	
	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	
	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;
	
	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	
	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	function createUnix (input) {
	    return createLocal(input * 1000);
	}
	
	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}
	
	function preParsePostFormat (string) {
	    return string;
	}
	
	var proto$1 = Locale.prototype;
	
	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;
	
	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;
	
	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;
	
	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
	
	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;
	
	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}
	
	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }
	
	    format = format || '';
	
	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}
	
	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;
	
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    }
	
	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;
	
	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}
	
	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}
	
	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}
	
	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}
	
	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}
	
	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}
	
	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
	var mathAbs = Math.abs;
	
	function abs () {
	    var data           = this._data;
	
	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);
	
	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);
	
	    return this;
	}
	
	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);
	
	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;
	
	    return duration._bubble();
	}
	
	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}
	
	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}
	
	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}
	
	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;
	
	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }
	
	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;
	
	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;
	
	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;
	
	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;
	
	    days += absFloor(hours / 24);
	
	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));
	
	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;
	
	    data.days   = days;
	    data.months = months;
	    data.years  = years;
	
	    return this;
	}
	
	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}
	
	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}
	
	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;
	
	    units = normalizeUnits(units);
	
	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}
	
	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}
	
	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}
	
	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');
	
	function clone$1 () {
	    return createDuration(this);
	}
	
	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}
	
	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}
	
	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');
	
	function weeks () {
	    return absFloor(this.days() / 7);
	}
	
	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};
	
	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}
	
	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));
	
	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];
	
	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}
	
	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}
	
	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}
	
	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }
	
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);
	
	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }
	
	    return locale.postformat(output);
	}
	
	var abs$1 = Math.abs;
	
	function sign(x) {
	    return ((x > 0) - (x < 0)) || +x;
	}
	
	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }
	
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;
	
	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;
	
	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;
	
	
	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	    var total = this.asSeconds();
	
	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }
	
	    var totalSign = total < 0 ? '-' : '';
	    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
	    return totalSign + 'P' +
	        (Y ? ymSign + Y + 'Y' : '') +
	        (M ? ymSign + M + 'M' : '') +
	        (D ? daysSign + D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? hmsSign + h + 'H' : '') +
	        (m ? hmsSign + m + 'M' : '') +
	        (s ? hmsSign + s + 'S' : '');
	}
	
	var proto$2 = Duration.prototype;
	
	proto$2.isValid        = isValid$1;
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.clone          = clone$1;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;
	
	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;
	
	// Side effect imports
	
	// FORMATTING
	
	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');
	
	// PARSING
	
	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});
	
	// Side effect imports
	
	
	hooks.version = '2.20.1';
	
	setHookCallback(createLocal);
	
	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;
	
	// currently HTML5 input type only supports 24-hour formats
	hooks.HTML5_FMT = {
	    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
	    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
	    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
	    DATE: 'YYYY-MM-DD',                             // <input type="date" />
	    TIME: 'HH:mm',                                  // <input type="time" />
	    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
	    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
	    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
	    MONTH: 'YYYY-MM'                                // <input type="month" />
	};
	
	return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(199)(module)))

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./af": 272,
		"./af.js": 272,
		"./ar": 273,
		"./ar-dz": 274,
		"./ar-dz.js": 274,
		"./ar-kw": 275,
		"./ar-kw.js": 275,
		"./ar-ly": 276,
		"./ar-ly.js": 276,
		"./ar-ma": 277,
		"./ar-ma.js": 277,
		"./ar-sa": 278,
		"./ar-sa.js": 278,
		"./ar-tn": 279,
		"./ar-tn.js": 279,
		"./ar.js": 273,
		"./az": 280,
		"./az.js": 280,
		"./be": 281,
		"./be.js": 281,
		"./bg": 282,
		"./bg.js": 282,
		"./bm": 283,
		"./bm.js": 283,
		"./bn": 284,
		"./bn.js": 284,
		"./bo": 285,
		"./bo.js": 285,
		"./br": 286,
		"./br.js": 286,
		"./bs": 287,
		"./bs.js": 287,
		"./ca": 288,
		"./ca.js": 288,
		"./cs": 289,
		"./cs.js": 289,
		"./cv": 290,
		"./cv.js": 290,
		"./cy": 291,
		"./cy.js": 291,
		"./da": 292,
		"./da.js": 292,
		"./de": 293,
		"./de-at": 294,
		"./de-at.js": 294,
		"./de-ch": 295,
		"./de-ch.js": 295,
		"./de.js": 293,
		"./dv": 296,
		"./dv.js": 296,
		"./el": 297,
		"./el.js": 297,
		"./en-au": 298,
		"./en-au.js": 298,
		"./en-ca": 299,
		"./en-ca.js": 299,
		"./en-gb": 300,
		"./en-gb.js": 300,
		"./en-ie": 301,
		"./en-ie.js": 301,
		"./en-nz": 302,
		"./en-nz.js": 302,
		"./eo": 303,
		"./eo.js": 303,
		"./es": 304,
		"./es-do": 305,
		"./es-do.js": 305,
		"./es-us": 306,
		"./es-us.js": 306,
		"./es.js": 304,
		"./et": 307,
		"./et.js": 307,
		"./eu": 308,
		"./eu.js": 308,
		"./fa": 309,
		"./fa.js": 309,
		"./fi": 310,
		"./fi.js": 310,
		"./fo": 311,
		"./fo.js": 311,
		"./fr": 312,
		"./fr-ca": 313,
		"./fr-ca.js": 313,
		"./fr-ch": 314,
		"./fr-ch.js": 314,
		"./fr.js": 312,
		"./fy": 315,
		"./fy.js": 315,
		"./gd": 316,
		"./gd.js": 316,
		"./gl": 317,
		"./gl.js": 317,
		"./gom-latn": 318,
		"./gom-latn.js": 318,
		"./gu": 319,
		"./gu.js": 319,
		"./he": 320,
		"./he.js": 320,
		"./hi": 321,
		"./hi.js": 321,
		"./hr": 322,
		"./hr.js": 322,
		"./hu": 323,
		"./hu.js": 323,
		"./hy-am": 324,
		"./hy-am.js": 324,
		"./id": 325,
		"./id.js": 325,
		"./is": 326,
		"./is.js": 326,
		"./it": 327,
		"./it.js": 327,
		"./ja": 328,
		"./ja.js": 328,
		"./jv": 329,
		"./jv.js": 329,
		"./ka": 330,
		"./ka.js": 330,
		"./kk": 331,
		"./kk.js": 331,
		"./km": 332,
		"./km.js": 332,
		"./kn": 333,
		"./kn.js": 333,
		"./ko": 334,
		"./ko.js": 334,
		"./ky": 335,
		"./ky.js": 335,
		"./lb": 336,
		"./lb.js": 336,
		"./lo": 337,
		"./lo.js": 337,
		"./lt": 338,
		"./lt.js": 338,
		"./lv": 339,
		"./lv.js": 339,
		"./me": 340,
		"./me.js": 340,
		"./mi": 341,
		"./mi.js": 341,
		"./mk": 342,
		"./mk.js": 342,
		"./ml": 343,
		"./ml.js": 343,
		"./mr": 344,
		"./mr.js": 344,
		"./ms": 345,
		"./ms-my": 346,
		"./ms-my.js": 346,
		"./ms.js": 345,
		"./mt": 347,
		"./mt.js": 347,
		"./my": 348,
		"./my.js": 348,
		"./nb": 349,
		"./nb.js": 349,
		"./ne": 350,
		"./ne.js": 350,
		"./nl": 351,
		"./nl-be": 352,
		"./nl-be.js": 352,
		"./nl.js": 351,
		"./nn": 353,
		"./nn.js": 353,
		"./pa-in": 354,
		"./pa-in.js": 354,
		"./pl": 355,
		"./pl.js": 355,
		"./pt": 356,
		"./pt-br": 357,
		"./pt-br.js": 357,
		"./pt.js": 356,
		"./ro": 358,
		"./ro.js": 358,
		"./ru": 359,
		"./ru.js": 359,
		"./sd": 360,
		"./sd.js": 360,
		"./se": 361,
		"./se.js": 361,
		"./si": 362,
		"./si.js": 362,
		"./sk": 363,
		"./sk.js": 363,
		"./sl": 364,
		"./sl.js": 364,
		"./sq": 365,
		"./sq.js": 365,
		"./sr": 366,
		"./sr-cyrl": 367,
		"./sr-cyrl.js": 367,
		"./sr.js": 366,
		"./ss": 368,
		"./ss.js": 368,
		"./sv": 369,
		"./sv.js": 369,
		"./sw": 370,
		"./sw.js": 370,
		"./ta": 371,
		"./ta.js": 371,
		"./te": 372,
		"./te.js": 372,
		"./tet": 373,
		"./tet.js": 373,
		"./th": 374,
		"./th.js": 374,
		"./tl-ph": 375,
		"./tl-ph.js": 375,
		"./tlh": 376,
		"./tlh.js": 376,
		"./tr": 377,
		"./tr.js": 377,
		"./tzl": 378,
		"./tzl.js": 378,
		"./tzm": 379,
		"./tzm-latn": 380,
		"./tzm-latn.js": 380,
		"./tzm.js": 379,
		"./uk": 381,
		"./uk.js": 381,
		"./ur": 382,
		"./ur.js": 382,
		"./uz": 383,
		"./uz-latn": 384,
		"./uz-latn.js": 384,
		"./uz.js": 383,
		"./vi": 385,
		"./vi.js": 385,
		"./x-pseudo": 386,
		"./x-pseudo.js": 386,
		"./yo": 387,
		"./yo.js": 387,
		"./zh-cn": 388,
		"./zh-cn.js": 388,
		"./zh-hk": 389,
		"./zh-hk.js": 389,
		"./zh-tw": 390,
		"./zh-tw.js": 390
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 271;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var af = moment.defineLocale('af', {
	    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	    meridiemParse: /vm|nm/i,
	    isPM : function (input) {
	        return /^nm$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'vm' : 'VM';
	        } else {
	            return isLower ? 'nm' : 'NM';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Vandag om] LT',
	        nextDay : '[Môre om] LT',
	        nextWeek : 'dddd [om] LT',
	        lastDay : '[Gister om] LT',
	        lastWeek : '[Laas] dddd [om] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'oor %s',
	        past : '%s gelede',
	        s : '\'n paar sekondes',
	        ss : '%d sekondes',
	        m : '\'n minuut',
	        mm : '%d minute',
	        h : '\'n uur',
	        hh : '%d ure',
	        d : '\'n dag',
	        dd : '%d dae',
	        M : '\'n maand',
	        MM : '%d maande',
	        y : '\'n jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	    },
	    week : {
	        dow : 1, // Maandag is die eerste dag van die week.
	        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	    }
	});
	
	return af;
	
	})));


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];
	
	var ar = moment.defineLocale('ar', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        ss : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ar;
	
	})));


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arDz = moment.defineLocale('ar-dz', {
	    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        ss : '%d ثانية',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 4  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arDz;
	
	})));


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arKw = moment.defineLocale('ar-kw', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        ss : '%d ثانية',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arKw;
	
	})));


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '1',
	    '2': '2',
	    '3': '3',
	    '4': '4',
	    '5': '5',
	    '6': '6',
	    '7': '7',
	    '8': '8',
	    '9': '9',
	    '0': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];
	
	var arLy = moment.defineLocale('ar-ly', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        ss : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arLy;
	
	})));


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arMa = moment.defineLocale('ar-ma', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        ss : '%d ثانية',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arMa;
	
	})));


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	
	var arSa = moment.defineLocale('ar-sa', {
	    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        ss : '%d ثانية',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arSa;
	
	})));


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arTn = moment.defineLocale('ar-tn', {
	    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'في %s',
	        past: 'منذ %s',
	        s: 'ثوان',
	        ss : '%d ثانية',
	        m: 'دقيقة',
	        mm: '%d دقائق',
	        h: 'ساعة',
	        hh: '%d ساعات',
	        d: 'يوم',
	        dd: '%d أيام',
	        M: 'شهر',
	        MM: '%d أشهر',
	        y: 'سنة',
	        yy: '%d سنوات'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return arTn;
	
	})));


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '-inci',
	    5: '-inci',
	    8: '-inci',
	    70: '-inci',
	    80: '-inci',
	    2: '-nci',
	    7: '-nci',
	    20: '-nci',
	    50: '-nci',
	    3: '-üncü',
	    4: '-üncü',
	    100: '-üncü',
	    6: '-ncı',
	    9: '-uncu',
	    10: '-uncu',
	    30: '-uncu',
	    60: '-ıncı',
	    90: '-ıncı'
	};
	
	var az = moment.defineLocale('az', {
	    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[sabah saat] LT',
	        nextWeek : '[gələn həftə] dddd [saat] LT',
	        lastDay : '[dünən] LT',
	        lastWeek : '[keçən həftə] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s əvvəl',
	        s : 'birneçə saniyyə',
	        ss : '%d saniyə',
	        m : 'bir dəqiqə',
	        mm : '%d dəqiqə',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir il',
	        yy : '%d il'
	    },
	    meridiemParse: /gecə|səhər|gündüz|axşam/,
	    isPM : function (input) {
	        return /^(gündüz|axşam)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'gecə';
	        } else if (hour < 12) {
	            return 'səhər';
	        } else if (hour < 17) {
	            return 'gündüz';
	        } else {
	            return 'axşam';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '-ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return az;
	
	})));


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	        'dd': 'дзень_дні_дзён',
	        'MM': 'месяц_месяцы_месяцаў',
	        'yy': 'год_гады_гадоў'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвіліна' : 'хвіліну';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'гадзіна' : 'гадзіну';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	
	var be = moment.defineLocale('be', {
	    months : {
	        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	    },
	    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	    weekdays : {
	        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	    },
	    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сёння ў] LT',
	        nextDay: '[Заўтра ў] LT',
	        lastDay: '[Учора ў] LT',
	        nextWeek: function () {
	            return '[У] dddd [ў] LT';
	        },
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'праз %s',
	        past : '%s таму',
	        s : 'некалькі секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithPlural,
	        hh : relativeTimeWithPlural,
	        d : 'дзень',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночы|раніцы|дня|вечара/,
	    isPM : function (input) {
	        return /^(дня|вечара)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночы';
	        } else if (hour < 12) {
	            return 'раніцы';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечара';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return be;
	
	})));


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var bg = moment.defineLocale('bg', {
	    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Днес в] LT',
	        nextDay : '[Утре в] LT',
	        nextWeek : 'dddd [в] LT',
	        lastDay : '[Вчера в] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'след %s',
	        past : 'преди %s',
	        s : 'няколко секунди',
	        ss : '%d секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дни',
	        M : 'месец',
	        MM : '%d месеца',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bg;
	
	})));


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bambara [bm]
	//! author : Estelle Comment : https://github.com/estellecomment
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	// Language contact person : Abdoufata Kane : https://github.com/abdoufata
	
	var bm = moment.defineLocale('bm', {
	    months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
	    monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
	    weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
	    weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
	    weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'MMMM [tile] D [san] YYYY',
	        LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	        LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
	    },
	    calendar : {
	        sameDay : '[Bi lɛrɛ] LT',
	        nextDay : '[Sini lɛrɛ] LT',
	        nextWeek : 'dddd [don lɛrɛ] LT',
	        lastDay : '[Kunu lɛrɛ] LT',
	        lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s kɔnɔ',
	        past : 'a bɛ %s bɔ',
	        s : 'sanga dama dama',
	        ss : 'sekondi %d',
	        m : 'miniti kelen',
	        mm : 'miniti %d',
	        h : 'lɛrɛ kelen',
	        hh : 'lɛrɛ %d',
	        d : 'tile kelen',
	        dd : 'tile %d',
	        M : 'kalo kelen',
	        MM : 'kalo %d',
	        y : 'san kelen',
	        yy : 'san %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return bm;
	
	})));


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '১',
	    '2': '২',
	    '3': '৩',
	    '4': '৪',
	    '5': '৫',
	    '6': '৬',
	    '7': '৭',
	    '8': '৮',
	    '9': '৯',
	    '0': '০'
	};
	var numberMap = {
	    '১': '1',
	    '২': '2',
	    '৩': '3',
	    '৪': '4',
	    '৫': '5',
	    '৬': '6',
	    '৭': '7',
	    '৮': '8',
	    '৯': '9',
	    '০': '0'
	};
	
	var bn = moment.defineLocale('bn', {
	    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm সময়',
	        LTS : 'A h:mm:ss সময়',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm সময়',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	    },
	    calendar : {
	        sameDay : '[আজ] LT',
	        nextDay : '[আগামীকাল] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[গতকাল] LT',
	        lastWeek : '[গত] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s পরে',
	        past : '%s আগে',
	        s : 'কয়েক সেকেন্ড',
	        ss : '%d সেকেন্ড',
	        m : 'এক মিনিট',
	        mm : '%d মিনিট',
	        h : 'এক ঘন্টা',
	        hh : '%d ঘন্টা',
	        d : 'এক দিন',
	        dd : '%d দিন',
	        M : 'এক মাস',
	        MM : '%d মাস',
	        y : 'এক বছর',
	        yy : '%d বছর'
	    },
	    preparse: function (string) {
	        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'রাত';
	        } else if (hour < 10) {
	            return 'সকাল';
	        } else if (hour < 17) {
	            return 'দুপুর';
	        } else if (hour < 20) {
	            return 'বিকাল';
	        } else {
	            return 'রাত';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bn;
	
	})));


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '༡',
	    '2': '༢',
	    '3': '༣',
	    '4': '༤',
	    '5': '༥',
	    '6': '༦',
	    '7': '༧',
	    '8': '༨',
	    '9': '༩',
	    '0': '༠'
	};
	var numberMap = {
	    '༡': '1',
	    '༢': '2',
	    '༣': '3',
	    '༤': '4',
	    '༥': '5',
	    '༦': '6',
	    '༧': '7',
	    '༨': '8',
	    '༩': '9',
	    '༠': '0'
	};
	
	var bo = moment.defineLocale('bo', {
	    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[དི་རིང] LT',
	        nextDay : '[སང་ཉིན] LT',
	        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	        lastDay : '[ཁ་སང] LT',
	        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ལ་',
	        past : '%s སྔན་ལ',
	        s : 'ལམ་སང',
	        ss : '%d སྐར་ཆ།',
	        m : 'སྐར་མ་གཅིག',
	        mm : '%d སྐར་མ',
	        h : 'ཆུ་ཚོད་གཅིག',
	        hh : '%d ཆུ་ཚོད',
	        d : 'ཉིན་གཅིག',
	        dd : '%d ཉིན་',
	        M : 'ཟླ་བ་གཅིག',
	        MM : '%d ཟླ་བ',
	        y : 'ལོ་གཅིག',
	        yy : '%d ལོ'
	    },
	    preparse: function (string) {
	        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'མཚན་མོ';
	        } else if (hour < 10) {
	            return 'ཞོགས་ཀས';
	        } else if (hour < 17) {
	            return 'ཉིན་གུང';
	        } else if (hour < 20) {
	            return 'དགོང་དག';
	        } else {
	            return 'མཚན་མོ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bo;
	
	})));


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithMutation(number, withoutSuffix, key) {
	    var format = {
	        'mm': 'munutenn',
	        'MM': 'miz',
	        'dd': 'devezh'
	    };
	    return number + ' ' + mutation(format[key], number);
	}
	function specialMutationForYears(number) {
	    switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	    }
	}
	function lastNumber(number) {
	    if (number > 9) {
	        return lastNumber(number % 10);
	    }
	    return number;
	}
	function mutation(text, number) {
	    if (number === 2) {
	        return softMutation(text);
	    }
	    return text;
	}
	function softMutation(text) {
	    var mutationTable = {
	        'm': 'v',
	        'b': 'v',
	        'd': 'z'
	    };
	    if (mutationTable[text.charAt(0)] === undefined) {
	        return text;
	    }
	    return mutationTable[text.charAt(0)] + text.substring(1);
	}
	
	var br = moment.defineLocale('br', {
	    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h[e]mm A',
	        LTS : 'h[e]mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [a viz] MMMM YYYY',
	        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	    },
	    calendar : {
	        sameDay : '[Hiziv da] LT',
	        nextDay : '[Warc\'hoazh da] LT',
	        nextWeek : 'dddd [da] LT',
	        lastDay : '[Dec\'h da] LT',
	        lastWeek : 'dddd [paset da] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'a-benn %s',
	        past : '%s \'zo',
	        s : 'un nebeud segondennoù',
	        ss : '%d eilenn',
	        m : 'ur vunutenn',
	        mm : relativeTimeWithMutation,
	        h : 'un eur',
	        hh : '%d eur',
	        d : 'un devezh',
	        dd : relativeTimeWithMutation,
	        M : 'ur miz',
	        MM : relativeTimeWithMutation,
	        y : 'ur bloaz',
	        yy : specialMutationForYears
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	    ordinal : function (number) {
	        var output = (number === 1) ? 'añ' : 'vet';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return br;
	
	})));


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'ss':
	            if (number === 1) {
	                result += 'sekunda';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sekunde';
	            } else {
	                result += 'sekundi';
	            }
	            return result;
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var bs = moment.defineLocale('bs', {
	    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        ss     : translate,
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bs;
	
	})));


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ca = moment.defineLocale('ca', {
	    months : {
	        standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
	        isFormat: /D[oD]?(\s)+MMMM/
	    },
	    monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	    weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [de] YYYY',
	        ll : 'D MMM YYYY',
	        LLL : 'D MMMM [de] YYYY [a les] H:mm',
	        lll : 'D MMM YYYY, H:mm',
	        LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
	        llll : 'ddd D MMM YYYY, H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextDay : function () {
	            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastDay : function () {
	            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'd\'aquí %s',
	        past : 'fa %s',
	        s : 'uns segons',
	        ss : '%d segons',
	        m : 'un minut',
	        mm : '%d minuts',
	        h : 'una hora',
	        hh : '%d hores',
	        d : 'un dia',
	        dd : '%d dies',
	        M : 'un mes',
	        MM : '%d mesos',
	        y : 'un any',
	        yy : '%d anys'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	    ordinal : function (number, period) {
	        var output = (number === 1) ? 'r' :
	            (number === 2) ? 'n' :
	            (number === 3) ? 'r' :
	            (number === 4) ? 't' : 'è';
	        if (period === 'w' || period === 'W') {
	            output = 'a';
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ca;
	
	})));


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'sekundy' : 'sekund');
	            } else {
	                return result + 'sekundami';
	            }
	            break;
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	    }
	}
	
	var cs = moment.defineLocale('cs', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParse : (function (months, monthsShort) {
	        var i, _monthsParse = [];
	        for (i = 0; i < 12; i++) {
	            // use custom parser to solve problem with July (červenec)
	            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	        }
	        return _monthsParse;
	    }(months, monthsShort)),
	    shortMonthsParse : (function (monthsShort) {
	        var i, _shortMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	        }
	        return _shortMonthsParse;
	    }(monthsShort)),
	    longMonthsParse : (function (months) {
	        var i, _longMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	        }
	        return _longMonthsParse;
	    }(months)),
	    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm',
	        l : 'D. M. YYYY'
	    },
	    calendar : {
	        sameDay: '[dnes v] LT',
	        nextDay: '[zítra v] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	            }
	        },
	        lastDay: '[včera v] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'před %s',
	        s : translate,
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cs;
	
	})));


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cv = moment.defineLocale('cv', {
	    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	    },
	    calendar : {
	        sameDay: '[Паян] LT [сехетре]',
	        nextDay: '[Ыран] LT [сехетре]',
	        lastDay: '[Ӗнер] LT [сехетре]',
	        nextWeek: '[Ҫитес] dddd LT [сехетре]',
	        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (output) {
	            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	            return output + affix;
	        },
	        past : '%s каялла',
	        s : 'пӗр-ик ҫеккунт',
	        ss : '%d ҫеккунт',
	        m : 'пӗр минут',
	        mm : '%d минут',
	        h : 'пӗр сехет',
	        hh : '%d сехет',
	        d : 'пӗр кун',
	        dd : '%d кун',
	        M : 'пӗр уйӑх',
	        MM : '%d уйӑх',
	        y : 'пӗр ҫул',
	        yy : '%d ҫул'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	    ordinal : '%d-мӗш',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return cv;
	
	})));


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cy = moment.defineLocale('cy', {
	    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    // time formats are the same as en-gb
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[Heddiw am] LT',
	        nextDay: '[Yfory am] LT',
	        nextWeek: 'dddd [am] LT',
	        lastDay: '[Ddoe am] LT',
	        lastWeek: 'dddd [diwethaf am] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'mewn %s',
	        past: '%s yn ôl',
	        s: 'ychydig eiliadau',
	        ss: '%d eiliad',
	        m: 'munud',
	        mm: '%d munud',
	        h: 'awr',
	        hh: '%d awr',
	        d: 'diwrnod',
	        dd: '%d diwrnod',
	        M: 'mis',
	        MM: '%d mis',
	        y: 'blwyddyn',
	        yy: '%d flynedd'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	    ordinal: function (number) {
	        var b = number,
	            output = '',
	            lookup = [
	                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	        if (b > 20) {
	            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                output = 'fed'; // not 30ain, 70ain or 90ain
	            } else {
	                output = 'ain';
	            }
	        } else if (b > 0) {
	            output = lookup[b];
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cy;
	
	})));


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var da = moment.defineLocale('da', {
	    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay : '[i dag kl.] LT',
	        nextDay : '[i morgen kl.] LT',
	        nextWeek : 'på dddd [kl.] LT',
	        lastDay : '[i går kl.] LT',
	        lastWeek : '[i] dddd[s kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'få sekunder',
	        ss : '%d sekunder',
	        m : 'et minut',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dage',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'et år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return da;
	
	})));


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var de = moment.defineLocale('de', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        ss : '%d Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return de;
	
	})));


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var deAt = moment.defineLocale('de-at', {
	    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        ss : '%d Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return deAt;
	
	})));


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	// based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var deCh = moment.defineLocale('de-ch', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        ss : '%d Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return deCh;
	
	})));


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'ޖެނުއަރީ',
	    'ފެބްރުއަރީ',
	    'މާރިޗު',
	    'އޭޕްރީލު',
	    'މޭ',
	    'ޖޫން',
	    'ޖުލައި',
	    'އޯގަސްޓު',
	    'ސެޕްޓެމްބަރު',
	    'އޮކްޓޯބަރު',
	    'ނޮވެމްބަރު',
	    'ޑިސެމްބަރު'
	];
	var weekdays = [
	    'އާދިއްތަ',
	    'ހޯމަ',
	    'އަންގާރަ',
	    'ބުދަ',
	    'ބުރާސްފަތި',
	    'ހުކުރު',
	    'ހޮނިހިރު'
	];
	
	var dv = moment.defineLocale('dv', {
	    months : months,
	    monthsShort : months,
	    weekdays : weekdays,
	    weekdaysShort : weekdays,
	    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	    longDateFormat : {
	
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/M/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /މކ|މފ/,
	    isPM : function (input) {
	        return 'މފ' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'މކ';
	        } else {
	            return 'މފ';
	        }
	    },
	    calendar : {
	        sameDay : '[މިއަދު] LT',
	        nextDay : '[މާދަމާ] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[އިއްޔެ] LT',
	        lastWeek : '[ފާއިތުވި] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ތެރޭގައި %s',
	        past : 'ކުރިން %s',
	        s : 'ސިކުންތުކޮޅެއް',
	        ss : 'd% ސިކުންތު',
	        m : 'މިނިޓެއް',
	        mm : 'މިނިޓު %d',
	        h : 'ގަޑިއިރެއް',
	        hh : 'ގަޑިއިރު %d',
	        d : 'ދުވަހެއް',
	        dd : 'ދުވަސް %d',
	        M : 'މަހެއް',
	        MM : 'މަސް %d',
	        y : 'އަހަރެއް',
	        yy : 'އަހަރު %d'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 7,  // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return dv;
	
	})));


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	
	var el = moment.defineLocale('el', {
	    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return this._monthsNominativeEl;
	        } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	            return this._monthsGenitiveEl[momentToFormat.month()];
	        } else {
	            return this._monthsNominativeEl[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'μμ' : 'ΜΜ';
	        } else {
	            return isLower ? 'πμ' : 'ΠΜ';
	        }
	    },
	    isPM : function (input) {
	        return ((input + '').toLowerCase()[0] === 'μ');
	    },
	    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendarEl : {
	        sameDay : '[Σήμερα {}] LT',
	        nextDay : '[Αύριο {}] LT',
	        nextWeek : 'dddd [{}] LT',
	        lastDay : '[Χθες {}] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 6:
	                    return '[το προηγούμενο] dddd [{}] LT';
	                default:
	                    return '[την προηγούμενη] dddd [{}] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    calendar : function (key, mom) {
	        var output = this._calendarEl[key],
	            hours = mom && mom.hours();
	        if (isFunction(output)) {
	            output = output.apply(mom);
	        }
	        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	    },
	    relativeTime : {
	        future : 'σε %s',
	        past : '%s πριν',
	        s : 'λίγα δευτερόλεπτα',
	        ss : '%d δευτερόλεπτα',
	        m : 'ένα λεπτό',
	        mm : '%d λεπτά',
	        h : 'μία ώρα',
	        hh : '%d ώρες',
	        d : 'μία μέρα',
	        dd : '%d μέρες',
	        M : 'ένας μήνας',
	        MM : '%d μήνες',
	        y : 'ένας χρόνος',
	        yy : '%d χρόνια'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}η/,
	    ordinal: '%dη',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4st is the first week of the year.
	    }
	});
	
	return el;
	
	})));


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enAu = moment.defineLocale('en-au', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        ss : '%d seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enAu;
	
	})));


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enCa = moment.defineLocale('en-ca', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'YYYY-MM-DD',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        ss : '%d seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	return enCa;
	
	})));


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enGb = moment.defineLocale('en-gb', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        ss : '%d seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enGb;
	
	})));


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enIe = moment.defineLocale('en-ie', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        ss : '%d seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enIe;
	
	})));


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enNz = moment.defineLocale('en-nz', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        ss : '%d seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enNz;
	
	})));


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eo = moment.defineLocale('eo', {
	    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	    weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	    weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D[-a de] MMMM, YYYY',
	        LLL : 'D[-a de] MMMM, YYYY HH:mm',
	        LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
	    },
	    meridiemParse: /[ap]\.t\.m/i,
	    isPM: function (input) {
	        return input.charAt(0).toLowerCase() === 'p';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'p.t.m.' : 'P.T.M.';
	        } else {
	            return isLower ? 'a.t.m.' : 'A.T.M.';
	        }
	    },
	    calendar : {
	        sameDay : '[Hodiaŭ je] LT',
	        nextDay : '[Morgaŭ je] LT',
	        nextWeek : 'dddd [je] LT',
	        lastDay : '[Hieraŭ je] LT',
	        lastWeek : '[pasinta] dddd [je] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'post %s',
	        past : 'antaŭ %s',
	        s : 'sekundoj',
	        ss : '%d sekundoj',
	        m : 'minuto',
	        mm : '%d minutoj',
	        h : 'horo',
	        hh : '%d horoj',
	        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	        dd : '%d tagoj',
	        M : 'monato',
	        MM : '%d monatoj',
	        y : 'jaro',
	        yy : '%d jaroj'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}a/,
	    ordinal : '%da',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eo;
	
	})));


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	var es = moment.defineLocale('es', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsRegex : monthsRegex,
	    monthsShortRegex : monthsRegex,
	    monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	    monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        ss : '%d segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return es;
	
	})));


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	var esDo = moment.defineLocale('es-do', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	    monthsParse: monthsParse,
	    longMonthsParse: monthsParse,
	    shortMonthsParse: monthsParse,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY h:mm A',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        ss : '%d segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return esDo;
	
	})));


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (United States) [es-us]
	//! author : bustta : https://github.com/bustta
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var esUs = moment.defineLocale('es-us', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'MM/DD/YYYY',
	        LL : 'MMMM [de] D [de] YYYY',
	        LLL : 'MMMM [de] D [de] YYYY h:mm A',
	        LLLL : 'dddd, MMMM [de] D [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        ss : '%d segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return esUs;
	
	})));


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	        'ss': [number + 'sekundi', number + 'sekundit'],
	        'm' : ['ühe minuti', 'üks minut'],
	        'mm': [number + ' minuti', number + ' minutit'],
	        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	        'hh': [number + ' tunni', number + ' tundi'],
	        'd' : ['ühe päeva', 'üks päev'],
	        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	        'MM': [number + ' kuu', number + ' kuud'],
	        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	        'yy': [number + ' aasta', number + ' aastat']
	    };
	    if (withoutSuffix) {
	        return format[key][2] ? format[key][2] : format[key][1];
	    }
	    return isFuture ? format[key][0] : format[key][1];
	}
	
	var et = moment.defineLocale('et', {
	    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	    longDateFormat : {
	        LT   : 'H:mm',
	        LTS : 'H:mm:ss',
	        L    : 'DD.MM.YYYY',
	        LL   : 'D. MMMM YYYY',
	        LLL  : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[Täna,] LT',
	        nextDay  : '[Homme,] LT',
	        nextWeek : '[Järgmine] dddd LT',
	        lastDay  : '[Eile,] LT',
	        lastWeek : '[Eelmine] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s pärast',
	        past   : '%s tagasi',
	        s      : processRelativeTime,
	        ss     : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : '%d päeva',
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return et;
	
	})));


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eu = moment.defineLocale('eu', {
	    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY[ko] MMMM[ren] D[a]',
	        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	        l : 'YYYY-M-D',
	        ll : 'YYYY[ko] MMM D[a]',
	        lll : 'YYYY[ko] MMM D[a] HH:mm',
	        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	    },
	    calendar : {
	        sameDay : '[gaur] LT[etan]',
	        nextDay : '[bihar] LT[etan]',
	        nextWeek : 'dddd LT[etan]',
	        lastDay : '[atzo] LT[etan]',
	        lastWeek : '[aurreko] dddd LT[etan]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s barru',
	        past : 'duela %s',
	        s : 'segundo batzuk',
	        ss : '%d segundo',
	        m : 'minutu bat',
	        mm : '%d minutu',
	        h : 'ordu bat',
	        hh : '%d ordu',
	        d : 'egun bat',
	        dd : '%d egun',
	        M : 'hilabete bat',
	        MM : '%d hilabete',
	        y : 'urte bat',
	        yy : '%d urte'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eu;
	
	})));


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '۱',
	    '2': '۲',
	    '3': '۳',
	    '4': '۴',
	    '5': '۵',
	    '6': '۶',
	    '7': '۷',
	    '8': '۸',
	    '9': '۹',
	    '0': '۰'
	};
	var numberMap = {
	    '۱': '1',
	    '۲': '2',
	    '۳': '3',
	    '۴': '4',
	    '۵': '5',
	    '۶': '6',
	    '۷': '7',
	    '۸': '8',
	    '۹': '9',
	    '۰': '0'
	};
	
	var fa = moment.defineLocale('fa', {
	    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /قبل از ظهر|بعد از ظهر/,
	    isPM: function (input) {
	        return /بعد از ظهر/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'قبل از ظهر';
	        } else {
	            return 'بعد از ظهر';
	        }
	    },
	    calendar : {
	        sameDay : '[امروز ساعت] LT',
	        nextDay : '[فردا ساعت] LT',
	        nextWeek : 'dddd [ساعت] LT',
	        lastDay : '[دیروز ساعت] LT',
	        lastWeek : 'dddd [پیش] [ساعت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'در %s',
	        past : '%s پیش',
	        s : 'چند ثانیه',
	        ss : 'ثانیه d%',
	        m : 'یک دقیقه',
	        mm : '%d دقیقه',
	        h : 'یک ساعت',
	        hh : '%d ساعت',
	        d : 'یک روز',
	        dd : '%d روز',
	        M : 'یک ماه',
	        MM : '%d ماه',
	        y : 'یک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/[۰-۹]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}م/,
	    ordinal : '%dم',
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return fa;
	
	})));


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	var numbersFuture = [
	        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	        numbersPast[7], numbersPast[8], numbersPast[9]
	    ];
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = '';
	    switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'ss':
	            return isFuture ? 'sekunnin' : 'sekuntia';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	    }
	    result = verbalNumber(number, isFuture) + ' ' + result;
	    return result;
	}
	function verbalNumber(number, isFuture) {
	    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	}
	
	var fi = moment.defineLocale('fi', {
	    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'Do MMMM[ta] YYYY',
	        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	        l : 'D.M.YYYY',
	        ll : 'Do MMM YYYY',
	        lll : 'Do MMM YYYY, [klo] HH.mm',
	        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	    },
	    calendar : {
	        sameDay : '[tänään] [klo] LT',
	        nextDay : '[huomenna] [klo] LT',
	        nextWeek : 'dddd [klo] LT',
	        lastDay : '[eilen] [klo] LT',
	        lastWeek : '[viime] dddd[na] [klo] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s päästä',
	        past : '%s sitten',
	        s : translate,
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fi;
	
	})));


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fo = moment.defineLocale('fo', {
	    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D. MMMM, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Í dag kl.] LT',
	        nextDay : '[Í morgin kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[Í gjár kl.] LT',
	        lastWeek : '[síðstu] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'um %s',
	        past : '%s síðani',
	        s : 'fá sekund',
	        ss : '%d sekundir',
	        m : 'ein minutt',
	        mm : '%d minuttir',
	        h : 'ein tími',
	        hh : '%d tímar',
	        d : 'ein dagur',
	        dd : '%d dagar',
	        M : 'ein mánaði',
	        MM : '%d mánaðir',
	        y : 'eitt ár',
	        yy : '%d ár'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fo;
	
	})));


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fr = moment.defineLocale('fr', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        ss : '%d secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // TODO: Return 'e' when day of month > 1. Move this case inside
	            // block for masculine words below.
	            // See https://github.com/moment/moment/issues/3375
	            case 'D':
	                return number + (number === 1 ? 'er' : '');
	
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fr;
	
	})));


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCa = moment.defineLocale('fr-ca', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        ss : '%d secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    }
	});
	
	return frCa;
	
	})));


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCh = moment.defineLocale('fr-ch', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        ss : '%d secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return frCh;
	
	})));


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	var fy = moment.defineLocale('fy', {
	    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[hjoed om] LT',
	        nextDay: '[moarn om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[juster om] LT',
	        lastWeek: '[ôfrûne] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'oer %s',
	        past : '%s lyn',
	        s : 'in pear sekonden',
	        ss : '%d sekonden',
	        m : 'ien minút',
	        mm : '%d minuten',
	        h : 'ien oere',
	        hh : '%d oeren',
	        d : 'ien dei',
	        dd : '%d dagen',
	        M : 'ien moanne',
	        MM : '%d moannen',
	        y : 'ien jier',
	        yy : '%d jierren'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fy;
	
	})));


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	];
	
	var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	var gd = moment.defineLocale('gd', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParseExact : true,
	    weekdays : weekdays,
	    weekdaysShort : weekdaysShort,
	    weekdaysMin : weekdaysMin,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[An-diugh aig] LT',
	        nextDay : '[A-màireach aig] LT',
	        nextWeek : 'dddd [aig] LT',
	        lastDay : '[An-dè aig] LT',
	        lastWeek : 'dddd [seo chaidh] [aig] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ann an %s',
	        past : 'bho chionn %s',
	        s : 'beagan diogan',
	        ss : '%d diogan',
	        m : 'mionaid',
	        mm : '%d mionaidean',
	        h : 'uair',
	        hh : '%d uairean',
	        d : 'latha',
	        dd : '%d latha',
	        M : 'mìos',
	        MM : '%d mìosan',
	        y : 'bliadhna',
	        yy : '%d bliadhna'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
	    ordinal : function (number) {
	        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gd;
	
	})));


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var gl = moment.defineLocale('gl', {
	    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        lastDay : function () {
	            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	        },
	        lastWeek : function () {
	            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (str) {
	            if (str.indexOf('un') === 0) {
	                return 'n' + str;
	            }
	            return 'en ' + str;
	        },
	        past : 'hai %s',
	        s : 'uns segundos',
	        ss : '%d segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'unha hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gl;
	
	})));


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['thodde secondanim', 'thodde second'],
	        'ss': [number + ' secondanim', number + ' second'],
	        'm': ['eka mintan', 'ek minute'],
	        'mm': [number + ' mintanim', number + ' mintam'],
	        'h': ['eka horan', 'ek hor'],
	        'hh': [number + ' horanim', number + ' hor'],
	        'd': ['eka disan', 'ek dis'],
	        'dd': [number + ' disanim', number + ' dis'],
	        'M': ['eka mhoinean', 'ek mhoino'],
	        'MM': [number + ' mhoineanim', number + ' mhoine'],
	        'y': ['eka vorsan', 'ek voros'],
	        'yy': [number + ' vorsanim', number + ' vorsam']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var gomLatn = moment.defineLocale('gom-latn', {
	    months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
	    monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
	    weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	    weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'A h:mm [vazta]',
	        LTS : 'A h:mm:ss [vazta]',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY A h:mm [vazta]',
	        LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
	        llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
	    },
	    calendar : {
	        sameDay: '[Aiz] LT',
	        nextDay: '[Faleam] LT',
	        nextWeek: '[Ieta to] dddd[,] LT',
	        lastDay: '[Kal] LT',
	        lastWeek: '[Fatlo] dddd[,] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s',
	        past : '%s adim',
	        s : processRelativeTime,
	        ss : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(er)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // the ordinal 'er' only applies to day of the month
	            case 'D':
	                return number + 'er';
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	            case 'w':
	            case 'W':
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    },
	    meridiemParse: /rati|sokalli|donparam|sanje/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'rati') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'sokalli') {
	            return hour;
	        } else if (meridiem === 'donparam') {
	            return hour > 12 ? hour : hour + 12;
	        } else if (meridiem === 'sanje') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'rati';
	        } else if (hour < 12) {
	            return 'sokalli';
	        } else if (hour < 16) {
	            return 'donparam';
	        } else if (hour < 20) {
	            return 'sanje';
	        } else {
	            return 'rati';
	        }
	    }
	});
	
	return gomLatn;
	
	})));


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Gujarati [gu]
	//! author : Kaushik Thanki : https://github.com/Kaushik1987
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	        '1': '૧',
	        '2': '૨',
	        '3': '૩',
	        '4': '૪',
	        '5': '૫',
	        '6': '૬',
	        '7': '૭',
	        '8': '૮',
	        '9': '૯',
	        '0': '૦'
	    };
	var numberMap = {
	        '૧': '1',
	        '૨': '2',
	        '૩': '3',
	        '૪': '4',
	        '૫': '5',
	        '૬': '6',
	        '૭': '7',
	        '૮': '8',
	        '૯': '9',
	        '૦': '0'
	    };
	
	var gu = moment.defineLocale('gu', {
	    months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
	    monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
	    weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
	    weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
	    longDateFormat: {
	        LT: 'A h:mm વાગ્યે',
	        LTS: 'A h:mm:ss વાગ્યે',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
	        LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
	    },
	    calendar: {
	        sameDay: '[આજ] LT',
	        nextDay: '[કાલે] LT',
	        nextWeek: 'dddd, LT',
	        lastDay: '[ગઇકાલે] LT',
	        lastWeek: '[પાછલા] dddd, LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%s મા',
	        past: '%s પેહલા',
	        s: 'અમુક પળો',
	        ss: '%d સેકંડ',
	        m: 'એક મિનિટ',
	        mm: '%d મિનિટ',
	        h: 'એક કલાક',
	        hh: '%d કલાક',
	        d: 'એક દિવસ',
	        dd: '%d દિવસ',
	        M: 'એક મહિનો',
	        MM: '%d મહિનો',
	        y: 'એક વર્ષ',
	        yy: '%d વર્ષ'
	    },
	    preparse: function (string) {
	        return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
	    meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'રાત') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'સવાર') {
	            return hour;
	        } else if (meridiem === 'બપોર') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'સાંજ') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'રાત';
	        } else if (hour < 10) {
	            return 'સવાર';
	        } else if (hour < 17) {
	            return 'બપોર';
	        } else if (hour < 20) {
	            return 'સાંજ';
	        } else {
	            return 'રાત';
	        }
	    },
	    week: {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return gu;
	
	})));


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var he = moment.defineLocale('he', {
	    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [ב]MMMM YYYY',
	        LLL : 'D [ב]MMMM YYYY HH:mm',
	        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	        l : 'D/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[היום ב־]LT',
	        nextDay : '[מחר ב־]LT',
	        nextWeek : 'dddd [בשעה] LT',
	        lastDay : '[אתמול ב־]LT',
	        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'בעוד %s',
	        past : 'לפני %s',
	        s : 'מספר שניות',
	        ss : '%d שניות',
	        m : 'דקה',
	        mm : '%d דקות',
	        h : 'שעה',
	        hh : function (number) {
	            if (number === 2) {
	                return 'שעתיים';
	            }
	            return number + ' שעות';
	        },
	        d : 'יום',
	        dd : function (number) {
	            if (number === 2) {
	                return 'יומיים';
	            }
	            return number + ' ימים';
	        },
	        M : 'חודש',
	        MM : function (number) {
	            if (number === 2) {
	                return 'חודשיים';
	            }
	            return number + ' חודשים';
	        },
	        y : 'שנה',
	        yy : function (number) {
	            if (number === 2) {
	                return 'שנתיים';
	            } else if (number % 10 === 0 && number !== 10) {
	                return number + ' שנה';
	            }
	            return number + ' שנים';
	        }
	    },
	    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	    isPM : function (input) {
	        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 5) {
	            return 'לפנות בוקר';
	        } else if (hour < 10) {
	            return 'בבוקר';
	        } else if (hour < 12) {
	            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	        } else if (hour < 18) {
	            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	        } else {
	            return 'בערב';
	        }
	    }
	});
	
	return he;
	
	})));


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var hi = moment.defineLocale('hi', {
	    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm बजे',
	        LTS : 'A h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[कल] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[कल] LT',
	        lastWeek : '[पिछले] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s में',
	        past : '%s पहले',
	        s : 'कुछ ही क्षण',
	        ss : '%d सेकंड',
	        m : 'एक मिनट',
	        mm : '%d मिनट',
	        h : 'एक घंटा',
	        hh : '%d घंटे',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महीने',
	        MM : '%d महीने',
	        y : 'एक वर्ष',
	        yy : '%d वर्ष'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	    meridiemParse: /रात|सुबह|दोपहर|शाम/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सुबह') {
	            return hour;
	        } else if (meridiem === 'दोपहर') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'शाम') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात';
	        } else if (hour < 10) {
	            return 'सुबह';
	        } else if (hour < 17) {
	            return 'दोपहर';
	        } else if (hour < 20) {
	            return 'शाम';
	        } else {
	            return 'रात';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hi;
	
	})));


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'ss':
	            if (number === 1) {
	                result += 'sekunda';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sekunde';
	            } else {
	                result += 'sekundi';
	            }
	            return result;
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var hr = moment.defineLocale('hr', {
	    months : {
	        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	    },
	    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        ss     : translate,
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hr;
	
	})));


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	function translate(number, withoutSuffix, key, isFuture) {
	    var num = number;
	    switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'ss':
	            return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	    }
	    return '';
	}
	function week(isFuture) {
	    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	}
	
	var hu = moment.defineLocale('hu', {
	    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY.MM.DD.',
	        LL : 'YYYY. MMMM D.',
	        LLL : 'YYYY. MMMM D. H:mm',
	        LLLL : 'YYYY. MMMM D., dddd H:mm'
	    },
	    meridiemParse: /de|du/i,
	    isPM: function (input) {
	        return input.charAt(1).toLowerCase() === 'u';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower === true ? 'de' : 'DE';
	        } else {
	            return isLower === true ? 'du' : 'DU';
	        }
	    },
	    calendar : {
	        sameDay : '[ma] LT[-kor]',
	        nextDay : '[holnap] LT[-kor]',
	        nextWeek : function () {
	            return week.call(this, true);
	        },
	        lastDay : '[tegnap] LT[-kor]',
	        lastWeek : function () {
	            return week.call(this, false);
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s múlva',
	        past : '%s',
	        s : translate,
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return hu;
	
	})));


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var hyAm = moment.defineLocale('hy-am', {
	    months : {
	        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	    },
	    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY թ.',
	        LLL : 'D MMMM YYYY թ., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	    },
	    calendar : {
	        sameDay: '[այսօր] LT',
	        nextDay: '[վաղը] LT',
	        lastDay: '[երեկ] LT',
	        nextWeek: function () {
	            return 'dddd [օրը ժամը] LT';
	        },
	        lastWeek: function () {
	            return '[անցած] dddd [օրը ժամը] LT';
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s հետո',
	        past : '%s առաջ',
	        s : 'մի քանի վայրկյան',
	        ss : '%d վայրկյան',
	        m : 'րոպե',
	        mm : '%d րոպե',
	        h : 'ժամ',
	        hh : '%d ժամ',
	        d : 'օր',
	        dd : '%d օր',
	        M : 'ամիս',
	        MM : '%d ամիս',
	        y : 'տարի',
	        yy : '%d տարի'
	    },
	    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	    isPM: function (input) {
	        return /^(ցերեկվա|երեկոյան)$/.test(input);
	    },
	    meridiem : function (hour) {
	        if (hour < 4) {
	            return 'գիշերվա';
	        } else if (hour < 12) {
	            return 'առավոտվա';
	        } else if (hour < 17) {
	            return 'ցերեկվա';
	        } else {
	            return 'երեկոյան';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hyAm;
	
	})));


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var id = moment.defineLocale('id', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|siang|sore|malam/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'siang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sore' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'siang';
	        } else if (hours < 19) {
	            return 'sore';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Besok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kemarin pukul] LT',
	        lastWeek : 'dddd [lalu pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lalu',
	        s : 'beberapa detik',
	        ss : '%d detik',
	        m : 'semenit',
	        mm : '%d menit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return id;
	
	})));


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(n) {
	    if (n % 100 === 11) {
	        return true;
	    } else if (n % 10 === 1) {
	        return false;
	    }
	    return true;
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'ss':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
	            }
	            return result + 'sekúnda';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	    }
	}
	
	var is = moment.defineLocale('is', {
	    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	    },
	    calendar : {
	        sameDay : '[í dag kl.] LT',
	        nextDay : '[á morgun kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[í gær kl.] LT',
	        lastWeek : '[síðasta] dddd [kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'eftir %s',
	        past : 'fyrir %s síðan',
	        s : translate,
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : 'klukkustund',
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return is;
	
	})));


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var it = moment.defineLocale('it', {
	    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	    weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
	    weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	    weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Oggi alle] LT',
	        nextDay: '[Domani alle] LT',
	        nextWeek: 'dddd [alle] LT',
	        lastDay: '[Ieri alle] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[la scorsa] dddd [alle] LT';
	                default:
	                    return '[lo scorso] dddd [alle] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	        },
	        past : '%s fa',
	        s : 'alcuni secondi',
	        ss : '%d secondi',
	        m : 'un minuto',
	        mm : '%d minuti',
	        h : 'un\'ora',
	        hh : '%d ore',
	        d : 'un giorno',
	        dd : '%d giorni',
	        M : 'un mese',
	        MM : '%d mesi',
	        y : 'un anno',
	        yy : '%d anni'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return it;
	
	})));


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ja = moment.defineLocale('ja', {
	    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日 HH:mm',
	        LLLL : 'YYYY年M月D日 HH:mm dddd',
	        l : 'YYYY/MM/DD',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日 HH:mm dddd'
	    },
	    meridiemParse: /午前|午後/i,
	    isPM : function (input) {
	        return input === '午後';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return '午前';
	        } else {
	            return '午後';
	        }
	    },
	    calendar : {
	        sameDay : '[今日] LT',
	        nextDay : '[明日] LT',
	        nextWeek : '[来週]dddd LT',
	        lastDay : '[昨日] LT',
	        lastWeek : '[前週]dddd LT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}日/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s後',
	        past : '%s前',
	        s : '数秒',
	        ss : '%d秒',
	        m : '1分',
	        mm : '%d分',
	        h : '1時間',
	        hh : '%d時間',
	        d : '1日',
	        dd : '%d日',
	        M : '1ヶ月',
	        MM : '%dヶ月',
	        y : '1年',
	        yy : '%d年'
	    }
	});
	
	return ja;
	
	})));


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var jv = moment.defineLocale('jv', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /enjing|siyang|sonten|ndalu/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'enjing') {
	            return hour;
	        } else if (meridiem === 'siyang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'enjing';
	        } else if (hours < 15) {
	            return 'siyang';
	        } else if (hours < 19) {
	            return 'sonten';
	        } else {
	            return 'ndalu';
	        }
	    },
	    calendar : {
	        sameDay : '[Dinten puniko pukul] LT',
	        nextDay : '[Mbenjang pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kala wingi pukul] LT',
	        lastWeek : 'dddd [kepengker pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'wonten ing %s',
	        past : '%s ingkang kepengker',
	        s : 'sawetawis detik',
	        ss : '%d detik',
	        m : 'setunggal menit',
	        mm : '%d menit',
	        h : 'setunggal jam',
	        hh : '%d jam',
	        d : 'sedinten',
	        dd : '%d dinten',
	        M : 'sewulan',
	        MM : '%d wulan',
	        y : 'setaun',
	        yy : '%d taun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return jv;
	
	})));


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ka = moment.defineLocale('ka', {
	    months : {
	        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	    },
	    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	    weekdays : {
	        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	        isFormat: /(წინა|შემდეგ)/
	    },
	    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[დღეს] LT[-ზე]',
	        nextDay : '[ხვალ] LT[-ზე]',
	        lastDay : '[გუშინ] LT[-ზე]',
	        nextWeek : '[შემდეგ] dddd LT[-ზე]',
	        lastWeek : '[წინა] dddd LT-ზე',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                s.replace(/ი$/, 'ში') :
	                s + 'ში';
	        },
	        past : function (s) {
	            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                return s.replace(/(ი|ე)$/, 'ის უკან');
	            }
	            if ((/წელი/).test(s)) {
	                return s.replace(/წელი$/, 'წლის უკან');
	            }
	        },
	        s : 'რამდენიმე წამი',
	        ss : '%d წამი',
	        m : 'წუთი',
	        mm : '%d წუთი',
	        h : 'საათი',
	        hh : '%d საათი',
	        d : 'დღე',
	        dd : '%d დღე',
	        M : 'თვე',
	        MM : '%d თვე',
	        y : 'წელი',
	        yy : '%d წელი'
	    },
	    dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	    ordinal : function (number) {
	        if (number === 0) {
	            return number;
	        }
	        if (number === 1) {
	            return number + '-ლი';
	        }
	        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	            return 'მე-' + number;
	        }
	        return number + '-ე';
	    },
	    week : {
	        dow : 1,
	        doy : 7
	    }
	});
	
	return ka;
	
	})));


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    0: '-ші',
	    1: '-ші',
	    2: '-ші',
	    3: '-ші',
	    4: '-ші',
	    5: '-ші',
	    6: '-шы',
	    7: '-ші',
	    8: '-ші',
	    9: '-шы',
	    10: '-шы',
	    20: '-шы',
	    30: '-шы',
	    40: '-шы',
	    50: '-ші',
	    60: '-шы',
	    70: '-ші',
	    80: '-ші',
	    90: '-шы',
	    100: '-ші'
	};
	
	var kk = moment.defineLocale('kk', {
	    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгін сағат] LT',
	        nextDay : '[Ертең сағат] LT',
	        nextWeek : 'dddd [сағат] LT',
	        lastDay : '[Кеше сағат] LT',
	        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ішінде',
	        past : '%s бұрын',
	        s : 'бірнеше секунд',
	        ss : '%d секунд',
	        m : 'бір минут',
	        mm : '%d минут',
	        h : 'бір сағат',
	        hh : '%d сағат',
	        d : 'бір күн',
	        dd : '%d күн',
	        M : 'бір ай',
	        MM : '%d ай',
	        y : 'бір жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return kk;
	
	})));


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var km = moment.defineLocale('km', {
	    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	        nextDay: '[ស្អែក ម៉ោង] LT',
	        nextWeek: 'dddd [ម៉ោង] LT',
	        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%sទៀត',
	        past: '%sមុន',
	        s: 'ប៉ុន្មានវិនាទី',
	        ss: '%d វិនាទី',
	        m: 'មួយនាទី',
	        mm: '%d នាទី',
	        h: 'មួយម៉ោង',
	        hh: '%d ម៉ោង',
	        d: 'មួយថ្ងៃ',
	        dd: '%d ថ្ងៃ',
	        M: 'មួយខែ',
	        MM: '%d ខែ',
	        y: 'មួយឆ្នាំ',
	        yy: '%d ឆ្នាំ'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return km;
	
	})));


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '೧',
	    '2': '೨',
	    '3': '೩',
	    '4': '೪',
	    '5': '೫',
	    '6': '೬',
	    '7': '೭',
	    '8': '೮',
	    '9': '೯',
	    '0': '೦'
	};
	var numberMap = {
	    '೧': '1',
	    '೨': '2',
	    '೩': '3',
	    '೪': '4',
	    '೫': '5',
	    '೬': '6',
	    '೭': '7',
	    '೮': '8',
	    '೯': '9',
	    '೦': '0'
	};
	
	var kn = moment.defineLocale('kn', {
	    months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
	    monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
	    weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	    weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[ಇಂದು] LT',
	        nextDay : '[ನಾಳೆ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ನಿನ್ನೆ] LT',
	        lastWeek : '[ಕೊನೆಯ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ನಂತರ',
	        past : '%s ಹಿಂದೆ',
	        s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
	        ss : '%d ಸೆಕೆಂಡುಗಳು',
	        m : 'ಒಂದು ನಿಮಿಷ',
	        mm : '%d ನಿಮಿಷ',
	        h : 'ಒಂದು ಗಂಟೆ',
	        hh : '%d ಗಂಟೆ',
	        d : 'ಒಂದು ದಿನ',
	        dd : '%d ದಿನ',
	        M : 'ಒಂದು ತಿಂಗಳು',
	        MM : '%d ತಿಂಗಳು',
	        y : 'ಒಂದು ವರ್ಷ',
	        yy : '%d ವರ್ಷ'
	    },
	    preparse: function (string) {
	        return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ರಾತ್ರಿ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	            return hour;
	        } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ಸಂಜೆ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ರಾತ್ರಿ';
	        } else if (hour < 10) {
	            return 'ಬೆಳಿಗ್ಗೆ';
	        } else if (hour < 17) {
	            return 'ಮಧ್ಯಾಹ್ನ';
	        } else if (hour < 20) {
	            return 'ಸಂಜೆ';
	        } else {
	            return 'ರಾತ್ರಿ';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	    ordinal : function (number) {
	        return number + 'ನೇ';
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return kn;
	
	})));


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ko = moment.defineLocale('ko', {
	    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'YYYY.MM.DD',
	        LL : 'YYYY년 MMMM D일',
	        LLL : 'YYYY년 MMMM D일 A h:mm',
	        LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
	        l : 'YYYY.MM.DD',
	        ll : 'YYYY년 MMMM D일',
	        lll : 'YYYY년 MMMM D일 A h:mm',
	        llll : 'YYYY년 MMMM D일 dddd A h:mm'
	    },
	    calendar : {
	        sameDay : '오늘 LT',
	        nextDay : '내일 LT',
	        nextWeek : 'dddd LT',
	        lastDay : '어제 LT',
	        lastWeek : '지난주 dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s 후',
	        past : '%s 전',
	        s : '몇 초',
	        ss : '%d초',
	        m : '1분',
	        mm : '%d분',
	        h : '한 시간',
	        hh : '%d시간',
	        d : '하루',
	        dd : '%d일',
	        M : '한 달',
	        MM : '%d달',
	        y : '일 년',
	        yy : '%d년'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '일';
	            case 'M':
	                return number + '월';
	            case 'w':
	            case 'W':
	                return number + '주';
	            default:
	                return number;
	        }
	    },
	    meridiemParse : /오전|오후/,
	    isPM : function (token) {
	        return token === '오후';
	    },
	    meridiem : function (hour, minute, isUpper) {
	        return hour < 12 ? '오전' : '오후';
	    }
	});
	
	return ko;
	
	})));


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var suffixes = {
	    0: '-чү',
	    1: '-чи',
	    2: '-чи',
	    3: '-чү',
	    4: '-чү',
	    5: '-чи',
	    6: '-чы',
	    7: '-чи',
	    8: '-чи',
	    9: '-чу',
	    10: '-чу',
	    20: '-чы',
	    30: '-чу',
	    40: '-чы',
	    50: '-чү',
	    60: '-чы',
	    70: '-чи',
	    80: '-чи',
	    90: '-чу',
	    100: '-чү'
	};
	
	var ky = moment.defineLocale('ky', {
	    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгүн саат] LT',
	        nextDay : '[Эртең саат] LT',
	        nextWeek : 'dddd [саат] LT',
	        lastDay : '[Кече саат] LT',
	        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ичинде',
	        past : '%s мурун',
	        s : 'бирнече секунд',
	        ss : '%d секунд',
	        m : 'бир мүнөт',
	        mm : '%d мүнөт',
	        h : 'бир саат',
	        hh : '%d саат',
	        d : 'бир күн',
	        dd : '%d күн',
	        M : 'бир ай',
	        MM : '%d ай',
	        y : 'бир жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ky;
	
	})));


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eng Minutt', 'enger Minutt'],
	        'h': ['eng Stonn', 'enger Stonn'],
	        'd': ['een Dag', 'engem Dag'],
	        'M': ['ee Mount', 'engem Mount'],
	        'y': ['ee Joer', 'engem Joer']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	function processFutureTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'a ' + string;
	    }
	    return 'an ' + string;
	}
	function processPastTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'viru ' + string;
	    }
	    return 'virun ' + string;
	}
	/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function eifelerRegelAppliesToNumber(number) {
	    number = parseInt(number, 10);
	    if (isNaN(number)) {
	        return false;
	    }
	    if (number < 0) {
	        // Negative Number --> always true
	        return true;
	    } else if (number < 10) {
	        // Only 1 digit
	        if (4 <= number && number <= 7) {
	            return true;
	        }
	        return false;
	    } else if (number < 100) {
	        // 2 digits
	        var lastDigit = number % 10, firstDigit = number / 10;
	        if (lastDigit === 0) {
	            return eifelerRegelAppliesToNumber(firstDigit);
	        }
	        return eifelerRegelAppliesToNumber(lastDigit);
	    } else if (number < 10000) {
	        // 3 or 4 digits --> recursively check first digit
	        while (number >= 10) {
	            number = number / 10;
	        }
	        return eifelerRegelAppliesToNumber(number);
	    } else {
	        // Anything larger than 4 digits: recursively check first n-3 digits
	        number = number / 1000;
	        return eifelerRegelAppliesToNumber(number);
	    }
	}
	
	var lb = moment.defineLocale('lb', {
	    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm [Auer]',
	        LTS: 'H:mm:ss [Auer]',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm [Auer]',
	        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	    },
	    calendar: {
	        sameDay: '[Haut um] LT',
	        sameElse: 'L',
	        nextDay: '[Muer um] LT',
	        nextWeek: 'dddd [um] LT',
	        lastDay: '[Gëschter um] LT',
	        lastWeek: function () {
	            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	            switch (this.day()) {
	                case 2:
	                case 4:
	                    return '[Leschten] dddd [um] LT';
	                default:
	                    return '[Leschte] dddd [um] LT';
	            }
	        }
	    },
	    relativeTime : {
	        future : processFutureTime,
	        past : processPastTime,
	        s : 'e puer Sekonnen',
	        ss : '%d Sekonnen',
	        m : processRelativeTime,
	        mm : '%d Minutten',
	        h : processRelativeTime,
	        hh : '%d Stonnen',
	        d : processRelativeTime,
	        dd : '%d Deeg',
	        M : processRelativeTime,
	        MM : '%d Méint',
	        y : processRelativeTime,
	        yy : '%d Joer'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal: '%d.',
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lb;
	
	})));


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var lo = moment.defineLocale('lo', {
	    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	    isPM: function (input) {
	        return input === 'ຕອນແລງ';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ຕອນເຊົ້າ';
	        } else {
	            return 'ຕອນແລງ';
	        }
	    },
	    calendar : {
	        sameDay : '[ມື້ນີ້ເວລາ] LT',
	        nextDay : '[ມື້ອື່ນເວລາ] LT',
	        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ອີກ %s',
	        past : '%sຜ່ານມາ',
	        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	        ss : '%d ວິນາທີ' ,
	        m : '1 ນາທີ',
	        mm : '%d ນາທີ',
	        h : '1 ຊົ່ວໂມງ',
	        hh : '%d ຊົ່ວໂມງ',
	        d : '1 ມື້',
	        dd : '%d ມື້',
	        M : '1 ເດືອນ',
	        MM : '%d ເດືອນ',
	        y : '1 ປີ',
	        yy : '%d ປີ'
	    },
	    dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	    ordinal : function (number) {
	        return 'ທີ່' + number;
	    }
	});
	
	return lo;
	
	})));


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'ss' : 'sekundė_sekundžių_sekundes',
	    'm' : 'minutė_minutės_minutę',
	    'mm': 'minutės_minučių_minutes',
	    'h' : 'valanda_valandos_valandą',
	    'hh': 'valandos_valandų_valandas',
	    'd' : 'diena_dienos_dieną',
	    'dd': 'dienos_dienų_dienas',
	    'M' : 'mėnuo_mėnesio_mėnesį',
	    'MM': 'mėnesiai_mėnesių_mėnesius',
	    'y' : 'metai_metų_metus',
	    'yy': 'metai_metų_metus'
	};
	function translateSeconds(number, withoutSuffix, key, isFuture) {
	    if (withoutSuffix) {
	        return 'kelios sekundės';
	    } else {
	        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	    }
	}
	function translateSingular(number, withoutSuffix, key, isFuture) {
	    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	}
	function special(number) {
	    return number % 10 === 0 || (number > 10 && number < 20);
	}
	function forms(key) {
	    return units[key].split('_');
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    if (number === 1) {
	        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	    } else if (withoutSuffix) {
	        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	    } else {
	        if (isFuture) {
	            return result + forms(key)[1];
	        } else {
	            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	        }
	    }
	}
	var lt = moment.defineLocale('lt', {
	    months : {
	        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	    },
	    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	    weekdays : {
	        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	        isFormat: /dddd HH:mm/
	    },
	    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY [m.] MMMM D [d.]',
	        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY [m.] MMMM D [d.]',
	        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	    },
	    calendar : {
	        sameDay : '[Šiandien] LT',
	        nextDay : '[Rytoj] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[Vakar] LT',
	        lastWeek : '[Praėjusį] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'po %s',
	        past : 'prieš %s',
	        s : translateSeconds,
	        ss : translate,
	        m : translateSingular,
	        mm : translate,
	        h : translateSingular,
	        hh : translate,
	        d : translateSingular,
	        dd : translate,
	        M : translateSingular,
	        MM : translate,
	        y : translateSingular,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	    ordinal : function (number) {
	        return number + '-oji';
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lt;
	
	})));


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
	    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'h': 'stundas_stundām_stunda_stundas'.split('_'),
	    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	    'd': 'dienas_dienām_diena_dienas'.split('_'),
	    'dd': 'dienas_dienām_diena_dienas'.split('_'),
	    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'y': 'gada_gadiem_gads_gadi'.split('_'),
	    'yy': 'gada_gadiem_gads_gadi'.split('_')
	};
	/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function format(forms, number, withoutSuffix) {
	    if (withoutSuffix) {
	        // E.g. "21 minūte", "3 minūtes".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	    } else {
	        // E.g. "21 minūtes" as in "pēc 21 minūtes".
	        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	    }
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    return number + ' ' + format(units[key], number, withoutSuffix);
	}
	function relativeTimeWithSingular(number, withoutSuffix, key) {
	    return format(units[key], number, withoutSuffix);
	}
	function relativeSeconds(number, withoutSuffix) {
	    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	}
	
	var lv = moment.defineLocale('lv', {
	    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY.',
	        LL : 'YYYY. [gada] D. MMMM',
	        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	    },
	    calendar : {
	        sameDay : '[Šodien pulksten] LT',
	        nextDay : '[Rīt pulksten] LT',
	        nextWeek : 'dddd [pulksten] LT',
	        lastDay : '[Vakar pulksten] LT',
	        lastWeek : '[Pagājušā] dddd [pulksten] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'pēc %s',
	        past : 'pirms %s',
	        s : relativeSeconds,
	        ss : relativeTimeWithPlural,
	        m : relativeTimeWithSingular,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithSingular,
	        hh : relativeTimeWithPlural,
	        d : relativeTimeWithSingular,
	        dd : relativeTimeWithPlural,
	        M : relativeTimeWithSingular,
	        MM : relativeTimeWithPlural,
	        y : relativeTimeWithSingular,
	        yy : relativeTimeWithPlural
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lv;
	
	})));


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        ss: ['sekund', 'sekunda', 'sekundi'],
	        m: ['jedan minut', 'jednog minuta'],
	        mm: ['minut', 'minuta', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mjesec', 'mjeseca', 'mjeseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var me = moment.defineLocale('me', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sjutra u] LT',
	
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedjelje] [u] LT',
	                '[prošlog] [ponedjeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srijede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'nekoliko sekundi',
	        ss     : translator.translate,
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mjesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return me;
	
	})));


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mi = moment.defineLocale('mi', {
	    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY [i] HH:mm',
	        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	    },
	    calendar: {
	        sameDay: '[i teie mahana, i] LT',
	        nextDay: '[apopo i] LT',
	        nextWeek: 'dddd [i] LT',
	        lastDay: '[inanahi i] LT',
	        lastWeek: 'dddd [whakamutunga i] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'i roto i %s',
	        past: '%s i mua',
	        s: 'te hēkona ruarua',
	        ss: '%d hēkona',
	        m: 'he meneti',
	        mm: '%d meneti',
	        h: 'te haora',
	        hh: '%d haora',
	        d: 'he ra',
	        dd: '%d ra',
	        M: 'he marama',
	        MM: '%d marama',
	        y: 'he tau',
	        yy: '%d tau'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return mi;
	
	})));


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mk = moment.defineLocale('mk', {
	    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Денес во] LT',
	        nextDay : '[Утре во] LT',
	        nextWeek : '[Во] dddd [во] LT',
	        lastDay : '[Вчера во] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'после %s',
	        past : 'пред %s',
	        s : 'неколку секунди',
	        ss : '%d секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дена',
	        M : 'месец',
	        MM : '%d месеци',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mk;
	
	})));


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ml = moment.defineLocale('ml', {
	    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm -നു',
	        LTS : 'A h:mm:ss -നു',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm -നു',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	    },
	    calendar : {
	        sameDay : '[ഇന്ന്] LT',
	        nextDay : '[നാളെ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ഇന്നലെ] LT',
	        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s കഴിഞ്ഞ്',
	        past : '%s മുൻപ്',
	        s : 'അൽപ നിമിഷങ്ങൾ',
	        ss : '%d സെക്കൻഡ്',
	        m : 'ഒരു മിനിറ്റ്',
	        mm : '%d മിനിറ്റ്',
	        h : 'ഒരു മണിക്കൂർ',
	        hh : '%d മണിക്കൂർ',
	        d : 'ഒരു ദിവസം',
	        dd : '%d ദിവസം',
	        M : 'ഒരു മാസം',
	        MM : '%d മാസം',
	        y : 'ഒരു വർഷം',
	        yy : '%d വർഷം'
	    },
	    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'രാത്രി';
	        } else if (hour < 12) {
	            return 'രാവിലെ';
	        } else if (hour < 17) {
	            return 'ഉച്ച കഴിഞ്ഞ്';
	        } else if (hour < 20) {
	            return 'വൈകുന്നേരം';
	        } else {
	            return 'രാത്രി';
	        }
	    }
	});
	
	return ml;
	
	})));


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	function relativeTimeMr(number, withoutSuffix, string, isFuture)
	{
	    var output = '';
	    if (withoutSuffix) {
	        switch (string) {
	            case 's': output = 'काही सेकंद'; break;
	            case 'ss': output = '%d सेकंद'; break;
	            case 'm': output = 'एक मिनिट'; break;
	            case 'mm': output = '%d मिनिटे'; break;
	            case 'h': output = 'एक तास'; break;
	            case 'hh': output = '%d तास'; break;
	            case 'd': output = 'एक दिवस'; break;
	            case 'dd': output = '%d दिवस'; break;
	            case 'M': output = 'एक महिना'; break;
	            case 'MM': output = '%d महिने'; break;
	            case 'y': output = 'एक वर्ष'; break;
	            case 'yy': output = '%d वर्षे'; break;
	        }
	    }
	    else {
	        switch (string) {
	            case 's': output = 'काही सेकंदां'; break;
	            case 'ss': output = '%d सेकंदां'; break;
	            case 'm': output = 'एका मिनिटा'; break;
	            case 'mm': output = '%d मिनिटां'; break;
	            case 'h': output = 'एका तासा'; break;
	            case 'hh': output = '%d तासां'; break;
	            case 'd': output = 'एका दिवसा'; break;
	            case 'dd': output = '%d दिवसां'; break;
	            case 'M': output = 'एका महिन्या'; break;
	            case 'MM': output = '%d महिन्यां'; break;
	            case 'y': output = 'एका वर्षा'; break;
	            case 'yy': output = '%d वर्षां'; break;
	        }
	    }
	    return output.replace(/%d/i, number);
	}
	
	var mr = moment.defineLocale('mr', {
	    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm वाजता',
	        LTS : 'A h:mm:ss वाजता',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm वाजता',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[उद्या] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[काल] LT',
	        lastWeek: '[मागील] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future: '%sमध्ये',
	        past: '%sपूर्वी',
	        s: relativeTimeMr,
	        ss: relativeTimeMr,
	        m: relativeTimeMr,
	        mm: relativeTimeMr,
	        h: relativeTimeMr,
	        hh: relativeTimeMr,
	        d: relativeTimeMr,
	        dd: relativeTimeMr,
	        M: relativeTimeMr,
	        MM: relativeTimeMr,
	        y: relativeTimeMr,
	        yy: relativeTimeMr
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात्री') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सकाळी') {
	            return hour;
	        } else if (meridiem === 'दुपारी') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'सायंकाळी') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात्री';
	        } else if (hour < 10) {
	            return 'सकाळी';
	        } else if (hour < 17) {
	            return 'दुपारी';
	        } else if (hour < 20) {
	            return 'सायंकाळी';
	        } else {
	            return 'रात्री';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mr;
	
	})));


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ms = moment.defineLocale('ms', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        ss : '%d saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ms;
	
	})));


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var msMy = moment.defineLocale('ms-my', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        ss : '%d saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return msMy;
	
	})));


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maltese (Malta) [mt]
	//! author : Alessandro Maruccia : https://github.com/alesma
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mt = moment.defineLocale('mt', {
	    months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
	    monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
	    weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
	    weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
	    weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Illum fil-]LT',
	        nextDay : '[Għada fil-]LT',
	        nextWeek : 'dddd [fil-]LT',
	        lastDay : '[Il-bieraħ fil-]LT',
	        lastWeek : 'dddd [li għadda] [fil-]LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'f’ %s',
	        past : '%s ilu',
	        s : 'ftit sekondi',
	        ss : '%d sekondi',
	        m : 'minuta',
	        mm : '%d minuti',
	        h : 'siegħa',
	        hh : '%d siegħat',
	        d : 'ġurnata',
	        dd : '%d ġranet',
	        M : 'xahar',
	        MM : '%d xhur',
	        y : 'sena',
	        yy : '%d sni'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return mt;
	
	})));


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '၁',
	    '2': '၂',
	    '3': '၃',
	    '4': '၄',
	    '5': '၅',
	    '6': '၆',
	    '7': '၇',
	    '8': '၈',
	    '9': '၉',
	    '0': '၀'
	};
	var numberMap = {
	    '၁': '1',
	    '၂': '2',
	    '၃': '3',
	    '၄': '4',
	    '၅': '5',
	    '၆': '6',
	    '၇': '7',
	    '၈': '8',
	    '၉': '9',
	    '၀': '0'
	};
	
	var my = moment.defineLocale('my', {
	    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ယနေ.] LT [မှာ]',
	        nextDay: '[မနက်ဖြန်] LT [မှာ]',
	        nextWeek: 'dddd LT [မှာ]',
	        lastDay: '[မနေ.က] LT [မှာ]',
	        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'လာမည့် %s မှာ',
	        past: 'လွန်ခဲ့သော %s က',
	        s: 'စက္ကန်.အနည်းငယ်',
	        ss : '%d စက္ကန့်',
	        m: 'တစ်မိနစ်',
	        mm: '%d မိနစ်',
	        h: 'တစ်နာရီ',
	        hh: '%d နာရီ',
	        d: 'တစ်ရက်',
	        dd: '%d ရက်',
	        M: 'တစ်လ',
	        MM: '%d လ',
	        y: 'တစ်နှစ်',
	        yy: '%d နှစ်'
	    },
	    preparse: function (string) {
	        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return my;
	
	})));


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nb = moment.defineLocale('nb', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[i dag kl.] LT',
	        nextDay: '[i morgen kl.] LT',
	        nextWeek: 'dddd [kl.] LT',
	        lastDay: '[i går kl.] LT',
	        lastWeek: '[forrige] dddd [kl.] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'noen sekunder',
	        ss : '%d sekunder',
	        m : 'ett minutt',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dager',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nb;
	
	})));


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var ne = moment.defineLocale('ne', {
	    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'Aको h:mm बजे',
	        LTS : 'Aको h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, Aको h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'राति') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'बिहान') {
	            return hour;
	        } else if (meridiem === 'दिउँसो') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'साँझ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 3) {
	            return 'राति';
	        } else if (hour < 12) {
	            return 'बिहान';
	        } else if (hour < 16) {
	            return 'दिउँसो';
	        } else if (hour < 20) {
	            return 'साँझ';
	        } else {
	            return 'राति';
	        }
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[भोलि] LT',
	        nextWeek : '[आउँदो] dddd[,] LT',
	        lastDay : '[हिजो] LT',
	        lastWeek : '[गएको] dddd[,] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sमा',
	        past : '%s अगाडि',
	        s : 'केही क्षण',
	        ss : '%d सेकेण्ड',
	        m : 'एक मिनेट',
	        mm : '%d मिनेट',
	        h : 'एक घण्टा',
	        hh : '%d घण्टा',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महिना',
	        MM : '%d महिना',
	        y : 'एक बर्ष',
	        yy : '%d बर्ष'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ne;
	
	})));


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nl = moment.defineLocale('nl', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        ss : '%d seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nl;
	
	})));


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nlBe = moment.defineLocale('nl-be', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        ss : '%d seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nlBe;
	
	})));


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nn = moment.defineLocale('nn', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[I dag klokka] LT',
	        nextDay: '[I morgon klokka] LT',
	        nextWeek: 'dddd [klokka] LT',
	        lastDay: '[I går klokka] LT',
	        lastWeek: '[Føregåande] dddd [klokka] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s sidan',
	        s : 'nokre sekund',
	        ss : '%d sekund',
	        m : 'eit minutt',
	        mm : '%d minutt',
	        h : 'ein time',
	        hh : '%d timar',
	        d : 'ein dag',
	        dd : '%d dagar',
	        M : 'ein månad',
	        MM : '%d månader',
	        y : 'eit år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nn;
	
	})));


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '੧',
	    '2': '੨',
	    '3': '੩',
	    '4': '੪',
	    '5': '੫',
	    '6': '੬',
	    '7': '੭',
	    '8': '੮',
	    '9': '੯',
	    '0': '੦'
	};
	var numberMap = {
	    '੧': '1',
	    '੨': '2',
	    '੩': '3',
	    '੪': '4',
	    '੫': '5',
	    '੬': '6',
	    '੭': '7',
	    '੮': '8',
	    '੯': '9',
	    '੦': '0'
	};
	
	var paIn = moment.defineLocale('pa-in', {
	    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm ਵਜੇ',
	        LTS : 'A h:mm:ss ਵਜੇ',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	    },
	    calendar : {
	        sameDay : '[ਅਜ] LT',
	        nextDay : '[ਕਲ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ਕਲ] LT',
	        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ਵਿੱਚ',
	        past : '%s ਪਿਛਲੇ',
	        s : 'ਕੁਝ ਸਕਿੰਟ',
	        ss : '%d ਸਕਿੰਟ',
	        m : 'ਇਕ ਮਿੰਟ',
	        mm : '%d ਮਿੰਟ',
	        h : 'ਇੱਕ ਘੰਟਾ',
	        hh : '%d ਘੰਟੇ',
	        d : 'ਇੱਕ ਦਿਨ',
	        dd : '%d ਦਿਨ',
	        M : 'ਇੱਕ ਮਹੀਨਾ',
	        MM : '%d ਮਹੀਨੇ',
	        y : 'ਇੱਕ ਸਾਲ',
	        yy : '%d ਸਾਲ'
	    },
	    preparse: function (string) {
	        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ਰਾਤ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ਸਵੇਰ') {
	            return hour;
	        } else if (meridiem === 'ਦੁਪਹਿਰ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ਸ਼ਾਮ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ਰਾਤ';
	        } else if (hour < 10) {
	            return 'ਸਵੇਰ';
	        } else if (hour < 17) {
	            return 'ਦੁਪਹਿਰ';
	        } else if (hour < 20) {
	            return 'ਸ਼ਾਮ';
	        } else {
	            return 'ਰਾਤ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return paIn;
	
	})));


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	function plural(n) {
	    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	}
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'ss':
	            return result + (plural(number) ? 'sekundy' : 'sekund');
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	    }
	}
	
	var pl = moment.defineLocale('pl', {
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return monthsNominative;
	        } else if (format === '') {
	            // Hack: if format empty we know this is used to generate
	            // RegExp by moment. Give then back both valid forms of months
	            // in RegExp ready format.
	            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	        } else if (/D MMMM/.test(format)) {
	            return monthsSubjective[momentToFormat.month()];
	        } else {
	            return monthsNominative[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Dziś o] LT',
	        nextDay: '[Jutro o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W niedzielę o] LT';
	
	                case 2:
	                    return '[We wtorek o] LT';
	
	                case 3:
	                    return '[W środę o] LT';
	
	                case 6:
	                    return '[W sobotę o] LT';
	
	                default:
	                    return '[W] dddd [o] LT';
	            }
	        },
	        lastDay: '[Wczoraj o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : '%s temu',
	        s : 'kilka sekund',
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : '1 dzień',
	        dd : '%d dni',
	        M : 'miesiąc',
	        MM : translate,
	        y : 'rok',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pl;
	
	})));


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var pt = moment.defineLocale('pt', {
	    months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	    monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : 'há %s',
	        s : 'segundos',
	        ss : '%d segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pt;
	
	})));


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ptBr = moment.defineLocale('pt-br', {
	    months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	    monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : '%s atrás',
	        s : 'poucos segundos',
	        ss : '%d segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº'
	});
	
	return ptBr;
	
	})));


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	            'ss': 'secunde',
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	        separator = ' ';
	    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	        separator = ' de ';
	    }
	    return number + separator + format[key];
	}
	
	var ro = moment.defineLocale('ro', {
	    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[azi la] LT',
	        nextDay: '[mâine la] LT',
	        nextWeek: 'dddd [la] LT',
	        lastDay: '[ieri la] LT',
	        lastWeek: '[fosta] dddd [la] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'peste %s',
	        past : '%s în urmă',
	        s : 'câteva secunde',
	        ss : relativeTimeWithPlural,
	        m : 'un minut',
	        mm : relativeTimeWithPlural,
	        h : 'o oră',
	        hh : relativeTimeWithPlural,
	        d : 'o zi',
	        dd : relativeTimeWithPlural,
	        M : 'o lună',
	        MM : relativeTimeWithPlural,
	        y : 'un an',
	        yy : relativeTimeWithPlural
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ro;
	
	})));


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	        'hh': 'час_часа_часов',
	        'dd': 'день_дня_дней',
	        'MM': 'месяц_месяца_месяцев',
	        'yy': 'год_года_лет'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'минута' : 'минуту';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	var ru = moment.defineLocale('ru', {
	    months : {
	        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	    },
	    monthsShort : {
	        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	    },
	    weekdays : {
	        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	    },
	    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // копия предыдущего
	    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // полные названия с падежами
	    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	    // Выражение, которое соотвествует только сокращённым формам
	    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., H:mm',
	        LLLL : 'dddd, D MMMM YYYY г., H:mm'
	    },
	    calendar : {
	        sameDay: '[Сегодня в] LT',
	        nextDay: '[Завтра в] LT',
	        lastDay: '[Вчера в] LT',
	        nextWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        lastWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'через %s',
	        past : '%s назад',
	        s : 'несколько секунд',
	        ss : relativeTimeWithPlural,
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'час',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночи|утра|дня|вечера/i,
	    isPM : function (input) {
	        return /^(дня|вечера)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночи';
	        } else if (hour < 12) {
	            return 'утра';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечера';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ru;
	
	})));


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'جنوري',
	    'فيبروري',
	    'مارچ',
	    'اپريل',
	    'مئي',
	    'جون',
	    'جولاءِ',
	    'آگسٽ',
	    'سيپٽمبر',
	    'آڪٽوبر',
	    'نومبر',
	    'ڊسمبر'
	];
	var days = [
	    'آچر',
	    'سومر',
	    'اڱارو',
	    'اربع',
	    'خميس',
	    'جمع',
	    'ڇنڇر'
	];
	
	var sd = moment.defineLocale('sd', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[اڄ] LT',
	        nextDay : '[سڀاڻي] LT',
	        nextWeek : 'dddd [اڳين هفتي تي] LT',
	        lastDay : '[ڪالهه] LT',
	        lastWeek : '[گزريل هفتي] dddd [تي] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s پوء',
	        past : '%s اڳ',
	        s : 'چند سيڪنڊ',
	        ss : '%d سيڪنڊ',
	        m : 'هڪ منٽ',
	        mm : '%d منٽ',
	        h : 'هڪ ڪلاڪ',
	        hh : '%d ڪلاڪ',
	        d : 'هڪ ڏينهن',
	        dd : '%d ڏينهن',
	        M : 'هڪ مهينو',
	        MM : '%d مهينا',
	        y : 'هڪ سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sd;
	
	})));


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var se = moment.defineLocale('se', {
	    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'MMMM D. [b.] YYYY',
	        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[otne ti] LT',
	        nextDay: '[ihttin ti] LT',
	        nextWeek: 'dddd [ti] LT',
	        lastDay: '[ikte ti] LT',
	        lastWeek: '[ovddit] dddd [ti] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s geažes',
	        past : 'maŋit %s',
	        s : 'moadde sekunddat',
	        ss: '%d sekunddat',
	        m : 'okta minuhta',
	        mm : '%d minuhtat',
	        h : 'okta diimmu',
	        hh : '%d diimmut',
	        d : 'okta beaivi',
	        dd : '%d beaivvit',
	        M : 'okta mánnu',
	        MM : '%d mánut',
	        y : 'okta jahki',
	        yy : '%d jagit'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return se;
	
	})));


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	/*jshint -W100*/
	var si = moment.defineLocale('si', {
	    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'a h:mm',
	        LTS : 'a h:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY MMMM D',
	        LLL : 'YYYY MMMM D, a h:mm',
	        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	    },
	    calendar : {
	        sameDay : '[අද] LT[ට]',
	        nextDay : '[හෙට] LT[ට]',
	        nextWeek : 'dddd LT[ට]',
	        lastDay : '[ඊයේ] LT[ට]',
	        lastWeek : '[පසුගිය] dddd LT[ට]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sකින්',
	        past : '%sකට පෙර',
	        s : 'තත්පර කිහිපය',
	        ss : 'තත්පර %d',
	        m : 'මිනිත්තුව',
	        mm : 'මිනිත්තු %d',
	        h : 'පැය',
	        hh : 'පැය %d',
	        d : 'දිනය',
	        dd : 'දින %d',
	        M : 'මාසය',
	        MM : 'මාස %d',
	        y : 'වසර',
	        yy : 'වසර %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	    ordinal : function (number) {
	        return number + ' වැනි';
	    },
	    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	    isPM : function (input) {
	        return input === 'ප.ව.' || input === 'පස් වරු';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'ප.ව.' : 'පස් වරු';
	        } else {
	            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	        }
	    }
	});
	
	return si;
	
	})));


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'sekundy' : 'sekúnd');
	            } else {
	                return result + 'sekundami';
	            }
	            break;
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	    }
	}
	
	var sk = moment.defineLocale('sk', {
	    months : months,
	    monthsShort : monthsShort,
	    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[dnes o] LT',
	        nextDay: '[zajtra o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	            }
	        },
	        lastDay: '[včera o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'pred %s',
	        s : translate,
	        ss : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sk;
	
	})));


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'ss':
	            if (number === 1) {
	                result += withoutSuffix ? 'sekundo' : 'sekundi';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
	            } else {
	                result += withoutSuffix || isFuture ? 'sekund' : 'sekund';
	            }
	            return result;
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	    }
	}
	
	var sl = moment.defineLocale('sl', {
	    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danes ob] LT',
	        nextDay  : '[jutri ob] LT',
	
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	            }
	        },
	        lastDay  : '[včeraj ob] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'čez %s',
	        past   : 'pred %s',
	        s      : processRelativeTime,
	        ss     : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : processRelativeTime,
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sl;
	
	})));


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sq = moment.defineLocale('sq', {
	    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /PD|MD/,
	    isPM: function (input) {
	        return input.charAt(0) === 'M';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        return hours < 12 ? 'PD' : 'MD';
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Sot në] LT',
	        nextDay : '[Nesër në] LT',
	        nextWeek : 'dddd [në] LT',
	        lastDay : '[Dje në] LT',
	        lastWeek : 'dddd [e kaluar në] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'në %s',
	        past : '%s më parë',
	        s : 'disa sekonda',
	        ss : '%d sekonda',
	        m : 'një minutë',
	        mm : '%d minuta',
	        h : 'një orë',
	        hh : '%d orë',
	        d : 'një ditë',
	        dd : '%d ditë',
	        M : 'një muaj',
	        MM : '%d muaj',
	        y : 'një vit',
	        yy : '%d vite'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sq;
	
	})));


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        ss: ['sekunda', 'sekunde', 'sekundi'],
	        m: ['jedan minut', 'jedne minute'],
	        mm: ['minut', 'minute', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mesec', 'meseca', 'meseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var sr = moment.defineLocale('sr', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sutra u] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedelje] [u] LT',
	                '[prošlog] [ponedeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'pre %s',
	        s      : 'nekoliko sekundi',
	        ss     : translator.translate,
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sr;
	
	})));


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        ss: ['секунда', 'секунде', 'секунди'],
	        m: ['један минут', 'једне минуте'],
	        mm: ['минут', 'минуте', 'минута'],
	        h: ['један сат', 'једног сата'],
	        hh: ['сат', 'сата', 'сати'],
	        dd: ['дан', 'дана', 'дана'],
	        MM: ['месец', 'месеца', 'месеци'],
	        yy: ['година', 'године', 'година']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var srCyrl = moment.defineLocale('sr-cyrl', {
	    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[данас у] LT',
	        nextDay: '[сутра у] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	            }
	        },
	        lastDay  : '[јуче у] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[прошле] [недеље] [у] LT',
	                '[прошлог] [понедељка] [у] LT',
	                '[прошлог] [уторка] [у] LT',
	                '[прошле] [среде] [у] LT',
	                '[прошлог] [четвртка] [у] LT',
	                '[прошлог] [петка] [у] LT',
	                '[прошле] [суботе] [у] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past   : 'пре %s',
	        s      : 'неколико секунди',
	        ss     : translator.translate,
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'дан',
	        dd     : translator.translate,
	        M      : 'месец',
	        MM     : translator.translate,
	        y      : 'годину',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return srCyrl;
	
	})));


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var ss = moment.defineLocale('ss', {
	    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Namuhla nga] LT',
	        nextDay : '[Kusasa nga] LT',
	        nextWeek : 'dddd [nga] LT',
	        lastDay : '[Itolo nga] LT',
	        lastWeek : 'dddd [leliphelile] [nga] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'nga %s',
	        past : 'wenteka nga %s',
	        s : 'emizuzwana lomcane',
	        ss : '%d mzuzwana',
	        m : 'umzuzu',
	        mm : '%d emizuzu',
	        h : 'lihora',
	        hh : '%d emahora',
	        d : 'lilanga',
	        dd : '%d emalanga',
	        M : 'inyanga',
	        MM : '%d tinyanga',
	        y : 'umnyaka',
	        yy : '%d iminyaka'
	    },
	    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'ekuseni';
	        } else if (hours < 15) {
	            return 'emini';
	        } else if (hours < 19) {
	            return 'entsambama';
	        } else {
	            return 'ebusuku';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ekuseni') {
	            return hour;
	        } else if (meridiem === 'emini') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	            if (hour === 0) {
	                return 0;
	            }
	            return hour + 12;
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : '%d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ss;
	
	})));


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sv = moment.defineLocale('sv', {
	    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Idag] LT',
	        nextDay: '[Imorgon] LT',
	        lastDay: '[Igår] LT',
	        nextWeek: '[På] dddd LT',
	        lastWeek: '[I] dddd[s] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : 'för %s sedan',
	        s : 'några sekunder',
	        ss : '%d sekunder',
	        m : 'en minut',
	        mm : '%d minuter',
	        h : 'en timme',
	        hh : '%d timmar',
	        d : 'en dag',
	        dd : '%d dagar',
	        M : 'en månad',
	        MM : '%d månader',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'e' :
	            (b === 1) ? 'a' :
	            (b === 2) ? 'a' :
	            (b === 3) ? 'e' : 'e';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sv;
	
	})));


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sw = moment.defineLocale('sw', {
	    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[leo saa] LT',
	        nextDay : '[kesho saa] LT',
	        nextWeek : '[wiki ijayo] dddd [saat] LT',
	        lastDay : '[jana] LT',
	        lastWeek : '[wiki iliyopita] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s baadaye',
	        past : 'tokea %s',
	        s : 'hivi punde',
	        ss : 'sekunde %d',
	        m : 'dakika moja',
	        mm : 'dakika %d',
	        h : 'saa limoja',
	        hh : 'masaa %d',
	        d : 'siku moja',
	        dd : 'masiku %d',
	        M : 'mwezi mmoja',
	        MM : 'miezi %d',
	        y : 'mwaka mmoja',
	        yy : 'miaka %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sw;
	
	})));


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '௧',
	    '2': '௨',
	    '3': '௩',
	    '4': '௪',
	    '5': '௫',
	    '6': '௬',
	    '7': '௭',
	    '8': '௮',
	    '9': '௯',
	    '0': '௦'
	};
	var numberMap = {
	    '௧': '1',
	    '௨': '2',
	    '௩': '3',
	    '௪': '4',
	    '௫': '5',
	    '௬': '6',
	    '௭': '7',
	    '௮': '8',
	    '௯': '9',
	    '௦': '0'
	};
	
	var ta = moment.defineLocale('ta', {
	    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, HH:mm',
	        LLLL : 'dddd, D MMMM YYYY, HH:mm'
	    },
	    calendar : {
	        sameDay : '[இன்று] LT',
	        nextDay : '[நாளை] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[நேற்று] LT',
	        lastWeek : '[கடந்த வாரம்] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s இல்',
	        past : '%s முன்',
	        s : 'ஒரு சில விநாடிகள்',
	        ss : '%d விநாடிகள்',
	        m : 'ஒரு நிமிடம்',
	        mm : '%d நிமிடங்கள்',
	        h : 'ஒரு மணி நேரம்',
	        hh : '%d மணி நேரம்',
	        d : 'ஒரு நாள்',
	        dd : '%d நாட்கள்',
	        M : 'ஒரு மாதம்',
	        MM : '%d மாதங்கள்',
	        y : 'ஒரு வருடம்',
	        yy : '%d ஆண்டுகள்'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}வது/,
	    ordinal : function (number) {
	        return number + 'வது';
	    },
	    preparse: function (string) {
	        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // refer http://ta.wikipedia.org/s/1er1
	    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 2) {
	            return ' யாமம்';
	        } else if (hour < 6) {
	            return ' வைகறை';  // வைகறை
	        } else if (hour < 10) {
	            return ' காலை'; // காலை
	        } else if (hour < 14) {
	            return ' நண்பகல்'; // நண்பகல்
	        } else if (hour < 18) {
	            return ' எற்பாடு'; // எற்பாடு
	        } else if (hour < 22) {
	            return ' மாலை'; // மாலை
	        } else {
	            return ' யாமம்';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'யாமம்') {
	            return hour < 2 ? hour : hour + 12;
	        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	            return hour;
	        } else if (meridiem === 'நண்பகல்') {
	            return hour >= 10 ? hour : hour + 12;
	        } else {
	            return hour + 12;
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ta;
	
	})));


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var te = moment.defineLocale('te', {
	    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[నేడు] LT',
	        nextDay : '[రేపు] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[నిన్న] LT',
	        lastWeek : '[గత] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s లో',
	        past : '%s క్రితం',
	        s : 'కొన్ని క్షణాలు',
	        ss : '%d సెకన్లు',
	        m : 'ఒక నిమిషం',
	        mm : '%d నిమిషాలు',
	        h : 'ఒక గంట',
	        hh : '%d గంటలు',
	        d : 'ఒక రోజు',
	        dd : '%d రోజులు',
	        M : 'ఒక నెల',
	        MM : '%d నెలలు',
	        y : 'ఒక సంవత్సరం',
	        yy : '%d సంవత్సరాలు'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}వ/,
	    ordinal : '%dవ',
	    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'రాత్రి') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ఉదయం') {
	            return hour;
	        } else if (meridiem === 'మధ్యాహ్నం') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'సాయంత్రం') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'రాత్రి';
	        } else if (hour < 10) {
	            return 'ఉదయం';
	        } else if (hour < 17) {
	            return 'మధ్యాహ్నం';
	        } else if (hour < 20) {
	            return 'సాయంత్రం';
	        } else {
	            return 'రాత్రి';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return te;
	
	})));


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tet = moment.defineLocale('tet', {
	    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Ohin iha] LT',
	        nextDay: '[Aban iha] LT',
	        nextWeek: 'dddd [iha] LT',
	        lastDay: '[Horiseik iha] LT',
	        lastWeek: 'dddd [semana kotuk] [iha] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'iha %s',
	        past : '%s liuba',
	        s : 'minutu balun',
	        ss : 'minutu %d',
	        m : 'minutu ida',
	        mm : 'minutus %d',
	        h : 'horas ida',
	        hh : 'horas %d',
	        d : 'loron ida',
	        dd : 'loron %d',
	        M : 'fulan ida',
	        MM : 'fulan %d',
	        y : 'tinan ida',
	        yy : 'tinan %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tet;
	
	})));


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var th = moment.defineLocale('th', {
	    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY เวลา H:mm',
	        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	    },
	    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	    isPM: function (input) {
	        return input === 'หลังเที่ยง';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ก่อนเที่ยง';
	        } else {
	            return 'หลังเที่ยง';
	        }
	    },
	    calendar : {
	        sameDay : '[วันนี้ เวลา] LT',
	        nextDay : '[พรุ่งนี้ เวลา] LT',
	        nextWeek : 'dddd[หน้า เวลา] LT',
	        lastDay : '[เมื่อวานนี้ เวลา] LT',
	        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'อีก %s',
	        past : '%sที่แล้ว',
	        s : 'ไม่กี่วินาที',
	        ss : '%d วินาที',
	        m : '1 นาที',
	        mm : '%d นาที',
	        h : '1 ชั่วโมง',
	        hh : '%d ชั่วโมง',
	        d : '1 วัน',
	        dd : '%d วัน',
	        M : '1 เดือน',
	        MM : '%d เดือน',
	        y : '1 ปี',
	        yy : '%d ปี'
	    }
	});
	
	return th;
	
	})));


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tlPh = moment.defineLocale('tl-ph', {
	    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'MM/D/YYYY',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY HH:mm',
	        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: 'LT [ngayong araw]',
	        nextDay: '[Bukas ng] LT',
	        nextWeek: 'LT [sa susunod na] dddd',
	        lastDay: 'LT [kahapon]',
	        lastWeek: 'LT [noong nakaraang] dddd',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'sa loob ng %s',
	        past : '%s ang nakalipas',
	        s : 'ilang segundo',
	        ss : '%d segundo',
	        m : 'isang minuto',
	        mm : '%d minuto',
	        h : 'isang oras',
	        hh : '%d oras',
	        d : 'isang araw',
	        dd : '%d araw',
	        M : 'isang buwan',
	        MM : '%d buwan',
	        y : 'isang taon',
	        yy : '%d taon'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlPh;
	
	})));


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	function translateFuture(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'leS' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'waQ' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'nem' :
	    time + ' pIq';
	    return time;
	}
	
	function translatePast(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'Hu’' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'wen' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'ben' :
	    time + ' ret';
	    return time;
	}
	
	function translate(number, withoutSuffix, string, isFuture) {
	    var numberNoun = numberAsNoun(number);
	    switch (string) {
	        case 'ss':
	            return numberNoun + ' lup';
	        case 'mm':
	            return numberNoun + ' tup';
	        case 'hh':
	            return numberNoun + ' rep';
	        case 'dd':
	            return numberNoun + ' jaj';
	        case 'MM':
	            return numberNoun + ' jar';
	        case 'yy':
	            return numberNoun + ' DIS';
	    }
	}
	
	function numberAsNoun(number) {
	    var hundred = Math.floor((number % 1000) / 100),
	    ten = Math.floor((number % 100) / 10),
	    one = number % 10,
	    word = '';
	    if (hundred > 0) {
	        word += numbersNouns[hundred] + 'vatlh';
	    }
	    if (ten > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	    }
	    if (one > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	    }
	    return (word === '') ? 'pagh' : word;
	}
	
	var tlh = moment.defineLocale('tlh', {
	    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[DaHjaj] LT',
	        nextDay: '[wa’leS] LT',
	        nextWeek: 'LLL',
	        lastDay: '[wa’Hu’] LT',
	        lastWeek: 'LLL',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : translateFuture,
	        past : translatePast,
	        s : 'puS lup',
	        ss : translate,
	        m : 'wa’ tup',
	        mm : translate,
	        h : 'wa’ rep',
	        hh : translate,
	        d : 'wa’ jaj',
	        dd : translate,
	        M : 'wa’ jar',
	        MM : translate,
	        y : 'wa’ DIS',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlh;
	
	})));


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '\'inci',
	    5: '\'inci',
	    8: '\'inci',
	    70: '\'inci',
	    80: '\'inci',
	    2: '\'nci',
	    7: '\'nci',
	    20: '\'nci',
	    50: '\'nci',
	    3: '\'üncü',
	    4: '\'üncü',
	    100: '\'üncü',
	    6: '\'ncı',
	    9: '\'uncu',
	    10: '\'uncu',
	    30: '\'uncu',
	    60: '\'ıncı',
	    90: '\'ıncı'
	};
	
	var tr = moment.defineLocale('tr', {
	    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[yarın saat] LT',
	        nextWeek : '[gelecek] dddd [saat] LT',
	        lastDay : '[dün] LT',
	        lastWeek : '[geçen] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s önce',
	        s : 'birkaç saniye',
	        ss : '%d saniye',
	        m : 'bir dakika',
	        mm : '%d dakika',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir yıl',
	        yy : '%d yıl'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '\'ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tr;
	
	})));


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	var tzl = moment.defineLocale('tzl', {
	    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM [dallas] YYYY',
	        LLL : 'D. MMMM [dallas] YYYY HH.mm',
	        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	    },
	    meridiemParse: /d\'o|d\'a/i,
	    isPM : function (input) {
	        return 'd\'o' === input.toLowerCase();
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'd\'o' : 'D\'O';
	        } else {
	            return isLower ? 'd\'a' : 'D\'A';
	        }
	    },
	    calendar : {
	        sameDay : '[oxhi à] LT',
	        nextDay : '[demà à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[ieiri à] LT',
	        lastWeek : '[sür el] dddd [lasteu à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'osprei %s',
	        past : 'ja%s',
	        s : processRelativeTime,
	        ss : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['viensas secunds', '\'iensas secunds'],
	        'ss': [number + ' secunds', '' + number + ' secunds'],
	        'm': ['\'n míut', '\'iens míut'],
	        'mm': [number + ' míuts', '' + number + ' míuts'],
	        'h': ['\'n þora', '\'iensa þora'],
	        'hh': [number + ' þoras', '' + number + ' þoras'],
	        'd': ['\'n ziua', '\'iensa ziua'],
	        'dd': [number + ' ziuas', '' + number + ' ziuas'],
	        'M': ['\'n mes', '\'iens mes'],
	        'MM': [number + ' mesen', '' + number + ' mesen'],
	        'y': ['\'n ar', '\'iens ar'],
	        'yy': [number + ' ars', '' + number + ' ars']
	    };
	    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	}
	
	return tzl;
	
	})));


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzm = moment.defineLocale('tzm', {
	    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	        nextWeek: 'dddd [ⴴ] LT',
	        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	        lastWeek: 'dddd [ⴴ] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	        past : 'ⵢⴰⵏ %s',
	        s : 'ⵉⵎⵉⴽ',
	        ss : '%d ⵉⵎⵉⴽ',
	        m : 'ⵎⵉⵏⵓⴺ',
	        mm : '%d ⵎⵉⵏⵓⴺ',
	        h : 'ⵙⴰⵄⴰ',
	        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	        d : 'ⴰⵙⵙ',
	        dd : '%d oⵙⵙⴰⵏ',
	        M : 'ⴰⵢoⵓⵔ',
	        MM : '%d ⵉⵢⵢⵉⵔⵏ',
	        y : 'ⴰⵙⴳⴰⵙ',
	        yy : '%d ⵉⵙⴳⴰⵙⵏ'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzm;
	
	})));


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzmLatn = moment.defineLocale('tzm-latn', {
	    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[asdkh g] LT',
	        nextDay: '[aska g] LT',
	        nextWeek: 'dddd [g] LT',
	        lastDay: '[assant g] LT',
	        lastWeek: 'dddd [g] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dadkh s yan %s',
	        past : 'yan %s',
	        s : 'imik',
	        ss : '%d imik',
	        m : 'minuḍ',
	        mm : '%d minuḍ',
	        h : 'saɛa',
	        hh : '%d tassaɛin',
	        d : 'ass',
	        dd : '%d ossan',
	        M : 'ayowr',
	        MM : '%d iyyirn',
	        y : 'asgas',
	        yy : '%d isgasn'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzmLatn;
	
	})));


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
	        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	        'dd': 'день_дні_днів',
	        'MM': 'місяць_місяці_місяців',
	        'yy': 'рік_роки_років'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвилина' : 'хвилину';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'година' : 'годину';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	function weekdaysCaseReplace(m, format) {
	    var weekdays = {
	        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	    };
	
	    if (!m) {
	        return weekdays['nominative'];
	    }
	
	    var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	        'accusative' :
	        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	            'genitive' :
	            'nominative');
	    return weekdays[nounCase][m.day()];
	}
	function processHoursFunction(str) {
	    return function () {
	        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	    };
	}
	
	var uk = moment.defineLocale('uk', {
	    months : {
	        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	    },
	    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	    weekdays : weekdaysCaseReplace,
	    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY р.',
	        LLL : 'D MMMM YYYY р., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	    },
	    calendar : {
	        sameDay: processHoursFunction('[Сьогодні '),
	        nextDay: processHoursFunction('[Завтра '),
	        lastDay: processHoursFunction('[Вчора '),
	        nextWeek: processHoursFunction('[У] dddd ['),
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past : '%s тому',
	        s : 'декілька секунд',
	        ss : relativeTimeWithPlural,
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'годину',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'місяць',
	        MM : relativeTimeWithPlural,
	        y : 'рік',
	        yy : relativeTimeWithPlural
	    },
	    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	    meridiemParse: /ночі|ранку|дня|вечора/,
	    isPM: function (input) {
	        return /^(дня|вечора)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночі';
	        } else if (hour < 12) {
	            return 'ранку';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечора';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return uk;
	
	})));


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'جنوری',
	    'فروری',
	    'مارچ',
	    'اپریل',
	    'مئی',
	    'جون',
	    'جولائی',
	    'اگست',
	    'ستمبر',
	    'اکتوبر',
	    'نومبر',
	    'دسمبر'
	];
	var days = [
	    'اتوار',
	    'پیر',
	    'منگل',
	    'بدھ',
	    'جمعرات',
	    'جمعہ',
	    'ہفتہ'
	];
	
	var ur = moment.defineLocale('ur', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[آج بوقت] LT',
	        nextDay : '[کل بوقت] LT',
	        nextWeek : 'dddd [بوقت] LT',
	        lastDay : '[گذشتہ روز بوقت] LT',
	        lastWeek : '[گذشتہ] dddd [بوقت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s بعد',
	        past : '%s قبل',
	        s : 'چند سیکنڈ',
	        ss : '%d سیکنڈ',
	        m : 'ایک منٹ',
	        mm : '%d منٹ',
	        h : 'ایک گھنٹہ',
	        hh : '%d گھنٹے',
	        d : 'ایک دن',
	        dd : '%d دن',
	        M : 'ایک ماہ',
	        MM : '%d ماہ',
	        y : 'ایک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ur;
	
	})));


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var uz = moment.defineLocale('uz', {
	    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бугун соат] LT [да]',
	        nextDay : '[Эртага] LT [да]',
	        nextWeek : 'dddd [куни соат] LT [да]',
	        lastDay : '[Кеча соат] LT [да]',
	        lastWeek : '[Утган] dddd [куни соат] LT [да]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Якин %s ичида',
	        past : 'Бир неча %s олдин',
	        s : 'фурсат',
	        ss : '%d фурсат',
	        m : 'бир дакика',
	        mm : '%d дакика',
	        h : 'бир соат',
	        hh : '%d соат',
	        d : 'бир кун',
	        dd : '%d кун',
	        M : 'бир ой',
	        MM : '%d ой',
	        y : 'бир йил',
	        yy : '%d йил'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return uz;
	
	})));


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var uzLatn = moment.defineLocale('uz-latn', {
	    months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
	    monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	    weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
	    weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	    weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Bugun soat] LT [da]',
	        nextDay : '[Ertaga] LT [da]',
	        nextWeek : 'dddd [kuni soat] LT [da]',
	        lastDay : '[Kecha soat] LT [da]',
	        lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Yaqin %s ichida',
	        past : 'Bir necha %s oldin',
	        s : 'soniya',
	        ss : '%d soniya',
	        m : 'bir daqiqa',
	        mm : '%d daqiqa',
	        h : 'bir soat',
	        hh : '%d soat',
	        d : 'bir kun',
	        dd : '%d kun',
	        M : 'bir oy',
	        MM : '%d oy',
	        y : 'bir yil',
	        yy : '%d yil'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return uzLatn;
	
	})));


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var vi = moment.defineLocale('vi', {
	    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /sa|ch/i,
	    isPM : function (input) {
	        return /^ch$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'sa' : 'SA';
	        } else {
	            return isLower ? 'ch' : 'CH';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [năm] YYYY',
	        LLL : 'D MMMM [năm] YYYY HH:mm',
	        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	        l : 'DD/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hôm nay lúc] LT',
	        nextDay: '[Ngày mai lúc] LT',
	        nextWeek: 'dddd [tuần tới lúc] LT',
	        lastDay: '[Hôm qua lúc] LT',
	        lastWeek: 'dddd [tuần rồi lúc] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s tới',
	        past : '%s trước',
	        s : 'vài giây',
	        ss : '%d giây' ,
	        m : 'một phút',
	        mm : '%d phút',
	        h : 'một giờ',
	        hh : '%d giờ',
	        d : 'một ngày',
	        dd : '%d ngày',
	        M : 'một tháng',
	        MM : '%d tháng',
	        y : 'một năm',
	        yy : '%d năm'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return vi;
	
	})));


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var xPseudo = moment.defineLocale('x-pseudo', {
	    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[T~ódá~ý át] LT',
	        nextDay : '[T~ómó~rró~w át] LT',
	        nextWeek : 'dddd [át] LT',
	        lastDay : '[Ý~ést~érdá~ý át] LT',
	        lastWeek : '[L~ást] dddd [át] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'í~ñ %s',
	        past : '%s á~gó',
	        s : 'á ~féw ~sécó~ñds',
	        ss : '%d s~écóñ~ds',
	        m : 'á ~míñ~úté',
	        mm : '%d m~íñú~tés',
	        h : 'á~ñ hó~úr',
	        hh : '%d h~óúrs',
	        d : 'á ~dáý',
	        dd : '%d d~áýs',
	        M : 'á ~móñ~th',
	        MM : '%d m~óñt~hs',
	        y : 'á ~ýéár',
	        yy : '%d ý~éárs'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return xPseudo;
	
	})));


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var yo = moment.defineLocale('yo', {
	    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Ònì ni] LT',
	        nextDay : '[Ọ̀la ni] LT',
	        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	        lastDay : '[Àna ni] LT',
	        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ní %s',
	        past : '%s kọjá',
	        s : 'ìsẹjú aayá die',
	        ss :'aayá %d',
	        m : 'ìsẹjú kan',
	        mm : 'ìsẹjú %d',
	        h : 'wákati kan',
	        hh : 'wákati %d',
	        d : 'ọjọ́ kan',
	        dd : 'ọjọ́ %d',
	        M : 'osù kan',
	        MM : 'osù %d',
	        y : 'ọdún kan',
	        yy : 'ọdún %d'
	    },
	    dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
	    ordinal : 'ọjọ́ %d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return yo;
	
	})));


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhCn = moment.defineLocale('zh-cn', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日Ah点mm分',
	        LLLL : 'YYYY年M月D日ddddAh点mm分',
	        l : 'YYYY/M/D',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' ||
	                meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        } else {
	            // '中午'
	            return hour >= 11 ? hour : hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s内',
	        past : '%s前',
	        s : '几秒',
	        ss : '%d 秒',
	        m : '1 分钟',
	        mm : '%d 分钟',
	        h : '1 小时',
	        hh : '%d 小时',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 个月',
	        MM : '%d 个月',
	        y : '1 年',
	        yy : '%d 年'
	    },
	    week : {
	        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return zhCn;
	
	})));


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhHk = moment.defineLocale('zh-hk', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日 HH:mm',
	        LLLL : 'YYYY年M月D日dddd HH:mm',
	        l : 'YYYY/M/D',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        ss : '%d 秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhHk;
	
	})));


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(270)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhTw = moment.defineLocale('zh-tw', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日 HH:mm',
	        LLLL : 'YYYY年M月D日dddd HH:mm',
	        l : 'YYYY/M/D',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        ss : '%d 秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhTw;
	
	})));


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).numbro=e()}}(function(){return function a(o,u,c){function s(t,e){if(!u[t]){if(!o[t]){var r="function"==typeof require&&require;if(!e&&r)return require(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};o[t][0].call(i.exports,function(e){return s(o[t][1][e]||e)},i,i.exports,a,o,u,c)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,r,t){!function(e){"use strict";var t,k=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,_=Math.ceil,L=Math.floor,T="[BigNumber Error] ",P=T+"Number primitive has more than 15 significant digits: ",U=1e14,j=14,C=9007199254740991,R=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],I=1e7,$=1e9;function G(e){var t=0|e;return 0<e||e===t?t:t-1}function V(e){for(var t,r,n=1,i=e.length,a=e[0]+"";n<i;){for(t=e[n++]+"",r=j-t.length;r--;t="0"+t);a+=t}for(i=a.length;48===a.charCodeAt(--i););return a.slice(0,i+1||1)}function q(e,t){var r,n,i=e.c,a=t.c,o=e.s,u=t.s,c=e.e,s=t.e;if(!o||!u)return null;if(r=i&&!i[0],n=a&&!a[0],r||n)return r?n?0:-u:o;if(o!=u)return o;if(r=o<0,n=c==s,!i||!a)return n?0:!i^r?1:-1;if(!n)return s<c^r?1:-1;for(u=(c=i.length)<(s=a.length)?c:s,o=0;o<u;o++)if(i[o]!=a[o])return i[o]>a[o]^r?1:-1;return c==s?0:s<c^r?1:-1}function Z(e,t,r,n){if(e<t||r<e||e!==(e<0?_(e):L(e)))throw Error(T+(n||"Argument")+("number"==typeof e?e<t||r<e?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function z(e){var t=e.c.length-1;return G(e.e/j)==t&&e.c[t]%2!=0}function W(e,t){return(1<e.length?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function H(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}(t=function e(t){var y,f,p,r,s,o,u,c,l,g,n=A.prototype={constructor:A,toString:null,valueOf:null},d=new A(1),b=20,w=4,h=-7,v=21,m=-1e7,O=1e7,x=!1,a=1,S=0,N={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},M="0123456789abcdefghijklmnopqrstuvwxyz";function A(e,t){var r,n,i,a,o,u,c,s,l=this;if(!(l instanceof A))return new A(e,t);if(null==t){if(e instanceof A)return l.s=e.s,l.e=e.e,void(l.c=(e=e.c)?e.slice():e);if((u="number"==typeof e)&&0*e==0){if(l.s=1/e<0?(e=-e,-1):1,e===~~e){for(a=0,o=e;10<=o;o/=10,a++);return l.e=a,void(l.c=[e])}s=String(e)}else{if(s=String(e),!k.test(s))return p(l,s,u);l.s=45==s.charCodeAt(0)?(s=s.slice(1),-1):1}-1<(a=s.indexOf("."))&&(s=s.replace(".","")),0<(o=s.search(/e/i))?(a<0&&(a=o),a+=+s.slice(o+1),s=s.substring(0,o)):a<0&&(a=s.length)}else{if(Z(t,2,M.length,"Base"),s=String(e),10==t)return E(l=new A(e instanceof A?e:s),b+l.e+1,w);if(u="number"==typeof e){if(0*e!=0)return p(l,s,u,t);if(l.s=1/e<0?(s=s.slice(1),-1):1,A.DEBUG&&15<s.replace(/^0\.0*|\./,"").length)throw Error(P+e);u=!1}else l.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1;for(r=M.slice(0,t),a=o=0,c=s.length;o<c;o++)if(r.indexOf(n=s.charAt(o))<0){if("."==n){if(a<o){a=c;continue}}else if(!i&&(s==s.toUpperCase()&&(s=s.toLowerCase())||s==s.toLowerCase()&&(s=s.toUpperCase()))){i=!0,o=-1,a=0;continue}return p(l,String(e),u,t)}-1<(a=(s=f(s,t,10,l.s)).indexOf("."))?s=s.replace(".",""):a=s.length}for(o=0;48===s.charCodeAt(o);o++);for(c=s.length;48===s.charCodeAt(--c););if(s=s.slice(o,++c)){if(c-=o,u&&A.DEBUG&&15<c&&(C<e||e!==L(e)))throw Error(P+l.s*e);if(O<(a=a-o-1))l.c=l.e=null;else if(a<m)l.c=[l.e=0];else{if(l.e=a,l.c=[],o=(a+1)%j,a<0&&(o+=j),o<c){for(o&&l.c.push(+s.slice(0,o)),c-=j;o<c;)l.c.push(+s.slice(o,o+=j));s=s.slice(o),o=j-s.length}else o-=c;for(;o--;s+="0");l.c.push(+s)}}else l.c=[l.e=0]}function i(e,t,r,n){var i,a,o,u,c;if(null==r?r=w:Z(r,0,8),!e.c)return e.toString();if(i=e.c[0],o=e.e,null==t)c=V(e.c),c=1==n||2==n&&(o<=h||v<=o)?W(c,o):H(c,o,"0");else if(a=(e=E(new A(e),t,r)).e,u=(c=V(e.c)).length,1==n||2==n&&(t<=a||a<=h)){for(;u<t;c+="0",u++);c=W(c,a)}else if(t-=o,c=H(c,a,"0"),u<a+1){if(0<--t)for(c+=".";t--;c+="0");}else if(0<(t+=a-u))for(a+1==u&&(c+=".");t--;c+="0");return e.s<0&&i?"-"+c:c}function B(e,t){for(var r,n=1,i=new A(e[0]);n<e.length;n++){if(!(r=new A(e[n])).s){i=r;break}t.call(i,r)&&(i=r)}return i}function D(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];10<=i;i/=10,n++);return(r=n+r*j-1)>O?e.c=e.e=null:e.c=r<m?[e.e=0]:(e.e=r,t),e}function E(e,t,r,n){var i,a,o,u,c,s,l,f=e.c,p=R;if(f){e:{for(i=1,u=f[0];10<=u;u/=10,i++);if((a=t-i)<0)a+=j,o=t,l=(c=f[s=0])/p[i-o-1]%10|0;else if((s=_((a+1)/j))>=f.length){if(!n)break e;for(;f.length<=s;f.push(0));c=l=0,o=(a%=j)-j+(i=1)}else{for(c=u=f[s],i=1;10<=u;u/=10,i++);l=(o=(a%=j)-j+i)<0?0:c/p[i-o-1]%10|0}if(n=n||t<0||null!=f[s+1]||(o<0?c:c%p[i-o-1]),n=r<4?(l||n)&&(0==r||r==(e.s<0?3:2)):5<l||5==l&&(4==r||n||6==r&&(0<a?0<o?c/p[i-o]:0:f[s-1])%10&1||r==(e.s<0?8:7)),t<1||!f[0])return f.length=0,n?(t-=e.e+1,f[0]=p[(j-t%j)%j],e.e=-t||0):f[0]=e.e=0,e;if(0==a?(f.length=s,u=1,s--):(f.length=s+1,u=p[j-a],f[s]=0<o?L(c/p[i-o]%p[o])*u:0),n)for(;;){if(0==s){for(a=1,o=f[0];10<=o;o/=10,a++);for(o=f[0]+=u,u=1;10<=o;o/=10,u++);a!=u&&(e.e++,f[0]==U&&(f[0]=1));break}if(f[s]+=u,f[s]!=U)break;f[s--]=0,u=1}for(a=f.length;0===f[--a];f.pop());}e.e>O?e.c=e.e=null:e.e<m&&(e.c=[e.e=0])}return e}function F(e){var t,r=e.e;return null===r?e.toString():(t=V(e.c),t=r<=h||v<=r?W(t,r):H(t,r,"0"),e.s<0?"-"+t:t)}return A.clone=e,A.ROUND_UP=0,A.ROUND_DOWN=1,A.ROUND_CEIL=2,A.ROUND_FLOOR=3,A.ROUND_HALF_UP=4,A.ROUND_HALF_DOWN=5,A.ROUND_HALF_EVEN=6,A.ROUND_HALF_CEIL=7,A.ROUND_HALF_FLOOR=8,A.EUCLID=9,A.config=A.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(T+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(Z(r=e[t],0,$,t),b=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(Z(r=e[t],0,8,t),w=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(Z(r[0],-$,0,t),Z(r[1],0,$,t),h=r[0],v=r[1]):(Z(r,-$,$,t),h=-(v=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)Z(r[0],-$,-1,t),Z(r[1],1,$,t),m=r[0],O=r[1];else{if(Z(r,-$,$,t),!r)throw Error(T+t+" cannot be zero: "+r);m=-(O=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(T+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw x=!r,Error(T+"crypto unavailable");x=r}else x=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(Z(r=e[t],0,9,t),a=r),e.hasOwnProperty(t="POW_PRECISION")&&(Z(r=e[t],0,$,t),S=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(T+t+" not an object: "+r);N=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(T+t+" invalid: "+r);M=r}}return{DECIMAL_PLACES:b,ROUNDING_MODE:w,EXPONENTIAL_AT:[h,v],RANGE:[m,O],CRYPTO:x,MODULO_MODE:a,POW_PRECISION:S,FORMAT:N,ALPHABET:M}},A.isBigNumber=function(e){return e instanceof A||e&&!0===e._isBigNumber||!1},A.maximum=A.max=function(){return B(arguments,n.lt)},A.minimum=A.min=function(){return B(arguments,n.gt)},A.random=(r=9007199254740992,s=Math.random()*r&2097151?function(){return L(Math.random()*r)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,i,a,o=0,u=[],c=new A(d);if(null==e?e=b:Z(e,0,$),i=_(e/j),x)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));o<i;)9e15<=(a=131072*t[o]+(t[o+1]>>>11))?(r=crypto.getRandomValues(new Uint32Array(2)),t[o]=r[0],t[o+1]=r[1]):(u.push(a%1e14),o+=2);o=i/2}else{if(!crypto.randomBytes)throw x=!1,Error(T+"crypto unavailable");for(t=crypto.randomBytes(i*=7);o<i;)9e15<=(a=281474976710656*(31&t[o])+1099511627776*t[o+1]+4294967296*t[o+2]+16777216*t[o+3]+(t[o+4]<<16)+(t[o+5]<<8)+t[o+6])?crypto.randomBytes(7).copy(t,o):(u.push(a%1e14),o+=7);o=i/7}if(!x)for(;o<i;)(a=s())<9e15&&(u[o++]=a%1e14);for(i=u[--o],e%=j,i&&e&&(a=R[j-e],u[o]=L(i/a)*a);0===u[o];u.pop(),o--);if(o<0)u=[n=0];else{for(n=-1;0===u[0];u.splice(0,1),n-=j);for(o=1,a=u[0];10<=a;a/=10,o++);o<j&&(n-=j-o)}return c.e=n,c.c=u,c}),A.sum=function(){for(var e=1,t=arguments,r=new A(t[0]);e<t.length;)r=r.plus(t[e++]);return r},f=function(){var v="0123456789";function m(e,t,r,n){for(var i,a,o=[0],u=0,c=e.length;u<c;){for(a=o.length;a--;o[a]*=t);for(o[0]+=n.indexOf(e.charAt(u++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r)}return o.reverse()}return function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g=e.indexOf("."),h=b,d=w;for(0<=g&&(c=S,S=0,e=e.replace(".",""),l=(p=new A(t)).pow(e.length-g),S=c,p.c=m(H(V(l.c),l.e,"0"),10,r,v),p.e=p.c.length),u=c=(f=m(e,t,r,i?(a=M,v):(a=v,M))).length;0==f[--c];f.pop());if(!f[0])return a.charAt(0);if(g<0?--u:(l.c=f,l.e=u,l.s=n,f=(l=y(l,p,h,d,r)).c,s=l.r,u=l.e),g=f[o=u+h+1],c=r/2,s=s||o<0||null!=f[o+1],s=d<4?(null!=g||s)&&(0==d||d==(l.s<0?3:2)):c<g||g==c&&(4==d||s||6==d&&1&f[o-1]||d==(l.s<0?8:7)),o<1||!f[0])e=s?H(a.charAt(1),-h,a.charAt(0)):a.charAt(0);else{if(f.length=o,s)for(--r;++f[--o]>r;)f[o]=0,o||(++u,f=[1].concat(f));for(c=f.length;!f[--c];);for(g=0,e="";g<=c;e+=a.charAt(f[g++]));e=H(e,u,a.charAt(0))}return e}}(),y=function(){function M(e,t,r){var n,i,a,o,u=0,c=e.length,s=t%I,l=t/I|0;for(e=e.slice();c--;)u=((i=s*(a=e[c]%I)+(n=l*a+(o=e[c]/I|0)*s)%I*I+u)/r|0)+(n/I|0)+l*o,e[c]=i%r;return u&&(e=[u].concat(e)),e}function B(e,t,r,n){var i,a;if(r!=n)a=n<r?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function D(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&1<e.length;e.splice(0,1));}return function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g,h,d,v,m,y,b,w,O,x=e.s==t.s?1:-1,S=e.c,N=t.c;if(!(S&&S[0]&&N&&N[0]))return new A(e.s&&t.s&&(S?!N||S[0]!=N[0]:N)?S&&0==S[0]||!N?0*x:x/0:NaN);for(g=(p=new A(x)).c=[],x=r+(o=e.e-t.e)+1,i||(i=U,o=G(e.e/j)-G(t.e/j),x=x/j|0),u=0;N[u]==(S[u]||0);u++);if(N[u]>(S[u]||0)&&o--,x<0)g.push(1),c=!0;else{for(y=S.length,w=N.length,x+=2,1<(s=L(i/(N[u=0]+1)))&&(N=M(N,s,i),S=M(S,s,i),w=N.length,y=S.length),m=w,d=(h=S.slice(0,w)).length;d<w;h[d++]=0);O=N.slice(),O=[0].concat(O),b=N[0],N[1]>=i/2&&b++;do{if(s=0,(a=B(N,h,w,d))<0){if(v=h[0],w!=d&&(v=v*i+(h[1]||0)),1<(s=L(v/b)))for(i<=s&&(s=i-1),f=(l=M(N,s,i)).length,d=h.length;1==B(l,h,f,d);)s--,D(l,w<f?O:N,f,i),f=l.length,a=1;else 0==s&&(a=s=1),f=(l=N.slice()).length;if(f<d&&(l=[0].concat(l)),D(h,l,d,i),d=h.length,-1==a)for(;B(N,h,w,d)<1;)s++,D(h,w<d?O:N,d,i),d=h.length}else 0===a&&(s++,h=[0]);g[u++]=s,h[0]?h[d++]=S[m]||0:(h=[S[m]],d=1)}while((m++<y||null!=h[0])&&x--);c=null!=h[0],g[0]||g.splice(0,1)}if(i==U){for(u=1,x=g[0];10<=x;x/=10,u++);E(p,r+(p.e=u+o*j-1)+1,n,c)}else p.e=o,p.r=+c;return p}}(),o=/^(-?)0([xbo])(?=\w[\w.]*$)/i,u=/^([^.]+)\.$/,c=/^\.([^.]+)$/,l=/^-?(Infinity|NaN)$/,g=/^\s*\+(?=[\w.])|^\s+|\s+$/g,p=function(e,t,r,n){var i,a=r?t:t.replace(g,"");if(l.test(a))e.s=isNaN(a)?null:a<0?-1:1,e.c=e.e=null;else{if(!r&&(a=a.replace(o,function(e,t,r){return i="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=i?e:t}),n&&(i=n,a=a.replace(u,"$1").replace(c,"0.$1")),t!=a))return new A(a,i);if(A.DEBUG)throw Error(T+"Not a"+(n?" base "+n:"")+" number: "+t);e.c=e.e=e.s=null}},n.absoluteValue=n.abs=function(){var e=new A(this);return e.s<0&&(e.s=1),e},n.comparedTo=function(e,t){return q(this,new A(e,t))},n.decimalPlaces=n.dp=function(e,t){var r,n,i;if(null!=e)return Z(e,0,$),null==t?t=w:Z(t,0,8),E(new A(this),e+this.e+1,t);if(!(r=this.c))return null;if(n=((i=r.length-1)-G(this.e/j))*j,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},n.dividedBy=n.div=function(e,t){return y(this,new A(e,t),b,w)},n.dividedToIntegerBy=n.idiv=function(e,t){return y(this,new A(e,t),0,1)},n.exponentiatedBy=n.pow=function(e,t){var r,n,i,a,o,u,c,s,l=this;if((e=new A(e)).c&&!e.isInteger())throw Error(T+"Exponent not an integer: "+F(e));if(null!=t&&(t=new A(t)),o=14<e.e,!l.c||!l.c[0]||1==l.c[0]&&!l.e&&1==l.c.length||!e.c||!e.c[0])return s=new A(Math.pow(+F(l),o?2-z(e):+F(e))),t?s.mod(t):s;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new A(NaN);(n=!u&&l.isInteger()&&t.isInteger())&&(l=l.mod(t))}else{if(9<e.e&&(0<l.e||l.e<-1||(0==l.e?1<l.c[0]||o&&24e7<=l.c[1]:l.c[0]<8e13||o&&l.c[0]<=9999975e7)))return a=l.s<0&&z(e)?-0:0,-1<l.e&&(a=1/a),new A(u?1/a:a);S&&(a=_(S/j+2))}for(c=o?(r=new A(.5),u&&(e.s=1),z(e)):(i=Math.abs(+F(e)))%2,s=new A(d);;){if(c){if(!(s=s.times(l)).c)break;a?s.c.length>a&&(s.c.length=a):n&&(s=s.mod(t))}if(i){if(0===(i=L(i/2)))break;c=i%2}else if(E(e=e.times(r),e.e+1,1),14<e.e)c=z(e);else{if(0==(i=+F(e)))break;c=i%2}l=l.times(l),a?l.c&&l.c.length>a&&(l.c.length=a):n&&(l=l.mod(t))}return n?s:(u&&(s=d.div(s)),t?s.mod(t):a?E(s,S,w,void 0):s)},n.integerValue=function(e){var t=new A(this);return null==e?e=w:Z(e,0,8),E(t,t.e+1,e)},n.isEqualTo=n.eq=function(e,t){return 0===q(this,new A(e,t))},n.isFinite=function(){return!!this.c},n.isGreaterThan=n.gt=function(e,t){return 0<q(this,new A(e,t))},n.isGreaterThanOrEqualTo=n.gte=function(e,t){return 1===(t=q(this,new A(e,t)))||0===t},n.isInteger=function(){return!!this.c&&G(this.e/j)>this.c.length-2},n.isLessThan=n.lt=function(e,t){return q(this,new A(e,t))<0},n.isLessThanOrEqualTo=n.lte=function(e,t){return-1===(t=q(this,new A(e,t)))||0===t},n.isNaN=function(){return!this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return 0<this.s},n.isZero=function(){return!!this.c&&0==this.c[0]},n.minus=function(e,t){var r,n,i,a,o=this,u=o.s;if(t=(e=new A(e,t)).s,!u||!t)return new A(NaN);if(u!=t)return e.s=-t,o.plus(e);var c=o.e/j,s=e.e/j,l=o.c,f=e.c;if(!c||!s){if(!l||!f)return l?(e.s=-t,e):new A(f?o:NaN);if(!l[0]||!f[0])return f[0]?(e.s=-t,e):new A(l[0]?o:3==w?-0:0)}if(c=G(c),s=G(s),l=l.slice(),u=c-s){for((i=(a=u<0)?(u=-u,l):(s=c,f)).reverse(),t=u;t--;i.push(0));i.reverse()}else for(n=(a=(u=l.length)<(t=f.length))?u:t,u=t=0;t<n;t++)if(l[t]!=f[t]){a=l[t]<f[t];break}if(a&&(i=l,l=f,f=i,e.s=-e.s),0<(t=(n=f.length)-(r=l.length)))for(;t--;l[r++]=0);for(t=U-1;u<n;){if(l[--n]<f[n]){for(r=n;r&&!l[--r];l[r]=t);--l[r],l[n]+=U}l[n]-=f[n]}for(;0==l[0];l.splice(0,1),--s);return l[0]?D(e,l,s):(e.s=3==w?-1:1,e.c=[e.e=0],e)},n.modulo=n.mod=function(e,t){var r,n,i=this;return e=new A(e,t),!i.c||!e.s||e.c&&!e.c[0]?new A(NaN):!e.c||i.c&&!i.c[0]?new A(i):(9==a?(n=e.s,e.s=1,r=y(i,e,0,3),e.s=n,r.s*=n):r=y(i,e,0,a),(e=i.minus(r.times(e))).c[0]||1!=a||(e.s=i.s),e)},n.multipliedBy=n.times=function(e,t){var r,n,i,a,o,u,c,s,l,f,p,g,h,d,v,m=this,y=m.c,b=(e=new A(e,t)).c;if(!(y&&b&&y[0]&&b[0]))return!m.s||!e.s||y&&!y[0]&&!b||b&&!b[0]&&!y?e.c=e.e=e.s=null:(e.s*=m.s,y&&b?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=G(m.e/j)+G(e.e/j),e.s*=m.s,(c=y.length)<(f=b.length)&&(h=y,y=b,b=h,i=c,c=f,f=i),i=c+f,h=[];i--;h.push(0));for(d=U,v=I,i=f;0<=--i;){for(r=0,p=b[i]%v,g=b[i]/v|0,a=i+(o=c);i<a;)r=((s=p*(s=y[--o]%v)+(u=g*s+(l=y[o]/v|0)*p)%v*v+h[a]+r)/d|0)+(u/v|0)+g*l,h[a--]=s%d;h[a]=r}return r?++n:h.splice(0,1),D(e,h,n)},n.negated=function(){var e=new A(this);return e.s=-e.s||null,e},n.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new A(e,t)).s,!i||!t)return new A(NaN);if(i!=t)return e.s=-t,n.minus(e);var a=n.e/j,o=e.e/j,u=n.c,c=e.c;if(!a||!o){if(!u||!c)return new A(i/0);if(!u[0]||!c[0])return c[0]?e:new A(u[0]?n:0*i)}if(a=G(a),o=G(o),u=u.slice(),i=a-o){for((r=0<i?(o=a,c):(i=-i,u)).reverse();i--;r.push(0));r.reverse()}for((i=u.length)-(t=c.length)<0&&(r=c,c=u,u=r,t=i),i=0;t;)i=(u[--t]=u[t]+c[t]+i)/U|0,u[t]=U===u[t]?0:u[t]%U;return i&&(u=[i].concat(u),++o),D(e,u,o)},n.precision=n.sd=function(e,t){var r,n,i;if(null!=e&&e!==!!e)return Z(e,1,$),null==t?t=w:Z(t,0,8),E(new A(this),e,t);if(!(r=this.c))return null;if(n=(i=r.length-1)*j+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];10<=i;i/=10,n++);}return e&&this.e+1>n&&(n=this.e+1),n},n.shiftedBy=function(e){return Z(e,-C,C),this.times("1e"+e)},n.squareRoot=n.sqrt=function(){var e,t,r,n,i,a=this,o=a.c,u=a.s,c=a.e,s=b+4,l=new A("0.5");if(1!==u||!o||!o[0])return new A(!u||u<0&&(!o||o[0])?NaN:o?a:1/0);if((r=0==(u=Math.sqrt(+F(a)))||u==1/0?(((t=V(o)).length+c)%2==0&&(t+="0"),u=Math.sqrt(+t),c=G((c+1)/2)-(c<0||c%2),new A(t=u==1/0?"1e"+c:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+c)):new A(u+"")).c[0])for((u=(c=r.e)+s)<3&&(u=0);;)if(i=r,r=l.times(i.plus(y(a,i,s,1))),V(i.c).slice(0,u)===(t=V(r.c)).slice(0,u)){if(r.e<c&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(E(r,r.e+b+2,1),e=!r.times(r).eq(a));break}if(!n&&(E(i,i.e+b+2,0),i.times(i).eq(a))){r=i;break}s+=4,u+=4,n=1}return E(r,r.e+b+1,w,e)},n.toExponential=function(e,t){return null!=e&&(Z(e,0,$),e++),i(this,e,t,1)},n.toFixed=function(e,t){return null!=e&&(Z(e,0,$),e=e+this.e+1),i(this,e,t)},n.toFormat=function(e,t,r){var n;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=N;else if("object"!=typeof r)throw Error(T+"Argument not an object: "+r);if(n=this.toFixed(e,t),this.c){var i,a=n.split("."),o=+r.groupSize,u=+r.secondaryGroupSize,c=r.groupSeparator||"",s=a[0],l=a[1],f=this.s<0,p=f?s.slice(1):s,g=p.length;if(u&&(i=o,o=u,g-=u=i),0<o&&0<g){for(i=g%o||o,s=p.substr(0,i);i<g;i+=o)s+=c+p.substr(i,o);0<u&&(s+=c+p.slice(i)),f&&(s="-"+s)}n=l?s+(r.decimalSeparator||"")+((u=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):s}return(r.prefix||"")+n+(r.suffix||"")},n.toFraction=function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g=this,h=g.c;if(null!=e&&(!(u=new A(e)).isInteger()&&(u.c||1!==u.s)||u.lt(d)))throw Error(T+"Argument "+(u.isInteger()?"out of range: ":"not an integer: ")+F(u));if(!h)return new A(g);for(t=new A(d),s=r=new A(d),n=c=new A(d),p=V(h),a=t.e=p.length-g.e-1,t.c[0]=R[(o=a%j)<0?j+o:o],e=!e||0<u.comparedTo(t)?0<a?t:s:u,o=O,O=1/0,u=new A(p),c.c[0]=0;l=y(u,t,0,1),1!=(i=r.plus(l.times(n))).comparedTo(e);)r=n,n=i,s=c.plus(l.times(i=s)),c=i,t=u.minus(l.times(i=t)),u=i;return i=y(e.minus(r),n,0,1),c=c.plus(i.times(s)),r=r.plus(i.times(n)),c.s=s.s=g.s,f=y(s,n,a*=2,w).minus(g).abs().comparedTo(y(c,r,a,w).minus(g).abs())<1?[s,n]:[c,r],O=o,f},n.toNumber=function(){return+F(this)},n.toPrecision=function(e,t){return null!=e&&Z(e,1,$),i(this,e,t,2)},n.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(t=null==e?i<=h||v<=i?W(V(r.c),i):H(V(r.c),i,"0"):10===e?H(V((r=E(new A(r),b+i+1,w)).c),r.e,"0"):(Z(e,2,M.length,"Base"),f(H(V(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},n.valueOf=n.toJSON=function(){return F(this)},n._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(n[Symbol.toStringTag]="BigNumber",n[Symbol.for("nodejs.util.inspect.custom")]=n.valueOf),null!=t&&A.set(t),A}()).default=t.BigNumber=t,void 0!==r&&r.exports?r.exports=t:(e||(e="undefined"!=typeof self&&self?self:window),e.BigNumber=t)}(this)},{}],2:[function(e,t,r){"use strict";t.exports={languageTag:"en-US",delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},spaceSeparated:!1,ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$",position:"prefix",code:"USD"},currencyFormat:{thousandSeparated:!0,totalLength:4,spaceSeparated:!0},formats:{fourDigits:{totalLength:4,spaceSeparated:!0},fullWithTwoDecimals:{output:"currency",thousandSeparated:!0,mantissa:2},fullWithTwoDecimalsNoCurrency:{thousandSeparated:!0,mantissa:2},fullWithNoDecimals:{output:"currency",thousandSeparated:!0,mantissa:0}}}},{}],3:[function(e,t,r){"use strict";function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var R=e("./globalState"),o=e("./validating"),u=e("./parsing"),n=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],M={general:{scale:1024,suffixes:n,marker:"bd"},binary:{scale:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],marker:"b"},decimal:{scale:1e3,suffixes:n,marker:"d"}},I={totalLength:0,characteristic:0,forceAverage:!1,average:!1,mantissa:-1,optionalMantissa:!0,thousandSeparated:!1,spaceSeparated:!1,negative:"sign",forceSign:!1};function i(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0;if("string"==typeof t&&(t=u.parseFormat(t)),!o.validateFormat(t))return"ERROR: invalid format";var n=t.prefix||"",i=t.postfix||"",a=function(e,t,r){switch(t.output){case"currency":return t=A(t,R.currentCurrencyDefaultFormat()),function(e,t,r){var n=r.currentCurrency(),i=Object.assign({},I,t),a=void 0,o="",u=!!i.totalLength||!!i.forceAverage||i.average,c=t.currencyPosition||n.position,s=t.currencySymbol||n.symbol;i.spaceSeparated&&(o=" ");"infix"===c&&(a=o+s+o);var l=D({instance:e,providedFormat:t,state:r,decimalSeparator:a});"prefix"===c&&(l=e._value<0&&"sign"===i.negative?"-".concat(o).concat(s).concat(l.slice(1)):s+o+l);c&&"postfix"!==c||(l=l+(o=u?"":o)+s);return l}(e,t,R);case"percent":return t=A(t,R.currentPercentageDefaultFormat()),function(e,t,r,n){var i=t.prefixSymbol,a=D({instance:n(100*e._value),providedFormat:t,state:r}),o=Object.assign({},I,t);if(i)return"%".concat(o.spaceSeparated?" ":"").concat(a);return"".concat(a).concat(o.spaceSeparated?" ":"","%")}(e,t,R,r);case"byte":return t=A(t,R.currentByteDefaultFormat()),h=e,v=R,m=r,y=(d=t).base||"binary",b=M[y],w=B(h._value,b.suffixes,b.scale),O=w.value,x=w.suffix,S=D({instance:m(O),providedFormat:d,state:v,defaults:v.currentByteDefaultFormat()}),N=v.currentAbbreviations(),"".concat(S).concat(N.spaced?" ":"").concat(x);case"time":return t=A(t,R.currentTimeDefaultFormat()),l=e,f=Math.floor(l._value/60/60),p=Math.floor((l._value-60*f*60)/60),g=Math.round(l._value-60*f*60-60*p),"".concat(f,":").concat(p<10?"0":"").concat(p,":").concat(g<10?"0":"").concat(g);case"ordinal":return t=A(t,R.currentOrdinalDefaultFormat()),n=e,i=t,o=(a=R).currentOrdinal(),u=Object.assign({},I,i),c=D({instance:n,providedFormat:i,state:a}),s=o(n._value),"".concat(c).concat(u.spaceSeparated?" ":"").concat(s);case"number":default:return D({instance:e,providedFormat:t,numbro:r})}var n,i,a,o,u,c,s;var l,f,p,g;var h,d,v,m,y,b,w,O,x,S,N}(e,t,r);return a=(a=n+a)+i}function B(e,t,r){var n=t[0],i=Math.abs(e);if(r<=i){for(var a=1;a<t.length;++a){var o=Math.pow(r,a),u=Math.pow(r,a+1);if(o<=i&&i<u){n=t[a],e/=o;break}}n===t[0]&&(e/=Math.pow(r,t.length-1),n=t[t.length-1])}return{value:e,suffix:n}}function p(e){for(var t="",r=0;r<e;r++)t+="0";return t}function $(e,t){return-1!==e.toString().indexOf("e")?function(e,t){var r=e.toString(),n=C(r.split("e"),2),i=n[0],a=n[1],o=C(i.split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(0<+a)r=u+s+p(a-s.length);else{var l=".";l=+u<0?"-0".concat(l):"0".concat(l);var f=(p(-a-1)+Math.abs(u)+s).substr(0,t);f.length<t&&(f+=p(t-f.length)),r=l+f}return 0<+a&&0<t&&(r+=".".concat(p(t))),r}(e,t):(Math.round(+"".concat(e,"e+").concat(t))/Math.pow(10,t)).toFixed(t)}function D(e){var t=e.instance,r=e.providedFormat,n=e.state,i=void 0===n?R:n,a=e.decimalSeparator,o=e.defaults,u=void 0===o?i.currentDefaults():o,c=t._value;if(0===c&&i.hasZeroFormat())return i.getZeroFormat();if(!isFinite(c))return c.toString();var s,l,f,p,g,h,d,v,m=Object.assign({},I,u,r),y=m.totalLength,b=y?0:m.characteristic,w=m.optionalCharacteristic,O=m.forceAverage,x=!!y||!!O||m.average,S=y?-1:x&&void 0===r.mantissa?0:m.mantissa,N=!y&&(void 0===r.optionalMantissa?-1===S:m.optionalMantissa),M=m.trimMantissa,B=m.thousandSeparated,D=m.spaceSeparated,A=m.negative,E=m.forceSign,F=m.exponential,k="";if(x){var _=function(e){var t=e.value,r=e.forceAverage,n=e.abbreviations,i=e.spaceSeparated,a=void 0!==i&&i,o=e.totalLength,u=void 0===o?0:o,c="",s=Math.abs(t),l=-1;if(s>=Math.pow(10,12)&&!r||"trillion"===r?(c=n.trillion,t/=Math.pow(10,12)):s<Math.pow(10,12)&&s>=Math.pow(10,9)&&!r||"billion"===r?(c=n.billion,t/=Math.pow(10,9)):s<Math.pow(10,9)&&s>=Math.pow(10,6)&&!r||"million"===r?(c=n.million,t/=Math.pow(10,6)):(s<Math.pow(10,6)&&s>=Math.pow(10,3)&&!r||"thousand"===r)&&(c=n.thousand,t/=Math.pow(10,3)),c&&(c=(a?" ":"")+c),u){var f=t.toString().split(".")[0];l=Math.max(u-f.length,0)}return{value:t,abbreviation:c,mantissaPrecision:l}}({value:c,forceAverage:O,abbreviations:i.currentAbbreviations(),spaceSeparated:D,totalLength:y});c=_.value,k+=_.abbreviation,y&&(S=_.mantissaPrecision)}if(F){var L=(l=(s={value:c,characteristicPrecision:b}).value,f=s.characteristicPrecision,p=void 0===f?0:f,g=C(l.toExponential().split("e"),2),h=g[0],d=g[1],v=+h,p&&1<p&&(v*=Math.pow(10,p-1),d=0<=(d=+d-(p-1))?"+".concat(d):d),{value:v,abbreviation:"e".concat(d)});c=L.value,k=L.abbreviation+k}var T,P,U,j=function(e,t,r,n,i){if(-1===n)return e;var a=$(t,n),o=C(a.toString().split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(s.match(/^0+$/)&&(r||i))return u;var l=s.match(/0+$/);return i&&l?"".concat(u,".").concat(s.toString().slice(0,l.index)):a.toString()}(c.toString(),c,N,S,M);return j=function(e,t,r,n,i){var a=n.currentDelimiters(),o=a.thousands;i=i||a.decimal;var u=a.thousandsSize||3,c=e.toString(),s=c.split(".")[0],l=c.split(".")[1];return r&&(t<0&&(s=s.slice(1)),function(e,t){for(var r=[],n=0,i=e;0<i;i--)n===t&&(r.unshift(i),n=0),n++;return r}(s.length,u).forEach(function(e,t){s=s.slice(0,e+t)+o+s.slice(e+t)}),t<0&&(s="-".concat(s))),c=l?s+i+l:s}(j=function(e,t,r,n){var i=e,a=C(i.toString().split("."),2),o=a[0],u=a[1];if(o.match(/^-?0$/)&&r)return u?"".concat(o.replace("0",""),".").concat(u):o.replace("0","");if(o.length<n)for(var c=n-o.length,s=0;s<c;s++)i="0".concat(i);return i.toString()}(j,0,w,b),c,B,i,a),(x||F)&&(j=j+k),(E||c<0)&&(T=j,U=A,j=0===(P=c)?T:0==+T?T.replace("-",""):0<P?"+".concat(T):"sign"===U?T:"(".concat(T.replace("-",""),")")),j}function A(e,t){if(!e)return t;var r=Object.keys(e);return 1===r.length&&"output"===r[0]?t:e}t.exports=function(n){return{format:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return i.apply(void 0,t.concat([n]))},getByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.general;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getBinaryByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.binary;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getDecimalByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.decimal;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},formatOrDefault:A}}},{"./globalState":4,"./parsing":8,"./validating":10}],4:[function(e,t,r){"use strict";var i=e("./en-US"),n=e("./validating"),a=e("./parsing"),o={},u=void 0,c={},s=null,l={};function f(e){u=e}function p(){return c[u]}o.languages=function(){return Object.assign({},c)},o.currentLanguage=function(){return u},o.currentCurrency=function(){return p().currency},o.currentAbbreviations=function(){return p().abbreviations},o.currentDelimiters=function(){return p().delimiters},o.currentOrdinal=function(){return p().ordinal},o.currentDefaults=function(){return Object.assign({},p().defaults,l)},o.currentOrdinalDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().ordinalFormat)},o.currentByteDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().byteFormat)},o.currentPercentageDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().percentageFormat)},o.currentCurrencyDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().currencyFormat)},o.currentTimeDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().timeFormat)},o.setDefaults=function(e){e=a.parseFormat(e),n.validateFormat(e)&&(l=e)},o.getZeroFormat=function(){return s},o.setZeroFormat=function(e){return s="string"==typeof e?e:null},o.hasZeroFormat=function(){return null!==s},o.languageData=function(e){if(e){if(c[e])return c[e];throw new Error('Unknown tag "'.concat(e,'"'))}return p()},o.registerLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(!n.validateLanguage(e))throw new Error("Invalid language data");c[e.languageTag]=e,t&&f(e.languageTag)},o.setLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:i.languageTag;if(!c[e]){var r=e.split("-")[0],n=Object.keys(c).find(function(e){return e.split("-")[0]===r});return c[n]?void f(n):void f(t)}f(e)},o.registerLanguage(i),u=i.languageTag,t.exports=o},{"./en-US":2,"./parsing":8,"./validating":10}],5:[function(n,e,t){"use strict";e.exports=function(t){return{loadLanguagesInNode:function(e){return r=t,void e.forEach(function(t){var e=void 0;try{e=n("../languages/".concat(t))}catch(e){console.error('Unable to load "'.concat(t,'". No matching language file found.'))}e&&r.registerLanguage(e)});var r}}}},{}],6:[function(e,t,r){"use strict";var c=e("bignumber.js");function a(e,t,r){var n=new c(e._value),i=t;return r.isNumbro(t)&&(i=t._value),i=new c(i),e._value=n.minus(i).toNumber(),e}t.exports=function(u){return{add:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.plus(o).toNumber(),r;var r,n,i,a,o},subtract:function(e,t){return a(e,t,u)},multiply:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.times(o).toNumber(),r;var r,n,i,a,o},divide:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.dividedBy(o).toNumber(),r;var r,n,i,a,o},set:function(e,t){return r=e,i=n=t,u.isNumbro(n)&&(i=n._value),r._value=i,r;var r,n,i},difference:function(e,t){return r=t,a(i=(n=u)(e._value),r,n),Math.abs(i._value);var r,n,i}}}},{"bignumber.js":1}],7:[function(e,t,r){"use strict";function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=e("./globalState"),n=e("./validating"),o=e("./loading")(g),u=e("./unformatting"),c=e("./formatting")(g),s=e("./manipulating")(g),l=e("./parsing"),f=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._value=e}var e,r,n;return e=t,(r=[{key:"clone",value:function(){return g(this._value)}},{key:"format",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return c.format(this,e)}},{key:"formatCurrency",value:function(e){return"string"==typeof e&&(e=l.parseFormat(e)),(e=c.formatOrDefault(e,a.currentCurrencyDefaultFormat())).output="currency",c.format(this,e)}},{key:"formatTime",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return e.output="time",c.format(this,e)}},{key:"binaryByteUnits",value:function(){return c.getBinaryByteUnit(this)}},{key:"decimalByteUnits",value:function(){return c.getDecimalByteUnit(this)}},{key:"byteUnits",value:function(){return c.getByteUnit(this)}},{key:"difference",value:function(e){return s.difference(this,e)}},{key:"add",value:function(e){return s.add(this,e)}},{key:"subtract",value:function(e){return s.subtract(this,e)}},{key:"multiply",value:function(e){return s.multiply(this,e)}},{key:"divide",value:function(e){return s.divide(this,e)}},{key:"set",value:function(e){return s.set(this,p(e))}},{key:"value",value:function(){return this._value}},{key:"valueOf",value:function(){return this._value}}])&&i(e.prototype,r),n&&i(e,n),t}();function p(e){var t=e;return g.isNumbro(e)?t=e._value:"string"==typeof e?t=g.unformat(e):isNaN(e)&&(t=NaN),t}function g(e){return new f(p(e))}g.version="2.1.2",g.isNumbro=function(e){return e instanceof f},g.language=a.currentLanguage,g.registerLanguage=a.registerLanguage,g.setLanguage=a.setLanguage,g.languages=a.languages,g.languageData=a.languageData,g.zeroFormat=a.setZeroFormat,g.defaultFormat=a.currentDefaults,g.setDefaults=a.setDefaults,g.defaultCurrencyFormat=a.currentCurrencyDefaultFormat,g.validate=n.validate,g.loadLanguagesInNode=o.loadLanguagesInNode,g.unformat=u.unformat,t.exports=g},{"./formatting":3,"./globalState":4,"./loading":5,"./manipulating":6,"./parsing":8,"./unformatting":9,"./validating":10}],8:[function(e,t,r){"use strict";t.exports={parseFormat:function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g,h,d,v,m,y,b,w,O=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"string"!=typeof e?e:(r=O,e=(n=(t=e).match(/^{([^}]*)}/))?(r.prefix=n[1],t.slice(n[0].length)):t,a=O,function(e,t){if(-1===e.indexOf("$")){if(-1===e.indexOf("%"))return-1!==e.indexOf("bd")?(t.output="byte",t.base="general"):-1!==e.indexOf("b")?(t.output="byte",t.base="binary"):-1!==e.indexOf("d")?(t.output="byte",t.base="decimal"):-1===e.indexOf(":")?-1!==e.indexOf("o")&&(t.output="ordinal"):t.output="time";t.output="percent"}else t.output="currency"}(e=(o=(i=e).match(/{([^}]*)}$/))?(a.postfix=o[1],i.slice(0,-o[0].length)):i,O),u=O,(c=e.match(/[1-9]+[0-9]*/))&&(u.totalLength=+c[0]),s=O,(l=e.split(".")[0].match(/0+/))&&(s.characteristic=l[0].length),function(e,t){if(-1!==e.indexOf(".")){var r=e.split(".")[0];t.optionalCharacteristic=-1===r.indexOf("0")}}(e,O),f=O,-1!==e.indexOf("a")&&(f.average=!0),g=O,-1!==(p=e).indexOf("K")?g.forceAverage="thousand":-1!==p.indexOf("M")?g.forceAverage="million":-1!==p.indexOf("B")?g.forceAverage="billion":-1!==p.indexOf("T")&&(g.forceAverage="trillion"),function(e,t){var r=e.split(".")[1];if(r){var n=r.match(/0+/);n&&(t.mantissa=n[0].length)}}(e,O),d=O,(h=e).match(/\[\.]/)?d.optionalMantissa=!0:h.match(/\./)&&(d.optionalMantissa=!1),v=O,-1!==e.indexOf(",")&&(v.thousandSeparated=!0),m=O,-1!==e.indexOf(" ")&&(m.spaceSeparated=!0),b=O,(y=e).match(/^\+?\([^)]*\)$/)&&(b.negative="parenthesis"),y.match(/^\+?-/)&&(b.negative="sign"),w=O,e.match(/^\+/)&&(w.forceSign=!0),O)}}},{}],9:[function(p,e,t){"use strict";var O=[{key:"ZiB",factor:Math.pow(1024,7)},{key:"ZB",factor:Math.pow(1e3,7)},{key:"YiB",factor:Math.pow(1024,8)},{key:"YB",factor:Math.pow(1e3,8)},{key:"TiB",factor:Math.pow(1024,4)},{key:"TB",factor:Math.pow(1e3,4)},{key:"PiB",factor:Math.pow(1024,5)},{key:"PB",factor:Math.pow(1e3,5)},{key:"MiB",factor:Math.pow(1024,2)},{key:"MB",factor:Math.pow(1e3,2)},{key:"KiB",factor:Math.pow(1024,1)},{key:"KB",factor:Math.pow(1e3,1)},{key:"GiB",factor:Math.pow(1024,3)},{key:"GB",factor:Math.pow(1e3,3)},{key:"EiB",factor:Math.pow(1024,6)},{key:"EB",factor:Math.pow(1e3,6)},{key:"B",factor:1}];function x(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function g(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",n=3<arguments.length?arguments[3]:void 0,i=4<arguments.length?arguments[4]:void 0,a=5<arguments.length?arguments[5]:void 0,o=6<arguments.length?arguments[6]:void 0;if(""!==e)return e===i?0:function e(t,r){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length?arguments[3]:void 0,a=4<arguments.length?arguments[4]:void 0,o=5<arguments.length?arguments[5]:void 0,u=6<arguments.length?arguments[6]:void 0;if(!isNaN(+t))return+t;var c="",s=t.replace(/(^[^(]*)\((.*)\)([^)]*$)/,"$1$2$3");if(s!==t)return-1*e(s,r,n,i,a,o,u);for(var l=0;l<O.length;l++){var f=O[l];if((c=t.replace(f.key,""))!==t)return e(c,r,n,i,a,o,u)*f.factor}if((c=t.replace("%",""))!==t)return e(c,r,n,i,a,o,u)/100;var p=parseFloat(t);if(!isNaN(p)){var g=i(p);if(g&&"."!==g&&(c=t.replace(new RegExp("".concat(x(g),"$")),""))!==t)return e(c,r,n,i,a,o,u);var h={};Object.keys(o).forEach(function(e){h[o[e]]=e});for(var d=Object.keys(h).sort().reverse(),v=d.length,m=0;m<v;m++){var y=d[m],b=h[y];if((c=t.replace(y,""))!==t){var w=void 0;switch(b){case"thousand":w=Math.pow(10,3);break;case"million":w=Math.pow(10,6);break;case"billion":w=Math.pow(10,9);break;case"trillion":w=Math.pow(10,12)}return e(c,r,n,i,a,o,u)*w}}}}(function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",n=e.replace(r,"");return n=(n=n.replace(new RegExp("([0-9])".concat(x(t.thousands),"([0-9])"),"g"),"$1$2")).replace(t.decimal,".")}(e,t,r),t,r,n,i,a,o)}e.exports={unformat:function(e,t){var r,n,i,a=p("./globalState"),o=a.currentDelimiters(),u=a.currentCurrency().symbol,c=a.currentOrdinal(),s=a.getZeroFormat(),l=a.currentAbbreviations(),f=void 0;if("string"==typeof e)f=function(e,t){if(!e.indexOf(":")||":"===t.thousands)return!1;var r=e.split(":");if(3!==r.length)return!1;var n=+r[0],i=+r[1],a=+r[2];return!isNaN(n)&&!isNaN(i)&&!isNaN(a)}(e,o)?(r=e.split(":"),n=+r[0],i=+r[1],+r[2]+60*i+3600*n):g(e,o,u,c,s,l,t);else{if("number"!=typeof e)return;f=e}if(void 0!==f)return f}}},{"./globalState":4}],10:[function(e,t,r){"use strict";function n(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=e("./unformatting"),a=/^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,p={output:{type:"string",validValues:["currency","percent","byte","time","ordinal","number"]},base:{type:"string",validValues:["decimal","binary","general"],restriction:function(e,t){return"byte"===t.output},message:"`base` must be provided only when the output is `byte`",mandatory:function(e){return"byte"===e.output}},characteristic:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},prefix:"string",postfix:"string",forceAverage:{type:"string",validValues:["trillion","billion","million","thousand"]},average:"boolean",currencyPosition:{type:"string",validValues:["prefix","infix","postfix"]},currencySymbol:"string",totalLength:{type:"number",restrictions:[{restriction:function(e){return 0<=e},message:"value must be positive"},{restriction:function(e,t){return!t.exponential},message:"`totalLength` is incompatible with `exponential`"}]},mantissa:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},optionalMantissa:"boolean",trimMantissa:"boolean",optionalCharacteristic:"boolean",thousandSeparated:"boolean",spaceSeparated:"boolean",abbreviations:{type:"object",children:{thousand:"string",million:"string",billion:"string",trillion:"string"}},negative:{type:"string",validValues:["sign","parenthesis"]},forceSign:"boolean",exponential:{type:"boolean"},prefixSymbol:{type:"boolean",restriction:function(e,t){return"percent"===t.output},message:"`prefixSymbol` can be provided only when the output is `percent`"}},o={languageTag:{type:"string",mandatory:!0,restriction:function(e){return e.match(a)},message:"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"},delimiters:{type:"object",children:{thousands:"string",decimal:"string",thousandsSize:"number"},mandatory:!0},abbreviations:{type:"object",children:{thousand:{type:"string",mandatory:!0},million:{type:"string",mandatory:!0},billion:{type:"string",mandatory:!0},trillion:{type:"string",mandatory:!0}},mandatory:!0},spaceSeparated:"boolean",ordinal:{type:"function",mandatory:!0},currency:{type:"object",children:{symbol:"string",position:"string",code:"string"},mandatory:!0},defaults:"format",ordinalFormat:"format",byteFormat:"format",percentageFormat:"format",currencyFormat:"format",timeDefaults:"format",formats:{type:"object",children:{fourDigits:{type:"format",mandatory:!0},fullWithTwoDecimals:{type:"format",mandatory:!0},fullWithTwoDecimalsNoCurrency:{type:"format",mandatory:!0},fullWithNoDecimals:{type:"format",mandatory:!0}}}};function u(e){return!!i.unformat(e)}function g(c,s,l){var e=3<arguments.length&&void 0!==arguments[3]&&arguments[3],t=Object.keys(c).map(function(e){if(!s[e])return console.error("".concat(l," Invalid key: ").concat(e)),!1;var t=c[e],r=s[e];if("string"==typeof r&&(r={type:r}),"format"===r.type){if(!g(t,p,"[Validate ".concat(e,"]"),!0))return!1}else if(f(t)!==r.type)return console.error("".concat(l," ").concat(e,' type mismatched: "').concat(r.type,'" expected, "').concat(f(t),'" provided')),!1;if(r.restrictions&&r.restrictions.length)for(var n=r.restrictions.length,i=0;i<n;i++){var a=r.restrictions[i],o=a.restriction,u=a.message;if(!o(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(u)),!1}if(r.restriction&&!r.restriction(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(r.message)),!1;if(r.validValues&&-1===r.validValues.indexOf(t))return console.error("".concat(l," ").concat(e," invalid value: must be among ").concat(JSON.stringify(r.validValues),', "').concat(t,'" provided')),!1;if(r.children&&!g(t,r.children,"[Validate ".concat(e,"]")))return!1;return!0});return e||t.push.apply(t,n(Object.keys(s).map(function(e){var t=s[e];if("string"==typeof t&&(t={type:t}),t.mandatory){var r=t.mandatory;if("function"==typeof r&&(r=r(c)),r&&void 0===c[e])return console.error("".concat(l,' Missing mandatory key "').concat(e,'"')),!1}return!0}))),t.reduce(function(e,t){return e&&t},!0)}function c(e){return g(e,p,"[Validate format]")}t.exports={validate:function(e,t){var r=u(e),n=c(t);return r&&n},validateFormat:c,validateInput:u,validateLanguage:function(e){return g(e,o,"[Validate language]")}}},{"./unformatting":9}]},{},[7])(7)});
	//# sourceMappingURL=numbro.min.js.map


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Pikaday
	 *
	 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
	 */
	
	(function (root, factory)
	{
	    'use strict';
	
	    var moment;
	    if (true) {
	        // CommonJS module
	        // Load moment.js as an optional dependency
	        try { moment = __webpack_require__(270); } catch (e) {}
	        module.exports = factory(moment);
	    } else if (typeof define === 'function' && define.amd) {
	        // AMD. Register as an anonymous module.
	        define(function (req)
	        {
	            // Load moment.js as an optional dependency
	            var id = 'moment';
	            try { moment = req(id); } catch (e) {}
	            return factory(moment);
	        });
	    } else {
	        root.Pikaday = factory(root.moment);
	    }
	}(this, function (moment)
	{
	    'use strict';
	
	    /**
	     * feature detection and helper functions
	     */
	    var hasMoment = typeof moment === 'function',
	
	    hasEventListeners = !!window.addEventListener,
	
	    document = window.document,
	
	    sto = window.setTimeout,
	
	    addEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.addEventListener(e, callback, !!capture);
	        } else {
	            el.attachEvent('on' + e, callback);
	        }
	    },
	
	    removeEvent = function(el, e, callback, capture)
	    {
	        if (hasEventListeners) {
	            el.removeEventListener(e, callback, !!capture);
	        } else {
	            el.detachEvent('on' + e, callback);
	        }
	    },
	
	    fireEvent = function(el, eventName, data)
	    {
	        var ev;
	
	        if (document.createEvent) {
	            ev = document.createEvent('HTMLEvents');
	            ev.initEvent(eventName, true, false);
	            ev = extend(ev, data);
	            el.dispatchEvent(ev);
	        } else if (document.createEventObject) {
	            ev = document.createEventObject();
	            ev = extend(ev, data);
	            el.fireEvent('on' + eventName, ev);
	        }
	    },
	
	    trim = function(str)
	    {
	        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
	    },
	
	    hasClass = function(el, cn)
	    {
	        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
	    },
	
	    addClass = function(el, cn)
	    {
	        if (!hasClass(el, cn)) {
	            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
	        }
	    },
	
	    removeClass = function(el, cn)
	    {
	        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
	    },
	
	    isArray = function(obj)
	    {
	        return (/Array/).test(Object.prototype.toString.call(obj));
	    },
	
	    isDate = function(obj)
	    {
	        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
	    },
	
	    isWeekend = function(date)
	    {
	        var day = date.getDay();
	        return day === 0 || day === 6;
	    },
	
	    isLeapYear = function(year)
	    {
	        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
	        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	    },
	
	    getDaysInMonth = function(year, month)
	    {
	        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	    },
	
	    setToStartOfDay = function(date)
	    {
	        if (isDate(date)) date.setHours(0,0,0,0);
	    },
	
	    compareDates = function(a,b)
	    {
	        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
	        return a.getTime() === b.getTime();
	    },
	
	    extend = function(to, from, overwrite)
	    {
	        var prop, hasProp;
	        for (prop in from) {
	            hasProp = to[prop] !== undefined;
	            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
	                if (isDate(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = new Date(from[prop].getTime());
	                    }
	                }
	                else if (isArray(from[prop])) {
	                    if (overwrite) {
	                        to[prop] = from[prop].slice(0);
	                    }
	                } else {
	                    to[prop] = extend({}, from[prop], overwrite);
	                }
	            } else if (overwrite || !hasProp) {
	                to[prop] = from[prop];
	            }
	        }
	        return to;
	    },
	
	    adjustCalendar = function(calendar) {
	        if (calendar.month < 0) {
	            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
	            calendar.month += 12;
	        }
	        if (calendar.month > 11) {
	            calendar.year += Math.floor(Math.abs(calendar.month)/12);
	            calendar.month -= 12;
	        }
	        return calendar;
	    },
	
	    /**
	     * defaults and localisation
	     */
	    defaults = {
	
	        // bind the picker to a form field
	        field: null,
	
	        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
	        bound: undefined,
	
	        // position of the datepicker, relative to the field (default to bottom & left)
	        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
	        position: 'bottom left',
	
	        // automatically fit in the viewport even if it means repositioning from the position option
	        reposition: true,
	
	        // the default output format for `.toString()` and `field` value
	        format: 'YYYY-MM-DD',
	
	        // the initial date to view when first opened
	        defaultDate: null,
	
	        // make the `defaultDate` the initial selected value
	        setDefaultDate: false,
	
	        // first day of week (0: Sunday, 1: Monday etc)
	        firstDay: 0,
	
	        // the default flag for moment's strict date parsing
	        formatStrict: false,
	
	        // the minimum/earliest date that can be selected
	        minDate: null,
	        // the maximum/latest date that can be selected
	        maxDate: null,
	
	        // number of years either side, or array of upper/lower range
	        yearRange: 10,
	
	        // show week numbers at head of row
	        showWeekNumber: false,
	
	        // used internally (don't config outside)
	        minYear: 0,
	        maxYear: 9999,
	        minMonth: undefined,
	        maxMonth: undefined,
	
	        startRange: null,
	        endRange: null,
	
	        isRTL: false,
	
	        // Additional text to append to the year in the calendar title
	        yearSuffix: '',
	
	        // Render the month after year in the calendar title
	        showMonthAfterYear: false,
	
	        // Render days of the calendar grid that fall in the next or previous month
	        showDaysInNextAndPreviousMonths: false,
	
	        // how many months are visible
	        numberOfMonths: 1,
	
	        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
	        // only used for the first display or when a selected date is not visible
	        mainCalendar: 'left',
	
	        // Specify a DOM element to render the calendar in
	        container: undefined,
	
	        // internationalization
	        i18n: {
	            previousMonth : 'Previous Month',
	            nextMonth     : 'Next Month',
	            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
	            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
	        },
	
	        // Theme Classname
	        theme: null,
	
	        // callback function
	        onSelect: null,
	        onOpen: null,
	        onClose: null,
	        onDraw: null
	    },
	
	
	    /**
	     * templating functions to abstract HTML rendering
	     */
	    renderDayName = function(opts, day, abbr)
	    {
	        day += opts.firstDay;
	        while (day >= 7) {
	            day -= 7;
	        }
	        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
	    },
	
	    renderDay = function(opts)
	    {
	        var arr = [];
	        var ariaSelected = 'false';
	        if (opts.isEmpty) {
	            if (opts.showDaysInNextAndPreviousMonths) {
	                arr.push('is-outside-current-month');
	            } else {
	                return '<td class="is-empty"></td>';
	            }
	        }
	        if (opts.isDisabled) {
	            arr.push('is-disabled');
	        }
	        if (opts.isToday) {
	            arr.push('is-today');
	        }
	        if (opts.isSelected) {
	            arr.push('is-selected');
	            ariaSelected = 'true';
	        }
	        if (opts.isInRange) {
	            arr.push('is-inrange');
	        }
	        if (opts.isStartRange) {
	            arr.push('is-startrange');
	        }
	        if (opts.isEndRange) {
	            arr.push('is-endrange');
	        }
	        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
	                 '<button class="pika-button pika-day" type="button" ' +
	                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
	                        opts.day +
	                 '</button>' +
	               '</td>';
	    },
	
	    renderWeek = function (d, m, y) {
	        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
	        var onejan = new Date(y, 0, 1),
	            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
	        return '<td class="pika-week">' + weekNum + '</td>';
	    },
	
	    renderRow = function(days, isRTL)
	    {
	        return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
	    },
	
	    renderBody = function(rows)
	    {
	        return '<tbody>' + rows.join('') + '</tbody>';
	    },
	
	    renderHead = function(opts)
	    {
	        var i, arr = [];
	        if (opts.showWeekNumber) {
	            arr.push('<th></th>');
	        }
	        for (i = 0; i < 7; i++) {
	            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
	        }
	        return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
	    },
	
	    renderTitle = function(instance, c, year, month, refYear, randId)
	    {
	        var i, j, arr,
	            opts = instance._o,
	            isMinYear = year === opts.minYear,
	            isMaxYear = year === opts.maxYear,
	            html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
	            monthHtml,
	            yearHtml,
	            prev = true,
	            next = true;
	
	        for (arr = [], i = 0; i < 12; i++) {
	            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
	                (i === month ? ' selected="selected"': '') +
	                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled="disabled"' : '') + '>' +
	                opts.i18n.months[i] + '</option>');
	        }
	
	        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';
	
	        if (isArray(opts.yearRange)) {
	            i = opts.yearRange[0];
	            j = opts.yearRange[1] + 1;
	        } else {
	            i = year - opts.yearRange;
	            j = 1 + year + opts.yearRange;
	        }
	
	        for (arr = []; i < j && i <= opts.maxYear; i++) {
	            if (i >= opts.minYear) {
	                arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
	            }
	        }
	        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';
	
	        if (opts.showMonthAfterYear) {
	            html += yearHtml + monthHtml;
	        } else {
	            html += monthHtml + yearHtml;
	        }
	
	        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
	            prev = false;
	        }
	
	        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
	            next = false;
	        }
	
	        if (c === 0) {
	            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
	        }
	        if (c === (instance._o.numberOfMonths - 1) ) {
	            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
	        }
	
	        return html += '</div>';
	    },
	
	    renderTable = function(opts, data, randId)
	    {
	        return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
	    },
	
	
	    /**
	     * Pikaday constructor
	     */
	    Pikaday = function(options)
	    {
	        var self = this,
	            opts = self.config(options);
	
	        self._onMouseDown = function(e)
	        {
	            if (!self._v) {
	                return;
	            }
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }
	
	            if (!hasClass(target, 'is-disabled')) {
	                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
	                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
	                    if (opts.bound) {
	                        sto(function() {
	                            self.hide();
	                            if (opts.field) {
	                                opts.field.blur();
	                            }
	                        }, 100);
	                    }
	                }
	                else if (hasClass(target, 'pika-prev')) {
	                    self.prevMonth();
	                }
	                else if (hasClass(target, 'pika-next')) {
	                    self.nextMonth();
	                }
	            }
	            if (!hasClass(target, 'pika-select')) {
	                // if this is touch event prevent mouse events emulation
	                if (e.preventDefault) {
	                    e.preventDefault();
	                } else {
	                    e.returnValue = false;
	                    return false;
	                }
	            } else {
	                self._c = true;
	            }
	        };
	
	        self._onChange = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement;
	            if (!target) {
	                return;
	            }
	            if (hasClass(target, 'pika-select-month')) {
	                self.gotoMonth(target.value);
	            }
	            else if (hasClass(target, 'pika-select-year')) {
	                self.gotoYear(target.value);
	            }
	        };
	
	        self._onKeyChange = function(e)
	        {
	            e = e || window.event;
	
	            if (self.isVisible()) {
	
	                switch(e.keyCode){
	                    case 13:
	                    case 27:
	                        opts.field.blur();
	                        break;
	                    case 37:
	                        e.preventDefault();
	                        self.adjustDate('subtract', 1);
	                        break;
	                    case 38:
	                        self.adjustDate('subtract', 7);
	                        break;
	                    case 39:
	                        self.adjustDate('add', 1);
	                        break;
	                    case 40:
	                        self.adjustDate('add', 7);
	                        break;
	                }
	            }
	        };
	
	        self._onInputChange = function(e)
	        {
	            var date;
	
	            if (e.firedBy === self) {
	                return;
	            }
	            if (hasMoment) {
	                date = moment(opts.field.value, opts.format, opts.formatStrict);
	                date = (date && date.isValid()) ? date.toDate() : null;
	            }
	            else {
	                date = new Date(Date.parse(opts.field.value));
	            }
	            if (isDate(date)) {
	              self.setDate(date);
	            }
	            if (!self._v) {
	                self.show();
	            }
	        };
	
	        self._onInputFocus = function()
	        {
	            self.show();
	        };
	
	        self._onInputClick = function()
	        {
	            self.show();
	        };
	
	        self._onInputBlur = function()
	        {
	            // IE allows pika div to gain focus; catch blur the input field
	            var pEl = document.activeElement;
	            do {
	                if (hasClass(pEl, 'pika-single')) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));
	
	            if (!self._c) {
	                self._b = sto(function() {
	                    self.hide();
	                }, 50);
	            }
	            self._c = false;
	        };
	
	        self._onClick = function(e)
	        {
	            e = e || window.event;
	            var target = e.target || e.srcElement,
	                pEl = target;
	            if (!target) {
	                return;
	            }
	            if (!hasEventListeners && hasClass(target, 'pika-select')) {
	                if (!target.onchange) {
	                    target.setAttribute('onchange', 'return;');
	                    addEvent(target, 'change', self._onChange);
	                }
	            }
	            do {
	                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
	                    return;
	                }
	            }
	            while ((pEl = pEl.parentNode));
	            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
	                self.hide();
	            }
	        };
	
	        self.el = document.createElement('div');
	        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');
	
	        addEvent(self.el, 'mousedown', self._onMouseDown, true);
	        addEvent(self.el, 'touchend', self._onMouseDown, true);
	        addEvent(self.el, 'change', self._onChange);
	        addEvent(document, 'keydown', self._onKeyChange);
	
	        if (opts.field) {
	            if (opts.container) {
	                opts.container.appendChild(self.el);
	            } else if (opts.bound) {
	                document.body.appendChild(self.el);
	            } else {
	                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
	            }
	            addEvent(opts.field, 'change', self._onInputChange);
	
	            if (!opts.defaultDate) {
	                if (hasMoment && opts.field.value) {
	                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
	                } else {
	                    opts.defaultDate = new Date(Date.parse(opts.field.value));
	                }
	                opts.setDefaultDate = true;
	            }
	        }
	
	        var defDate = opts.defaultDate;
	
	        if (isDate(defDate)) {
	            if (opts.setDefaultDate) {
	                self.setDate(defDate, true);
	            } else {
	                self.gotoDate(defDate);
	            }
	        } else {
	            self.gotoDate(new Date());
	        }
	
	        if (opts.bound) {
	            this.hide();
	            self.el.className += ' is-bound';
	            addEvent(opts.trigger, 'click', self._onInputClick);
	            addEvent(opts.trigger, 'focus', self._onInputFocus);
	            addEvent(opts.trigger, 'blur', self._onInputBlur);
	        } else {
	            this.show();
	        }
	    };
	
	
	    /**
	     * public Pikaday API
	     */
	    Pikaday.prototype = {
	
	
	        /**
	         * configure functionality
	         */
	        config: function(options)
	        {
	            if (!this._o) {
	                this._o = extend({}, defaults, true);
	            }
	
	            var opts = extend(this._o, options, true);
	
	            opts.isRTL = !!opts.isRTL;
	
	            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;
	
	            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;
	
	            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);
	
	            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;
	
	            opts.disableWeekends = !!opts.disableWeekends;
	
	            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;
	
	            var nom = parseInt(opts.numberOfMonths, 10) || 1;
	            opts.numberOfMonths = nom > 4 ? 4 : nom;
	
	            if (!isDate(opts.minDate)) {
	                opts.minDate = false;
	            }
	            if (!isDate(opts.maxDate)) {
	                opts.maxDate = false;
	            }
	            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
	                opts.maxDate = opts.minDate = false;
	            }
	            if (opts.minDate) {
	                this.setMinDate(opts.minDate);
	            }
	            if (opts.maxDate) {
	                this.setMaxDate(opts.maxDate);
	            }
	
	            if (isArray(opts.yearRange)) {
	                var fallback = new Date().getFullYear() - 10;
	                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
	                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
	            } else {
	                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
	                if (opts.yearRange > 100) {
	                    opts.yearRange = 100;
	                }
	            }
	
	            return opts;
	        },
	
	        /**
	         * return a formatted string of the current selection (using Moment.js if available)
	         */
	        toString: function(format)
	        {
	            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
	        },
	
	        /**
	         * return a Moment.js object of the current selection (if available)
	         */
	        getMoment: function()
	        {
	            return hasMoment ? moment(this._d) : null;
	        },
	
	        /**
	         * set the current selection from a Moment.js object (if available)
	         */
	        setMoment: function(date, preventOnSelect)
	        {
	            if (hasMoment && moment.isMoment(date)) {
	                this.setDate(date.toDate(), preventOnSelect);
	            }
	        },
	
	        /**
	         * return a Date object of the current selection with fallback for the current date
	         */
	        getDate: function()
	        {
	            return isDate(this._d) ? new Date(this._d.getTime()) : new Date();
	        },
	
	        /**
	         * set the current selection
	         */
	        setDate: function(date, preventOnSelect)
	        {
	            if (!date) {
	                this._d = null;
	
	                if (this._o.field) {
	                    this._o.field.value = '';
	                    fireEvent(this._o.field, 'change', { firedBy: this });
	                }
	
	                return this.draw();
	            }
	            if (typeof date === 'string') {
	                date = new Date(Date.parse(date));
	            }
	            if (!isDate(date)) {
	                return;
	            }
	
	            var min = this._o.minDate,
	                max = this._o.maxDate;
	
	            if (isDate(min) && date < min) {
	                date = min;
	            } else if (isDate(max) && date > max) {
	                date = max;
	            }
	
	            this._d = new Date(date.getTime());
	            setToStartOfDay(this._d);
	            this.gotoDate(this._d);
	
	            if (this._o.field) {
	                this._o.field.value = this.toString();
	                fireEvent(this._o.field, 'change', { firedBy: this });
	            }
	            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
	                this._o.onSelect.call(this, this.getDate());
	            }
	        },
	
	        /**
	         * change view to a specific date
	         */
	        gotoDate: function(date)
	        {
	            var newCalendar = true;
	
	            if (!isDate(date)) {
	                return;
	            }
	
	            if (this.calendars) {
	                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
	                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
	                    visibleDate = date.getTime();
	                // get the end of the month
	                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
	                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
	                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
	            }
	
	            if (newCalendar) {
	                this.calendars = [{
	                    month: date.getMonth(),
	                    year: date.getFullYear()
	                }];
	                if (this._o.mainCalendar === 'right') {
	                    this.calendars[0].month += 1 - this._o.numberOfMonths;
	                }
	            }
	
	            this.adjustCalendars();
	        },
	
	        adjustDate: function(sign, days) {
	
	            var day = this.getDate();
	            var difference = parseInt(days)*24*60*60*1000;
	
	            var newDay;
	
	            if (sign === 'add') {
	                newDay = new Date(day.valueOf() + difference);
	            } else if (sign === 'subtract') {
	                newDay = new Date(day.valueOf() - difference);
	            }
	
	            if (hasMoment) {
	                if (sign === 'add') {
	                    newDay = moment(day).add(days, "days").toDate();
	                } else if (sign === 'subtract') {
	                    newDay = moment(day).subtract(days, "days").toDate();
	                }
	            }
	
	            this.setDate(newDay);
	        },
	
	        adjustCalendars: function() {
	            this.calendars[0] = adjustCalendar(this.calendars[0]);
	            for (var c = 1; c < this._o.numberOfMonths; c++) {
	                this.calendars[c] = adjustCalendar({
	                    month: this.calendars[0].month + c,
	                    year: this.calendars[0].year
	                });
	            }
	            this.draw();
	        },
	
	        gotoToday: function()
	        {
	            this.gotoDate(new Date());
	        },
	
	        /**
	         * change view to a specific month (zero-index, e.g. 0: January)
	         */
	        gotoMonth: function(month)
	        {
	            if (!isNaN(month)) {
	                this.calendars[0].month = parseInt(month, 10);
	                this.adjustCalendars();
	            }
	        },
	
	        nextMonth: function()
	        {
	            this.calendars[0].month++;
	            this.adjustCalendars();
	        },
	
	        prevMonth: function()
	        {
	            this.calendars[0].month--;
	            this.adjustCalendars();
	        },
	
	        /**
	         * change view to a specific full year (e.g. "2012")
	         */
	        gotoYear: function(year)
	        {
	            if (!isNaN(year)) {
	                this.calendars[0].year = parseInt(year, 10);
	                this.adjustCalendars();
	            }
	        },
	
	        /**
	         * change the minDate
	         */
	        setMinDate: function(value)
	        {
	            if(value instanceof Date) {
	                setToStartOfDay(value);
	                this._o.minDate = value;
	                this._o.minYear  = value.getFullYear();
	                this._o.minMonth = value.getMonth();
	            } else {
	                this._o.minDate = defaults.minDate;
	                this._o.minYear  = defaults.minYear;
	                this._o.minMonth = defaults.minMonth;
	                this._o.startRange = defaults.startRange;
	            }
	
	            this.draw();
	        },
	
	        /**
	         * change the maxDate
	         */
	        setMaxDate: function(value)
	        {
	            if(value instanceof Date) {
	                setToStartOfDay(value);
	                this._o.maxDate = value;
	                this._o.maxYear = value.getFullYear();
	                this._o.maxMonth = value.getMonth();
	            } else {
	                this._o.maxDate = defaults.maxDate;
	                this._o.maxYear = defaults.maxYear;
	                this._o.maxMonth = defaults.maxMonth;
	                this._o.endRange = defaults.endRange;
	            }
	
	            this.draw();
	        },
	
	        setStartRange: function(value)
	        {
	            this._o.startRange = value;
	        },
	
	        setEndRange: function(value)
	        {
	            this._o.endRange = value;
	        },
	
	        /**
	         * refresh the HTML
	         */
	        draw: function(force)
	        {
	            if (!this._v && !force) {
	                return;
	            }
	            var opts = this._o,
	                minYear = opts.minYear,
	                maxYear = opts.maxYear,
	                minMonth = opts.minMonth,
	                maxMonth = opts.maxMonth,
	                html = '',
	                randId;
	
	            if (this._y <= minYear) {
	                this._y = minYear;
	                if (!isNaN(minMonth) && this._m < minMonth) {
	                    this._m = minMonth;
	                }
	            }
	            if (this._y >= maxYear) {
	                this._y = maxYear;
	                if (!isNaN(maxMonth) && this._m > maxMonth) {
	                    this._m = maxMonth;
	                }
	            }
	
	            randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
	
	            for (var c = 0; c < opts.numberOfMonths; c++) {
	                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
	            }
	
	            this.el.innerHTML = html;
	
	            if (opts.bound) {
	                if(opts.field.type !== 'hidden') {
	                    sto(function() {
	                        opts.trigger.focus();
	                    }, 1);
	                }
	            }
	
	            if (typeof this._o.onDraw === 'function') {
	                this._o.onDraw(this);
	            }
	            
	            if (opts.bound) {
	                // let the screen reader user know to use arrow keys
	                opts.field.setAttribute('aria-label', 'Use the arrow keys to pick a date');
	            }
	        },
	
	        adjustPosition: function()
	        {
	            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect;
	
	            if (this._o.container) return;
	
	            this.el.style.position = 'absolute';
	
	            field = this._o.trigger;
	            pEl = field;
	            width = this.el.offsetWidth;
	            height = this.el.offsetHeight;
	            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
	            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
	            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
	
	            if (typeof field.getBoundingClientRect === 'function') {
	                clientRect = field.getBoundingClientRect();
	                left = clientRect.left + window.pageXOffset;
	                top = clientRect.bottom + window.pageYOffset;
	            } else {
	                left = pEl.offsetLeft;
	                top  = pEl.offsetTop + pEl.offsetHeight;
	                while((pEl = pEl.offsetParent)) {
	                    left += pEl.offsetLeft;
	                    top  += pEl.offsetTop;
	                }
	            }
	
	            // default position is bottom & left
	            if ((this._o.reposition && left + width > viewportWidth) ||
	                (
	                    this._o.position.indexOf('right') > -1 &&
	                    left - width + field.offsetWidth > 0
	                )
	            ) {
	                left = left - width + field.offsetWidth;
	            }
	            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
	                (
	                    this._o.position.indexOf('top') > -1 &&
	                    top - height - field.offsetHeight > 0
	                )
	            ) {
	                top = top - height - field.offsetHeight;
	            }
	
	            this.el.style.left = left + 'px';
	            this.el.style.top = top + 'px';
	        },
	
	        /**
	         * render HTML for a particular month
	         */
	        render: function(year, month, randId)
	        {
	            var opts   = this._o,
	                now    = new Date(),
	                days   = getDaysInMonth(year, month),
	                before = new Date(year, month, 1).getDay(),
	                data   = [],
	                row    = [];
	            setToStartOfDay(now);
	            if (opts.firstDay > 0) {
	                before -= opts.firstDay;
	                if (before < 0) {
	                    before += 7;
	                }
	            }
	            var previousMonth = month === 0 ? 11 : month - 1,
	                nextMonth = month === 11 ? 0 : month + 1,
	                yearOfPreviousMonth = month === 0 ? year - 1 : year,
	                yearOfNextMonth = month === 11 ? year + 1 : year,
	                daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
	            var cells = days + before,
	                after = cells;
	            while(after > 7) {
	                after -= 7;
	            }
	            cells += 7 - after;
	            for (var i = 0, r = 0; i < cells; i++)
	            {
	                var day = new Date(year, month, 1 + (i - before)),
	                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
	                    isToday = compareDates(day, now),
	                    isEmpty = i < before || i >= (days + before),
	                    dayNumber = 1 + (i - before),
	                    monthNumber = month,
	                    yearNumber = year,
	                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
	                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
	                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
	                    isDisabled = (opts.minDate && day < opts.minDate) ||
	                                 (opts.maxDate && day > opts.maxDate) ||
	                                 (opts.disableWeekends && isWeekend(day)) ||
	                                 (opts.disableDayFn && opts.disableDayFn(day));
	
	                if (isEmpty) {
	                    if (i < before) {
	                        dayNumber = daysInPreviousMonth + dayNumber;
	                        monthNumber = previousMonth;
	                        yearNumber = yearOfPreviousMonth;
	                    } else {
	                        dayNumber = dayNumber - days;
	                        monthNumber = nextMonth;
	                        yearNumber = yearOfNextMonth;
	                    }
	                }
	
	                var dayConfig = {
	                        day: dayNumber,
	                        month: monthNumber,
	                        year: yearNumber,
	                        isSelected: isSelected,
	                        isToday: isToday,
	                        isDisabled: isDisabled,
	                        isEmpty: isEmpty,
	                        isStartRange: isStartRange,
	                        isEndRange: isEndRange,
	                        isInRange: isInRange,
	                        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths
	                    };
	
	                row.push(renderDay(dayConfig));
	
	                if (++r === 7) {
	                    if (opts.showWeekNumber) {
	                        row.unshift(renderWeek(i - before, month, year));
	                    }
	                    data.push(renderRow(row, opts.isRTL));
	                    row = [];
	                    r = 0;
	                }
	            }
	            return renderTable(opts, data, randId);
	        },
	
	        isVisible: function()
	        {
	            return this._v;
	        },
	
	        show: function()
	        {
	            if (!this.isVisible()) {
	                removeClass(this.el, 'is-hidden');
	                this._v = true;
	                this.draw();
	                if (this._o.bound) {
	                    addEvent(document, 'click', this._onClick);
	                    this.adjustPosition();
	                }
	                if (typeof this._o.onOpen === 'function') {
	                    this._o.onOpen.call(this);
	                }
	            }
	        },
	
	        hide: function()
	        {
	            var v = this._v;
	            if (v !== false) {
	                if (this._o.bound) {
	                    removeEvent(document, 'click', this._onClick);
	                }
	                this.el.style.position = 'static'; // reset
	                this.el.style.left = 'auto';
	                this.el.style.top = 'auto';
	                addClass(this.el, 'is-hidden');
	                this._v = false;
	                if (v !== undefined && typeof this._o.onClose === 'function') {
	                    this._o.onClose.call(this);
	                }
	            }
	        },
	
	        /**
	         * GAME OVER
	         */
	        destroy: function()
	        {
	            this.hide();
	            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
	            removeEvent(this.el, 'touchend', this._onMouseDown, true);
	            removeEvent(this.el, 'change', this._onChange);
	            if (this._o.field) {
	                removeEvent(this._o.field, 'change', this._onInputChange);
	                if (this._o.bound) {
	                    removeEvent(this._o.trigger, 'click', this._onInputClick);
	                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
	                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
	                }
	            }
	            if (this.el.parentNode) {
	                this.el.parentNode.removeChild(this.el);
	            }
	        }
	
	    };
	
	    return Pikaday;
	
	}));


/***/ }),
/* 393 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getSettings = getSettings;
	
	/**
	 * Parse component settings into Handosntable-compatible settings.
	 */
	function getSettings(properties) {
	  var newSettings = {};
	
	  if (properties.settings) {
	    var settings = properties.settings;
	    for (var key in settings) {
	      if (settings.hasOwnProperty(key)) {
	        newSettings[key] = settings[key];
	      }
	    }
	  }
	
	  for (var _key in properties) {
	    if (_key !== 'settings' && properties.hasOwnProperty(_key)) {
	      newSettings[_key] = properties[_key];
	    }
	  }
	  return newSettings;
	}

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _index = __webpack_require__(265);
	
	var _index2 = _interopRequireDefault(_index);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @title 含有左侧、上层header表头
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 含有左侧、上层header的表头基础电子表格并提供了一下功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 1、排序
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 2、拖拽列宽
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 3、列交换
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var data = [{ name: "张其", date: "2019-01-11", precent: 0.11, sex: "男", score: 90 }, { name: "王收", date: "2020-03-21", precent: 0.6, sex: "男", score: 100 }, { name: "孙武", date: "2018-01-11", precent: 0.9, sex: "女", score: 93 }, { name: "宋佳", date: "2021-05-11", precent: 0.21, sex: "男", score: 92 }, { name: "李琦", date: "2021-02-11", precent: 0.32, sex: "女", score: 99 }];
	
	var Demo2 = function (_Component) {
	  _inherits(Demo2, _Component);
	
	  function Demo2(props) {
	    _classCallCheck(this, Demo2);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.hotSettings = {
	      colHeaders: ["姓名", "日期", "百分比", "性别", "分数"], //列头信息
	      columns: [
	      //每列信息
	      {
	        data: "name",
	        type: "text",
	        width: 40
	      }, {
	        data: "date",
	        type: "date",
	        dateFormat: "YYYY-MM-DD"
	      }, {
	        data: "precent",
	        type: "numeric",
	        numericFormat: {
	          pattern: "0.00%"
	        }
	      }, {
	        data: "sex",
	        type: "text"
	      }, {
	        data: "score",
	        type: "numeric",
	        numericFormat: {
	          pattern: "0.0"
	        }
	      }],
	      data: data, //当前表数据
	      manualColumnMove: true, //列交换
	      manualColumnResize: true, //拖拽列宽
	      columnSorting: {
	        //排序
	        indicator: true
	      }
	    };
	    _this.hotTableComponent = _react2["default"].createRef();
	    return _this;
	  }
	
	  Demo2.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    return false;
	  };
	
	  Demo2.prototype.render = function render() {
	    return _react2["default"].createElement(_index2["default"], {
	      ref: this.hotTableComponent,
	      settings: this.hotSettings,
	      width: "600",
	      height: "300"
	    });
	  };
	
	  return Demo2;
	}(_react.Component);
	
	exports["default"] = Demo2;
	module.exports = exports["default"];

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _index = __webpack_require__(265);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _handsontable = __webpack_require__(267);
	
	var _handsontable2 = _interopRequireDefault(_handsontable);
	
	var _beeButton = __webpack_require__(260);
	
	var _beeButton2 = _interopRequireDefault(_beeButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @title 自定义右击菜单、动态设置和获取表格数据
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 自定义右击菜单、动态设置和获取表格数据
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var Demo3 = function (_Component) {
	  _inherits(Demo3, _Component);
	
	  function Demo3(props) {
	    var _this$hotSettings;
	
	    _classCallCheck(this, Demo3);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.getData = function (row, column, row2, column2) {
	      var data = _this.hotTableComponent.current.hotInstance.getData();
	      console.log("当前表的所有数据", data);
	    };
	
	    _this.loadData = function () {
	      _this.hotTableComponent.current.hotInstance.loadData([["new", "data"]]);
	    };
	
	    _this.hotSettings = (_this$hotSettings = {
	      data: _handsontable2["default"].helper.createSpreadsheetData(5, 5),
	      colHeaders: true,
	      copyPaste: true
	    }, _defineProperty(_this$hotSettings, "copyPaste", {
	      columnsLimit: 25,
	      rowsLimit: 50
	    }), _defineProperty(_this$hotSettings, "contextMenu", {
	      items: {
	        row_above: {
	          name: "向上插入一行"
	        },
	        row_below: {
	          name: "向下插入一行"
	        },
	        separator: _handsontable2["default"].plugins.ContextMenu.SEPARATOR,
	        clear_custom: {
	          name: "删除所有",
	          callback: function callback() {
	            this.clear();
	          }
	        }
	      }
	    }), _this$hotSettings);
	    _this.hotTableComponent = _react2["default"].createRef();
	    return _this;
	  }
	
	  Demo3.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    return false;
	  };
	
	  Demo3.prototype.render = function render() {
	    return _react2["default"].createElement(
	      "div",
	      null,
	      _react2["default"].createElement(
	        _beeButton2["default"],
	        { onClick: this.getData, className: "m-sm" },
	        "console\u6240\u6709\u6570\u636E"
	      ),
	      _react2["default"].createElement(
	        _beeButton2["default"],
	        { onClick: this.loadData, className: "m-sm" },
	        "\u66F4\u65B0\u6570\u636E"
	      ),
	      _react2["default"].createElement(_index2["default"], {
	        ref: this.hotTableComponent,
	        id: "hot",
	        settings: this.hotSettings
	      })
	    );
	  };
	
	  return Demo3;
	}(_react.Component);
	
	exports["default"] = Demo3;
	module.exports = exports["default"];

/***/ })
/******/ ]);
//# sourceMappingURL=demo.js.map